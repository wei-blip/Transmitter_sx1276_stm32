
L152RE_sx1276.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006af4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db8  08006db8  00020044  2**0
                  CONTENTS
  4 .ARM          00000008  08006db8  08006db8  00016db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006dc0  08006dc0  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006dc0  08006dc0  00016dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006dc4  08006dc4  00016dc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08006dc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000044  08006e0c  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08006e0c  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019b4a  00000000  00000000  0002006d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d15  00000000  00000000  00039bb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001438  00000000  00000000  0003d8d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001288  00000000  00000000  0003ed08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b519  00000000  00000000  0003ff90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000175aa  00000000  00000000  0005b4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d8a4  00000000  00000000  00072a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001102f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  0011034c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000044 	.word	0x20000044
 8000158:	00000000 	.word	0x00000000
 800015c:	08006c18 	.word	0x08006c18

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000048 	.word	0x20000048
 8000178:	08006c18 	.word	0x08006c18

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b4c      	ldr	r3, [pc, #304]	; (80005bc <MX_GPIO_Init+0x148>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a4b      	ldr	r2, [pc, #300]	; (80005bc <MX_GPIO_Init+0x148>)
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b49      	ldr	r3, [pc, #292]	; (80005bc <MX_GPIO_Init+0x148>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a2:	4b46      	ldr	r3, [pc, #280]	; (80005bc <MX_GPIO_Init+0x148>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a45      	ldr	r2, [pc, #276]	; (80005bc <MX_GPIO_Init+0x148>)
 80004a8:	f043 0320 	orr.w	r3, r3, #32
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b43      	ldr	r3, [pc, #268]	; (80005bc <MX_GPIO_Init+0x148>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 0320 	and.w	r3, r3, #32
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b40      	ldr	r3, [pc, #256]	; (80005bc <MX_GPIO_Init+0x148>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a3f      	ldr	r2, [pc, #252]	; (80005bc <MX_GPIO_Init+0x148>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <MX_GPIO_Init+0x148>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <MX_GPIO_Init+0x148>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a39      	ldr	r2, [pc, #228]	; (80005bc <MX_GPIO_Init+0x148>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b37      	ldr	r3, [pc, #220]	; (80005bc <MX_GPIO_Init+0x148>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX1276_RST_Pin|LED_EXT_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2109      	movs	r1, #9
 80004ee:	4834      	ldr	r0, [pc, #208]	; (80005c0 <MX_GPIO_Init+0x14c>)
 80004f0:	f000 ff5b 	bl	80013aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	4832      	ldr	r0, [pc, #200]	; (80005c4 <MX_GPIO_Init+0x150>)
 80004fa:	f000 ff56 	bl	80013aa <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000504:	4830      	ldr	r0, [pc, #192]	; (80005c8 <MX_GPIO_Init+0x154>)
 8000506:	f000 ff50 	bl	80013aa <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DIO_4_Pin|DIO_5_Pin|DIO_3_Pin
 800050a:	f242 3360 	movw	r3, #9056	; 0x2360
 800050e:	617b      	str	r3, [r7, #20]
                          |DIO_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000510:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <MX_GPIO_Init+0x158>)
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	4828      	ldr	r0, [pc, #160]	; (80005c0 <MX_GPIO_Init+0x14c>)
 8000520:	f000 fd9c 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SX1276_RST_Pin|LED_EXT_Pin;
 8000524:	2309      	movs	r3, #9
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	4821      	ldr	r0, [pc, #132]	; (80005c0 <MX_GPIO_Init+0x14c>)
 800053c:	f000 fd8e 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000540:	2320      	movs	r3, #32
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x150>)
 8000558:	f000 fd80 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4814      	ldr	r0, [pc, #80]	; (80005c8 <MX_GPIO_Init+0x154>)
 8000576:	f000 fd71 	bl	800105c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO_1_Pin|DIO_0_Pin;
 800057a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_GPIO_Init+0x158>)
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_GPIO_Init+0x150>)
 8000590:	f000 fd64 	bl	800105c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2105      	movs	r1, #5
 8000598:	2017      	movs	r0, #23
 800059a:	f000 fcf4 	bl	8000f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800059e:	2017      	movs	r0, #23
 80005a0:	f000 fd0d 	bl	8000fbe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2105      	movs	r1, #5
 80005a8:	2028      	movs	r0, #40	; 0x28
 80005aa:	f000 fcec 	bl	8000f86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ae:	2028      	movs	r0, #40	; 0x28
 80005b0:	f000 fd05 	bl	8000fbe <HAL_NVIC_EnableIRQ>

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020800 	.word	0x40020800
 80005c4:	40020000 	.word	0x40020000
 80005c8:	40020400 	.word	0x40020400
 80005cc:	10110000 	.word	0x10110000

080005d0 <GpioWrite>:

/* USER CODE BEGIN 2 */
void GpioWrite( Gpio_t *obj, uint32_t value ) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(obj->port, obj->pin, (GPIO_PinState) value);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	889b      	ldrh	r3, [r3, #4]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	4619      	mov	r1, r3
 80005e8:	f000 fedf 	bl	80013aa <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <GpioRead>:

uint32_t GpioRead( Gpio_t *obj ) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin( obj->port, obj->pin);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	889b      	ldrh	r3, [r3, #4]
 8000604:	4619      	mov	r1, r3
 8000606:	4610      	mov	r0, r2
 8000608:	f000 feb8 	bl	800137c <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb7e 	bl	8000d1a <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f80f 	bl	8000640 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f7ff ff27 	bl	8000474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000626:	f000 fadd 	bl	8000be4 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800062a:	f000 f92b 	bl	8000884 <MX_SPI2_Init>
  MX_RTC_Init();
 800062e:	f000 f881 	bl	8000734 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
#ifdef BER_TEST
  BerTestRun( BARKER_11 );
 8000632:	200b      	movs	r0, #11
 8000634:	f005 fba0 	bl	8005d78 <BerTestRun>
#endif

  ping_pong_rf();
 8000638:	f005 fade 	bl	8005bf8 <ping_pong_rf>
//  continuos_wave();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1);
 800063c:	e7fe      	b.n	800063c <main+0x26>
	...

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b096      	sub	sp, #88	; 0x58
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f006 fada 	bl	8006c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0310 	add.w	r3, r7, #16
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800066e:	4b25      	ldr	r3, [pc, #148]	; (8000704 <SystemClock_Config+0xc4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000676:	4a23      	ldr	r2, [pc, #140]	; (8000704 <SystemClock_Config+0xc4>)
 8000678:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800067c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 800067e:	2306      	movs	r3, #6
 8000680:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000682:	2301      	movs	r3, #1
 8000684:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000686:	2301      	movs	r3, #1
 8000688:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068a:	2310      	movs	r3, #16
 800068c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068e:	2302      	movs	r3, #2
 8000690:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000692:	2300      	movs	r3, #0
 8000694:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000696:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800069a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800069c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80006a0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a6:	4618      	mov	r0, r3
 80006a8:	f000 fec8 	bl	800143c <HAL_RCC_OscConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006b2:	f000 f838 	bl	8000726 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b6:	230f      	movs	r3, #15
 80006b8:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ba:	2303      	movs	r3, #3
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ca:	f107 0310 	add.w	r3, r7, #16
 80006ce:	2101      	movs	r1, #1
 80006d0:	4618      	mov	r0, r3
 80006d2:	f001 f9e3 	bl	8001a9c <HAL_RCC_ClockConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006dc:	f000 f823 	bl	8000726 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006e0:	2301      	movs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e8:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fc99 	bl	8002024 <HAL_RCCEx_PeriphCLKConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006f8:	f000 f815 	bl	8000726 <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3758      	adds	r7, #88	; 0x58
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	40007000 	.word	0x40007000

08000708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000718:	d101      	bne.n	800071e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800071a:	f000 fb17 	bl	8000d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}

08000726 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
	...

08000734 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b090      	sub	sp, #64	; 0x40
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800073a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800074a:	2300      	movs	r3, #0
 800074c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800074e:	463b      	mov	r3, r7
 8000750:	2228      	movs	r2, #40	; 0x28
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f006 fa57 	bl	8006c08 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800075a:	4b3a      	ldr	r3, [pc, #232]	; (8000844 <MX_RTC_Init+0x110>)
 800075c:	4a3a      	ldr	r2, [pc, #232]	; (8000848 <MX_RTC_Init+0x114>)
 800075e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000760:	4b38      	ldr	r3, [pc, #224]	; (8000844 <MX_RTC_Init+0x110>)
 8000762:	2200      	movs	r2, #0
 8000764:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000766:	4b37      	ldr	r3, [pc, #220]	; (8000844 <MX_RTC_Init+0x110>)
 8000768:	227f      	movs	r2, #127	; 0x7f
 800076a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800076c:	4b35      	ldr	r3, [pc, #212]	; (8000844 <MX_RTC_Init+0x110>)
 800076e:	22ff      	movs	r2, #255	; 0xff
 8000770:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000772:	4b34      	ldr	r3, [pc, #208]	; (8000844 <MX_RTC_Init+0x110>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000778:	4b32      	ldr	r3, [pc, #200]	; (8000844 <MX_RTC_Init+0x110>)
 800077a:	2200      	movs	r2, #0
 800077c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800077e:	4b31      	ldr	r3, [pc, #196]	; (8000844 <MX_RTC_Init+0x110>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000784:	482f      	ldr	r0, [pc, #188]	; (8000844 <MX_RTC_Init+0x110>)
 8000786:	f001 fd2f 	bl	80021e8 <HAL_RTC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000790:	f7ff ffc9 	bl	8000726 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000794:	2300      	movs	r3, #0
 8000796:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800079a:	2300      	movs	r3, #0
 800079c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007a6:	2300      	movs	r3, #0
 80007a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007aa:	2300      	movs	r3, #0
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007b2:	2201      	movs	r2, #1
 80007b4:	4619      	mov	r1, r3
 80007b6:	4823      	ldr	r0, [pc, #140]	; (8000844 <MX_RTC_Init+0x110>)
 80007b8:	f001 fd91 	bl	80022de <HAL_RTC_SetTime>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80007c2:	f7ff ffb0 	bl	8000726 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007c6:	2301      	movs	r3, #1
 80007c8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80007cc:	2301      	movs	r3, #1
 80007ce:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	4817      	ldr	r0, [pc, #92]	; (8000844 <MX_RTC_Init+0x110>)
 80007e8:	f001 fe8a 	bl	8002500 <HAL_RTC_SetDate>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80007f2:	f7ff ff98 	bl	8000726 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80007fe:	2300      	movs	r3, #0
 8000800:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000812:	2300      	movs	r3, #0
 8000814:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000816:	2300      	movs	r3, #0
 8000818:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800081a:	2301      	movs	r3, #1
 800081c:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000824:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	2201      	movs	r2, #1
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_RTC_Init+0x110>)
 800082e:	f001 ff53 	bl	80026d8 <HAL_RTC_SetAlarm_IT>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000838:	f7ff ff75 	bl	8000726 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3740      	adds	r7, #64	; 0x40
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	200001d4 	.word	0x200001d4
 8000848:	40002800 	.word	0x40002800

0800084c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_RTC_MspInit+0x30>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d10a      	bne.n	8000874 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_RTC_MspInit+0x34>)
 8000860:	2201      	movs	r2, #1
 8000862:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2105      	movs	r1, #5
 8000868:	2029      	movs	r0, #41	; 0x29
 800086a:	f000 fb8c 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800086e:	2029      	movs	r0, #41	; 0x29
 8000870:	f000 fba5 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40002800 	.word	0x40002800
 8000880:	424706d8 	.word	0x424706d8

08000884 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_SPI2_Init+0x64>)
 800088a:	4a18      	ldr	r2, [pc, #96]	; (80008ec <MX_SPI2_Init+0x68>)
 800088c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800088e:	4b16      	ldr	r3, [pc, #88]	; (80008e8 <MX_SPI2_Init+0x64>)
 8000890:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000894:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000896:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_SPI2_Init+0x64>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <MX_SPI2_Init+0x64>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008a2:	4b11      	ldr	r3, [pc, #68]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008ae:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008b8:	2218      	movs	r2, #24
 80008ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008bc:	4b0a      	ldr	r3, [pc, #40]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c8:	4b07      	ldr	r3, [pc, #28]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008d0:	220a      	movs	r2, #10
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008d4:	4804      	ldr	r0, [pc, #16]	; (80008e8 <MX_SPI2_Init+0x64>)
 80008d6:	f002 f9d3 	bl	8002c80 <HAL_SPI_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008e0:	f7ff ff21 	bl	8000726 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200001f4 	.word	0x200001f4
 80008ec:	40003800 	.word	0x40003800

080008f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08a      	sub	sp, #40	; 0x28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0314 	add.w	r3, r7, #20
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_SPI_MspInit+0x7c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d128      	bne.n	8000964 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000916:	4a16      	ldr	r2, [pc, #88]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6253      	str	r3, [r2, #36]	; 0x24
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000922:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000926:	613b      	str	r3, [r7, #16]
 8000928:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_SPI_MspInit+0x80>)
 800092c:	69db      	ldr	r3, [r3, #28]
 800092e:	4a10      	ldr	r2, [pc, #64]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	61d3      	str	r3, [r2, #28]
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_SPI_MspInit+0x80>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000942:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000954:	2305      	movs	r3, #5
 8000956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_SPI_MspInit+0x84>)
 8000960:	f000 fb7c 	bl	800105c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000964:	bf00      	nop
 8000966:	3728      	adds	r7, #40	; 0x28
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40003800 	.word	0x40003800
 8000970:	40023800 	.word	0x40023800
 8000974:	40020400 	.word	0x40020400

08000978 <SpiInOut>:
}

/* USER CODE BEGIN 1 */

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( hspi2.Instance ) == NULL )
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b00      	cmp	r3, #0
    {
        assert_param( LMN_STATUS_ERROR );
    }

    __HAL_SPI_ENABLE( &hspi2 );
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <SpiInOut+0x78>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	4b17      	ldr	r3, [pc, #92]	; (80009f0 <SpiInOut+0x78>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800099a:	601a      	str	r2, [r3, #0]

    CRITICAL_SECTION_BEGIN( );
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	4618      	mov	r0, r3
 80009a2:	f004 fff5 	bl	8005990 <BoardCriticalSectionBegin>

    while( __HAL_SPI_GET_FLAG( &hspi2, SPI_FLAG_TXE ) == RESET );
 80009a6:	bf00      	nop
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <SpiInOut+0x78>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	2b02      	cmp	r3, #2
 80009b4:	d1f8      	bne.n	80009a8 <SpiInOut+0x30>
    hspi2.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 80009b6:	887a      	ldrh	r2, [r7, #2]
 80009b8:	4b0d      	ldr	r3, [pc, #52]	; (80009f0 <SpiInOut+0x78>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &hspi2, SPI_FLAG_RXNE ) == RESET );
 80009c0:	bf00      	nop
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <SpiInOut+0x78>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f003 0301 	and.w	r3, r3, #1
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d1f8      	bne.n	80009c2 <SpiInOut+0x4a>
    rxData = ( uint16_t ) hspi2.Instance->DR;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <SpiInOut+0x78>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	73fb      	strb	r3, [r7, #15]

    CRITICAL_SECTION_END( );
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	4618      	mov	r0, r3
 80009de:	f004 ffe8 	bl	80059b2 <BoardCriticalSectionEnd>

    return( rxData );
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	b29b      	uxth	r3, r3
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200001f4 	.word	0x200001f4

080009f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80009fa:	4b14      	ldr	r3, [pc, #80]	; (8000a4c <HAL_MspInit+0x58>)
 80009fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009fe:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <HAL_MspInit+0x58>)
 8000a00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a04:	6253      	str	r3, [r2, #36]	; 0x24
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <HAL_MspInit+0x58>)
 8000a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	4b0e      	ldr	r3, [pc, #56]	; (8000a4c <HAL_MspInit+0x58>)
 8000a14:	6a1b      	ldr	r3, [r3, #32]
 8000a16:	4a0d      	ldr	r2, [pc, #52]	; (8000a4c <HAL_MspInit+0x58>)
 8000a18:	f043 0301 	orr.w	r3, r3, #1
 8000a1c:	6213      	str	r3, [r2, #32]
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_MspInit+0x58>)
 8000a20:	6a1b      	ldr	r3, [r3, #32]
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	60bb      	str	r3, [r7, #8]
 8000a28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_MspInit+0x58>)
 8000a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a2e:	4a07      	ldr	r2, [pc, #28]	; (8000a4c <HAL_MspInit+0x58>)
 8000a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a34:	6253      	str	r3, [r2, #36]	; 0x24
 8000a36:	4b05      	ldr	r3, [pc, #20]	; (8000a4c <HAL_MspInit+0x58>)
 8000a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000a60:	2200      	movs	r2, #0
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	201c      	movs	r0, #28
 8000a66:	f000 fa8e 	bl	8000f86 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a6a:	201c      	movs	r0, #28
 8000a6c:	f000 faa7 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a70:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <HAL_InitTick+0xa0>)
 8000a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a74:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <HAL_InitTick+0xa0>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6253      	str	r3, [r2, #36]	; 0x24
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_InitTick+0xa0>)
 8000a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a88:	f107 0210 	add.w	r2, r7, #16
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4611      	mov	r1, r2
 8000a92:	4618      	mov	r0, r3
 8000a94:	f001 fa36 	bl	8001f04 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a98:	f001 fa0c 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8000a9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000aa0:	4a14      	ldr	r2, [pc, #80]	; (8000af4 <HAL_InitTick+0xa4>)
 8000aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa6:	0c9b      	lsrs	r3, r3, #18
 8000aa8:	3b01      	subs	r3, #1
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0xa8>)
 8000aae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000ab4:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <HAL_InitTick+0xa8>)
 8000ab6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000aba:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <HAL_InitTick+0xa8>)
 8000abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac0:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ac2:	4b0d      	ldr	r3, [pc, #52]	; (8000af8 <HAL_InitTick+0xa8>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac8:	4b0b      	ldr	r3, [pc, #44]	; (8000af8 <HAL_InitTick+0xa8>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000ace:	480a      	ldr	r0, [pc, #40]	; (8000af8 <HAL_InitTick+0xa8>)
 8000ad0:	f002 f95f 	bl	8002d92 <HAL_TIM_Base_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d104      	bne.n	8000ae4 <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <HAL_InitTick+0xa8>)
 8000adc:	f002 f9a2 	bl	8002e24 <HAL_TIM_Base_Start_IT>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	e000      	b.n	8000ae6 <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	3730      	adds	r7, #48	; 0x30
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40023800 	.word	0x40023800
 8000af4:	431bde83 	.word	0x431bde83
 8000af8:	2000024c 	.word	0x2000024c

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <NMI_Handler+0x4>

08000b02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b06:	e7fe      	b.n	8000b06 <HardFault_Handler+0x4>

08000b08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <MemManage_Handler+0x4>

08000b0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b12:	e7fe      	b.n	8000b12 <BusFault_Handler+0x4>

08000b14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <UsageFault_Handler+0x4>

08000b1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr

08000b26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bc80      	pop	{r7}
 8000b30:	4770      	bx	lr

08000b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b4e:	2020      	movs	r0, #32
 8000b50:	f000 fc5c 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b54:	2040      	movs	r0, #64	; 0x40
 8000b56:	f000 fc59 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000b5a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b5e:	f000 fc55 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b66:	f000 fc51 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
	...

08000b70 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <TIM2_IRQHandler+0x10>)
 8000b76:	f002 f9a7 	bl	8002ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000024c 	.word	0x2000024c

08000b84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <USART2_IRQHandler+0x10>)
 8000b8a:	f002 fb5b 	bl	8003244 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	2000028c 	.word	0x2000028c

08000b98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000b9c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000ba0:	f000 fc34 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000ba4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ba8:	f000 fc30 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bb0:	f000 fc2c 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&RtcHandle);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <RTC_Alarm_IRQHandler+0x10>)
 8000bbe:	f001 ff4f 	bl	8002a60 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
#endif
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000190 	.word	0x20000190

08000bcc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bd0:	4b03      	ldr	r3, [pc, #12]	; (8000be0 <SystemInit+0x14>)
 8000bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bd6:	609a      	str	r2, [r3, #8]
#endif
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bc80      	pop	{r7}
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be8:	4b11      	ldr	r3, [pc, #68]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bea:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MX_USART2_UART_Init+0x50>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000bee:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000bf4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b09      	ldr	r3, [pc, #36]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c1a:	4805      	ldr	r0, [pc, #20]	; (8000c30 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	f002 fac4 	bl	80031a8 <HAL_UART_Init>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c26:	f7ff fd7e 	bl	8000726 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000028c 	.word	0x2000028c
 8000c34:	40004400 	.word	0x40004400

08000c38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a1b      	ldr	r2, [pc, #108]	; (8000cc4 <HAL_UART_MspInit+0x8c>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d12f      	bne.n	8000cba <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c5e:	4a1a      	ldr	r2, [pc, #104]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	6253      	str	r3, [r2, #36]	; 0x24
 8000c66:	4b18      	ldr	r3, [pc, #96]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6e:	613b      	str	r3, [r7, #16]
 8000c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_UART_MspInit+0x90>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c8a:	230c      	movs	r3, #12
 8000c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c96:	2303      	movs	r3, #3
 8000c98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <HAL_UART_MspInit+0x94>)
 8000ca6:	f000 f9d9 	bl	800105c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2105      	movs	r1, #5
 8000cae:	2026      	movs	r0, #38	; 0x26
 8000cb0:	f000 f969 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cb4:	2026      	movs	r0, #38	; 0x26
 8000cb6:	f000 f982 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40004400 	.word	0x40004400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020000 	.word	0x40020000

08000cd0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cd0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cd2:	e003      	b.n	8000cdc <LoopCopyDataInit>

08000cd4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cd6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cd8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cda:	3104      	adds	r1, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cdc:	480a      	ldr	r0, [pc, #40]	; (8000d08 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cde:	4b0b      	ldr	r3, [pc, #44]	; (8000d0c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ce0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ce2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ce4:	d3f6      	bcc.n	8000cd4 <CopyDataInit>
  ldr r2, =_sbss
 8000ce6:	4a0a      	ldr	r2, [pc, #40]	; (8000d10 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ce8:	e002      	b.n	8000cf0 <LoopFillZerobss>

08000cea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000cec:	f842 3b04 	str.w	r3, [r2], #4

08000cf0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000cf0:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000cf2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cf4:	d3f9      	bcc.n	8000cea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cf6:	f7ff ff69 	bl	8000bcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cfa:	f005 ff53 	bl	8006ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cfe:	f7ff fc8a 	bl	8000616 <main>
  bx lr
 8000d02:	4770      	bx	lr
  ldr r3, =_sidata
 8000d04:	08006dc8 	.word	0x08006dc8
  ldr r0, =_sdata
 8000d08:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d0c:	20000044 	.word	0x20000044
  ldr r2, =_sbss
 8000d10:	20000044 	.word	0x20000044
  ldr r3, = _ebss
 8000d14:	20000440 	.word	0x20000440

08000d18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d18:	e7fe      	b.n	8000d18 <ADC1_IRQHandler>

08000d1a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d20:	2300      	movs	r3, #0
 8000d22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f923 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d2a:	2000      	movs	r0, #0
 8000d2c:	f7ff fe90 	bl	8000a50 <HAL_InitTick>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d002      	beq.n	8000d3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	71fb      	strb	r3, [r7, #7]
 8000d3a:	e001      	b.n	8000d40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3c:	f7ff fe5a 	bl	80009f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d40:	79fb      	ldrb	r3, [r7, #7]
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x20>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4413      	add	r3, r2
 8000d5a:	4a03      	ldr	r2, [pc, #12]	; (8000d68 <HAL_IncTick+0x1c>)
 8000d5c:	6013      	str	r3, [r2, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bc80      	pop	{r7}
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	200002cc 	.word	0x200002cc
 8000d6c:	20000008 	.word	0x20000008

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b02      	ldr	r3, [pc, #8]	; (8000d80 <HAL_GetTick+0x10>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr
 8000d80:	200002cc 	.word	0x200002cc

08000d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b084      	sub	sp, #16
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d8c:	f7ff fff0 	bl	8000d70 <HAL_GetTick>
 8000d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d9c:	d004      	beq.n	8000da8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d9e:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <HAL_Delay+0x40>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	4413      	add	r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da8:	bf00      	nop
 8000daa:	f7ff ffe1 	bl	8000d70 <HAL_GetTick>
 8000dae:	4602      	mov	r2, r0
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	1ad3      	subs	r3, r2, r3
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d8f7      	bhi.n	8000daa <HAL_Delay+0x26>
  {
  }
}
 8000dba:	bf00      	nop
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000008 	.word	0x20000008

08000dc8 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000dcc:	4b04      	ldr	r3, [pc, #16]	; (8000de0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	4a03      	ldr	r2, [pc, #12]	; (8000de0 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6053      	str	r3, [r2, #4]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr
 8000de0:	e0042000 	.word	0xe0042000

08000de4 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	4a03      	ldr	r2, [pc, #12]	; (8000dfc <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	6053      	str	r3, [r2, #4]
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	e0042000 	.word	0xe0042000

08000e00 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000e04:	4b04      	ldr	r3, [pc, #16]	; (8000e18 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	4a03      	ldr	r2, [pc, #12]	; (8000e18 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6053      	str	r3, [r2, #4]
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bc80      	pop	{r7}
 8000e16:	4770      	bx	lr
 8000e18:	e0042000 	.word	0xe0042000

08000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e2c:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e38:	4013      	ands	r3, r2
 8000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4e:	4a04      	ldr	r2, [pc, #16]	; (8000e60 <__NVIC_SetPriorityGrouping+0x44>)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	60d3      	str	r3, [r2, #12]
}
 8000e54:	bf00      	nop
 8000e56:	3714      	adds	r7, #20
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bc80      	pop	{r7}
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	e000ed00 	.word	0xe000ed00

08000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <__NVIC_GetPriorityGrouping+0x18>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	0a1b      	lsrs	r3, r3, #8
 8000e6e:	f003 0307 	and.w	r3, r3, #7
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bc80      	pop	{r7}
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	db0b      	blt.n	8000eaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e92:	79fb      	ldrb	r3, [r7, #7]
 8000e94:	f003 021f 	and.w	r2, r3, #31
 8000e98:	4906      	ldr	r1, [pc, #24]	; (8000eb4 <__NVIC_EnableIRQ+0x34>)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	095b      	lsrs	r3, r3, #5
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bc80      	pop	{r7}
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff4f 	bl	8000e1c <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff64 	bl	8000e64 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ffb2 	bl	8000f0c <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff81 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff57 	bl	8000e80 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b084      	sub	sp, #16
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d005      	beq.n	8000ffe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2204      	movs	r2, #4
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e029      	b.n	8001052 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 020e 	bic.w	r2, r2, #14
 800100c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 0201 	bic.w	r2, r2, #1
 800101c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001022:	f003 021c 	and.w	r2, r3, #28
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102a:	2101      	movs	r1, #1
 800102c:	fa01 f202 	lsl.w	r2, r1, r2
 8001030:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	4798      	blx	r3
    }
  }
  return status;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
}
 8001054:	4618      	mov	r0, r3
 8001056:	3710      	adds	r7, #16
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800105c:	b480      	push	{r7}
 800105e:	b087      	sub	sp, #28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800106e:	2300      	movs	r3, #0
 8001070:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001072:	e160      	b.n	8001336 <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	2101      	movs	r1, #1
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	fa01 f303 	lsl.w	r3, r1, r3
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 8152 	beq.w	8001330 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d00b      	beq.n	80010ac <HAL_GPIO_Init+0x50>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a0:	2b11      	cmp	r3, #17
 80010a2:	d003      	beq.n	80010ac <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b12      	cmp	r3, #18
 80010aa:	d130      	bne.n	800110e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	4013      	ands	r3, r2
 80010c2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80010e2:	2201      	movs	r2, #1
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	f003 0201 	and.w	r2, r3, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	4313      	orrs	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	2203      	movs	r2, #3
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4013      	ands	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0xf2>
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	2b12      	cmp	r3, #18
 800114c:	d123      	bne.n	8001196 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	08da      	lsrs	r2, r3, #3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3208      	adds	r2, #8
 8001156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800115a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	f003 0307 	and.w	r3, r3, #7
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	220f      	movs	r2, #15
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43db      	mvns	r3, r3
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	4013      	ands	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	691a      	ldr	r2, [r3, #16]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	08da      	lsrs	r2, r3, #3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	3208      	adds	r2, #8
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	2203      	movs	r2, #3
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	43db      	mvns	r3, r3
 80011a8:	693a      	ldr	r2, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0203 	and.w	r2, r3, #3
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	f000 80ac 	beq.w	8001330 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d8:	4b5e      	ldr	r3, [pc, #376]	; (8001354 <HAL_GPIO_Init+0x2f8>)
 80011da:	6a1b      	ldr	r3, [r3, #32]
 80011dc:	4a5d      	ldr	r2, [pc, #372]	; (8001354 <HAL_GPIO_Init+0x2f8>)
 80011de:	f043 0301 	orr.w	r3, r3, #1
 80011e2:	6213      	str	r3, [r2, #32]
 80011e4:	4b5b      	ldr	r3, [pc, #364]	; (8001354 <HAL_GPIO_Init+0x2f8>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	60bb      	str	r3, [r7, #8]
 80011ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80011f0:	4a59      	ldr	r2, [pc, #356]	; (8001358 <HAL_GPIO_Init+0x2fc>)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	089b      	lsrs	r3, r3, #2
 80011f6:	3302      	adds	r3, #2
 80011f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	220f      	movs	r2, #15
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	693a      	ldr	r2, [r7, #16]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a51      	ldr	r2, [pc, #324]	; (800135c <HAL_GPIO_Init+0x300>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d025      	beq.n	8001268 <HAL_GPIO_Init+0x20c>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a50      	ldr	r2, [pc, #320]	; (8001360 <HAL_GPIO_Init+0x304>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d01f      	beq.n	8001264 <HAL_GPIO_Init+0x208>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a4f      	ldr	r2, [pc, #316]	; (8001364 <HAL_GPIO_Init+0x308>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d019      	beq.n	8001260 <HAL_GPIO_Init+0x204>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a4e      	ldr	r2, [pc, #312]	; (8001368 <HAL_GPIO_Init+0x30c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d013      	beq.n	800125c <HAL_GPIO_Init+0x200>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a4d      	ldr	r2, [pc, #308]	; (800136c <HAL_GPIO_Init+0x310>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d00d      	beq.n	8001258 <HAL_GPIO_Init+0x1fc>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a4c      	ldr	r2, [pc, #304]	; (8001370 <HAL_GPIO_Init+0x314>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d007      	beq.n	8001254 <HAL_GPIO_Init+0x1f8>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a4b      	ldr	r2, [pc, #300]	; (8001374 <HAL_GPIO_Init+0x318>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d101      	bne.n	8001250 <HAL_GPIO_Init+0x1f4>
 800124c:	2306      	movs	r3, #6
 800124e:	e00c      	b.n	800126a <HAL_GPIO_Init+0x20e>
 8001250:	2307      	movs	r3, #7
 8001252:	e00a      	b.n	800126a <HAL_GPIO_Init+0x20e>
 8001254:	2305      	movs	r3, #5
 8001256:	e008      	b.n	800126a <HAL_GPIO_Init+0x20e>
 8001258:	2304      	movs	r3, #4
 800125a:	e006      	b.n	800126a <HAL_GPIO_Init+0x20e>
 800125c:	2303      	movs	r3, #3
 800125e:	e004      	b.n	800126a <HAL_GPIO_Init+0x20e>
 8001260:	2302      	movs	r3, #2
 8001262:	e002      	b.n	800126a <HAL_GPIO_Init+0x20e>
 8001264:	2301      	movs	r3, #1
 8001266:	e000      	b.n	800126a <HAL_GPIO_Init+0x20e>
 8001268:	2300      	movs	r3, #0
 800126a:	697a      	ldr	r2, [r7, #20]
 800126c:	f002 0203 	and.w	r2, r2, #3
 8001270:	0092      	lsls	r2, r2, #2
 8001272:	4093      	lsls	r3, r2
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800127a:	4937      	ldr	r1, [pc, #220]	; (8001358 <HAL_GPIO_Init+0x2fc>)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	089b      	lsrs	r3, r3, #2
 8001280:	3302      	adds	r3, #2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001288:	4b3b      	ldr	r3, [pc, #236]	; (8001378 <HAL_GPIO_Init+0x31c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	43db      	mvns	r3, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	4013      	ands	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d003      	beq.n	80012ac <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ac:	4a32      	ldr	r2, [pc, #200]	; (8001378 <HAL_GPIO_Init+0x31c>)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012b2:	4b31      	ldr	r3, [pc, #196]	; (8001378 <HAL_GPIO_Init+0x31c>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	4013      	ands	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012d6:	4a28      	ldr	r2, [pc, #160]	; (8001378 <HAL_GPIO_Init+0x31c>)
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012dc:	4b26      	ldr	r3, [pc, #152]	; (8001378 <HAL_GPIO_Init+0x31c>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4013      	ands	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001300:	4a1d      	ldr	r2, [pc, #116]	; (8001378 <HAL_GPIO_Init+0x31c>)
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001306:	4b1c      	ldr	r3, [pc, #112]	; (8001378 <HAL_GPIO_Init+0x31c>)
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800132a:	4a13      	ldr	r2, [pc, #76]	; (8001378 <HAL_GPIO_Init+0x31c>)
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	fa22 f303 	lsr.w	r3, r2, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	f47f ae97 	bne.w	8001074 <HAL_GPIO_Init+0x18>
  }
}
 8001346:	bf00      	nop
 8001348:	bf00      	nop
 800134a:	371c      	adds	r7, #28
 800134c:	46bd      	mov	sp, r7
 800134e:	bc80      	pop	{r7}
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40023800 	.word	0x40023800
 8001358:	40010000 	.word	0x40010000
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40020800 	.word	0x40020800
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40021000 	.word	0x40021000
 8001370:	40021400 	.word	0x40021400
 8001374:	40021800 	.word	0x40021800
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	4013      	ands	r3, r2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d002      	beq.n	800139a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001394:	2301      	movs	r3, #1
 8001396:	73fb      	strb	r3, [r7, #15]
 8001398:	e001      	b.n	800139e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800139a:	2300      	movs	r3, #0
 800139c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800139e:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3714      	adds	r7, #20
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
 80013b2:	460b      	mov	r3, r1
 80013b4:	807b      	strh	r3, [r7, #2]
 80013b6:	4613      	mov	r3, r2
 80013b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013ba:	787b      	ldrb	r3, [r7, #1]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c0:	887a      	ldrh	r2, [r7, #2]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80013c6:	e003      	b.n	80013d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80013c8:	887b      	ldrh	r3, [r7, #2]
 80013ca:	041a      	lsls	r2, r3, #16
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	619a      	str	r2, [r3, #24]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bc80      	pop	{r7}
 80013d8:	4770      	bx	lr

080013da <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013da:	b480      	push	{r7}
 80013dc:	b085      	sub	sp, #20
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	460b      	mov	r3, r1
 80013e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ec:	887a      	ldrh	r2, [r7, #2]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4013      	ands	r3, r2
 80013f2:	041a      	lsls	r2, r3, #16
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	43d9      	mvns	r1, r3
 80013f8:	887b      	ldrh	r3, [r7, #2]
 80013fa:	400b      	ands	r3, r1
 80013fc:	431a      	orrs	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	619a      	str	r2, [r3, #24]
}
 8001402:	bf00      	nop
 8001404:	3714      	adds	r7, #20
 8001406:	46bd      	mov	sp, r7
 8001408:	bc80      	pop	{r7}
 800140a:	4770      	bx	lr

0800140c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4618      	mov	r0, r3
 800142c:	f005 f910 	bl	8006650 <HAL_GPIO_EXTI_Callback>
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40010400 	.word	0x40010400

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e31d      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144e:	4b94      	ldr	r3, [pc, #592]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f003 030c 	and.w	r3, r3, #12
 8001456:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001458:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001460:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	2b00      	cmp	r3, #0
 800146c:	d07b      	beq.n	8001566 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b08      	cmp	r3, #8
 8001472:	d006      	beq.n	8001482 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d10f      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d10b      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b87      	ldr	r3, [pc, #540]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d06a      	beq.n	8001564 <HAL_RCC_OscConfig+0x128>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d166      	bne.n	8001564 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e2f7      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x74>
 80014a2:	4b7f      	ldr	r3, [pc, #508]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a7e      	ldr	r2, [pc, #504]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	e02d      	b.n	800150c <HAL_RCC_OscConfig+0xd0>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x96>
 80014b8:	4b79      	ldr	r3, [pc, #484]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a78      	ldr	r2, [pc, #480]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c2:	6013      	str	r3, [r2, #0]
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a75      	ldr	r2, [pc, #468]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ce:	6013      	str	r3, [r2, #0]
 80014d0:	e01c      	b.n	800150c <HAL_RCC_OscConfig+0xd0>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d10c      	bne.n	80014f4 <HAL_RCC_OscConfig+0xb8>
 80014da:	4b71      	ldr	r3, [pc, #452]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a70      	ldr	r2, [pc, #448]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	4b6e      	ldr	r3, [pc, #440]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a6d      	ldr	r2, [pc, #436]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f0:	6013      	str	r3, [r2, #0]
 80014f2:	e00b      	b.n	800150c <HAL_RCC_OscConfig+0xd0>
 80014f4:	4b6a      	ldr	r3, [pc, #424]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a69      	ldr	r2, [pc, #420]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80014fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014fe:	6013      	str	r3, [r2, #0]
 8001500:	4b67      	ldr	r3, [pc, #412]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a66      	ldr	r2, [pc, #408]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 8001506:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d013      	beq.n	800153c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fc2c 	bl	8000d70 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fc28 	bl	8000d70 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e2ad      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800152e:	4b5c      	ldr	r3, [pc, #368]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0xe0>
 800153a:	e014      	b.n	8001566 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800153c:	f7ff fc18 	bl	8000d70 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fc14 	bl	8000d70 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e299      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001556:	4b52      	ldr	r3, [pc, #328]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1f0      	bne.n	8001544 <HAL_RCC_OscConfig+0x108>
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d05a      	beq.n	8001628 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d005      	beq.n	8001584 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d119      	bne.n	80015b2 <HAL_RCC_OscConfig+0x176>
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d116      	bne.n	80015b2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001584:	4b46      	ldr	r3, [pc, #280]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0302 	and.w	r3, r3, #2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_RCC_OscConfig+0x160>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d001      	beq.n	800159c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e276      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	021b      	lsls	r3, r3, #8
 80015aa:	493d      	ldr	r1, [pc, #244]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b0:	e03a      	b.n	8001628 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d020      	beq.n	80015fc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015ba:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <HAL_RCC_OscConfig+0x268>)
 80015bc:	2201      	movs	r2, #1
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fbd6 	bl	8000d70 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c8:	f7ff fbd2 	bl	8000d70 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e257      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f0      	beq.n	80015c8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	691b      	ldr	r3, [r3, #16]
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	492a      	ldr	r1, [pc, #168]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	604b      	str	r3, [r1, #4]
 80015fa:	e015      	b.n	8001628 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fc:	4b29      	ldr	r3, [pc, #164]	; (80016a4 <HAL_RCC_OscConfig+0x268>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001602:	f7ff fbb5 	bl	8000d70 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800160a:	f7ff fbb1 	bl	8000d70 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e236      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800161c:	4b20      	ldr	r3, [pc, #128]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d1f0      	bne.n	800160a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80b8 	beq.w	80017a6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d170      	bne.n	800171e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800163c:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <HAL_RCC_OscConfig+0x218>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e21a      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6a1a      	ldr	r2, [r3, #32]
 8001658:	4b11      	ldr	r3, [pc, #68]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001660:	429a      	cmp	r2, r3
 8001662:	d921      	bls.n	80016a8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fc7b 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e208      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001678:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6a1b      	ldr	r3, [r3, #32]
 8001684:	4906      	ldr	r1, [pc, #24]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800168a:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	061b      	lsls	r3, r3, #24
 8001698:	4901      	ldr	r1, [pc, #4]	; (80016a0 <HAL_RCC_OscConfig+0x264>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
 800169e:	e020      	b.n	80016e2 <HAL_RCC_OscConfig+0x2a6>
 80016a0:	40023800 	.word	0x40023800
 80016a4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a8:	4ba4      	ldr	r3, [pc, #656]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	49a1      	ldr	r1, [pc, #644]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ba:	4ba0      	ldr	r3, [pc, #640]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	69db      	ldr	r3, [r3, #28]
 80016c6:	061b      	lsls	r3, r3, #24
 80016c8:	499c      	ldr	r1, [pc, #624]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80016ca:	4313      	orrs	r3, r2
 80016cc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a1b      	ldr	r3, [r3, #32]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f000 fc46 	bl	8001f64 <RCC_SetFlashLatencyFromMSIRange>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e1d3      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	0b5b      	lsrs	r3, r3, #13
 80016e8:	3301      	adds	r3, #1
 80016ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016f2:	4a92      	ldr	r2, [pc, #584]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80016f4:	6892      	ldr	r2, [r2, #8]
 80016f6:	0912      	lsrs	r2, r2, #4
 80016f8:	f002 020f 	and.w	r2, r2, #15
 80016fc:	4990      	ldr	r1, [pc, #576]	; (8001940 <HAL_RCC_OscConfig+0x504>)
 80016fe:	5c8a      	ldrb	r2, [r1, r2]
 8001700:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001702:	4a90      	ldr	r2, [pc, #576]	; (8001944 <HAL_RCC_OscConfig+0x508>)
 8001704:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001706:	4b90      	ldr	r3, [pc, #576]	; (8001948 <HAL_RCC_OscConfig+0x50c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff f9a0 	bl	8000a50 <HAL_InitTick>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d045      	beq.n	80017a6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
 800171c:	e1b5      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d029      	beq.n	800177a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001726:	4b89      	ldr	r3, [pc, #548]	; (800194c <HAL_RCC_OscConfig+0x510>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fb20 	bl	8000d70 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001734:	f7ff fb1c 	bl	8000d70 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1a1      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001746:	4b7d      	ldr	r3, [pc, #500]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001752:	4b7a      	ldr	r3, [pc, #488]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	4977      	ldr	r1, [pc, #476]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001764:	4b75      	ldr	r3, [pc, #468]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	69db      	ldr	r3, [r3, #28]
 8001770:	061b      	lsls	r3, r3, #24
 8001772:	4972      	ldr	r1, [pc, #456]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001774:	4313      	orrs	r3, r2
 8001776:	604b      	str	r3, [r1, #4]
 8001778:	e015      	b.n	80017a6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800177a:	4b74      	ldr	r3, [pc, #464]	; (800194c <HAL_RCC_OscConfig+0x510>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001780:	f7ff faf6 	bl	8000d70 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001786:	e008      	b.n	800179a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001788:	f7ff faf2 	bl	8000d70 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	2b02      	cmp	r3, #2
 8001794:	d901      	bls.n	800179a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001796:	2303      	movs	r3, #3
 8001798:	e177      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800179a:	4b68      	ldr	r3, [pc, #416]	; (800193c <HAL_RCC_OscConfig+0x500>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f0      	bne.n	8001788 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d030      	beq.n	8001814 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d016      	beq.n	80017e8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ba:	4b65      	ldr	r3, [pc, #404]	; (8001950 <HAL_RCC_OscConfig+0x514>)
 80017bc:	2201      	movs	r2, #1
 80017be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff fad6 	bl	8000d70 <HAL_GetTick>
 80017c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017c6:	e008      	b.n	80017da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fad2 	bl	8000d70 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e157      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017da:	4b58      	ldr	r3, [pc, #352]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80017dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0f0      	beq.n	80017c8 <HAL_RCC_OscConfig+0x38c>
 80017e6:	e015      	b.n	8001814 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e8:	4b59      	ldr	r3, [pc, #356]	; (8001950 <HAL_RCC_OscConfig+0x514>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ee:	f7ff fabf 	bl	8000d70 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f6:	f7ff fabb 	bl	8000d70 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e140      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <HAL_RCC_OscConfig+0x500>)
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 80b5 	beq.w	800198c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001822:	2300      	movs	r3, #0
 8001824:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001826:	4b45      	ldr	r3, [pc, #276]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d10d      	bne.n	800184e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001836:	4a41      	ldr	r2, [pc, #260]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183c:	6253      	str	r3, [r2, #36]	; 0x24
 800183e:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	60bb      	str	r3, [r7, #8]
 8001848:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800184a:	2301      	movs	r3, #1
 800184c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_RCC_OscConfig+0x518>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d118      	bne.n	800188c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800185a:	4b3e      	ldr	r3, [pc, #248]	; (8001954 <HAL_RCC_OscConfig+0x518>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a3d      	ldr	r2, [pc, #244]	; (8001954 <HAL_RCC_OscConfig+0x518>)
 8001860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001864:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001866:	f7ff fa83 	bl	8000d70 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800186e:	f7ff fa7f 	bl	8000d70 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b64      	cmp	r3, #100	; 0x64
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e104      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001880:	4b34      	ldr	r3, [pc, #208]	; (8001954 <HAL_RCC_OscConfig+0x518>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d106      	bne.n	80018a2 <HAL_RCC_OscConfig+0x466>
 8001894:	4b29      	ldr	r3, [pc, #164]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001898:	4a28      	ldr	r2, [pc, #160]	; (800193c <HAL_RCC_OscConfig+0x500>)
 800189a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189e:	6353      	str	r3, [r2, #52]	; 0x34
 80018a0:	e02d      	b.n	80018fe <HAL_RCC_OscConfig+0x4c2>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10c      	bne.n	80018c4 <HAL_RCC_OscConfig+0x488>
 80018aa:	4b24      	ldr	r3, [pc, #144]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ae:	4a23      	ldr	r2, [pc, #140]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018b4:	6353      	str	r3, [r2, #52]	; 0x34
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ba:	4a20      	ldr	r2, [pc, #128]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018c0:	6353      	str	r3, [r2, #52]	; 0x34
 80018c2:	e01c      	b.n	80018fe <HAL_RCC_OscConfig+0x4c2>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	d10c      	bne.n	80018e6 <HAL_RCC_OscConfig+0x4aa>
 80018cc:	4b1b      	ldr	r3, [pc, #108]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d0:	4a1a      	ldr	r2, [pc, #104]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d6:	6353      	str	r3, [r2, #52]	; 0x34
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018dc:	4a17      	ldr	r2, [pc, #92]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e2:	6353      	str	r3, [r2, #52]	; 0x34
 80018e4:	e00b      	b.n	80018fe <HAL_RCC_OscConfig+0x4c2>
 80018e6:	4b15      	ldr	r3, [pc, #84]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ea:	4a14      	ldr	r2, [pc, #80]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018f0:	6353      	str	r3, [r2, #52]	; 0x34
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f6:	4a11      	ldr	r2, [pc, #68]	; (800193c <HAL_RCC_OscConfig+0x500>)
 80018f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018fc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d015      	beq.n	8001932 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001906:	f7ff fa33 	bl	8000d70 <HAL_GetTick>
 800190a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800190c:	e00a      	b.n	8001924 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800190e:	f7ff fa2f 	bl	8000d70 <HAL_GetTick>
 8001912:	4602      	mov	r2, r0
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	f241 3288 	movw	r2, #5000	; 0x1388
 800191c:	4293      	cmp	r3, r2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e0b2      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_OscConfig+0x500>)
 8001926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001928:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0ee      	beq.n	800190e <HAL_RCC_OscConfig+0x4d2>
 8001930:	e023      	b.n	800197a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001932:	f7ff fa1d 	bl	8000d70 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001938:	e019      	b.n	800196e <HAL_RCC_OscConfig+0x532>
 800193a:	bf00      	nop
 800193c:	40023800 	.word	0x40023800
 8001940:	08006c3c 	.word	0x08006c3c
 8001944:	20000000 	.word	0x20000000
 8001948:	20000004 	.word	0x20000004
 800194c:	42470020 	.word	0x42470020
 8001950:	42470680 	.word	0x42470680
 8001954:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001958:	f7ff fa0a 	bl	8000d70 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e08d      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800196e:	4b49      	ldr	r3, [pc, #292]	; (8001a94 <HAL_RCC_OscConfig+0x658>)
 8001970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001976:	2b00      	cmp	r3, #0
 8001978:	d1ee      	bne.n	8001958 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800197a:	7ffb      	ldrb	r3, [r7, #31]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d105      	bne.n	800198c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001980:	4b44      	ldr	r3, [pc, #272]	; (8001a94 <HAL_RCC_OscConfig+0x658>)
 8001982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001984:	4a43      	ldr	r2, [pc, #268]	; (8001a94 <HAL_RCC_OscConfig+0x658>)
 8001986:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800198a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	2b00      	cmp	r3, #0
 8001992:	d079      	beq.n	8001a88 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2b0c      	cmp	r3, #12
 8001998:	d056      	beq.n	8001a48 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d13b      	bne.n	8001a1a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a2:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <HAL_RCC_OscConfig+0x65c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a8:	f7ff f9e2 	bl	8000d70 <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ae:	e008      	b.n	80019c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff f9de 	bl	8000d70 <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d901      	bls.n	80019c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019be:	2303      	movs	r3, #3
 80019c0:	e063      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019c2:	4b34      	ldr	r3, [pc, #208]	; (8001a94 <HAL_RCC_OscConfig+0x658>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d1f0      	bne.n	80019b0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ce:	4b31      	ldr	r3, [pc, #196]	; (8001a94 <HAL_RCC_OscConfig+0x658>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019de:	4319      	orrs	r1, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e4:	430b      	orrs	r3, r1
 80019e6:	492b      	ldr	r1, [pc, #172]	; (8001a94 <HAL_RCC_OscConfig+0x658>)
 80019e8:	4313      	orrs	r3, r2
 80019ea:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <HAL_RCC_OscConfig+0x65c>)
 80019ee:	2201      	movs	r2, #1
 80019f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019f2:	f7ff f9bd 	bl	8000d70 <HAL_GetTick>
 80019f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019f8:	e008      	b.n	8001a0c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019fa:	f7ff f9b9 	bl	8000d70 <HAL_GetTick>
 80019fe:	4602      	mov	r2, r0
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d901      	bls.n	8001a0c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	e03e      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_RCC_OscConfig+0x658>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d0f0      	beq.n	80019fa <HAL_RCC_OscConfig+0x5be>
 8001a18:	e036      	b.n	8001a88 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b1f      	ldr	r3, [pc, #124]	; (8001a98 <HAL_RCC_OscConfig+0x65c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff f9a6 	bl	8000d70 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff f9a2 	bl	8000d70 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e027      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <HAL_RCC_OscConfig+0x658>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x5ec>
 8001a46:	e01f      	b.n	8001a88 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e01a      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a54:	4b0f      	ldr	r3, [pc, #60]	; (8001a94 <HAL_RCC_OscConfig+0x658>)
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d10d      	bne.n	8001a84 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d001      	beq.n	8001a88 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40023800 	.word	0x40023800
 8001a98:	42470060 	.word	0x42470060

08001a9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b084      	sub	sp, #16
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d101      	bne.n	8001ab0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e11a      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab0:	4b8f      	ldr	r3, [pc, #572]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0301 	and.w	r3, r3, #1
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d919      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d105      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x34>
 8001ac4:	4b8a      	ldr	r3, [pc, #552]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a89      	ldr	r2, [pc, #548]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001aca:	f043 0304 	orr.w	r3, r3, #4
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b87      	ldr	r3, [pc, #540]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 0201 	bic.w	r2, r3, #1
 8001ad8:	4985      	ldr	r1, [pc, #532]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae0:	4b83      	ldr	r3, [pc, #524]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d001      	beq.n	8001af2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e0f9      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d008      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001afe:	4b7d      	ldr	r3, [pc, #500]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	497a      	ldr	r1, [pc, #488]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f000 808e 	beq.w	8001c3a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d107      	bne.n	8001b36 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b26:	4b73      	ldr	r3, [pc, #460]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d121      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e0d7      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b3e:	4b6d      	ldr	r3, [pc, #436]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d115      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0cb      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b56:	4b67      	ldr	r3, [pc, #412]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d109      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0bf      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b66:	4b63      	ldr	r3, [pc, #396]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e0b7      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b76:	4b5f      	ldr	r3, [pc, #380]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 0203 	bic.w	r2, r3, #3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	495c      	ldr	r1, [pc, #368]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b88:	f7ff f8f2 	bl	8000d70 <HAL_GetTick>
 8001b8c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d112      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff f8ea 	bl	8000d70 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e09b      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bae:	4b51      	ldr	r3, [pc, #324]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d1ee      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xfc>
 8001bba:	e03e      	b.n	8001c3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d112      	bne.n	8001bea <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f7ff f8d3 	bl	8000d70 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e084      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	4b45      	ldr	r3, [pc, #276]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d1ee      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x12a>
 8001be8:	e027      	b.n	8001c3a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d11d      	bne.n	8001c2e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f7ff f8bc 	bl	8000d70 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e06d      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0a:	4b3a      	ldr	r3, [pc, #232]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 030c 	and.w	r3, r3, #12
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	d1ee      	bne.n	8001bf4 <HAL_RCC_ClockConfig+0x158>
 8001c16:	e010      	b.n	8001c3a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c18:	f7ff f8aa 	bl	8000d70 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e05b      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	f003 030c 	and.w	r3, r3, #12
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ee      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d219      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d105      	bne.n	8001c5a <HAL_RCC_ClockConfig+0x1be>
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a27      	ldr	r2, [pc, #156]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	6013      	str	r3, [r2, #0]
 8001c5a:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0201 	bic.w	r2, r3, #1
 8001c62:	4923      	ldr	r1, [pc, #140]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b21      	ldr	r3, [pc, #132]	; (8001cf0 <HAL_RCC_ClockConfig+0x254>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e034      	b.n	8001ce6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c88:	4b1a      	ldr	r3, [pc, #104]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4917      	ldr	r1, [pc, #92]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ca6:	4b13      	ldr	r3, [pc, #76]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	490f      	ldr	r1, [pc, #60]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cba:	f000 f823 	bl	8001d04 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <HAL_RCC_ClockConfig+0x258>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	490b      	ldr	r1, [pc, #44]	; (8001cf8 <HAL_RCC_ClockConfig+0x25c>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	4a0a      	ldr	r2, [pc, #40]	; (8001cfc <HAL_RCC_ClockConfig+0x260>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cd6:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_ClockConfig+0x264>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe feb8 	bl	8000a50 <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ce4:	7afb      	ldrb	r3, [r7, #11]
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023c00 	.word	0x40023c00
 8001cf4:	40023800 	.word	0x40023800
 8001cf8:	08006c3c 	.word	0x08006c3c
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d04:	b5b0      	push	{r4, r5, r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d0a:	4b61      	ldr	r3, [pc, #388]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b0c      	cmp	r3, #12
 8001d18:	d00d      	beq.n	8001d36 <HAL_RCC_GetSysClockFreq+0x32>
 8001d1a:	2b0c      	cmp	r3, #12
 8001d1c:	f200 80a4 	bhi.w	8001e68 <HAL_RCC_GetSysClockFreq+0x164>
 8001d20:	2b04      	cmp	r3, #4
 8001d22:	d002      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x26>
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d003      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0x2c>
 8001d28:	e09e      	b.n	8001e68 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d2a:	4b5a      	ldr	r3, [pc, #360]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x190>)
 8001d2c:	613b      	str	r3, [r7, #16]
      break;
 8001d2e:	e0a9      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d30:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <HAL_RCC_GetSysClockFreq+0x194>)
 8001d32:	613b      	str	r3, [r7, #16]
      break;
 8001d34:	e0a6      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	0c9b      	lsrs	r3, r3, #18
 8001d3a:	f003 030f 	and.w	r3, r3, #15
 8001d3e:	4a57      	ldr	r2, [pc, #348]	; (8001e9c <HAL_RCC_GetSysClockFreq+0x198>)
 8001d40:	5cd3      	ldrb	r3, [r2, r3]
 8001d42:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	0d9b      	lsrs	r3, r3, #22
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d50:	4b4f      	ldr	r3, [pc, #316]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d041      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	461c      	mov	r4, r3
 8001d60:	f04f 0500 	mov.w	r5, #0
 8001d64:	4620      	mov	r0, r4
 8001d66:	4629      	mov	r1, r5
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	014b      	lsls	r3, r1, #5
 8001d72:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d76:	0142      	lsls	r2, r0, #5
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	1b00      	subs	r0, r0, r4
 8001d7e:	eb61 0105 	sbc.w	r1, r1, r5
 8001d82:	f04f 0200 	mov.w	r2, #0
 8001d86:	f04f 0300 	mov.w	r3, #0
 8001d8a:	018b      	lsls	r3, r1, #6
 8001d8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d90:	0182      	lsls	r2, r0, #6
 8001d92:	1a12      	subs	r2, r2, r0
 8001d94:	eb63 0301 	sbc.w	r3, r3, r1
 8001d98:	f04f 0000 	mov.w	r0, #0
 8001d9c:	f04f 0100 	mov.w	r1, #0
 8001da0:	00d9      	lsls	r1, r3, #3
 8001da2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001da6:	00d0      	lsls	r0, r2, #3
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	1912      	adds	r2, r2, r4
 8001dae:	eb45 0303 	adc.w	r3, r5, r3
 8001db2:	f04f 0000 	mov.w	r0, #0
 8001db6:	f04f 0100 	mov.w	r1, #0
 8001dba:	0259      	lsls	r1, r3, #9
 8001dbc:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dc0:	0250      	lsls	r0, r2, #9
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	4610      	mov	r0, r2
 8001dc8:	4619      	mov	r1, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	f7fe f9d3 	bl	800017c <__aeabi_uldivmod>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4613      	mov	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	e040      	b.n	8001e62 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	461c      	mov	r4, r3
 8001de4:	f04f 0500 	mov.w	r5, #0
 8001de8:	4620      	mov	r0, r4
 8001dea:	4629      	mov	r1, r5
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	014b      	lsls	r3, r1, #5
 8001df6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001dfa:	0142      	lsls	r2, r0, #5
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	1b00      	subs	r0, r0, r4
 8001e02:	eb61 0105 	sbc.w	r1, r1, r5
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	f04f 0300 	mov.w	r3, #0
 8001e0e:	018b      	lsls	r3, r1, #6
 8001e10:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e14:	0182      	lsls	r2, r0, #6
 8001e16:	1a12      	subs	r2, r2, r0
 8001e18:	eb63 0301 	sbc.w	r3, r3, r1
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	f04f 0100 	mov.w	r1, #0
 8001e24:	00d9      	lsls	r1, r3, #3
 8001e26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e2a:	00d0      	lsls	r0, r2, #3
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	1912      	adds	r2, r2, r4
 8001e32:	eb45 0303 	adc.w	r3, r5, r3
 8001e36:	f04f 0000 	mov.w	r0, #0
 8001e3a:	f04f 0100 	mov.w	r1, #0
 8001e3e:	0299      	lsls	r1, r3, #10
 8001e40:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e44:	0290      	lsls	r0, r2, #10
 8001e46:	4602      	mov	r2, r0
 8001e48:	460b      	mov	r3, r1
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	461a      	mov	r2, r3
 8001e52:	f04f 0300 	mov.w	r3, #0
 8001e56:	f7fe f991 	bl	800017c <__aeabi_uldivmod>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4613      	mov	r3, r2
 8001e60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	613b      	str	r3, [r7, #16]
      break;
 8001e66:	e00d      	b.n	8001e84 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0b5b      	lsrs	r3, r3, #13
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	3301      	adds	r3, #1
 8001e78:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	613b      	str	r3, [r7, #16]
      break;
 8001e82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e84:	693b      	ldr	r3, [r7, #16]
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800
 8001e94:	00f42400 	.word	0x00f42400
 8001e98:	007a1200 	.word	0x007a1200
 8001e9c:	08006c30 	.word	0x08006c30

08001ea0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ea4:	4b02      	ldr	r3, [pc, #8]	; (8001eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	20000000 	.word	0x20000000

08001eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb8:	f7ff fff2 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	0a1b      	lsrs	r3, r3, #8
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	4903      	ldr	r1, [pc, #12]	; (8001ed8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eca:	5ccb      	ldrb	r3, [r1, r3]
 8001ecc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	40023800 	.word	0x40023800
 8001ed8:	08006c4c 	.word	0x08006c4c

08001edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ee0:	f7ff ffde 	bl	8001ea0 <HAL_RCC_GetHCLKFreq>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	0adb      	lsrs	r3, r3, #11
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	4903      	ldr	r1, [pc, #12]	; (8001f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ef2:	5ccb      	ldrb	r3, [r1, r3]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40023800 	.word	0x40023800
 8001f00:	08006c4c 	.word	0x08006c4c

08001f04 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	220f      	movs	r2, #15
 8001f12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f14:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <HAL_RCC_GetClockConfig+0x58>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 0203 	and.w	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f20:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <HAL_RCC_GetClockConfig+0x58>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f2c:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <HAL_RCC_GetClockConfig+0x58>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f38:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <HAL_RCC_GetClockConfig+0x58>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	08db      	lsrs	r3, r3, #3
 8001f3e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_GetClockConfig+0x5c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0201 	and.w	r2, r3, #1
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	601a      	str	r2, [r3, #0]
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40023c00 	.word	0x40023c00

08001f64 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f70:	4b29      	ldr	r3, [pc, #164]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d12c      	bne.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f7c:	4b26      	ldr	r3, [pc, #152]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001f88:	4b24      	ldr	r3, [pc, #144]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e016      	b.n	8001fc2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b20      	ldr	r3, [pc, #128]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6253      	str	r3, [r2, #36]	; 0x24
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001fb4:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb6:	4b18      	ldr	r3, [pc, #96]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fba:	4a17      	ldr	r2, [pc, #92]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001fc8:	d105      	bne.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001fd0:	d101      	bne.n	8001fd6 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001fdc:	4b10      	ldr	r3, [pc, #64]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	f043 0304 	orr.w	r3, r3, #4
 8001fe6:	6013      	str	r3, [r2, #0]
 8001fe8:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 0201 	bic.w	r2, r3, #1
 8001ff0:	490b      	ldr	r1, [pc, #44]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff8:	4b09      	ldr	r3, [pc, #36]	; (8002020 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0301 	and.w	r3, r3, #1
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	371c      	adds	r7, #28
 8002010:	46bd      	mov	sp, r7
 8002012:	bc80      	pop	{r7}
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	40007000 	.word	0x40007000
 8002020:	40023c00 	.word	0x40023c00

08002024 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	f000 80c6 	beq.w	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8002046:	2300      	movs	r3, #0
 8002048:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800204a:	4b64      	ldr	r3, [pc, #400]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10d      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002056:	4b61      	ldr	r3, [pc, #388]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	4a60      	ldr	r2, [pc, #384]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800205c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002060:	6253      	str	r3, [r2, #36]	; 0x24
 8002062:	4b5e      	ldr	r3, [pc, #376]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800206e:	2301      	movs	r3, #1
 8002070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002072:	4b5b      	ldr	r3, [pc, #364]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d118      	bne.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800207e:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	4a57      	ldr	r2, [pc, #348]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208a:	f7fe fe71 	bl	8000d70 <HAL_GetTick>
 800208e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002090:	e008      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002092:	f7fe fe6d 	bl	8000d70 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	2b64      	cmp	r3, #100	; 0x64
 800209e:	d901      	bls.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020a0:	2303      	movs	r3, #3
 80020a2:	e097      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	4b4e      	ldr	r3, [pc, #312]	; (80021e0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d0f0      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80020b0:	4b4a      	ldr	r3, [pc, #296]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80020b8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80020d0:	68fa      	ldr	r2, [r7, #12]
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d00f      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020e2:	d108      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020e4:	4b3d      	ldr	r3, [pc, #244]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020f0:	d101      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e06e      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020f6:	4b39      	ldr	r3, [pc, #228]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020fe:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d041      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	429a      	cmp	r2, r3
 8002112:	d005      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0301 	and.w	r3, r3, #1
 800211c:	2b00      	cmp	r3, #0
 800211e:	d10c      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002128:	68fa      	ldr	r2, [r7, #12]
 800212a:	429a      	cmp	r2, r3
 800212c:	d02d      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0302 	and.w	r3, r3, #2
 8002136:	2b00      	cmp	r3, #0
 8002138:	d027      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800213a:	4b28      	ldr	r3, [pc, #160]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800213c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002142:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002144:	4b27      	ldr	r3, [pc, #156]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002146:	2201      	movs	r2, #1
 8002148:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800214a:	4b26      	ldr	r3, [pc, #152]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002150:	4a22      	ldr	r2, [pc, #136]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800215c:	2b00      	cmp	r3, #0
 800215e:	d014      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002160:	f7fe fe06 	bl	8000d70 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002166:	e00a      	b.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7fe fe02 	bl	8000d70 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	; 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e02a      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0ee      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002196:	d10a      	bne.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002198:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80021a8:	490c      	ldr	r1, [pc, #48]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	600b      	str	r3, [r1, #0]
 80021ae:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021ba:	4908      	ldr	r1, [pc, #32]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021c0:	7dfb      	ldrb	r3, [r7, #23]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d105      	bne.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c6:	4b05      	ldr	r3, [pc, #20]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ca:	4a04      	ldr	r2, [pc, #16]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021d0:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3718      	adds	r7, #24
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40007000 	.word	0x40007000
 80021e4:	424706dc 	.word	0x424706dc

080021e8 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e06d      	b.n	80022d6 <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	7f5b      	ldrb	r3, [r3, #29]
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7fe fb1e 	bl	800084c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2202      	movs	r2, #2
 8002214:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	22ca      	movs	r2, #202	; 0xca
 800221c:	625a      	str	r2, [r3, #36]	; 0x24
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2253      	movs	r2, #83	; 0x53
 8002224:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fc8d 	bl	8002b46 <RTC_EnterInitMode>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d008      	beq.n	8002244 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	22ff      	movs	r2, #255	; 0xff
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2204      	movs	r2, #4
 800223e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e048      	b.n	80022d6 <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6812      	ldr	r2, [r2, #0]
 800224e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002252:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002256:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6899      	ldr	r1, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68d2      	ldr	r2, [r2, #12]
 800227e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6919      	ldr	r1, [r3, #16]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	041a      	lsls	r2, r3, #16
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68da      	ldr	r2, [r3, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022a2:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022b2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	22ff      	movs	r2, #255	; 0xff
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80022d4:	2300      	movs	r3, #0
  }
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022de:	b590      	push	{r4, r7, lr}
 80022e0:	b087      	sub	sp, #28
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	60f8      	str	r0, [r7, #12]
 80022e6:	60b9      	str	r1, [r7, #8]
 80022e8:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	7f1b      	ldrb	r3, [r3, #28]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_RTC_SetTime+0x18>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e0a3      	b.n	800243e <HAL_RTC_SetTime+0x160>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2201      	movs	r2, #1
 80022fa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2202      	movs	r2, #2
 8002300:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d126      	bne.n	8002356 <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	2200      	movs	r2, #0
 800231a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fc3a 	bl	8002b9a <RTC_ByteToBcd2>
 8002326:	4603      	mov	r3, r0
 8002328:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	785b      	ldrb	r3, [r3, #1]
 800232e:	4618      	mov	r0, r3
 8002330:	f000 fc33 	bl	8002b9a <RTC_ByteToBcd2>
 8002334:	4603      	mov	r3, r0
 8002336:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002338:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	789b      	ldrb	r3, [r3, #2]
 800233e:	4618      	mov	r0, r3
 8002340:	f000 fc2b 	bl	8002b9a <RTC_ByteToBcd2>
 8002344:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002346:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	78db      	ldrb	r3, [r3, #3]
 800234e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002350:	4313      	orrs	r3, r2
 8002352:	617b      	str	r3, [r7, #20]
 8002354:	e018      	b.n	8002388 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002360:	2b00      	cmp	r3, #0
 8002362:	d102      	bne.n	800236a <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2200      	movs	r2, #0
 8002368:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	785b      	ldrb	r3, [r3, #1]
 8002374:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002376:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002378:	68ba      	ldr	r2, [r7, #8]
 800237a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800237c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	78db      	ldrb	r3, [r3, #3]
 8002382:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002384:	4313      	orrs	r3, r2
 8002386:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	22ca      	movs	r2, #202	; 0xca
 800238e:	625a      	str	r2, [r3, #36]	; 0x24
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2253      	movs	r2, #83	; 0x53
 8002396:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 fbd4 	bl	8002b46 <RTC_EnterInitMode>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d00b      	beq.n	80023bc <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	22ff      	movs	r2, #255	; 0xff
 80023aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2204      	movs	r2, #4
 80023b0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2200      	movs	r2, #0
 80023b6:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e040      	b.n	800243e <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80023c6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023ca:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023da:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6899      	ldr	r1, [r3, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68da      	ldr	r2, [r3, #12]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002402:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 fb71 	bl	8002aec <HAL_RTC_WaitForSynchro>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00b      	beq.n	8002428 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	22ff      	movs	r2, #255	; 0xff
 8002416:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2204      	movs	r2, #4
 800241c:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e00a      	b.n	800243e <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2201      	movs	r2, #1
 8002434:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800243c:	2300      	movs	r3, #0
  }
}
 800243e:	4618      	mov	r0, r3
 8002440:	371c      	adds	r7, #28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd90      	pop	{r4, r7, pc}

08002446 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	b29a      	uxth	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8002476:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800247a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	0c1b      	lsrs	r3, r3, #16
 8002480:	b2db      	uxtb	r3, r3
 8002482:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	b2db      	uxtb	r3, r3
 8002492:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002496:	b2da      	uxtb	r2, r3
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	0c1b      	lsrs	r3, r3, #16
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	b2da      	uxtb	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d11a      	bne.n	80024f6 <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fb87 	bl	8002bd8 <RTC_Bcd2ToByte>
 80024ca:	4603      	mov	r3, r0
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	785b      	ldrb	r3, [r3, #1]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fb7e 	bl	8002bd8 <RTC_Bcd2ToByte>
 80024dc:	4603      	mov	r3, r0
 80024de:	461a      	mov	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	789b      	ldrb	r3, [r3, #2]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fb75 	bl	8002bd8 <RTC_Bcd2ToByte>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3718      	adds	r7, #24
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	7f1b      	ldrb	r3, [r3, #28]
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <HAL_RTC_SetDate+0x18>
 8002514:	2302      	movs	r3, #2
 8002516:	e08d      	b.n	8002634 <HAL_RTC_SetDate+0x134>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2201      	movs	r2, #1
 800251c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2202      	movs	r2, #2
 8002522:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10e      	bne.n	8002548 <HAL_RTC_SetDate+0x48>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	785b      	ldrb	r3, [r3, #1]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	785b      	ldrb	r3, [r3, #1]
 800253a:	f023 0310 	bic.w	r3, r3, #16
 800253e:	b2db      	uxtb	r3, r3
 8002540:	330a      	adds	r3, #10
 8002542:	b2da      	uxtb	r2, r3
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d11c      	bne.n	8002588 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	78db      	ldrb	r3, [r3, #3]
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fb21 	bl	8002b9a <RTC_ByteToBcd2>
 8002558:	4603      	mov	r3, r0
 800255a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	785b      	ldrb	r3, [r3, #1]
 8002560:	4618      	mov	r0, r3
 8002562:	f000 fb1a 	bl	8002b9a <RTC_ByteToBcd2>
 8002566:	4603      	mov	r3, r0
 8002568:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800256a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	789b      	ldrb	r3, [r3, #2]
 8002570:	4618      	mov	r0, r3
 8002572:	f000 fb12 	bl	8002b9a <RTC_ByteToBcd2>
 8002576:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002578:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002582:	4313      	orrs	r3, r2
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e00e      	b.n	80025a6 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	78db      	ldrb	r3, [r3, #3]
 800258c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	785b      	ldrb	r3, [r3, #1]
 8002592:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002594:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800259a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80025a2:	4313      	orrs	r3, r2
 80025a4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	22ca      	movs	r2, #202	; 0xca
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2253      	movs	r2, #83	; 0x53
 80025b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 fac5 	bl	8002b46 <RTC_EnterInitMode>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	22ff      	movs	r2, #255	; 0xff
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2204      	movs	r2, #4
 80025ce:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2200      	movs	r2, #0
 80025d4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e02c      	b.n	8002634 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68da      	ldr	r2, [r3, #12]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f8:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f000 fa76 	bl	8002aec <HAL_RTC_WaitForSynchro>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	22ff      	movs	r2, #255	; 0xff
 800260c:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2204      	movs	r2, #4
 8002612:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e00a      	b.n	8002634 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2201      	movs	r2, #1
 800262a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002632:	2300      	movs	r3, #0
  }
}
 8002634:	4618      	mov	r0, r3
 8002636:	371c      	adds	r7, #28
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}

0800263c <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b086      	sub	sp, #24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002652:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002656:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	0c1b      	lsrs	r3, r3, #16
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	b2da      	uxtb	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800267a:	b2da      	uxtb	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	0b5b      	lsrs	r3, r3, #13
 8002684:	b2db      	uxtb	r3, r3
 8002686:	f003 0307 	and.w	r3, r3, #7
 800268a:	b2da      	uxtb	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d11a      	bne.n	80026cc <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	78db      	ldrb	r3, [r3, #3]
 800269a:	4618      	mov	r0, r3
 800269c:	f000 fa9c 	bl	8002bd8 <RTC_Bcd2ToByte>
 80026a0:	4603      	mov	r3, r0
 80026a2:	461a      	mov	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	785b      	ldrb	r3, [r3, #1]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fa93 	bl	8002bd8 <RTC_Bcd2ToByte>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	789b      	ldrb	r3, [r3, #2]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fa8a 	bl	8002bd8 <RTC_Bcd2ToByte>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3718      	adds	r7, #24
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b089      	sub	sp, #36	; 0x24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 80026e8:	2300      	movs	r3, #0
 80026ea:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 80026ec:	2300      	movs	r3, #0
 80026ee:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	7f1b      	ldrb	r3, [r3, #28]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d101      	bne.n	80026fc <HAL_RTC_SetAlarm_IT+0x24>
 80026f8:	2302      	movs	r3, #2
 80026fa:	e11f      	b.n	800293c <HAL_RTC_SetAlarm_IT+0x264>
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2201      	movs	r2, #1
 8002700:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2202      	movs	r2, #2
 8002706:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d137      	bne.n	800277e <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002718:	2b00      	cmp	r3, #0
 800271a:	d102      	bne.n	8002722 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2200      	movs	r2, #0
 8002720:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f000 fa37 	bl	8002b9a <RTC_ByteToBcd2>
 800272c:	4603      	mov	r3, r0
 800272e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	785b      	ldrb	r3, [r3, #1]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 fa30 	bl	8002b9a <RTC_ByteToBcd2>
 800273a:	4603      	mov	r3, r0
 800273c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800273e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	789b      	ldrb	r3, [r3, #2]
 8002744:	4618      	mov	r0, r3
 8002746:	f000 fa28 	bl	8002b9a <RTC_ByteToBcd2>
 800274a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800274c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	78db      	ldrb	r3, [r3, #3]
 8002754:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002756:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fa1a 	bl	8002b9a <RTC_ByteToBcd2>
 8002766:	4603      	mov	r3, r0
 8002768:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800276a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002772:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002778:	4313      	orrs	r3, r2
 800277a:	61fb      	str	r3, [r7, #28]
 800277c:	e023      	b.n	80027c6 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d102      	bne.n	8002792 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	2200      	movs	r2, #0
 8002790:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	785b      	ldrb	r3, [r3, #1]
 800279c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800279e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80027a4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	78db      	ldrb	r3, [r3, #3]
 80027aa:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80027ac:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027b4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027b6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	22ca      	movs	r2, #202	; 0xca
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2253      	movs	r2, #83	; 0x53
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027ea:	d148      	bne.n	800287e <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689a      	ldr	r2, [r3, #8]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027fa:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800280c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800280e:	f7fe faaf 	bl	8000d70 <HAL_GetTick>
 8002812:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002814:	e013      	b.n	800283e <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002816:	f7fe faab 	bl	8000d70 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002824:	d90b      	bls.n	800283e <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	22ff      	movs	r2, #255	; 0xff
 800282c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2203      	movs	r2, #3
 8002832:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e07e      	b.n	800293c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0e4      	beq.n	8002816 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	69fa      	ldr	r2, [r7, #28]
 8002852:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800286a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	e047      	b.n	800290e <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800288c:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800289e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80028a0:	f7fe fa66 	bl	8000d70 <HAL_GetTick>
 80028a4:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80028a6:	e013      	b.n	80028d0 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80028a8:	f7fe fa62 	bl	8000d70 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b6:	d90b      	bls.n	80028d0 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	22ff      	movs	r2, #255	; 0xff
 80028be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2203      	movs	r2, #3
 80028c4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e035      	b.n	800293c <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0e4      	beq.n	80028a8 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69fa      	ldr	r2, [r7, #28]
 80028e4:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689a      	ldr	r2, [r3, #8]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028fc:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	689a      	ldr	r2, [r3, #8]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800290c:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800290e:	4b0d      	ldr	r3, [pc, #52]	; (8002944 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a0c      	ldr	r2, [pc, #48]	; (8002944 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002914:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002918:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_RTC_SetAlarm_IT+0x26c>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	4a09      	ldr	r2, [pc, #36]	; (8002944 <HAL_RTC_SetAlarm_IT+0x26c>)
 8002920:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002924:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	22ff      	movs	r2, #255	; 0xff
 800292c:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2201      	movs	r2, #1
 8002932:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3724      	adds	r7, #36	; 0x24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd90      	pop	{r4, r7, pc}
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	7f1b      	ldrb	r3, [r3, #28]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d101      	bne.n	800295e <HAL_RTC_DeactivateAlarm+0x16>
 800295a:	2302      	movs	r3, #2
 800295c:	e07b      	b.n	8002a56 <HAL_RTC_DeactivateAlarm+0x10e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2201      	movs	r2, #1
 8002962:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2202      	movs	r2, #2
 8002968:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	22ca      	movs	r2, #202	; 0xca
 8002970:	625a      	str	r2, [r3, #36]	; 0x24
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2253      	movs	r2, #83	; 0x53
 8002978:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002980:	d12f      	bne.n	80029e2 <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002990:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029a0:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80029a2:	f7fe f9e5 	bl	8000d70 <HAL_GetTick>
 80029a6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80029a8:	e013      	b.n	80029d2 <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029aa:	f7fe f9e1 	bl	8000d70 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b8:	d90b      	bls.n	80029d2 <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	22ff      	movs	r2, #255	; 0xff
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2203      	movs	r2, #3
 80029c6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e041      	b.n	8002a56 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0e4      	beq.n	80029aa <HAL_RTC_DeactivateAlarm+0x62>
 80029e0:	e02e      	b.n	8002a40 <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029f0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a00:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002a02:	f7fe f9b5 	bl	8000d70 <HAL_GetTick>
 8002a06:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002a08:	e013      	b.n	8002a32 <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a0a:	f7fe f9b1 	bl	8000d70 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a18:	d90b      	bls.n	8002a32 <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	22ff      	movs	r2, #255	; 0xff
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2203      	movs	r2, #3
 8002a26:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e011      	b.n	8002a56 <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0e4      	beq.n	8002a0a <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
	...

08002a60 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d012      	beq.n	8002a9c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f003 fc45 	bl	8006314 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	b2da      	uxtb	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002a9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d012      	beq.n	8002ad0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f8d8 	bl	8002c6e <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002ace:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002ad2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ad6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	775a      	strb	r2, [r3, #29]
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40010400 	.word	0x40010400

08002aec <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 0320 	and.w	r3, r3, #32
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d11c      	bne.n	8002b3c <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b10:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b12:	f7fe f92d 	bl	8000d70 <HAL_GetTick>
 8002b16:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b18:	e009      	b.n	8002b2e <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b1a:	f7fe f929 	bl	8000d70 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b28:	d901      	bls.n	8002b2e <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e007      	b.n	8002b3e <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ee      	beq.n	8002b1a <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b46:	b580      	push	{r7, lr}
 8002b48:	b084      	sub	sp, #16
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d119      	bne.n	8002b90 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f04f 32ff 	mov.w	r2, #4294967295
 8002b64:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b66:	f7fe f903 	bl	8000d70 <HAL_GetTick>
 8002b6a:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b6c:	e009      	b.n	8002b82 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b6e:	f7fe f8ff 	bl	8000d70 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b7c:	d901      	bls.n	8002b82 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e007      	b.n	8002b92 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0ee      	beq.n	8002b6e <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b085      	sub	sp, #20
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002ba8:	79fb      	ldrb	r3, [r7, #7]
 8002baa:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8002bac:	e005      	b.n	8002bba <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002bb4:	7afb      	ldrb	r3, [r7, #11]
 8002bb6:	3b0a      	subs	r3, #10
 8002bb8:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8002bba:	7afb      	ldrb	r3, [r7, #11]
 8002bbc:	2b09      	cmp	r3, #9
 8002bbe:	d8f6      	bhi.n	8002bae <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	7afb      	ldrb	r3, [r7, #11]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	b2db      	uxtb	r3, r3
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bc80      	pop	{r7}
 8002bd6:	4770      	bx	lr

08002bd8 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b085      	sub	sp, #20
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4603      	mov	r3, r0
 8002be0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	091b      	lsrs	r3, r3, #4
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	79fb      	ldrb	r3, [r7, #7]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4413      	add	r3, r2
 8002c02:	b2db      	uxtb	r3, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	7f1b      	ldrb	r3, [r3, #28]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_RTCEx_EnableBypassShadow+0x14>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e020      	b.n	8002c64 <HAL_RTCEx_EnableBypassShadow+0x56>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2202      	movs	r2, #2
 8002c2c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	22ca      	movs	r2, #202	; 0xca
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	2253      	movs	r2, #83	; 0x53
 8002c3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f042 0220 	orr.w	r2, r2, #32
 8002c4c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	22ff      	movs	r2, #255	; 0xff
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bc80      	pop	{r7}
 8002c6c:	4770      	bx	lr

08002c6e <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e07b      	b.n	8002d8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d108      	bne.n	8002cac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca2:	d009      	beq.n	8002cb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	61da      	str	r2, [r3, #28]
 8002caa:	e005      	b.n	8002cb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7fd fe0c 	bl	80008f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d00:	431a      	orrs	r2, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	431a      	orrs	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	ea42 0103 	orr.w	r1, r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	f003 0104 	and.w	r1, r3, #4
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	f003 0210 	and.w	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	430a      	orrs	r2, r1
 8002d68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69da      	ldr	r2, [r3, #28]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d88:	2300      	movs	r3, #0
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b082      	sub	sp, #8
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e031      	b.n	8002e08 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d106      	bne.n	8002dbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f829 	bl	8002e10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	3304      	adds	r3, #4
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4610      	mov	r0, r2
 8002dd2:	f000 f979 	bl	80030c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e18:	bf00      	nop
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bc80      	pop	{r7}
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d001      	beq.n	8002e3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e03a      	b.n	8002eb2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2202      	movs	r2, #2
 8002e40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0201 	orr.w	r2, r2, #1
 8002e52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e5c:	d00e      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x58>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_TIM_Base_Start_IT+0x98>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x58>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a14      	ldr	r2, [pc, #80]	; (8002ec0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_TIM_Base_Start_IT+0x58>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a13      	ldr	r2, [pc, #76]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d111      	bne.n	8002ea0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2b06      	cmp	r3, #6
 8002e8c:	d010      	beq.n	8002eb0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 0201 	orr.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9e:	e007      	b.n	8002eb0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3714      	adds	r7, #20
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40000800 	.word	0x40000800
 8002ec4:	40010800 	.word	0x40010800

08002ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0202 	mvn.w	r2, #2
 8002ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8c1 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8b4 	bl	8003080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f8c3 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0204 	mvn.w	r2, #4
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f897 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f88a 	bl	8003080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f899 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0208 	mvn.w	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f86d 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f860 	bl	8003080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f86f 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0210 	mvn.w	r2, #16
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f843 	bl	8003092 <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f836 	bl	8003080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f845 	bl	80030a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0201 	mvn.w	r2, #1
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fd fb5e 	bl	8000708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003056:	2b40      	cmp	r3, #64	; 0x40
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003064:	2b40      	cmp	r3, #64	; 0x40
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f81f 	bl	80030b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	bc80      	pop	{r7}
 8003090:	4770      	bx	lr

08003092 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800309a:	bf00      	nop
 800309c:	370c      	adds	r7, #12
 800309e:	46bd      	mov	sp, r7
 80030a0:	bc80      	pop	{r7}
 80030a2:	4770      	bx	lr

080030a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b083      	sub	sp, #12
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc80      	pop	{r7}
 80030c6:	4770      	bx	lr

080030c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030de:	d00f      	beq.n	8003100 <TIM_Base_SetConfig+0x38>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2b      	ldr	r2, [pc, #172]	; (8003190 <TIM_Base_SetConfig+0xc8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00b      	beq.n	8003100 <TIM_Base_SetConfig+0x38>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a2a      	ldr	r2, [pc, #168]	; (8003194 <TIM_Base_SetConfig+0xcc>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d007      	beq.n	8003100 <TIM_Base_SetConfig+0x38>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a29      	ldr	r2, [pc, #164]	; (8003198 <TIM_Base_SetConfig+0xd0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d003      	beq.n	8003100 <TIM_Base_SetConfig+0x38>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a28      	ldr	r2, [pc, #160]	; (800319c <TIM_Base_SetConfig+0xd4>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d108      	bne.n	8003112 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	4313      	orrs	r3, r2
 8003110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003118:	d017      	beq.n	800314a <TIM_Base_SetConfig+0x82>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1c      	ldr	r2, [pc, #112]	; (8003190 <TIM_Base_SetConfig+0xc8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <TIM_Base_SetConfig+0x82>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <TIM_Base_SetConfig+0xcc>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00f      	beq.n	800314a <TIM_Base_SetConfig+0x82>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a1a      	ldr	r2, [pc, #104]	; (8003198 <TIM_Base_SetConfig+0xd0>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d00b      	beq.n	800314a <TIM_Base_SetConfig+0x82>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a19      	ldr	r2, [pc, #100]	; (800319c <TIM_Base_SetConfig+0xd4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d007      	beq.n	800314a <TIM_Base_SetConfig+0x82>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a18      	ldr	r2, [pc, #96]	; (80031a0 <TIM_Base_SetConfig+0xd8>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d003      	beq.n	800314a <TIM_Base_SetConfig+0x82>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a17      	ldr	r2, [pc, #92]	; (80031a4 <TIM_Base_SetConfig+0xdc>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d108      	bne.n	800315c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003150:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	4313      	orrs	r3, r2
 800315a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	68fa      	ldr	r2, [r7, #12]
 800316e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	615a      	str	r2, [r3, #20]
}
 8003186:	bf00      	nop
 8003188:	3714      	adds	r7, #20
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr
 8003190:	40000400 	.word	0x40000400
 8003194:	40000800 	.word	0x40000800
 8003198:	40000c00 	.word	0x40000c00
 800319c:	40010800 	.word	0x40010800
 80031a0:	40010c00 	.word	0x40010c00
 80031a4:	40011000 	.word	0x40011000

080031a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e03f      	b.n	800323a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f7fd fd32 	bl	8000c38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2224      	movs	r2, #36	; 0x24
 80031d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68da      	ldr	r2, [r3, #12]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 fa63 	bl	80036b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003200:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003210:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003220:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
	...

08003244 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695b      	ldr	r3, [r3, #20]
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003264:	2300      	movs	r3, #0
 8003266:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003268:	2300      	movs	r3, #0
 800326a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10d      	bne.n	8003296 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	f003 0320 	and.w	r3, r3, #32
 8003280:	2b00      	cmp	r3, #0
 8003282:	d008      	beq.n	8003296 <HAL_UART_IRQHandler+0x52>
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0320 	and.w	r3, r3, #32
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f991 	bl	80035b6 <UART_Receive_IT>
      return;
 8003294:	e0d0      	b.n	8003438 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	2b00      	cmp	r3, #0
 800329a:	f000 80b0 	beq.w	80033fe <HAL_UART_IRQHandler+0x1ba>
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_UART_IRQHandler+0x70>
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 80a5 	beq.w	80033fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <HAL_UART_IRQHandler+0x90>
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032cc:	f043 0201 	orr.w	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	f003 0304 	and.w	r3, r3, #4
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00a      	beq.n	80032f4 <HAL_UART_IRQHandler+0xb0>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d005      	beq.n	80032f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ec:	f043 0202 	orr.w	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f003 0302 	and.w	r3, r3, #2
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00a      	beq.n	8003314 <HAL_UART_IRQHandler+0xd0>
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f003 0301 	and.w	r3, r3, #1
 8003304:	2b00      	cmp	r3, #0
 8003306:	d005      	beq.n	8003314 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800330c:	f043 0204 	orr.w	r2, r3, #4
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00f      	beq.n	800333e <HAL_UART_IRQHandler+0xfa>
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f003 0320 	and.w	r3, r3, #32
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <HAL_UART_IRQHandler+0xee>
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d005      	beq.n	800333e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	f043 0208 	orr.w	r2, r3, #8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d077      	beq.n	8003436 <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b00      	cmp	r3, #0
 800334e:	d007      	beq.n	8003360 <HAL_UART_IRQHandler+0x11c>
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	f003 0320 	and.w	r3, r3, #32
 8003356:	2b00      	cmp	r3, #0
 8003358:	d002      	beq.n	8003360 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f92b 	bl	80035b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336a:	2b40      	cmp	r3, #64	; 0x40
 800336c:	bf0c      	ite	eq
 800336e:	2301      	moveq	r3, #1
 8003370:	2300      	movne	r3, #0
 8003372:	b2db      	uxtb	r3, r3
 8003374:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800337a:	f003 0308 	and.w	r3, r3, #8
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <HAL_UART_IRQHandler+0x144>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d031      	beq.n	80033ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f876 	bl	800347a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	695b      	ldr	r3, [r3, #20]
 8003394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d123      	bne.n	80033e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695a      	ldr	r2, [r3, #20]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	4a21      	ldr	r2, [pc, #132]	; (8003440 <HAL_UART_IRQHandler+0x1fc>)
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c0:	4618      	mov	r0, r3
 80033c2:	f7fd fe0a 	bl	8000fda <HAL_DMA_Abort_IT>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d016      	beq.n	80033fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033d6:	4610      	mov	r0, r2
 80033d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033da:	e00e      	b.n	80033fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f843 	bl	8003468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e2:	e00a      	b.n	80033fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f83f 	bl	8003468 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ea:	e006      	b.n	80033fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f83b 	bl	8003468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033f8:	e01d      	b.n	8003436 <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fa:	bf00      	nop
    return;
 80033fc:	e01b      	b.n	8003436 <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d008      	beq.n	800341a <HAL_UART_IRQHandler+0x1d6>
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 f862 	bl	80034dc <UART_Transmit_IT>
    return;
 8003418:	e00e      	b.n	8003438 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003420:	2b00      	cmp	r3, #0
 8003422:	d009      	beq.n	8003438 <HAL_UART_IRQHandler+0x1f4>
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342a:	2b00      	cmp	r3, #0
 800342c:	d004      	beq.n	8003438 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8a9 	bl	8003586 <UART_EndTransmit_IT>
    return;
 8003434:	e000      	b.n	8003438 <HAL_UART_IRQHandler+0x1f4>
    return;
 8003436:	bf00      	nop
  }
}
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	080034b5 	.word	0x080034b5

08003444 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800347a:	b480      	push	{r7}
 800347c:	b083      	sub	sp, #12
 800347e:	af00      	add	r7, sp, #0
 8003480:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003490:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695a      	ldr	r2, [r3, #20]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0201 	bic.w	r2, r2, #1
 80034a0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2220      	movs	r2, #32
 80034a6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc80      	pop	{r7}
 80034b2:	4770      	bx	lr

080034b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f7ff ffca 	bl	8003468 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034d4:	bf00      	nop
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b21      	cmp	r3, #33	; 0x21
 80034ee:	d144      	bne.n	800357a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f8:	d11a      	bne.n	8003530 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800350e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d105      	bne.n	8003524 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	1c9a      	adds	r2, r3, #2
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	621a      	str	r2, [r3, #32]
 8003522:	e00e      	b.n	8003542 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	621a      	str	r2, [r3, #32]
 800352e:	e008      	b.n	8003542 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	1c59      	adds	r1, r3, #1
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6211      	str	r1, [r2, #32]
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	4619      	mov	r1, r3
 8003550:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10f      	bne.n	8003576 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003564:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68da      	ldr	r2, [r3, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003574:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	bc80      	pop	{r7}
 8003584:	4770      	bx	lr

08003586 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68da      	ldr	r2, [r3, #12]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800359c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f7ff ff4c 	bl	8003444 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b084      	sub	sp, #16
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b22      	cmp	r3, #34	; 0x22
 80035c8:	d171      	bne.n	80036ae <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035d2:	d123      	bne.n	800361c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10e      	bne.n	8003600 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f8:	1c9a      	adds	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	629a      	str	r2, [r3, #40]	; 0x28
 80035fe:	e029      	b.n	8003654 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	b29b      	uxth	r3, r3
 8003608:	b2db      	uxtb	r3, r3
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	629a      	str	r2, [r3, #40]	; 0x28
 800361a:	e01b      	b.n	8003654 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10a      	bne.n	800363a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6858      	ldr	r0, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362e:	1c59      	adds	r1, r3, #1
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6291      	str	r1, [r2, #40]	; 0x28
 8003634:	b2c2      	uxtb	r2, r0
 8003636:	701a      	strb	r2, [r3, #0]
 8003638:	e00c      	b.n	8003654 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	1c58      	adds	r0, r3, #1
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6288      	str	r0, [r1, #40]	; 0x28
 800364c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003650:	b2d2      	uxtb	r2, r2
 8003652:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003658:	b29b      	uxth	r3, r3
 800365a:	3b01      	subs	r3, #1
 800365c:	b29b      	uxth	r3, r3
 800365e:	687a      	ldr	r2, [r7, #4]
 8003660:	4619      	mov	r1, r3
 8003662:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003664:	2b00      	cmp	r3, #0
 8003666:	d120      	bne.n	80036aa <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68da      	ldr	r2, [r3, #12]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0220 	bic.w	r2, r2, #32
 8003676:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68da      	ldr	r2, [r3, #12]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0201 	bic.w	r2, r2, #1
 8003696:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f7ff fed8 	bl	8003456 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e002      	b.n	80036b0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	431a      	orrs	r2, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036f8:	f023 030c 	bic.w	r3, r3, #12
 80036fc:	687a      	ldr	r2, [r7, #4]
 80036fe:	6812      	ldr	r2, [r2, #0]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	430b      	orrs	r3, r1
 8003704:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	699a      	ldr	r2, [r3, #24]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	430a      	orrs	r2, r1
 800371a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a55      	ldr	r2, [pc, #340]	; (8003878 <UART_SetConfig+0x1c0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d103      	bne.n	800372e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003726:	f7fe fbd9 	bl	8001edc <HAL_RCC_GetPCLK2Freq>
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	e002      	b.n	8003734 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800372e:	f7fe fbc1 	bl	8001eb4 <HAL_RCC_GetPCLK1Freq>
 8003732:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800373c:	d14c      	bne.n	80037d8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800373e:	68fa      	ldr	r2, [r7, #12]
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009a      	lsls	r2, r3, #2
 8003748:	441a      	add	r2, r3
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	4a49      	ldr	r2, [pc, #292]	; (800387c <UART_SetConfig+0x1c4>)
 8003756:	fba2 2303 	umull	r2, r3, r2, r3
 800375a:	095b      	lsrs	r3, r3, #5
 800375c:	0119      	lsls	r1, r3, #4
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	4613      	mov	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	009a      	lsls	r2, r3, #2
 8003768:	441a      	add	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fbb2 f2f3 	udiv	r2, r2, r3
 8003774:	4b41      	ldr	r3, [pc, #260]	; (800387c <UART_SetConfig+0x1c4>)
 8003776:	fba3 0302 	umull	r0, r3, r3, r2
 800377a:	095b      	lsrs	r3, r3, #5
 800377c:	2064      	movs	r0, #100	; 0x64
 800377e:	fb00 f303 	mul.w	r3, r0, r3
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	3332      	adds	r3, #50	; 0x32
 8003788:	4a3c      	ldr	r2, [pc, #240]	; (800387c <UART_SetConfig+0x1c4>)
 800378a:	fba2 2303 	umull	r2, r3, r2, r3
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003796:	4419      	add	r1, r3
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	009a      	lsls	r2, r3, #2
 80037a2:	441a      	add	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80037ae:	4b33      	ldr	r3, [pc, #204]	; (800387c <UART_SetConfig+0x1c4>)
 80037b0:	fba3 0302 	umull	r0, r3, r3, r2
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	2064      	movs	r0, #100	; 0x64
 80037b8:	fb00 f303 	mul.w	r3, r0, r3
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	3332      	adds	r3, #50	; 0x32
 80037c2:	4a2e      	ldr	r2, [pc, #184]	; (800387c <UART_SetConfig+0x1c4>)
 80037c4:	fba2 2303 	umull	r2, r3, r2, r3
 80037c8:	095b      	lsrs	r3, r3, #5
 80037ca:	f003 0207 	and.w	r2, r3, #7
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	440a      	add	r2, r1
 80037d4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037d6:	e04a      	b.n	800386e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009a      	lsls	r2, r3, #2
 80037e2:	441a      	add	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ee:	4a23      	ldr	r2, [pc, #140]	; (800387c <UART_SetConfig+0x1c4>)
 80037f0:	fba2 2303 	umull	r2, r3, r2, r3
 80037f4:	095b      	lsrs	r3, r3, #5
 80037f6:	0119      	lsls	r1, r3, #4
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	009a      	lsls	r2, r3, #2
 8003802:	441a      	add	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	fbb2 f2f3 	udiv	r2, r2, r3
 800380e:	4b1b      	ldr	r3, [pc, #108]	; (800387c <UART_SetConfig+0x1c4>)
 8003810:	fba3 0302 	umull	r0, r3, r3, r2
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	2064      	movs	r0, #100	; 0x64
 8003818:	fb00 f303 	mul.w	r3, r0, r3
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	3332      	adds	r3, #50	; 0x32
 8003822:	4a16      	ldr	r2, [pc, #88]	; (800387c <UART_SetConfig+0x1c4>)
 8003824:	fba2 2303 	umull	r2, r3, r2, r3
 8003828:	095b      	lsrs	r3, r3, #5
 800382a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382e:	4419      	add	r1, r3
 8003830:	68fa      	ldr	r2, [r7, #12]
 8003832:	4613      	mov	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	009a      	lsls	r2, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	fbb2 f2f3 	udiv	r2, r2, r3
 8003846:	4b0d      	ldr	r3, [pc, #52]	; (800387c <UART_SetConfig+0x1c4>)
 8003848:	fba3 0302 	umull	r0, r3, r3, r2
 800384c:	095b      	lsrs	r3, r3, #5
 800384e:	2064      	movs	r0, #100	; 0x64
 8003850:	fb00 f303 	mul.w	r3, r0, r3
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	3332      	adds	r3, #50	; 0x32
 800385a:	4a08      	ldr	r2, [pc, #32]	; (800387c <UART_SetConfig+0x1c4>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	095b      	lsrs	r3, r3, #5
 8003862:	f003 020f 	and.w	r2, r3, #15
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	440a      	add	r2, r1
 800386c:	609a      	str	r2, [r3, #8]
}
 800386e:	bf00      	nop
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40013800 	.word	0x40013800
 800387c:	51eb851f 	.word	0x51eb851f

08003880 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  // my
    SX1276.Reset.port = SX1276_RST_GPIO_Port;
 8003888:	4b2f      	ldr	r3, [pc, #188]	; (8003948 <SX1276Init+0xc8>)
 800388a:	4a30      	ldr	r2, [pc, #192]	; (800394c <SX1276Init+0xcc>)
 800388c:	601a      	str	r2, [r3, #0]
    SX1276.Reset.pin = SX1276_RST_Pin;
 800388e:	4b2e      	ldr	r3, [pc, #184]	; (8003948 <SX1276Init+0xc8>)
 8003890:	2201      	movs	r2, #1
 8003892:	809a      	strh	r2, [r3, #4]

    SX1276.Spi.Nss.port = SPI2_NSS_GPIO_Port;
 8003894:	4b2c      	ldr	r3, [pc, #176]	; (8003948 <SX1276Init+0xc8>)
 8003896:	4a2e      	ldr	r2, [pc, #184]	; (8003950 <SX1276Init+0xd0>)
 8003898:	63da      	str	r2, [r3, #60]	; 0x3c
    SX1276.Spi.Nss.pin  = SPI2_NSS_Pin;
 800389a:	4b2b      	ldr	r3, [pc, #172]	; (8003948 <SX1276Init+0xc8>)
 800389c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    SX1276.Spi.SpiId = SPI_2;
 80038a4:	4b28      	ldr	r3, [pc, #160]	; (8003948 <SX1276Init+0xc8>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    uint8_t i;

    RadioEvents = events;
 80038ac:	4a29      	ldr	r2, [pc, #164]	; (8003954 <SX1276Init+0xd4>)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80038b2:	4929      	ldr	r1, [pc, #164]	; (8003958 <SX1276Init+0xd8>)
 80038b4:	4829      	ldr	r0, [pc, #164]	; (800395c <SX1276Init+0xdc>)
 80038b6:	f002 ff15 	bl	80066e4 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80038ba:	4927      	ldr	r1, [pc, #156]	; (8003958 <SX1276Init+0xd8>)
 80038bc:	4828      	ldr	r0, [pc, #160]	; (8003960 <SX1276Init+0xe0>)
 80038be:	f002 ff11 	bl	80066e4 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80038c2:	4925      	ldr	r1, [pc, #148]	; (8003958 <SX1276Init+0xd8>)
 80038c4:	4827      	ldr	r0, [pc, #156]	; (8003964 <SX1276Init+0xe4>)
 80038c6:	f002 ff0d 	bl	80066e4 <TimerInit>

    SX1276Reset( );
 80038ca:	f002 fd97 	bl	80063fc <SX1276Reset>

    RxChainCalibration( );
 80038ce:	f000 f8fb 	bl	8003ac8 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80038d2:	2000      	movs	r0, #0
 80038d4:	f001 f8b4 	bl	8004a40 <SX1276SetOpMode>

    SX1276IoInit();
 80038d8:	f002 fd26 	bl	8006328 <SX1276IoInit>

    SX1276IoIrqInit( DioIrq );
 80038dc:	4822      	ldr	r0, [pc, #136]	; (8003968 <SX1276Init+0xe8>)
 80038de:	f002 fd57 	bl	8006390 <SX1276IoIrqInit>


    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80038e2:	2300      	movs	r3, #0
 80038e4:	73fb      	strb	r3, [r7, #15]
 80038e6:	e020      	b.n	800392a <SX1276Init+0xaa>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80038e8:	7bfa      	ldrb	r2, [r7, #15]
 80038ea:	4920      	ldr	r1, [pc, #128]	; (800396c <SX1276Init+0xec>)
 80038ec:	4613      	mov	r3, r2
 80038ee:	005b      	lsls	r3, r3, #1
 80038f0:	4413      	add	r3, r2
 80038f2:	440b      	add	r3, r1
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f8ce 	bl	8004a98 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80038fc:	7bfa      	ldrb	r2, [r7, #15]
 80038fe:	491b      	ldr	r1, [pc, #108]	; (800396c <SX1276Init+0xec>)
 8003900:	4613      	mov	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	4413      	add	r3, r2
 8003906:	440b      	add	r3, r1
 8003908:	3301      	adds	r3, #1
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	7bfa      	ldrb	r2, [r7, #15]
 8003910:	4916      	ldr	r1, [pc, #88]	; (800396c <SX1276Init+0xec>)
 8003912:	4613      	mov	r3, r2
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	4413      	add	r3, r2
 8003918:	440b      	add	r3, r1
 800391a:	3302      	adds	r3, #2
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	4619      	mov	r1, r3
 8003920:	f001 f912 	bl	8004b48 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003924:	7bfb      	ldrb	r3, [r7, #15]
 8003926:	3301      	adds	r3, #1
 8003928:	73fb      	strb	r3, [r7, #15]
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b0f      	cmp	r3, #15
 800392e:	d9db      	bls.n	80038e8 <SX1276Init+0x68>
    }

    SX1276SetModem( MODEM_FSK );
 8003930:	2000      	movs	r0, #0
 8003932:	f001 f8b1 	bl	8004a98 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8003936:	4b04      	ldr	r3, [pc, #16]	; (8003948 <SX1276Init+0xc8>)
 8003938:	2200      	movs	r2, #0
 800393a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800393e:	bf00      	nop
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000300 	.word	0x20000300
 800394c:	40020800 	.word	0x40020800
 8003950:	40020400 	.word	0x40020400
 8003954:	20000060 	.word	0x20000060
 8003958:	08004fd1 	.word	0x08004fd1
 800395c:	200002d0 	.word	0x200002d0
 8003960:	200003a8 	.word	0x200003a8
 8003964:	200002e8 	.word	0x200002e8
 8003968:	2000000c 	.word	0x2000000c
 800396c:	08006c54 	.word	0x08006c54

08003970 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8003974:	4b03      	ldr	r3, [pc, #12]	; (8003984 <SX1276GetStatus+0x14>)
 8003976:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	bc80      	pop	{r7}
 8003980:	4770      	bx	lr
 8003982:	bf00      	nop
 8003984:	20000300 	.word	0x20000300

08003988 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f001 f9f5 	bl	8004d80 <SX1276ConvertFreqInHzToPllStep>
 8003996:	60f8      	str	r0, [r7, #12]

    SX1276.Settings.Channel = freq;
 8003998:	4a0d      	ldr	r2, [pc, #52]	; (80039d0 <SX1276SetChannel+0x48>)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6493      	str	r3, [r2, #72]	; 0x48

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	0c1b      	lsrs	r3, r3, #16
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	4619      	mov	r1, r3
 80039a6:	2006      	movs	r0, #6
 80039a8:	f001 f8ce 	bl	8004b48 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	0a1b      	lsrs	r3, r3, #8
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	4619      	mov	r1, r3
 80039b4:	2007      	movs	r0, #7
 80039b6:	f001 f8c7 	bl	8004b48 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	4619      	mov	r1, r3
 80039c0:	2008      	movs	r0, #8
 80039c2:	f001 f8c1 	bl	8004b48 <SX1276Write>
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	20000300 	.word	0x20000300

080039d4 <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	60b9      	str	r1, [r7, #8]
 80039de:	603b      	str	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80039e4:	2301      	movs	r3, #1
 80039e6:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80039e8:	2300      	movs	r3, #0
 80039ea:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 80039f0:	f000 fd34 	bl	800445c <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 80039f4:	2000      	movs	r0, #0
 80039f6:	f001 f84f 	bl	8004a98 <SX1276SetModem>

    SX1276SetChannel( freq );
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f7ff ffc4 	bl	8003988 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	f001 f9e3 	bl	8004dcc <GetFskBandwidthRegValue>
 8003a06:	4603      	mov	r3, r0
 8003a08:	4619      	mov	r1, r3
 8003a0a:	2012      	movs	r0, #18
 8003a0c:	f001 f89c 	bl	8004b48 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8003a10:	68b8      	ldr	r0, [r7, #8]
 8003a12:	f001 f9db 	bl	8004dcc <GetFskBandwidthRegValue>
 8003a16:	4603      	mov	r3, r0
 8003a18:	4619      	mov	r1, r3
 8003a1a:	2013      	movs	r0, #19
 8003a1c:	f001 f894 	bl	8004b48 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003a20:	2005      	movs	r0, #5
 8003a22:	f001 f80d 	bl	8004a40 <SX1276SetOpMode>

    DelayMs( 1 );
 8003a26:	2001      	movs	r0, #1
 8003a28:	f001 fff6 	bl	8005a18 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8003a2c:	f003 f851 	bl	8006ad2 <TimerGetCurrentTime>
 8003a30:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003a32:	e00d      	b.n	8003a50 <SX1276IsChannelFree+0x7c>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 8003a34:	2000      	movs	r0, #0
 8003a36:	f000 ffc5 	bl	80049c4 <SX1276ReadRssi>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8003a3e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003a42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a46:	429a      	cmp	r2, r3
 8003a48:	dd02      	ble.n	8003a50 <SX1276IsChannelFree+0x7c>
        {
            status = false;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]
            break;
 8003a4e:	e006      	b.n	8003a5e <SX1276IsChannelFree+0x8a>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003a50:	6938      	ldr	r0, [r7, #16]
 8003a52:	f003 f84c 	bl	8006aee <TimerGetElapsedTime>
 8003a56:	4602      	mov	r2, r0
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d8ea      	bhi.n	8003a34 <SX1276IsChannelFree+0x60>
        }
    }
    SX1276SetSleep( );
 8003a5e:	f000 fcfd 	bl	800445c <SX1276SetSleep>
    return status;
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3718      	adds	r7, #24
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <SX1276Random>:

uint32_t SX1276Random( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8003a72:	2300      	movs	r3, #0
 8003a74:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8003a76:	2001      	movs	r0, #1
 8003a78:	f001 f80e 	bl	8004a98 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003a7c:	21ff      	movs	r1, #255	; 0xff
 8003a7e:	2011      	movs	r0, #17
 8003a80:	f001 f862 	bl	8004b48 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003a84:	2005      	movs	r0, #5
 8003a86:	f000 ffdb 	bl	8004a40 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	71fb      	strb	r3, [r7, #7]
 8003a8e:	e011      	b.n	8003ab4 <SX1276Random+0x48>
    {
        DelayMs( 1 );
 8003a90:	2001      	movs	r0, #1
 8003a92:	f001 ffc1 	bl	8005a18 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8003a96:	202c      	movs	r0, #44	; 0x2c
 8003a98:	f001 f866 	bl	8004b68 <SX1276Read>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f003 0201 	and.w	r2, r3, #1
 8003aa2:	79fb      	ldrb	r3, [r7, #7]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	683a      	ldr	r2, [r7, #0]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	71fb      	strb	r3, [r7, #7]
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	2b1f      	cmp	r3, #31
 8003ab8:	d9ea      	bls.n	8003a90 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 8003aba:	f000 fccf 	bl	800445c <SX1276SetSleep>

    return rnd;
 8003abe:	683b      	ldr	r3, [r7, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3708      	adds	r7, #8
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8003ac8:	b590      	push	{r4, r7, lr}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8003ace:	2009      	movs	r0, #9
 8003ad0:	f001 f84a 	bl	8004b68 <SX1276Read>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	71fb      	strb	r3, [r7, #7]

    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003ad8:	2006      	movs	r0, #6
 8003ada:	f001 f845 	bl	8004b68 <SX1276Read>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	041c      	lsls	r4, r3, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8003ae2:	2007      	movs	r0, #7
 8003ae4:	f001 f840 	bl	8004b68 <SX1276Read>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	021b      	lsls	r3, r3, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003aec:	431c      	orrs	r4, r3
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8003aee:	2008      	movs	r0, #8
 8003af0:	f001 f83a 	bl	8004b68 <SX1276Read>
 8003af4:	4603      	mov	r3, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003af6:	4323      	orrs	r3, r4
 8003af8:	4618      	mov	r0, r3
 8003afa:	f001 f923 	bl	8004d44 <SX1276ConvertPllStepToFreqInHz>
 8003afe:	6038      	str	r0, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8003b00:	2100      	movs	r1, #0
 8003b02:	2009      	movs	r0, #9
 8003b04:	f001 f820 	bl	8004b48 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8003b08:	203b      	movs	r0, #59	; 0x3b
 8003b0a:	f001 f82d 	bl	8004b68 <SX1276Read>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	4619      	mov	r1, r3
 8003b18:	203b      	movs	r0, #59	; 0x3b
 8003b1a:	f001 f815 	bl	8004b48 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003b1e:	bf00      	nop
 8003b20:	203b      	movs	r0, #59	; 0x3b
 8003b22:	f001 f821 	bl	8004b68 <SX1276Read>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f003 0320 	and.w	r3, r3, #32
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d0f7      	beq.n	8003b20 <RxChainCalibration+0x58>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8003b30:	4811      	ldr	r0, [pc, #68]	; (8003b78 <RxChainCalibration+0xb0>)
 8003b32:	f7ff ff29 	bl	8003988 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8003b36:	203b      	movs	r0, #59	; 0x3b
 8003b38:	f001 f816 	bl	8004b68 <SX1276Read>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	4619      	mov	r1, r3
 8003b46:	203b      	movs	r0, #59	; 0x3b
 8003b48:	f000 fffe 	bl	8004b48 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003b4c:	bf00      	nop
 8003b4e:	203b      	movs	r0, #59	; 0x3b
 8003b50:	f001 f80a 	bl	8004b68 <SX1276Read>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	d0f7      	beq.n	8003b4e <RxChainCalibration+0x86>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8003b5e:	79fb      	ldrb	r3, [r7, #7]
 8003b60:	4619      	mov	r1, r3
 8003b62:	2009      	movs	r0, #9
 8003b64:	f000 fff0 	bl	8004b48 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8003b68:	6838      	ldr	r0, [r7, #0]
 8003b6a:	f7ff ff0d 	bl	8003988 <SX1276SetChannel>
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	33bca100 	.word	0x33bca100

08003b7c <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	461a      	mov	r2, r3
 8003b88:	4603      	mov	r3, r0
 8003b8a:	73fb      	strb	r3, [r7, #15]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f000 ff80 	bl	8004a98 <SX1276SetModem>

    switch( modem )
 8003b98:	7bfb      	ldrb	r3, [r7, #15]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <SX1276SetRxConfig+0x2a>
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	f000 8099 	beq.w	8003cd6 <SX1276SetRxConfig+0x15a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8003ba4:	e1c3      	b.n	8003f2e <SX1276SetRxConfig+0x3b2>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003ba6:	4a78      	ldr	r2, [pc, #480]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8003bac:	4a76      	ldr	r2, [pc, #472]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8003bb2:	4a75      	ldr	r2, [pc, #468]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	6593      	str	r3, [r2, #88]	; 0x58
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003bb8:	4a73      	ldr	r2, [pc, #460]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003bba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bbe:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8003bc2:	4a71      	ldr	r2, [pc, #452]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003bc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003bc8:	f882 3063 	strb.w	r3, [r2, #99]	; 0x63
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003bcc:	4a6e      	ldr	r2, [pc, #440]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003bce:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bd2:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003bd6:	4a6c      	ldr	r2, [pc, #432]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003bd8:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003bdc:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8003be0:	4a69      	ldr	r2, [pc, #420]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003be2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003be6:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003bea:	4a67      	ldr	r2, [pc, #412]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003bee:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8003bf2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bf4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003bf8:	fb02 f203 	mul.w	r2, r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c02:	4a61      	ldr	r2, [pc, #388]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003c04:	66d3      	str	r3, [r2, #108]	; 0x6c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8003c06:	4a61      	ldr	r2, [pc, #388]	; (8003d8c <SX1276SetRxConfig+0x210>)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0e:	617b      	str	r3, [r7, #20]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	0a1b      	lsrs	r3, r3, #8
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	4619      	mov	r1, r3
 8003c18:	2002      	movs	r0, #2
 8003c1a:	f000 ff95 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	4619      	mov	r1, r3
 8003c24:	2003      	movs	r0, #3
 8003c26:	f000 ff8f 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8003c2a:	68b8      	ldr	r0, [r7, #8]
 8003c2c:	f001 f8ce 	bl	8004dcc <GetFskBandwidthRegValue>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4619      	mov	r1, r3
 8003c34:	2012      	movs	r0, #18
 8003c36:	f000 ff87 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8003c3a:	6a38      	ldr	r0, [r7, #32]
 8003c3c:	f001 f8c6 	bl	8004dcc <GetFskBandwidthRegValue>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4619      	mov	r1, r3
 8003c44:	2013      	movs	r0, #19
 8003c46:	f000 ff7f 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003c4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c4c:	0a1b      	lsrs	r3, r3, #8
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	4619      	mov	r1, r3
 8003c54:	2025      	movs	r0, #37	; 0x25
 8003c56:	f000 ff77 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	4619      	mov	r1, r3
 8003c60:	2026      	movs	r0, #38	; 0x26
 8003c62:	f000 ff71 	bl	8004b48 <SX1276Write>
            if( fixLen == 1 )
 8003c66:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d006      	beq.n	8003c7c <SX1276SetRxConfig+0x100>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8003c6e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c72:	4619      	mov	r1, r3
 8003c74:	2032      	movs	r0, #50	; 0x32
 8003c76:	f000 ff67 	bl	8004b48 <SX1276Write>
 8003c7a:	e003      	b.n	8003c84 <SX1276SetRxConfig+0x108>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8003c7c:	21ff      	movs	r1, #255	; 0xff
 8003c7e:	2032      	movs	r0, #50	; 0x32
 8003c80:	f000 ff62 	bl	8004b48 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8003c84:	2030      	movs	r0, #48	; 0x30
 8003c86:	f000 ff6f 	bl	8004b68 <SX1276Read>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8003c8e:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003c92:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003c94:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003c98:	2a00      	cmp	r2, #0
 8003c9a:	d001      	beq.n	8003ca0 <SX1276SetRxConfig+0x124>
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	e001      	b.n	8003ca4 <SX1276SetRxConfig+0x128>
 8003ca0:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8003ca8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cac:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003cae:	b25b      	sxtb	r3, r3
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	2030      	movs	r0, #48	; 0x30
 8003cba:	f000 ff45 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003cbe:	2031      	movs	r0, #49	; 0x31
 8003cc0:	f000 ff52 	bl	8004b68 <SX1276Read>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	4619      	mov	r1, r3
 8003cce:	2031      	movs	r0, #49	; 0x31
 8003cd0:	f000 ff3a 	bl	8004b48 <SX1276Write>
        break;
 8003cd4:	e12b      	b.n	8003f2e <SX1276SetRxConfig+0x3b2>
            if( bandwidth > 2 )
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d900      	bls.n	8003cde <SX1276SetRxConfig+0x162>
                while( 1 );
 8003cdc:	e7fe      	b.n	8003cdc <SX1276SetRxConfig+0x160>
            bandwidth += 7;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	3307      	adds	r3, #7
 8003ce2:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003ce4:	4a28      	ldr	r2, [pc, #160]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8003cec:	4a26      	ldr	r2, [pc, #152]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8003cf4:	4a24      	ldr	r2, [pc, #144]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003cf6:	7bbb      	ldrb	r3, [r7, #14]
 8003cf8:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003cfc:	4a22      	ldr	r2, [pc, #136]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003cfe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d00:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003d04:	4a20      	ldr	r2, [pc, #128]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003d06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d0a:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8003d0e:	4a1e      	ldr	r2, [pc, #120]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003d10:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d14:	f882 3091 	strb.w	r3, [r2, #145]	; 0x91
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003d1a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d1e:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8003d22:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003d24:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003d28:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003d2c:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003d2e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003d32:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8003d36:	4a14      	ldr	r2, [pc, #80]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003d38:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003d3c:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003d40:	4a11      	ldr	r2, [pc, #68]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003d42:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003d46:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
            if( datarate > 12 )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b0c      	cmp	r3, #12
 8003d4e:	d902      	bls.n	8003d56 <SX1276SetRxConfig+0x1da>
                datarate = 12;
 8003d50:	230c      	movs	r3, #12
 8003d52:	607b      	str	r3, [r7, #4]
 8003d54:	e004      	b.n	8003d60 <SX1276SetRxConfig+0x1e4>
            else if( datarate < 6 )
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d801      	bhi.n	8003d60 <SX1276SetRxConfig+0x1e4>
                datarate = 6;
 8003d5c:	2306      	movs	r3, #6
 8003d5e:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2b07      	cmp	r3, #7
 8003d64:	d105      	bne.n	8003d72 <SX1276SetRxConfig+0x1f6>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2b0b      	cmp	r3, #11
 8003d6a:	d008      	beq.n	8003d7e <SX1276SetRxConfig+0x202>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b0c      	cmp	r3, #12
 8003d70:	d005      	beq.n	8003d7e <SX1276SetRxConfig+0x202>
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d10b      	bne.n	8003d90 <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d108      	bne.n	8003d90 <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003d7e:	4b02      	ldr	r3, [pc, #8]	; (8003d88 <SX1276SetRxConfig+0x20c>)
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8003d86:	e007      	b.n	8003d98 <SX1276SetRxConfig+0x21c>
 8003d88:	20000300 	.word	0x20000300
 8003d8c:	01e84800 	.word	0x01e84800
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <SX1276SetRxConfig+0x3bc>)
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8003d98:	201d      	movs	r0, #29
 8003d9a:	f000 fee5 	bl	8004b68 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	7bbb      	ldrb	r3, [r7, #14]
 8003da8:	005b      	lsls	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003db0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003db4:	4313      	orrs	r3, r2
 8003db6:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003db8:	4619      	mov	r1, r3
 8003dba:	201d      	movs	r0, #29
 8003dbc:	f000 fec4 	bl	8004b48 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8003dc0:	201e      	movs	r0, #30
 8003dc2:	f000 fed1 	bl	8004b68 <SX1276Read>
 8003dc6:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	011b      	lsls	r3, r3, #4
 8003dd4:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003dda:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	4313      	orrs	r3, r2
 8003de4:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003de6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003de8:	0a1b      	lsrs	r3, r3, #8
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	f003 0303 	and.w	r3, r3, #3
 8003df2:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003df4:	4313      	orrs	r3, r2
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	4619      	mov	r1, r3
 8003dfa:	201e      	movs	r0, #30
 8003dfc:	f000 fea4 	bl	8004b48 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003e00:	2026      	movs	r0, #38	; 0x26
 8003e02:	f000 feb1 	bl	8004b68 <SX1276Read>
 8003e06:	4603      	mov	r3, r0
 8003e08:	b25b      	sxtb	r3, r3
 8003e0a:	f023 0308 	bic.w	r3, r3, #8
 8003e0e:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003e10:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <SX1276SetRxConfig+0x3bc>)
 8003e12:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003e16:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8003e18:	b25b      	sxtb	r3, r3
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	4619      	mov	r1, r3
 8003e22:	2026      	movs	r0, #38	; 0x26
 8003e24:	f000 fe90 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003e28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	201f      	movs	r0, #31
 8003e30:	f000 fe8a 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003e34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e36:	0a1b      	lsrs	r3, r3, #8
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	2020      	movs	r0, #32
 8003e40:	f000 fe82 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003e44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	4619      	mov	r1, r3
 8003e4a:	2021      	movs	r0, #33	; 0x21
 8003e4c:	f000 fe7c 	bl	8004b48 <SX1276Write>
            if( fixLen == 1 )
 8003e50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d005      	beq.n	8003e64 <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8003e58:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	2022      	movs	r0, #34	; 0x22
 8003e60:	f000 fe72 	bl	8004b48 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003e64:	4b34      	ldr	r3, [pc, #208]	; (8003f38 <SX1276SetRxConfig+0x3bc>)
 8003e66:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d011      	beq.n	8003e92 <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003e6e:	2044      	movs	r0, #68	; 0x44
 8003e70:	f000 fe7a 	bl	8004b68 <SX1276Read>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	2044      	movs	r0, #68	; 0x44
 8003e80:	f000 fe62 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8003e84:	4b2c      	ldr	r3, [pc, #176]	; (8003f38 <SX1276SetRxConfig+0x3bc>)
 8003e86:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	2024      	movs	r0, #36	; 0x24
 8003e8e:	f000 fe5b 	bl	8004b48 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2b09      	cmp	r3, #9
 8003e96:	d10d      	bne.n	8003eb4 <SX1276SetRxConfig+0x338>
 8003e98:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <SX1276SetRxConfig+0x3bc>)
 8003e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9c:	4a27      	ldr	r2, [pc, #156]	; (8003f3c <SX1276SetRxConfig+0x3c0>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d908      	bls.n	8003eb4 <SX1276SetRxConfig+0x338>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8003ea2:	2102      	movs	r1, #2
 8003ea4:	2036      	movs	r0, #54	; 0x36
 8003ea6:	f000 fe4f 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8003eaa:	2164      	movs	r1, #100	; 0x64
 8003eac:	203a      	movs	r0, #58	; 0x3a
 8003eae:	f000 fe4b 	bl	8004b48 <SX1276Write>
 8003eb2:	e00f      	b.n	8003ed4 <SX1276SetRxConfig+0x358>
            else if( bandwidth == 9 )
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	2b09      	cmp	r3, #9
 8003eb8:	d108      	bne.n	8003ecc <SX1276SetRxConfig+0x350>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8003eba:	2102      	movs	r1, #2
 8003ebc:	2036      	movs	r0, #54	; 0x36
 8003ebe:	f000 fe43 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8003ec2:	217f      	movs	r1, #127	; 0x7f
 8003ec4:	203a      	movs	r0, #58	; 0x3a
 8003ec6:	f000 fe3f 	bl	8004b48 <SX1276Write>
 8003eca:	e003      	b.n	8003ed4 <SX1276SetRxConfig+0x358>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8003ecc:	2103      	movs	r1, #3
 8003ece:	2036      	movs	r0, #54	; 0x36
 8003ed0:	f000 fe3a 	bl	8004b48 <SX1276Write>
            if( datarate == 6 )
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d114      	bne.n	8003f04 <SX1276SetRxConfig+0x388>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003eda:	2031      	movs	r0, #49	; 0x31
 8003edc:	f000 fe44 	bl	8004b68 <SX1276Read>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	b25b      	sxtb	r3, r3
 8003ee4:	f023 0307 	bic.w	r3, r3, #7
 8003ee8:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003eea:	f043 0305 	orr.w	r3, r3, #5
 8003eee:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	2031      	movs	r0, #49	; 0x31
 8003ef6:	f000 fe27 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003efa:	210c      	movs	r1, #12
 8003efc:	2037      	movs	r0, #55	; 0x37
 8003efe:	f000 fe23 	bl	8004b48 <SX1276Write>
        break;
 8003f02:	e013      	b.n	8003f2c <SX1276SetRxConfig+0x3b0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003f04:	2031      	movs	r0, #49	; 0x31
 8003f06:	f000 fe2f 	bl	8004b68 <SX1276Read>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	f023 0307 	bic.w	r3, r3, #7
 8003f12:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003f14:	f043 0303 	orr.w	r3, r3, #3
 8003f18:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	2031      	movs	r0, #49	; 0x31
 8003f20:	f000 fe12 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003f24:	210a      	movs	r1, #10
 8003f26:	2037      	movs	r0, #55	; 0x37
 8003f28:	f000 fe0e 	bl	8004b48 <SX1276Write>
        break;
 8003f2c:	bf00      	nop
}
 8003f2e:	bf00      	nop
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000300 	.word	0x20000300
 8003f3c:	1f4add40 	.word	0x1f4add40

08003f40 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60ba      	str	r2, [r7, #8]
 8003f48:	607b      	str	r3, [r7, #4]
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8003f52:	7bfb      	ldrb	r3, [r7, #15]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fd9f 	bl	8004a98 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8003f5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f002 fa6c 	bl	800643c <SX1276SetRfTxPower>

    switch( modem )
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <SX1276SetTxConfig+0x30>
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d07d      	beq.n	800406a <SX1276SetTxConfig+0x12a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8003f6e:	e16a      	b.n	8004246 <SX1276SetTxConfig+0x306>
            SX1276.Settings.Fsk.Power = power;
 8003f70:	4ab7      	ldr	r2, [pc, #732]	; (8004250 <SX1276SetTxConfig+0x310>)
 8003f72:	7bbb      	ldrb	r3, [r7, #14]
 8003f74:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            SX1276.Settings.Fsk.Fdev = fdev;
 8003f78:	4ab5      	ldr	r2, [pc, #724]	; (8004250 <SX1276SetTxConfig+0x310>)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	6513      	str	r3, [r2, #80]	; 0x50
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003f7e:	4ab4      	ldr	r2, [pc, #720]	; (8004250 <SX1276SetTxConfig+0x310>)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8003f84:	4ab2      	ldr	r2, [pc, #712]	; (8004250 <SX1276SetTxConfig+0x310>)
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003f8a:	4ab1      	ldr	r2, [pc, #708]	; (8004250 <SX1276SetTxConfig+0x310>)
 8003f8c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f8e:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003f92:	4aaf      	ldr	r2, [pc, #700]	; (8004250 <SX1276SetTxConfig+0x310>)
 8003f94:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f98:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003f9c:	4aac      	ldr	r2, [pc, #688]	; (8004250 <SX1276SetTxConfig+0x310>)
 8003f9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fa2:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003fa6:	4aaa      	ldr	r2, [pc, #680]	; (8004250 <SX1276SetTxConfig+0x310>)
 8003fa8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003fac:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8003fb0:	4aa7      	ldr	r2, [pc, #668]	; (8004250 <SX1276SetTxConfig+0x310>)
 8003fb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fb4:	6693      	str	r3, [r2, #104]	; 0x68
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8003fb6:	68b8      	ldr	r0, [r7, #8]
 8003fb8:	f000 fee2 	bl	8004d80 <SX1276ConvertFreqInHzToPllStep>
 8003fbc:	6178      	str	r0, [r7, #20]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	0a1b      	lsrs	r3, r3, #8
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	4619      	mov	r1, r3
 8003fc6:	2004      	movs	r0, #4
 8003fc8:	f000 fdbe 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	2005      	movs	r0, #5
 8003fd4:	f000 fdb8 	bl	8004b48 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8003fd8:	4a9e      	ldr	r2, [pc, #632]	; (8004254 <SX1276SetTxConfig+0x314>)
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe0:	613b      	str	r3, [r7, #16]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	0a1b      	lsrs	r3, r3, #8
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	2002      	movs	r0, #2
 8003fec:	f000 fdac 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	2003      	movs	r0, #3
 8003ff8:	f000 fda6 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003ffc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	b29b      	uxth	r3, r3
 8004002:	b2db      	uxtb	r3, r3
 8004004:	4619      	mov	r1, r3
 8004006:	2025      	movs	r0, #37	; 0x25
 8004008:	f000 fd9e 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800400c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800400e:	b2db      	uxtb	r3, r3
 8004010:	4619      	mov	r1, r3
 8004012:	2026      	movs	r0, #38	; 0x26
 8004014:	f000 fd98 	bl	8004b48 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004018:	2030      	movs	r0, #48	; 0x30
 800401a:	f000 fda5 	bl	8004b68 <SX1276Read>
 800401e:	4603      	mov	r3, r0
 8004020:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8004022:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8004026:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004028:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800402c:	2a00      	cmp	r2, #0
 800402e:	d001      	beq.n	8004034 <SX1276SetTxConfig+0xf4>
 8004030:	2200      	movs	r2, #0
 8004032:	e001      	b.n	8004038 <SX1276SetTxConfig+0xf8>
 8004034:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8004038:	4313      	orrs	r3, r2
 800403a:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 800403c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004040:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8004042:	b25b      	sxtb	r3, r3
 8004044:	4313      	orrs	r3, r2
 8004046:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8004048:	b2db      	uxtb	r3, r3
 800404a:	4619      	mov	r1, r3
 800404c:	2030      	movs	r0, #48	; 0x30
 800404e:	f000 fd7b 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8004052:	2031      	movs	r0, #49	; 0x31
 8004054:	f000 fd88 	bl	8004b68 <SX1276Read>
 8004058:	4603      	mov	r3, r0
 800405a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800405e:	b2db      	uxtb	r3, r3
 8004060:	4619      	mov	r1, r3
 8004062:	2031      	movs	r0, #49	; 0x31
 8004064:	f000 fd70 	bl	8004b48 <SX1276Write>
        break;
 8004068:	e0ed      	b.n	8004246 <SX1276SetTxConfig+0x306>
            SX1276.Settings.LoRa.Power = power;
 800406a:	4a79      	ldr	r2, [pc, #484]	; (8004250 <SX1276SetTxConfig+0x310>)
 800406c:	7bbb      	ldrb	r3, [r7, #14]
 800406e:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
            if( bandwidth > 2 )
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b02      	cmp	r3, #2
 8004076:	d900      	bls.n	800407a <SX1276SetTxConfig+0x13a>
                while( 1 );
 8004078:	e7fe      	b.n	8004078 <SX1276SetTxConfig+0x138>
            bandwidth += 7;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	3307      	adds	r3, #7
 800407e:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004080:	4a73      	ldr	r2, [pc, #460]	; (8004250 <SX1276SetTxConfig+0x310>)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8004088:	4a71      	ldr	r2, [pc, #452]	; (8004250 <SX1276SetTxConfig+0x310>)
 800408a:	6a3b      	ldr	r3, [r7, #32]
 800408c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8004090:	4a6f      	ldr	r2, [pc, #444]	; (8004250 <SX1276SetTxConfig+0x310>)
 8004092:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004096:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800409a:	4a6d      	ldr	r2, [pc, #436]	; (8004250 <SX1276SetTxConfig+0x310>)
 800409c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800409e:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 80040a2:	4a6b      	ldr	r2, [pc, #428]	; (8004250 <SX1276SetTxConfig+0x310>)
 80040a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040a8:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80040ac:	4a68      	ldr	r2, [pc, #416]	; (8004250 <SX1276SetTxConfig+0x310>)
 80040ae:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80040b2:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80040b6:	4a66      	ldr	r2, [pc, #408]	; (8004250 <SX1276SetTxConfig+0x310>)
 80040b8:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80040bc:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80040c0:	4a63      	ldr	r2, [pc, #396]	; (8004250 <SX1276SetTxConfig+0x310>)
 80040c2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040c6:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80040ca:	4a61      	ldr	r2, [pc, #388]	; (8004250 <SX1276SetTxConfig+0x310>)
 80040cc:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80040d0:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80040d4:	4a5e      	ldr	r2, [pc, #376]	; (8004250 <SX1276SetTxConfig+0x310>)
 80040d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
            if( datarate > 12 )
 80040dc:	6a3b      	ldr	r3, [r7, #32]
 80040de:	2b0c      	cmp	r3, #12
 80040e0:	d902      	bls.n	80040e8 <SX1276SetTxConfig+0x1a8>
                datarate = 12;
 80040e2:	230c      	movs	r3, #12
 80040e4:	623b      	str	r3, [r7, #32]
 80040e6:	e004      	b.n	80040f2 <SX1276SetTxConfig+0x1b2>
            else if( datarate < 6 )
 80040e8:	6a3b      	ldr	r3, [r7, #32]
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d801      	bhi.n	80040f2 <SX1276SetTxConfig+0x1b2>
                datarate = 6;
 80040ee:	2306      	movs	r3, #6
 80040f0:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b07      	cmp	r3, #7
 80040f6:	d105      	bne.n	8004104 <SX1276SetTxConfig+0x1c4>
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	2b0b      	cmp	r3, #11
 80040fc:	d008      	beq.n	8004110 <SX1276SetTxConfig+0x1d0>
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	2b0c      	cmp	r3, #12
 8004102:	d005      	beq.n	8004110 <SX1276SetTxConfig+0x1d0>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d107      	bne.n	800411a <SX1276SetTxConfig+0x1da>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d104      	bne.n	800411a <SX1276SetTxConfig+0x1da>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8004110:	4b4f      	ldr	r3, [pc, #316]	; (8004250 <SX1276SetTxConfig+0x310>)
 8004112:	2201      	movs	r2, #1
 8004114:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8004118:	e003      	b.n	8004122 <SX1276SetTxConfig+0x1e2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800411a:	4b4d      	ldr	r3, [pc, #308]	; (8004250 <SX1276SetTxConfig+0x310>)
 800411c:	2200      	movs	r2, #0
 800411e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004122:	4b4b      	ldr	r3, [pc, #300]	; (8004250 <SX1276SetTxConfig+0x310>)
 8004124:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004128:	2b00      	cmp	r3, #0
 800412a:	d011      	beq.n	8004150 <SX1276SetTxConfig+0x210>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800412c:	2044      	movs	r0, #68	; 0x44
 800412e:	f000 fd1b 	bl	8004b68 <SX1276Read>
 8004132:	4603      	mov	r3, r0
 8004134:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004138:	b2db      	uxtb	r3, r3
 800413a:	4619      	mov	r1, r3
 800413c:	2044      	movs	r0, #68	; 0x44
 800413e:	f000 fd03 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8004142:	4b43      	ldr	r3, [pc, #268]	; (8004250 <SX1276SetTxConfig+0x310>)
 8004144:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004148:	4619      	mov	r1, r3
 800414a:	2024      	movs	r0, #36	; 0x24
 800414c:	f000 fcfc 	bl	8004b48 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004150:	201d      	movs	r0, #29
 8004152:	f000 fd09 	bl	8004b68 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	b2db      	uxtb	r3, r3
 800415a:	011b      	lsls	r3, r3, #4
 800415c:	b2da      	uxtb	r2, r3
 800415e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	b2db      	uxtb	r3, r3
 8004166:	4313      	orrs	r3, r2
 8004168:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800416a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800416e:	4313      	orrs	r3, r2
 8004170:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004172:	4619      	mov	r1, r3
 8004174:	201d      	movs	r0, #29
 8004176:	f000 fce7 	bl	8004b48 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800417a:	201e      	movs	r0, #30
 800417c:	f000 fcf4 	bl	8004b68 <SX1276Read>
 8004180:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 8004182:	f003 030b 	and.w	r3, r3, #11
 8004186:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8004190:	4313      	orrs	r3, r2
 8004192:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8004194:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800419c:	4313      	orrs	r3, r2
 800419e:	b2db      	uxtb	r3, r3
 80041a0:	4619      	mov	r1, r3
 80041a2:	201e      	movs	r0, #30
 80041a4:	f000 fcd0 	bl	8004b48 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80041a8:	2026      	movs	r0, #38	; 0x26
 80041aa:	f000 fcdd 	bl	8004b68 <SX1276Read>
 80041ae:	4603      	mov	r3, r0
 80041b0:	b25b      	sxtb	r3, r3
 80041b2:	f023 0308 	bic.w	r3, r3, #8
 80041b6:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80041b8:	4b25      	ldr	r3, [pc, #148]	; (8004250 <SX1276SetTxConfig+0x310>)
 80041ba:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80041be:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80041c0:	b25b      	sxtb	r3, r3
 80041c2:	4313      	orrs	r3, r2
 80041c4:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	4619      	mov	r1, r3
 80041ca:	2026      	movs	r0, #38	; 0x26
 80041cc:	f000 fcbc 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80041d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041d2:	0a1b      	lsrs	r3, r3, #8
 80041d4:	b29b      	uxth	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	4619      	mov	r1, r3
 80041da:	2020      	movs	r0, #32
 80041dc:	f000 fcb4 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80041e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	4619      	mov	r1, r3
 80041e6:	2021      	movs	r0, #33	; 0x21
 80041e8:	f000 fcae 	bl	8004b48 <SX1276Write>
            if( datarate == 6 )
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	2b06      	cmp	r3, #6
 80041f0:	d114      	bne.n	800421c <SX1276SetTxConfig+0x2dc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80041f2:	2031      	movs	r0, #49	; 0x31
 80041f4:	f000 fcb8 	bl	8004b68 <SX1276Read>
 80041f8:	4603      	mov	r3, r0
 80041fa:	b25b      	sxtb	r3, r3
 80041fc:	f023 0307 	bic.w	r3, r3, #7
 8004200:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004202:	f043 0305 	orr.w	r3, r3, #5
 8004206:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004208:	b2db      	uxtb	r3, r3
 800420a:	4619      	mov	r1, r3
 800420c:	2031      	movs	r0, #49	; 0x31
 800420e:	f000 fc9b 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004212:	210c      	movs	r1, #12
 8004214:	2037      	movs	r0, #55	; 0x37
 8004216:	f000 fc97 	bl	8004b48 <SX1276Write>
        break;
 800421a:	e013      	b.n	8004244 <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800421c:	2031      	movs	r0, #49	; 0x31
 800421e:	f000 fca3 	bl	8004b68 <SX1276Read>
 8004222:	4603      	mov	r3, r0
 8004224:	b25b      	sxtb	r3, r3
 8004226:	f023 0307 	bic.w	r3, r3, #7
 800422a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800422c:	f043 0303 	orr.w	r3, r3, #3
 8004230:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004232:	b2db      	uxtb	r3, r3
 8004234:	4619      	mov	r1, r3
 8004236:	2031      	movs	r0, #49	; 0x31
 8004238:	f000 fc86 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800423c:	210a      	movs	r1, #10
 800423e:	2037      	movs	r0, #55	; 0x37
 8004240:	f000 fc82 	bl	8004b48 <SX1276Write>
        break;
 8004244:	bf00      	nop
}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	20000300 	.word	0x20000300
 8004254:	01e84800 	.word	0x01e84800

08004258 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af04      	add	r7, sp, #16
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	607a      	str	r2, [r7, #4]
 8004262:	461a      	mov	r2, r3
 8004264:	4603      	mov	r3, r0
 8004266:	73fb      	strb	r3, [r7, #15]
 8004268:	4613      	mov	r3, r2
 800426a:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8004270:	2301      	movs	r3, #1
 8004272:	613b      	str	r3, [r7, #16]

    switch( modem )
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <SX1276GetTimeOnAir+0x28>
 800427a:	2b01      	cmp	r3, #1
 800427c:	d012      	beq.n	80042a4 <SX1276GetTimeOnAir+0x4c>
 800427e:	e02c      	b.n	80042da <SX1276GetTimeOnAir+0x82>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8004280:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004284:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004288:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800428c:	8c38      	ldrh	r0, [r7, #32]
 800428e:	f000 fdef 	bl	8004e70 <SX1276GetGfskTimeOnAirNumerator>
 8004292:	4603      	mov	r3, r0
 8004294:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004298:	fb02 f303 	mul.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	613b      	str	r3, [r7, #16]
        }
        break;
 80042a2:	e01a      	b.n	80042da <SX1276GetTimeOnAir+0x82>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 80042a4:	8c39      	ldrh	r1, [r7, #32]
 80042a6:	7bba      	ldrb	r2, [r7, #14]
 80042a8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042ac:	9302      	str	r3, [sp, #8]
 80042ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	460b      	mov	r3, r1
 80042bc:	6879      	ldr	r1, [r7, #4]
 80042be:	68b8      	ldr	r0, [r7, #8]
 80042c0:	f000 fe05 	bl	8004ece <SX1276GetLoRaTimeOnAirNumerator>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 80042d0:	68b8      	ldr	r0, [r7, #8]
 80042d2:	f000 fda5 	bl	8004e20 <SX1276GetLoRaBandwidthInHz>
 80042d6:	6138      	str	r0, [r7, #16]
        }
        break;
 80042d8:	bf00      	nop
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4413      	add	r3, r2
 80042e0:	1e5a      	subs	r2, r3, #1
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	460b      	mov	r3, r1
 80042fa:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 80042fc:	2300      	movs	r3, #0
 80042fe:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8004300:	4b54      	ldr	r3, [pc, #336]	; (8004454 <SX1276Send+0x164>)
 8004302:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <SX1276Send+0x20>
 800430a:	2b01      	cmp	r3, #1
 800430c:	d049      	beq.n	80043a2 <SX1276Send+0xb2>
 800430e:	e099      	b.n	8004444 <SX1276Send+0x154>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004310:	4b50      	ldr	r3, [pc, #320]	; (8004454 <SX1276Send+0x164>)
 8004312:	2200      	movs	r2, #0
 8004314:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = size;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	b29a      	uxth	r2, r3
 800431c:	4b4d      	ldr	r3, [pc, #308]	; (8004454 <SX1276Send+0x164>)
 800431e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

            if( SX1276.Settings.Fsk.FixLen == false )
 8004322:	4b4c      	ldr	r3, [pc, #304]	; (8004454 <SX1276Send+0x164>)
 8004324:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004328:	f083 0301 	eor.w	r3, r3, #1
 800432c:	b2db      	uxtb	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 8004332:	1cfb      	adds	r3, r7, #3
 8004334:	2101      	movs	r1, #1
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fc90 	bl	8004c5c <SX1276WriteFifo>
 800433c:	e004      	b.n	8004348 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	4619      	mov	r1, r3
 8004342:	2032      	movs	r0, #50	; 0x32
 8004344:	f000 fc00 	bl	8004b48 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8004348:	78fb      	ldrb	r3, [r7, #3]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <SX1276Send+0x6e>
 800434e:	78fb      	ldrb	r3, [r7, #3]
 8004350:	2b40      	cmp	r3, #64	; 0x40
 8004352:	d804      	bhi.n	800435e <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <SX1276Send+0x164>)
 8004358:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 800435c:	e00a      	b.n	8004374 <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	b29b      	uxth	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	6879      	ldr	r1, [r7, #4]
 8004366:	483c      	ldr	r0, [pc, #240]	; (8004458 <SX1276Send+0x168>)
 8004368:	f002 fc00 	bl	8006b6c <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 800436c:	4b39      	ldr	r3, [pc, #228]	; (8004454 <SX1276Send+0x164>)
 800436e:	2220      	movs	r2, #32
 8004370:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 8004374:	4b37      	ldr	r3, [pc, #220]	; (8004454 <SX1276Send+0x164>)
 8004376:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800437a:	4619      	mov	r1, r3
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fc6d 	bl	8004c5c <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8004382:	4b34      	ldr	r3, [pc, #208]	; (8004454 <SX1276Send+0x164>)
 8004384:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8004388:	4b32      	ldr	r3, [pc, #200]	; (8004454 <SX1276Send+0x164>)
 800438a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800438e:	b29b      	uxth	r3, r3
 8004390:	4413      	add	r3, r2
 8004392:	b29a      	uxth	r2, r3
 8004394:	4b2f      	ldr	r3, [pc, #188]	; (8004454 <SX1276Send+0x164>)
 8004396:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800439a:	4b2e      	ldr	r3, [pc, #184]	; (8004454 <SX1276Send+0x164>)
 800439c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800439e:	60fb      	str	r3, [r7, #12]
        }
        break;
 80043a0:	e050      	b.n	8004444 <SX1276Send+0x154>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80043a2:	4b2c      	ldr	r3, [pc, #176]	; (8004454 <SX1276Send+0x164>)
 80043a4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00f      	beq.n	80043cc <SX1276Send+0xdc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80043ac:	2033      	movs	r0, #51	; 0x33
 80043ae:	f000 fbdb 	bl	8004b68 <SX1276Read>
 80043b2:	4603      	mov	r3, r0
 80043b4:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	4619      	mov	r1, r3
 80043bc:	2033      	movs	r0, #51	; 0x33
 80043be:	f000 fbc3 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80043c2:	2119      	movs	r1, #25
 80043c4:	203b      	movs	r0, #59	; 0x3b
 80043c6:	f000 fbbf 	bl	8004b48 <SX1276Write>
 80043ca:	e013      	b.n	80043f4 <SX1276Send+0x104>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80043cc:	2033      	movs	r0, #51	; 0x33
 80043ce:	f000 fbcb 	bl	8004b68 <SX1276Read>
 80043d2:	4603      	mov	r3, r0
 80043d4:	b25b      	sxtb	r3, r3
 80043d6:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80043da:	b25b      	sxtb	r3, r3
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	b25b      	sxtb	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	4619      	mov	r1, r3
 80043e6:	2033      	movs	r0, #51	; 0x33
 80043e8:	f000 fbae 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80043ec:	211d      	movs	r1, #29
 80043ee:	203b      	movs	r0, #59	; 0x3b
 80043f0:	f000 fbaa 	bl	8004b48 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	4b17      	ldr	r3, [pc, #92]	; (8004454 <SX1276Send+0x164>)
 80043f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	4619      	mov	r1, r3
 8004400:	2022      	movs	r0, #34	; 0x22
 8004402:	f000 fba1 	bl	8004b48 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 8004406:	2100      	movs	r1, #0
 8004408:	200e      	movs	r0, #14
 800440a:	f000 fb9d 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800440e:	2100      	movs	r1, #0
 8004410:	200d      	movs	r0, #13
 8004412:	f000 fb99 	bl	8004b48 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 8004416:	2001      	movs	r0, #1
 8004418:	f000 fba6 	bl	8004b68 <SX1276Read>
 800441c:	4603      	mov	r3, r0
 800441e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004422:	2b00      	cmp	r3, #0
 8004424:	d104      	bne.n	8004430 <SX1276Send+0x140>
            {
                SX1276SetStby( );
 8004426:	f000 f839 	bl	800449c <SX1276SetStby>
                DelayMs( 1 );
 800442a:	2001      	movs	r0, #1
 800442c:	f001 faf4 	bl	8005a18 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8004430:	78fb      	ldrb	r3, [r7, #3]
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fc11 	bl	8004c5c <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800443a:	4b06      	ldr	r3, [pc, #24]	; (8004454 <SX1276Send+0x164>)
 800443c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004440:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004442:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 8004444:	68f8      	ldr	r0, [r7, #12]
 8004446:	f000 f9cb 	bl	80047e0 <SX1276SetTx>
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000300 	.word	0x20000300
 8004458:	20000064 	.word	0x20000064

0800445c <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <SX1276SetSleep+0x30>)
 8004462:	f002 fa7f 	bl	8006964 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8004466:	480a      	ldr	r0, [pc, #40]	; (8004490 <SX1276SetSleep+0x34>)
 8004468:	f002 fa7c 	bl	8006964 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 800446c:	4809      	ldr	r0, [pc, #36]	; (8004494 <SX1276SetSleep+0x38>)
 800446e:	f002 fa79 	bl	8006964 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004472:	2000      	movs	r0, #0
 8004474:	f000 fae4 	bl	8004a40 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    SX1276SetBoardTcxo( false );
 8004478:	2000      	movs	r0, #0
 800447a:	f001 ffad 	bl	80063d8 <SX1276SetBoardTcxo>

    SX1276.Settings.State = RF_IDLE;
 800447e:	4b06      	ldr	r3, [pc, #24]	; (8004498 <SX1276SetSleep+0x3c>)
 8004480:	2200      	movs	r2, #0
 8004482:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8004486:	bf00      	nop
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	200003a8 	.word	0x200003a8
 8004490:	200002d0 	.word	0x200002d0
 8004494:	200002e8 	.word	0x200002e8
 8004498:	20000300 	.word	0x20000300

0800449c <SX1276SetStby>:

void SX1276SetStby( void )
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80044a0:	4808      	ldr	r0, [pc, #32]	; (80044c4 <SX1276SetStby+0x28>)
 80044a2:	f002 fa5f 	bl	8006964 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80044a6:	4808      	ldr	r0, [pc, #32]	; (80044c8 <SX1276SetStby+0x2c>)
 80044a8:	f002 fa5c 	bl	8006964 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80044ac:	4807      	ldr	r0, [pc, #28]	; (80044cc <SX1276SetStby+0x30>)
 80044ae:	f002 fa59 	bl	8006964 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80044b2:	2001      	movs	r0, #1
 80044b4:	f000 fac4 	bl	8004a40 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80044b8:	4b05      	ldr	r3, [pc, #20]	; (80044d0 <SX1276SetStby+0x34>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80044c0:	bf00      	nop
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	200003a8 	.word	0x200003a8
 80044c8:	200002d0 	.word	0x200002d0
 80044cc:	200002e8 	.word	0x200002e8
 80044d0:	20000300 	.word	0x20000300

080044d4 <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 80044dc:	2300      	movs	r3, #0
 80044de:	73fb      	strb	r3, [r7, #15]
    TimerStop( &TxTimeoutTimer );
 80044e0:	48ba      	ldr	r0, [pc, #744]	; (80047cc <SX1276SetRx+0x2f8>)
 80044e2:	f002 fa3f 	bl	8006964 <TimerStop>

    switch( SX1276.Settings.Modem )
 80044e6:	4bba      	ldr	r3, [pc, #744]	; (80047d0 <SX1276SetRx+0x2fc>)
 80044e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d002      	beq.n	80044f6 <SX1276SetRx+0x22>
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d03e      	beq.n	8004572 <SX1276SetRx+0x9e>
 80044f4:	e12f      	b.n	8004756 <SX1276SetRx+0x282>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80044f6:	4bb6      	ldr	r3, [pc, #728]	; (80047d0 <SX1276SetRx+0x2fc>)
 80044f8:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80044fc:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80044fe:	2040      	movs	r0, #64	; 0x40
 8004500:	f000 fb32 	bl	8004b68 <SX1276Read>
 8004504:	4603      	mov	r3, r0
 8004506:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8004508:	f003 0303 	and.w	r3, r3, #3
 800450c:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 800450e:	f043 030c 	orr.w	r3, r3, #12
 8004512:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004514:	b2db      	uxtb	r3, r3
 8004516:	4619      	mov	r1, r3
 8004518:	2040      	movs	r0, #64	; 0x40
 800451a:	f000 fb15 	bl	8004b48 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800451e:	2041      	movs	r0, #65	; 0x41
 8004520:	f000 fb22 	bl	8004b68 <SX1276Read>
 8004524:	4603      	mov	r3, r0
 8004526:	f063 033e 	orn	r3, r3, #62	; 0x3e
 800452a:	b2db      	uxtb	r3, r3
 800452c:	4619      	mov	r1, r3
 800452e:	2041      	movs	r0, #65	; 0x41
 8004530:	f000 fb0a 	bl	8004b48 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8004534:	2035      	movs	r0, #53	; 0x35
 8004536:	f000 fb17 	bl	8004b68 <SX1276Read>
 800453a:	4603      	mov	r3, r0
 800453c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004540:	b2da      	uxtb	r2, r3
 8004542:	4ba3      	ldr	r3, [pc, #652]	; (80047d0 <SX1276SetRx+0x2fc>)
 8004544:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8004548:	211e      	movs	r1, #30
 800454a:	200d      	movs	r0, #13
 800454c:	f000 fafc 	bl	8004b48 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004550:	4b9f      	ldr	r3, [pc, #636]	; (80047d0 <SX1276SetRx+0x2fc>)
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004558:	4b9d      	ldr	r3, [pc, #628]	; (80047d0 <SX1276SetRx+0x2fc>)
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004560:	4b9b      	ldr	r3, [pc, #620]	; (80047d0 <SX1276SetRx+0x2fc>)
 8004562:	2200      	movs	r2, #0
 8004564:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004568:	4b99      	ldr	r3, [pc, #612]	; (80047d0 <SX1276SetRx+0x2fc>)
 800456a:	2200      	movs	r2, #0
 800456c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
        }
        break;
 8004570:	e0f1      	b.n	8004756 <SX1276SetRx+0x282>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 8004572:	4b97      	ldr	r3, [pc, #604]	; (80047d0 <SX1276SetRx+0x2fc>)
 8004574:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00f      	beq.n	800459c <SX1276SetRx+0xc8>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800457c:	2033      	movs	r0, #51	; 0x33
 800457e:	f000 faf3 	bl	8004b68 <SX1276Read>
 8004582:	4603      	mov	r3, r0
 8004584:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8004588:	b2db      	uxtb	r3, r3
 800458a:	4619      	mov	r1, r3
 800458c:	2033      	movs	r0, #51	; 0x33
 800458e:	f000 fadb 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8004592:	2119      	movs	r1, #25
 8004594:	203b      	movs	r0, #59	; 0x3b
 8004596:	f000 fad7 	bl	8004b48 <SX1276Write>
 800459a:	e013      	b.n	80045c4 <SX1276SetRx+0xf0>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800459c:	2033      	movs	r0, #51	; 0x33
 800459e:	f000 fae3 	bl	8004b68 <SX1276Read>
 80045a2:	4603      	mov	r3, r0
 80045a4:	b25b      	sxtb	r3, r3
 80045a6:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80045aa:	b25b      	sxtb	r3, r3
 80045ac:	f043 0301 	orr.w	r3, r3, #1
 80045b0:	b25b      	sxtb	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	4619      	mov	r1, r3
 80045b6:	2033      	movs	r0, #51	; 0x33
 80045b8:	f000 fac6 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80045bc:	211d      	movs	r1, #29
 80045be:	203b      	movs	r0, #59	; 0x3b
 80045c0:	f000 fac2 	bl	8004b48 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80045c4:	4b82      	ldr	r3, [pc, #520]	; (80047d0 <SX1276SetRx+0x2fc>)
 80045c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	f200 8087 	bhi.w	80046de <SX1276SetRx+0x20a>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80045d0:	2031      	movs	r0, #49	; 0x31
 80045d2:	f000 fac9 	bl	8004b68 <SX1276Read>
 80045d6:	4603      	mov	r3, r0
 80045d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	4619      	mov	r1, r3
 80045e0:	2031      	movs	r0, #49	; 0x31
 80045e2:	f000 fab1 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80045e6:	2100      	movs	r1, #0
 80045e8:	2030      	movs	r0, #48	; 0x30
 80045ea:	f000 faad 	bl	8004b48 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80045ee:	4b78      	ldr	r3, [pc, #480]	; (80047d0 <SX1276SetRx+0x2fc>)
 80045f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045f4:	2b08      	cmp	r3, #8
 80045f6:	d87d      	bhi.n	80046f4 <SX1276SetRx+0x220>
 80045f8:	a201      	add	r2, pc, #4	; (adr r2, 8004600 <SX1276SetRx+0x12c>)
 80045fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045fe:	bf00      	nop
 8004600:	08004625 	.word	0x08004625
 8004604:	0800463f 	.word	0x0800463f
 8004608:	08004659 	.word	0x08004659
 800460c:	08004673 	.word	0x08004673
 8004610:	0800468d 	.word	0x0800468d
 8004614:	080046a7 	.word	0x080046a7
 8004618:	080046c1 	.word	0x080046c1
 800461c:	080046cb 	.word	0x080046cb
 8004620:	080046d5 	.word	0x080046d5
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 8004624:	2148      	movs	r1, #72	; 0x48
 8004626:	202f      	movs	r0, #47	; 0x2f
 8004628:	f000 fa8e 	bl	8004b48 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800462c:	4b68      	ldr	r3, [pc, #416]	; (80047d0 <SX1276SetRx+0x2fc>)
 800462e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004630:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8004634:	3302      	adds	r3, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff f9a6 	bl	8003988 <SX1276SetChannel>
                    break;
 800463c:	e05a      	b.n	80046f4 <SX1276SetRx+0x220>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800463e:	2144      	movs	r1, #68	; 0x44
 8004640:	202f      	movs	r0, #47	; 0x2f
 8004642:	f000 fa81 	bl	8004b48 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 8004646:	4b62      	ldr	r3, [pc, #392]	; (80047d0 <SX1276SetRx+0x2fc>)
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 800464e:	3334      	adds	r3, #52	; 0x34
 8004650:	4618      	mov	r0, r3
 8004652:	f7ff f999 	bl	8003988 <SX1276SetChannel>
                    break;
 8004656:	e04d      	b.n	80046f4 <SX1276SetRx+0x220>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004658:	2144      	movs	r1, #68	; 0x44
 800465a:	202f      	movs	r0, #47	; 0x2f
 800465c:	f000 fa74 	bl	8004b48 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8004660:	4b5b      	ldr	r3, [pc, #364]	; (80047d0 <SX1276SetRx+0x2fc>)
 8004662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004664:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8004668:	3304      	adds	r3, #4
 800466a:	4618      	mov	r0, r3
 800466c:	f7ff f98c 	bl	8003988 <SX1276SetChannel>
                    break;
 8004670:	e040      	b.n	80046f4 <SX1276SetRx+0x220>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004672:	2144      	movs	r1, #68	; 0x44
 8004674:	202f      	movs	r0, #47	; 0x2f
 8004676:	f000 fa67 	bl	8004b48 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800467a:	4b55      	ldr	r3, [pc, #340]	; (80047d0 <SX1276SetRx+0x2fc>)
 800467c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467e:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 8004682:	335e      	adds	r3, #94	; 0x5e
 8004684:	4618      	mov	r0, r3
 8004686:	f7ff f97f 	bl	8003988 <SX1276SetChannel>
                    break;
 800468a:	e033      	b.n	80046f4 <SX1276SetRx+0x220>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800468c:	2144      	movs	r1, #68	; 0x44
 800468e:	202f      	movs	r0, #47	; 0x2f
 8004690:	f000 fa5a 	bl	8004b48 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 8004694:	4b4e      	ldr	r3, [pc, #312]	; (80047d0 <SX1276SetRx+0x2fc>)
 8004696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004698:	f503 43f4 	add.w	r3, r3, #31232	; 0x7a00
 800469c:	3312      	adds	r3, #18
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff f972 	bl	8003988 <SX1276SetChannel>
                    break;
 80046a4:	e026      	b.n	80046f4 <SX1276SetRx+0x220>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80046a6:	2144      	movs	r1, #68	; 0x44
 80046a8:	202f      	movs	r0, #47	; 0x2f
 80046aa:	f000 fa4d 	bl	8004b48 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80046ae:	4b48      	ldr	r3, [pc, #288]	; (80047d0 <SX1276SetRx+0x2fc>)
 80046b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b2:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 80046b6:	33c6      	adds	r3, #198	; 0xc6
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff f965 	bl	8003988 <SX1276SetChannel>
                    break;
 80046be:	e019      	b.n	80046f4 <SX1276SetRx+0x220>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80046c0:	2140      	movs	r1, #64	; 0x40
 80046c2:	202f      	movs	r0, #47	; 0x2f
 80046c4:	f000 fa40 	bl	8004b48 <SX1276Write>
                    break;
 80046c8:	e014      	b.n	80046f4 <SX1276SetRx+0x220>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80046ca:	2140      	movs	r1, #64	; 0x40
 80046cc:	202f      	movs	r0, #47	; 0x2f
 80046ce:	f000 fa3b 	bl	8004b48 <SX1276Write>
                    break;
 80046d2:	e00f      	b.n	80046f4 <SX1276SetRx+0x220>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80046d4:	2140      	movs	r1, #64	; 0x40
 80046d6:	202f      	movs	r0, #47	; 0x2f
 80046d8:	f000 fa36 	bl	8004b48 <SX1276Write>
                    break;
 80046dc:	e00a      	b.n	80046f4 <SX1276SetRx+0x220>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80046de:	2031      	movs	r0, #49	; 0x31
 80046e0:	f000 fa42 	bl	8004b68 <SX1276Read>
 80046e4:	4603      	mov	r3, r0
 80046e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	4619      	mov	r1, r3
 80046ee:	2031      	movs	r0, #49	; 0x31
 80046f0:	f000 fa2a 	bl	8004b48 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80046f4:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <SX1276SetRx+0x2fc>)
 80046f6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80046fa:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80046fc:	4b34      	ldr	r3, [pc, #208]	; (80047d0 <SX1276SetRx+0x2fc>)
 80046fe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00f      	beq.n	8004726 <SX1276SetRx+0x252>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004706:	211d      	movs	r1, #29
 8004708:	2011      	movs	r0, #17
 800470a:	f000 fa1d 	bl	8004b48 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800470e:	2040      	movs	r0, #64	; 0x40
 8004710:	f000 fa2a 	bl	8004b68 <SX1276Read>
 8004714:	4603      	mov	r3, r0
 8004716:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800471a:	b2db      	uxtb	r3, r3
 800471c:	4619      	mov	r1, r3
 800471e:	2040      	movs	r0, #64	; 0x40
 8004720:	f000 fa12 	bl	8004b48 <SX1276Write>
 8004724:	e00e      	b.n	8004744 <SX1276SetRx+0x270>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8004726:	211f      	movs	r1, #31
 8004728:	2011      	movs	r0, #17
 800472a:	f000 fa0d 	bl	8004b48 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800472e:	2040      	movs	r0, #64	; 0x40
 8004730:	f000 fa1a 	bl	8004b68 <SX1276Read>
 8004734:	4603      	mov	r3, r0
 8004736:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800473a:	b2db      	uxtb	r3, r3
 800473c:	4619      	mov	r1, r3
 800473e:	2040      	movs	r0, #64	; 0x40
 8004740:	f000 fa02 	bl	8004b48 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 8004744:	2100      	movs	r1, #0
 8004746:	200f      	movs	r0, #15
 8004748:	f000 f9fe 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800474c:	2100      	movs	r1, #0
 800474e:	200d      	movs	r0, #13
 8004750:	f000 f9fa 	bl	8004b48 <SX1276Write>
        }
        break;
 8004754:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 8004756:	f44f 7280 	mov.w	r2, #256	; 0x100
 800475a:	2100      	movs	r1, #0
 800475c:	481d      	ldr	r0, [pc, #116]	; (80047d4 <SX1276SetRx+0x300>)
 800475e:	f002 fa53 	bl	8006c08 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 8004762:	4b1b      	ldr	r3, [pc, #108]	; (80047d0 <SX1276SetRx+0x2fc>)
 8004764:	2201      	movs	r2, #1
 8004766:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if( timeout != 0 )
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d006      	beq.n	800477e <SX1276SetRx+0x2aa>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	4819      	ldr	r0, [pc, #100]	; (80047d8 <SX1276SetRx+0x304>)
 8004774:	f002 f98c 	bl	8006a90 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8004778:	4817      	ldr	r0, [pc, #92]	; (80047d8 <SX1276SetRx+0x304>)
 800477a:	f001 ffd3 	bl	8006724 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <SX1276SetRx+0x2fc>)
 8004780:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004784:	2b00      	cmp	r3, #0
 8004786:	d112      	bne.n	80047ae <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER ); // ??
 8004788:	2005      	movs	r0, #5
 800478a:	f000 f959 	bl	8004a40 <SX1276SetOpMode>

        if( rxContinuous == false )
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	f083 0301 	eor.w	r3, r3, #1
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d013      	beq.n	80047c2 <SX1276SetRx+0x2ee>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800479a:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <SX1276SetRx+0x2fc>)
 800479c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800479e:	4619      	mov	r1, r3
 80047a0:	480e      	ldr	r0, [pc, #56]	; (80047dc <SX1276SetRx+0x308>)
 80047a2:	f002 f975 	bl	8006a90 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80047a6:	480d      	ldr	r0, [pc, #52]	; (80047dc <SX1276SetRx+0x308>)
 80047a8:	f001 ffbc 	bl	8006724 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 80047ac:	e009      	b.n	80047c2 <SX1276SetRx+0x2ee>
        if( rxContinuous == true )
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d003      	beq.n	80047bc <SX1276SetRx+0x2e8>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80047b4:	2005      	movs	r0, #5
 80047b6:	f000 f943 	bl	8004a40 <SX1276SetOpMode>
}
 80047ba:	e002      	b.n	80047c2 <SX1276SetRx+0x2ee>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80047bc:	2006      	movs	r0, #6
 80047be:	f000 f93f 	bl	8004a40 <SX1276SetOpMode>
}
 80047c2:	bf00      	nop
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200002d0 	.word	0x200002d0
 80047d0:	20000300 	.word	0x20000300
 80047d4:	20000064 	.word	0x20000064
 80047d8:	200003a8 	.word	0x200003a8
 80047dc:	200002e8 	.word	0x200002e8

080047e0 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 80047e8:	4836      	ldr	r0, [pc, #216]	; (80048c4 <SX1276SetTx+0xe4>)
 80047ea:	f002 f8bb 	bl	8006964 <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80047ee:	6879      	ldr	r1, [r7, #4]
 80047f0:	4835      	ldr	r0, [pc, #212]	; (80048c8 <SX1276SetTx+0xe8>)
 80047f2:	f002 f94d 	bl	8006a90 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 80047f6:	4b35      	ldr	r3, [pc, #212]	; (80048cc <SX1276SetTx+0xec>)
 80047f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d002      	beq.n	8004806 <SX1276SetTx+0x26>
 8004800:	2b01      	cmp	r3, #1
 8004802:	d021      	beq.n	8004848 <SX1276SetTx+0x68>
 8004804:	e04f      	b.n	80048a6 <SX1276SetTx+0xc6>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004806:	2040      	movs	r0, #64	; 0x40
 8004808:	f000 f9ae 	bl	8004b68 <SX1276Read>
 800480c:	4603      	mov	r3, r0
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	b2db      	uxtb	r3, r3
 8004814:	4619      	mov	r1, r3
 8004816:	2040      	movs	r0, #64	; 0x40
 8004818:	f000 f996 	bl	8004b48 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800481c:	2041      	movs	r0, #65	; 0x41
 800481e:	f000 f9a3 	bl	8004b68 <SX1276Read>
 8004822:	4603      	mov	r3, r0
 8004824:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004828:	b2db      	uxtb	r3, r3
 800482a:	4619      	mov	r1, r3
 800482c:	2041      	movs	r0, #65	; 0x41
 800482e:	f000 f98b 	bl	8004b48 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8004832:	2035      	movs	r0, #53	; 0x35
 8004834:	f000 f998 	bl	8004b68 <SX1276Read>
 8004838:	4603      	mov	r3, r0
 800483a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800483e:	b2da      	uxtb	r2, r3
 8004840:	4b22      	ldr	r3, [pc, #136]	; (80048cc <SX1276SetTx+0xec>)
 8004842:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        }
        break;
 8004846:	e02e      	b.n	80048a6 <SX1276SetTx+0xc6>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004848:	4b20      	ldr	r3, [pc, #128]	; (80048cc <SX1276SetTx+0xec>)
 800484a:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800484e:	2b00      	cmp	r3, #0
 8004850:	d014      	beq.n	800487c <SX1276SetTx+0x9c>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004852:	21f5      	movs	r1, #245	; 0xf5
 8004854:	2011      	movs	r0, #17
 8004856:	f000 f977 	bl	8004b48 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800485a:	2040      	movs	r0, #64	; 0x40
 800485c:	f000 f984 	bl	8004b68 <SX1276Read>
 8004860:	4603      	mov	r3, r0
 8004862:	b25b      	sxtb	r3, r3
 8004864:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004868:	b25b      	sxtb	r3, r3
 800486a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800486e:	b25b      	sxtb	r3, r3
 8004870:	b2db      	uxtb	r3, r3
 8004872:	4619      	mov	r1, r3
 8004874:	2040      	movs	r0, #64	; 0x40
 8004876:	f000 f967 	bl	8004b48 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 800487a:	e013      	b.n	80048a4 <SX1276SetTx+0xc4>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800487c:	21f7      	movs	r1, #247	; 0xf7
 800487e:	2011      	movs	r0, #17
 8004880:	f000 f962 	bl	8004b48 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8004884:	2040      	movs	r0, #64	; 0x40
 8004886:	f000 f96f 	bl	8004b68 <SX1276Read>
 800488a:	4603      	mov	r3, r0
 800488c:	b25b      	sxtb	r3, r3
 800488e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004892:	b25b      	sxtb	r3, r3
 8004894:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004898:	b25b      	sxtb	r3, r3
 800489a:	b2db      	uxtb	r3, r3
 800489c:	4619      	mov	r1, r3
 800489e:	2040      	movs	r0, #64	; 0x40
 80048a0:	f000 f952 	bl	8004b48 <SX1276Write>
        break;
 80048a4:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 80048a6:	4b09      	ldr	r3, [pc, #36]	; (80048cc <SX1276SetTx+0xec>)
 80048a8:	2202      	movs	r2, #2
 80048aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 80048ae:	4806      	ldr	r0, [pc, #24]	; (80048c8 <SX1276SetTx+0xe8>)
 80048b0:	f001 ff38 	bl	8006724 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80048b4:	2003      	movs	r0, #3
 80048b6:	f000 f8c3 	bl	8004a40 <SX1276SetOpMode>
}
 80048ba:	bf00      	nop
 80048bc:	3708      	adds	r7, #8
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	200003a8 	.word	0x200003a8
 80048c8:	200002d0 	.word	0x200002d0
 80048cc:	20000300 	.word	0x20000300

080048d0 <SX1276StartCad>:

void SX1276StartCad( void )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80048d4:	4b10      	ldr	r3, [pc, #64]	; (8004918 <SX1276StartCad+0x48>)
 80048d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d019      	beq.n	8004912 <SX1276StartCad+0x42>
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d000      	beq.n	80048e4 <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80048e2:	e017      	b.n	8004914 <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80048e4:	21fa      	movs	r1, #250	; 0xfa
 80048e6:	2011      	movs	r0, #17
 80048e8:	f000 f92e 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80048ec:	2040      	movs	r0, #64	; 0x40
 80048ee:	f000 f93b 	bl	8004b68 <SX1276Read>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f023 0303 	bic.w	r3, r3, #3
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	4619      	mov	r1, r3
 80048fc:	2040      	movs	r0, #64	; 0x40
 80048fe:	f000 f923 	bl	8004b48 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8004902:	4b05      	ldr	r3, [pc, #20]	; (8004918 <SX1276StartCad+0x48>)
 8004904:	2203      	movs	r2, #3
 8004906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 800490a:	2007      	movs	r0, #7
 800490c:	f000 f898 	bl	8004a40 <SX1276SetOpMode>
        break;
 8004910:	e000      	b.n	8004914 <SX1276StartCad+0x44>
        break;
 8004912:	bf00      	nop
    }
}
 8004914:	bf00      	nop
 8004916:	bd80      	pop	{r7, pc}
 8004918:	20000300 	.word	0x20000300

0800491c <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08e      	sub	sp, #56	; 0x38
 8004920:	af0a      	add	r7, sp, #40	; 0x28
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	460b      	mov	r3, r1
 8004926:	70fb      	strb	r3, [r7, #3]
 8004928:	4613      	mov	r3, r2
 800492a:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 800492c:	883b      	ldrh	r3, [r7, #0]
 800492e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f7ff f825 	bl	8003988 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800493e:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	9308      	str	r3, [sp, #32]
 8004946:	2300      	movs	r3, #0
 8004948:	9307      	str	r3, [sp, #28]
 800494a:	2300      	movs	r3, #0
 800494c:	9306      	str	r3, [sp, #24]
 800494e:	2300      	movs	r3, #0
 8004950:	9305      	str	r3, [sp, #20]
 8004952:	2300      	movs	r3, #0
 8004954:	9304      	str	r3, [sp, #16]
 8004956:	2300      	movs	r3, #0
 8004958:	9303      	str	r3, [sp, #12]
 800495a:	2305      	movs	r3, #5
 800495c:	9302      	str	r3, [sp, #8]
 800495e:	2300      	movs	r3, #0
 8004960:	9301      	str	r3, [sp, #4]
 8004962:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	2300      	movs	r3, #0
 800496a:	2200      	movs	r2, #0
 800496c:	2000      	movs	r0, #0
 800496e:	f7ff fae7 	bl	8003f40 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8004972:	2031      	movs	r0, #49	; 0x31
 8004974:	f000 f8f8 	bl	8004b68 <SX1276Read>
 8004978:	4603      	mov	r3, r0
 800497a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800497e:	b2db      	uxtb	r3, r3
 8004980:	4619      	mov	r1, r3
 8004982:	2031      	movs	r0, #49	; 0x31
 8004984:	f000 f8e0 	bl	8004b48 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8004988:	21f0      	movs	r1, #240	; 0xf0
 800498a:	2040      	movs	r0, #64	; 0x40
 800498c:	f000 f8dc 	bl	8004b48 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8004990:	21a0      	movs	r1, #160	; 0xa0
 8004992:	2041      	movs	r0, #65	; 0x41
 8004994:	f000 f8d8 	bl	8004b48 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8004998:	68f9      	ldr	r1, [r7, #12]
 800499a:	4808      	ldr	r0, [pc, #32]	; (80049bc <SX1276SetTxContinuousWave+0xa0>)
 800499c:	f002 f878 	bl	8006a90 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING; //??
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <SX1276SetTxContinuousWave+0xa4>)
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 80049a8:	4804      	ldr	r0, [pc, #16]	; (80049bc <SX1276SetTxContinuousWave+0xa0>)
 80049aa:	f001 febb 	bl	8006724 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80049ae:	2003      	movs	r0, #3
 80049b0:	f000 f846 	bl	8004a40 <SX1276SetOpMode>
}
 80049b4:	bf00      	nop
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	200002d0 	.word	0x200002d0
 80049c0:	20000300 	.word	0x20000300

080049c4 <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	4603      	mov	r3, r0
 80049cc:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <SX1276ReadRssi+0x1a>
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d00b      	beq.n	80049f4 <SX1276ReadRssi+0x30>
 80049dc:	e021      	b.n	8004a22 <SX1276ReadRssi+0x5e>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80049de:	2011      	movs	r0, #17
 80049e0:	f000 f8c2 	bl	8004b68 <SX1276Read>
 80049e4:	4603      	mov	r3, r0
 80049e6:	085b      	lsrs	r3, r3, #1
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	425b      	negs	r3, r3
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	81fb      	strh	r3, [r7, #14]
        break;
 80049f2:	e01a      	b.n	8004a2a <SX1276ReadRssi+0x66>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80049f4:	4b10      	ldr	r3, [pc, #64]	; (8004a38 <SX1276ReadRssi+0x74>)
 80049f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f8:	4a10      	ldr	r2, [pc, #64]	; (8004a3c <SX1276ReadRssi+0x78>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d908      	bls.n	8004a10 <SX1276ReadRssi+0x4c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80049fe:	201b      	movs	r0, #27
 8004a00:	f000 f8b2 	bl	8004b68 <SX1276Read>
 8004a04:	4603      	mov	r3, r0
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	3b9d      	subs	r3, #157	; 0x9d
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8004a0e:	e00c      	b.n	8004a2a <SX1276ReadRssi+0x66>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004a10:	201b      	movs	r0, #27
 8004a12:	f000 f8a9 	bl	8004b68 <SX1276Read>
 8004a16:	4603      	mov	r3, r0
 8004a18:	b29b      	uxth	r3, r3
 8004a1a:	3ba4      	subs	r3, #164	; 0xa4
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	81fb      	strh	r3, [r7, #14]
        break;
 8004a20:	e003      	b.n	8004a2a <SX1276ReadRssi+0x66>
    default:
        rssi = -1;
 8004a22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a26:	81fb      	strh	r3, [r7, #14]
        break;
 8004a28:	bf00      	nop
    }
    return rssi;
 8004a2a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000300 	.word	0x20000300
 8004a3c:	1f4add40 	.word	0x1f4add40

08004a40 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	4603      	mov	r3, r0
 8004a48:	71fb      	strb	r3, [r7, #7]
            SX1276DbgPinTxWrite( 0 );
            SX1276DbgPinRxWrite( 0 );
            break;
    }
#endif
    if( opMode == RF_OPMODE_SLEEP )
 8004a4a:	79fb      	ldrb	r3, [r7, #7]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 8004a50:	2001      	movs	r0, #1
 8004a52:	f001 fdb5 	bl	80065c0 <SX1276SetAntSwLowPower>
 8004a56:	e009      	b.n	8004a6c <SX1276SetOpMode+0x2c>
    }
    else
    {
        // Enable TCXO if operating mode different from SLEEP.
        SX1276SetBoardTcxo( true );
 8004a58:	2001      	movs	r0, #1
 8004a5a:	f001 fcbd 	bl	80063d8 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8004a5e:	2000      	movs	r0, #0
 8004a60:	f001 fdae 	bl	80065c0 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f001 fdd4 	bl	8006614 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004a6c:	2001      	movs	r0, #1
 8004a6e:	f000 f87b 	bl	8004b68 <SX1276Read>
 8004a72:	4603      	mov	r3, r0
 8004a74:	b25b      	sxtb	r3, r3
 8004a76:	f023 0307 	bic.w	r3, r3, #7
 8004a7a:	b25a      	sxtb	r2, r3
 8004a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	b25b      	sxtb	r3, r3
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	4619      	mov	r1, r3
 8004a88:	2001      	movs	r0, #1
 8004a8a:	f000 f85d 	bl	8004b48 <SX1276Write>
}
 8004a8e:	bf00      	nop
 8004a90:	3708      	adds	r7, #8
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
	...

08004a98 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	71fb      	strb	r3, [r7, #7]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004aa2:	2001      	movs	r0, #1
 8004aa4:	f000 f860 	bl	8004b68 <SX1276Read>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	b25b      	sxtb	r3, r3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	da04      	bge.n	8004aba <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8004ab0:	4b24      	ldr	r3, [pc, #144]	; (8004b44 <SX1276SetModem+0xac>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab8:	e003      	b.n	8004ac2 <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8004aba:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <SX1276SetModem+0xac>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }

    if( SX1276.Settings.Modem == modem )
 8004ac2:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <SX1276SetModem+0xac>)
 8004ac4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac8:	79fa      	ldrb	r2, [r7, #7]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d036      	beq.n	8004b3c <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8004ace:	4a1d      	ldr	r2, [pc, #116]	; (8004b44 <SX1276SetModem+0xac>)
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    switch( SX1276.Settings.Modem )
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <SX1276SetModem+0xac>)
 8004ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d016      	beq.n	8004b0e <SX1276SetModem+0x76>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7ff ffad 	bl	8004a40 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f000 f83e 	bl	8004b68 <SX1276Read>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	4619      	mov	r1, r3
 8004af6:	2001      	movs	r0, #1
 8004af8:	f000 f826 	bl	8004b48 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004afc:	2100      	movs	r1, #0
 8004afe:	2040      	movs	r0, #64	; 0x40
 8004b00:	f000 f822 	bl	8004b48 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004b04:	2130      	movs	r1, #48	; 0x30
 8004b06:	2041      	movs	r0, #65	; 0x41
 8004b08:	f000 f81e 	bl	8004b48 <SX1276Write>
        break;
 8004b0c:	e017      	b.n	8004b3e <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7ff ff96 	bl	8004a40 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004b14:	2001      	movs	r0, #1
 8004b16:	f000 f827 	bl	8004b68 <SX1276Read>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	4619      	mov	r1, r3
 8004b24:	2001      	movs	r0, #1
 8004b26:	f000 f80f 	bl	8004b48 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	2040      	movs	r0, #64	; 0x40
 8004b2e:	f000 f80b 	bl	8004b48 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004b32:	2100      	movs	r1, #0
 8004b34:	2041      	movs	r0, #65	; 0x41
 8004b36:	f000 f807 	bl	8004b48 <SX1276Write>
        break;
 8004b3a:	e000      	b.n	8004b3e <SX1276SetModem+0xa6>
        return;
 8004b3c:	bf00      	nop
    }
}
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000300 	.word	0x20000300

08004b48 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
 8004b50:	460b      	mov	r3, r1
 8004b52:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( addr, &data, 1 );
 8004b54:	1cfb      	adds	r3, r7, #3
 8004b56:	2201      	movs	r2, #1
 8004b58:	4619      	mov	r1, r3
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 f814 	bl	8004b88 <SX1276WriteBuffer>
}
 8004b60:	bf00      	nop
 8004b62:	3708      	adds	r7, #8
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b084      	sub	sp, #16
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8004b70:	f107 030f 	add.w	r3, r7, #15
 8004b74:	2201      	movs	r2, #1
 8004b76:	4619      	mov	r1, r3
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f839 	bl	8004bf0 <SX1276ReadBuffer>
    return data;
 8004b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	4613      	mov	r3, r2
 8004b94:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8004b96:	2100      	movs	r1, #0
 8004b98:	4813      	ldr	r0, [pc, #76]	; (8004be8 <SX1276WriteBuffer+0x60>)
 8004b9a:	f7fb fd19 	bl	80005d0 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	4619      	mov	r1, r3
 8004baa:	4810      	ldr	r0, [pc, #64]	; (8004bec <SX1276WriteBuffer+0x64>)
 8004bac:	f7fb fee4 	bl	8000978 <SpiInOut>
    for( i = 0; i < size; i++ )
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	75fb      	strb	r3, [r7, #23]
 8004bb4:	e00b      	b.n	8004bce <SX1276WriteBuffer+0x46>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
 8004bb8:	68ba      	ldr	r2, [r7, #8]
 8004bba:	4413      	add	r3, r2
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	480a      	ldr	r0, [pc, #40]	; (8004bec <SX1276WriteBuffer+0x64>)
 8004bc4:	f7fb fed8 	bl	8000978 <SpiInOut>
    for( i = 0; i < size; i++ )
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	75fb      	strb	r3, [r7, #23]
 8004bce:	7dfa      	ldrb	r2, [r7, #23]
 8004bd0:	79fb      	ldrb	r3, [r7, #7]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d3ef      	bcc.n	8004bb6 <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	4803      	ldr	r0, [pc, #12]	; (8004be8 <SX1276WriteBuffer+0x60>)
 8004bda:	f7fb fcf9 	bl	80005d0 <GpioWrite>
}
 8004bde:	bf00      	nop
 8004be0:	3718      	adds	r7, #24
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	2000033c 	.word	0x2000033c
 8004bec:	20000338 	.word	0x20000338

08004bf0 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b086      	sub	sp, #24
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8004bfe:	2100      	movs	r1, #0
 8004c00:	4814      	ldr	r0, [pc, #80]	; (8004c54 <SX1276ReadBuffer+0x64>)
 8004c02:	f7fb fce5 	bl	80005d0 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	4619      	mov	r1, r3
 8004c12:	4811      	ldr	r0, [pc, #68]	; (8004c58 <SX1276ReadBuffer+0x68>)
 8004c14:	f7fb feb0 	bl	8000978 <SpiInOut>

    for( i = 0; i < size; i++ )
 8004c18:	2300      	movs	r3, #0
 8004c1a:	75fb      	strb	r3, [r7, #23]
 8004c1c:	e00d      	b.n	8004c3a <SX1276ReadBuffer+0x4a>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 8004c1e:	2100      	movs	r1, #0
 8004c20:	480d      	ldr	r0, [pc, #52]	; (8004c58 <SX1276ReadBuffer+0x68>)
 8004c22:	f7fb fea9 	bl	8000978 <SpiInOut>
 8004c26:	4603      	mov	r3, r0
 8004c28:	4619      	mov	r1, r3
 8004c2a:	7dfb      	ldrb	r3, [r7, #23]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	4413      	add	r3, r2
 8004c30:	b2ca      	uxtb	r2, r1
 8004c32:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	3301      	adds	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
 8004c3a:	7dfa      	ldrb	r2, [r7, #23]
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d3ed      	bcc.n	8004c1e <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8004c42:	2101      	movs	r1, #1
 8004c44:	4803      	ldr	r0, [pc, #12]	; (8004c54 <SX1276ReadBuffer+0x64>)
 8004c46:	f7fb fcc3 	bl	80005d0 <GpioWrite>
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	2000033c 	.word	0x2000033c
 8004c58:	20000338 	.word	0x20000338

08004c5c <SX1276WriteFifo>:

static void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	460b      	mov	r3, r1
 8004c66:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	461a      	mov	r2, r3
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	2000      	movs	r0, #0
 8004c70:	f7ff ff8a 	bl	8004b88 <SX1276WriteBuffer>
}
 8004c74:	bf00      	nop
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <SX1276ReadFifo>:

static void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	6879      	ldr	r1, [r7, #4]
 8004c8e:	2000      	movs	r0, #0
 8004c90:	f7ff ffae 	bl	8004bf0 <SX1276ReadBuffer>
}
 8004c94:	bf00      	nop
 8004c96:	3708      	adds	r7, #8
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	460a      	mov	r2, r1
 8004ca6:	71fb      	strb	r3, [r7, #7]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7ff fef2 	bl	8004a98 <SX1276SetModem>

    switch( modem )
 8004cb4:	79fb      	ldrb	r3, [r7, #7]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d002      	beq.n	8004cc0 <SX1276SetMaxPayloadLength+0x24>
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d00e      	beq.n	8004cdc <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8004cbe:	e014      	b.n	8004cea <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 8004cc0:	4b0c      	ldr	r3, [pc, #48]	; (8004cf4 <SX1276SetMaxPayloadLength+0x58>)
 8004cc2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004cc6:	f083 0301 	eor.w	r3, r3, #1
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d00b      	beq.n	8004ce8 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004cd0:	79bb      	ldrb	r3, [r7, #6]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	2032      	movs	r0, #50	; 0x32
 8004cd6:	f7ff ff37 	bl	8004b48 <SX1276Write>
        break;
 8004cda:	e005      	b.n	8004ce8 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004cdc:	79bb      	ldrb	r3, [r7, #6]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	2023      	movs	r0, #35	; 0x23
 8004ce2:	f7ff ff31 	bl	8004b48 <SX1276Write>
        break;
 8004ce6:	e000      	b.n	8004cea <SX1276SetMaxPayloadLength+0x4e>
        break;
 8004ce8:	bf00      	nop
}
 8004cea:	bf00      	nop
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20000300 	.word	0x20000300

08004cf8 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b082      	sub	sp, #8
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 8004d02:	2001      	movs	r0, #1
 8004d04:	f7ff fec8 	bl	8004a98 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004d08:	4a09      	ldr	r2, [pc, #36]	; (8004d30 <SX1276SetPublicNetwork+0x38>)
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
    if( enable == true )
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004d16:	2134      	movs	r1, #52	; 0x34
 8004d18:	2039      	movs	r0, #57	; 0x39
 8004d1a:	f7ff ff15 	bl	8004b48 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8004d1e:	e003      	b.n	8004d28 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004d20:	2112      	movs	r1, #18
 8004d22:	2039      	movs	r0, #57	; 0x39
 8004d24:	f7ff ff10 	bl	8004b48 <SX1276Write>
}
 8004d28:	bf00      	nop
 8004d2a:	3708      	adds	r7, #8
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	20000300 	.word	0x20000300

08004d34 <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8004d38:	f001 fb58 	bl	80063ec <SX1276GetBoardTcxoWakeupTime>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	3301      	adds	r3, #1
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <SX1276ConvertPllStepToFreqInHz>:

static uint32_t SX1276ConvertPllStepToFreqInHz( uint32_t pllSteps )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
    uint32_t freqInHzInt;
    uint32_t freqInHzFrac;
    
    // freqInHz = pllSteps * ( SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	0a1b      	lsrs	r3, r3, #8
 8004d50:	60fb      	str	r3, [r7, #12]
    freqInHzFrac = pllSteps - ( freqInHzInt << SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004d62:	fb02 f203 	mul.w	r2, r2, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	f643 5109 	movw	r1, #15625	; 0x3d09
 8004d6c:	fb01 f303 	mul.w	r3, r1, r3
 8004d70:	3380      	adds	r3, #128	; 0x80
 8004d72:	0a1b      	lsrs	r3, r3, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8004d74:	4413      	add	r3, r2
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr

08004d80 <SX1276ConvertFreqInHzToPllStep>:

static uint32_t SX1276ConvertFreqInHzToPllStep( uint32_t freqInHz )
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0f      	ldr	r2, [pc, #60]	; (8004dc8 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8004d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d90:	0b1b      	lsrs	r3, r3, #12
 8004d92:	60fb      	str	r3, [r7, #12]
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004d9a:	fb02 f303 	mul.w	r3, r2, r3
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	021a      	lsls	r2, r3, #8
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	021b      	lsls	r3, r3, #8
 8004dac:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8004db0:	3304      	adds	r3, #4
 8004db2:	4905      	ldr	r1, [pc, #20]	; (8004dc8 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8004db4:	fba1 1303 	umull	r1, r3, r1, r3
 8004db8:	0b1b      	lsrs	r3, r3, #12
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004dba:	4413      	add	r3, r2
             SX1276_PLL_STEP_SCALED );
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3714      	adds	r7, #20
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bc80      	pop	{r7}
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	431bde83 	.word	0x431bde83

08004dcc <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	e017      	b.n	8004e0a <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	4a0f      	ldr	r2, [pc, #60]	; (8004e1c <GetFskBandwidthRegValue+0x50>)
 8004dde:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d30d      	bcc.n	8004e04 <GetFskBandwidthRegValue+0x38>
 8004de8:	7bfb      	ldrb	r3, [r7, #15]
 8004dea:	3301      	adds	r3, #1
 8004dec:	4a0b      	ldr	r2, [pc, #44]	; (8004e1c <GetFskBandwidthRegValue+0x50>)
 8004dee:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d205      	bcs.n	8004e04 <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8004df8:	7bfb      	ldrb	r3, [r7, #15]
 8004dfa:	4a08      	ldr	r2, [pc, #32]	; (8004e1c <GetFskBandwidthRegValue+0x50>)
 8004dfc:	00db      	lsls	r3, r3, #3
 8004dfe:	4413      	add	r3, r2
 8004e00:	791b      	ldrb	r3, [r3, #4]
 8004e02:	e006      	b.n	8004e12 <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	3301      	adds	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	2b14      	cmp	r3, #20
 8004e0e:	d9e4      	bls.n	8004dda <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8004e10:	e7fe      	b.n	8004e10 <GetFskBandwidthRegValue+0x44>
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3714      	adds	r7, #20
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr
 8004e1c:	08006c84 	.word	0x08006c84

08004e20 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d00f      	beq.n	8004e52 <SX1276GetLoRaBandwidthInHz+0x32>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d80f      	bhi.n	8004e58 <SX1276GetLoRaBandwidthInHz+0x38>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <SX1276GetLoRaBandwidthInHz+0x26>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d003      	beq.n	8004e4c <SX1276GetLoRaBandwidthInHz+0x2c>
 8004e44:	e008      	b.n	8004e58 <SX1276GetLoRaBandwidthInHz+0x38>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 8004e46:	4b07      	ldr	r3, [pc, #28]	; (8004e64 <SX1276GetLoRaBandwidthInHz+0x44>)
 8004e48:	60fb      	str	r3, [r7, #12]
        break;
 8004e4a:	e005      	b.n	8004e58 <SX1276GetLoRaBandwidthInHz+0x38>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 8004e4c:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <SX1276GetLoRaBandwidthInHz+0x48>)
 8004e4e:	60fb      	str	r3, [r7, #12]
        break;
 8004e50:	e002      	b.n	8004e58 <SX1276GetLoRaBandwidthInHz+0x38>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 8004e52:	4b06      	ldr	r3, [pc, #24]	; (8004e6c <SX1276GetLoRaBandwidthInHz+0x4c>)
 8004e54:	60fb      	str	r3, [r7, #12]
        break;
 8004e56:	bf00      	nop
    }

    return bandwidthInHz;
 8004e58:	68fb      	ldr	r3, [r7, #12]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bc80      	pop	{r7}
 8004e62:	4770      	bx	lr
 8004e64:	0001e848 	.word	0x0001e848
 8004e68:	0003d090 	.word	0x0003d090
 8004e6c:	0007a120 	.word	0x0007a120

08004e70 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 8004e70:	b490      	push	{r4, r7}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	4604      	mov	r4, r0
 8004e78:	4608      	mov	r0, r1
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4623      	mov	r3, r4
 8004e80:	80fb      	strh	r3, [r7, #6]
 8004e82:	4603      	mov	r3, r0
 8004e84:	717b      	strb	r3, [r7, #5]
 8004e86:	460b      	mov	r3, r1
 8004e88:	713b      	strb	r3, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	70fb      	strb	r3, [r7, #3]
    const uint8_t syncWordLength = 3;
 8004e8e:	2303      	movs	r3, #3
 8004e90:	73fb      	strb	r3, [r7, #15]

    return ( preambleLen << 3 ) +
 8004e92:	88fb      	ldrh	r3, [r7, #6]
 8004e94:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8004e96:	797a      	ldrb	r2, [r7, #5]
 8004e98:	f082 0201 	eor.w	r2, r2, #1
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	2a00      	cmp	r2, #0
 8004ea0:	d001      	beq.n	8004ea6 <SX1276GetGfskTimeOnAirNumerator+0x36>
 8004ea2:	2208      	movs	r2, #8
 8004ea4:	e000      	b.n	8004ea8 <SX1276GetGfskTimeOnAirNumerator+0x38>
 8004ea6:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8004ea8:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8004eae:	441a      	add	r2, r3
             ( ( payloadLen +
 8004eb0:	793b      	ldrb	r3, [r7, #4]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8004eb2:	78f9      	ldrb	r1, [r7, #3]
 8004eb4:	2900      	cmp	r1, #0
 8004eb6:	d001      	beq.n	8004ebc <SX1276GetGfskTimeOnAirNumerator+0x4c>
 8004eb8:	2102      	movs	r1, #2
 8004eba:	e000      	b.n	8004ebe <SX1276GetGfskTimeOnAirNumerator+0x4e>
 8004ebc:	2100      	movs	r1, #0
               ( 0 ) + // Address filter size
 8004ebe:	440b      	add	r3, r1
               ) << 3 
 8004ec0:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 8004ec2:	4413      	add	r3, r2
             );
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3710      	adds	r7, #16
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bc90      	pop	{r4, r7}
 8004ecc:	4770      	bx	lr

08004ece <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b08b      	sub	sp, #44	; 0x2c
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	60f8      	str	r0, [r7, #12]
 8004ed6:	60b9      	str	r1, [r7, #8]
 8004ed8:	4611      	mov	r1, r2
 8004eda:	461a      	mov	r2, r3
 8004edc:	460b      	mov	r3, r1
 8004ede:	71fb      	strb	r3, [r7, #7]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	2b05      	cmp	r3, #5
 8004ef4:	d002      	beq.n	8004efc <SX1276GetLoRaTimeOnAirNumerator+0x2e>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b06      	cmp	r3, #6
 8004efa:	d104      	bne.n	8004f06 <SX1276GetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8004efc:	88bb      	ldrh	r3, [r7, #4]
 8004efe:	2b0b      	cmp	r3, #11
 8004f00:	d801      	bhi.n	8004f06 <SX1276GetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8004f02:	230c      	movs	r3, #12
 8004f04:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d105      	bne.n	8004f18 <SX1276GetLoRaTimeOnAirNumerator+0x4a>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b0b      	cmp	r3, #11
 8004f10:	d008      	beq.n	8004f24 <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2b0c      	cmp	r3, #12
 8004f16:	d005      	beq.n	8004f24 <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d105      	bne.n	8004f2a <SX1276GetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	2b0c      	cmp	r3, #12
 8004f22:	d102      	bne.n	8004f2a <SX1276GetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8004f24:	2301      	movs	r3, #1
 8004f26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004f2a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f2e:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8004f30:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f34:	2a00      	cmp	r2, #0
 8004f36:	d001      	beq.n	8004f3c <SX1276GetLoRaTimeOnAirNumerator+0x6e>
 8004f38:	2210      	movs	r2, #16
 8004f3a:	e000      	b.n	8004f3e <SX1276GetLoRaTimeOnAirNumerator+0x70>
 8004f3c:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004f3e:	4413      	add	r3, r2
 8004f40:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8004f46:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8004f48:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	d001      	beq.n	8004f54 <SX1276GetLoRaTimeOnAirNumerator+0x86>
 8004f50:	2200      	movs	r2, #0
 8004f52:	e000      	b.n	8004f56 <SX1276GetLoRaTimeOnAirNumerator+0x88>
 8004f54:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8004f56:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004f58:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2b06      	cmp	r3, #6
 8004f5e:	d803      	bhi.n	8004f68 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	623b      	str	r3, [r7, #32]
 8004f66:	e00e      	b.n	8004f86 <SX1276GetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8004f6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <SX1276GetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	3b02      	subs	r3, #2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	623b      	str	r3, [r7, #32]
 8004f7e:	e002      	b.n	8004f86 <SX1276GetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	009b      	lsls	r3, r3, #2
 8004f84:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	da01      	bge.n	8004f90 <SX1276GetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	4413      	add	r3, r2
 8004f96:	1e5a      	subs	r2, r3, #1
 8004f98:	6a3b      	ldr	r3, [r7, #32]
 8004f9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	fb02 f203 	mul.w	r2, r2, r3
 8004fa4:	88bb      	ldrh	r3, [r7, #4]
 8004fa6:	4413      	add	r3, r2
    int32_t intermediate =
 8004fa8:	330c      	adds	r3, #12
 8004faa:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b06      	cmp	r3, #6
 8004fb0:	d802      	bhi.n	8004fb8 <SX1276GetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	3b02      	subs	r3, #2
 8004fc2:	fa02 f303 	lsl.w	r3, r2, r3
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	372c      	adds	r7, #44	; 0x2c
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bc80      	pop	{r7}
 8004fce:	4770      	bx	lr

08004fd0 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8004fd8:	4b4d      	ldr	r3, [pc, #308]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 8004fda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d002      	beq.n	8004fe8 <SX1276OnTimeoutIrq+0x18>
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d043      	beq.n	800506e <SX1276OnTimeoutIrq+0x9e>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8004fe6:	e08e      	b.n	8005106 <SX1276OnTimeoutIrq+0x136>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004fe8:	4b49      	ldr	r3, [pc, #292]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 8004fea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d12f      	bne.n	8005052 <SX1276OnTimeoutIrq+0x82>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004ff2:	4b47      	ldr	r3, [pc, #284]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004ffa:	4b45      	ldr	r3, [pc, #276]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005002:	4b43      	ldr	r3, [pc, #268]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 8005004:	2200      	movs	r2, #0
 8005006:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800500a:	4b41      	ldr	r3, [pc, #260]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 800500c:	2200      	movs	r2, #0
 800500e:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8005012:	210b      	movs	r1, #11
 8005014:	203e      	movs	r0, #62	; 0x3e
 8005016:	f7ff fd97 	bl	8004b48 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800501a:	2110      	movs	r1, #16
 800501c:	203f      	movs	r0, #63	; 0x3f
 800501e:	f7ff fd93 	bl	8004b48 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 8005022:	4b3b      	ldr	r3, [pc, #236]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 8005024:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00b      	beq.n	8005044 <SX1276OnTimeoutIrq+0x74>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800502c:	200d      	movs	r0, #13
 800502e:	f7ff fd9b 	bl	8004b68 <SX1276Read>
 8005032:	4603      	mov	r3, r0
 8005034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005038:	b2db      	uxtb	r3, r3
 800503a:	4619      	mov	r1, r3
 800503c:	200d      	movs	r0, #13
 800503e:	f7ff fd83 	bl	8004b48 <SX1276Write>
 8005042:	e006      	b.n	8005052 <SX1276OnTimeoutIrq+0x82>
                SX1276.Settings.State = RF_IDLE;
 8005044:	4b32      	ldr	r3, [pc, #200]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 8005046:	2200      	movs	r2, #0
 8005048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                TimerStop( &RxTimeoutSyncWord );
 800504c:	4831      	ldr	r0, [pc, #196]	; (8005114 <SX1276OnTimeoutIrq+0x144>)
 800504e:	f001 fc89 	bl	8006964 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005052:	4b31      	ldr	r3, [pc, #196]	; (8005118 <SX1276OnTimeoutIrq+0x148>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d052      	beq.n	8005100 <SX1276OnTimeoutIrq+0x130>
 800505a:	4b2f      	ldr	r3, [pc, #188]	; (8005118 <SX1276OnTimeoutIrq+0x148>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d04d      	beq.n	8005100 <SX1276OnTimeoutIrq+0x130>
            RadioEvents->RxTimeout( );
 8005064:	4b2c      	ldr	r3, [pc, #176]	; (8005118 <SX1276OnTimeoutIrq+0x148>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	68db      	ldr	r3, [r3, #12]
 800506a:	4798      	blx	r3
        break;
 800506c:	e048      	b.n	8005100 <SX1276OnTimeoutIrq+0x130>
        SX1276Reset( );
 800506e:	f001 f9c5 	bl	80063fc <SX1276Reset>
        RxChainCalibration( );
 8005072:	f7fe fd29 	bl	8003ac8 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8005076:	2000      	movs	r0, #0
 8005078:	f7ff fce2 	bl	8004a40 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800507c:	2300      	movs	r3, #0
 800507e:	73fb      	strb	r3, [r7, #15]
 8005080:	e020      	b.n	80050c4 <SX1276OnTimeoutIrq+0xf4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 8005082:	7bfa      	ldrb	r2, [r7, #15]
 8005084:	4925      	ldr	r1, [pc, #148]	; (800511c <SX1276OnTimeoutIrq+0x14c>)
 8005086:	4613      	mov	r3, r2
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	4413      	add	r3, r2
 800508c:	440b      	add	r3, r1
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	4618      	mov	r0, r3
 8005092:	f7ff fd01 	bl	8004a98 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8005096:	7bfa      	ldrb	r2, [r7, #15]
 8005098:	4920      	ldr	r1, [pc, #128]	; (800511c <SX1276OnTimeoutIrq+0x14c>)
 800509a:	4613      	mov	r3, r2
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	4413      	add	r3, r2
 80050a0:	440b      	add	r3, r1
 80050a2:	3301      	adds	r3, #1
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	7bfa      	ldrb	r2, [r7, #15]
 80050aa:	491c      	ldr	r1, [pc, #112]	; (800511c <SX1276OnTimeoutIrq+0x14c>)
 80050ac:	4613      	mov	r3, r2
 80050ae:	005b      	lsls	r3, r3, #1
 80050b0:	4413      	add	r3, r2
 80050b2:	440b      	add	r3, r1
 80050b4:	3302      	adds	r3, #2
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	4619      	mov	r1, r3
 80050ba:	f7ff fd45 	bl	8004b48 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	3301      	adds	r3, #1
 80050c2:	73fb      	strb	r3, [r7, #15]
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b0f      	cmp	r3, #15
 80050c8:	d9db      	bls.n	8005082 <SX1276OnTimeoutIrq+0xb2>
        SX1276SetModem( MODEM_FSK );
 80050ca:	2000      	movs	r0, #0
 80050cc:	f7ff fce4 	bl	8004a98 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80050d0:	4b0f      	ldr	r3, [pc, #60]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 80050d2:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fe0e 	bl	8004cf8 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <SX1276OnTimeoutIrq+0x140>)
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80050e4:	4b0c      	ldr	r3, [pc, #48]	; (8005118 <SX1276OnTimeoutIrq+0x148>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <SX1276OnTimeoutIrq+0x134>
 80050ec:	4b0a      	ldr	r3, [pc, #40]	; (8005118 <SX1276OnTimeoutIrq+0x148>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d006      	beq.n	8005104 <SX1276OnTimeoutIrq+0x134>
            RadioEvents->TxTimeout( );
 80050f6:	4b08      	ldr	r3, [pc, #32]	; (8005118 <SX1276OnTimeoutIrq+0x148>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	4798      	blx	r3
        break;
 80050fe:	e001      	b.n	8005104 <SX1276OnTimeoutIrq+0x134>
        break;
 8005100:	bf00      	nop
 8005102:	e000      	b.n	8005106 <SX1276OnTimeoutIrq+0x136>
        break;
 8005104:	bf00      	nop
    }
}
 8005106:	bf00      	nop
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000300 	.word	0x20000300
 8005114:	200002e8 	.word	0x200002e8
 8005118:	20000060 	.word	0x20000060
 800511c:	08006c54 	.word	0x08006c54

08005120 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void* context )
{
 8005120:	b590      	push	{r4, r7, lr}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8005128:	2300      	movs	r3, #0
 800512a:	737b      	strb	r3, [r7, #13]

    switch( SX1276.Settings.State )
 800512c:	4bae      	ldr	r3, [pc, #696]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800512e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005132:	2b01      	cmp	r3, #1
 8005134:	d003      	beq.n	800513e <SX1276OnDio0Irq+0x1e>
 8005136:	2b02      	cmp	r3, #2
 8005138:	f000 81de 	beq.w	80054f8 <SX1276OnDio0Irq+0x3d8>
                }
                break;
            }
            break;
        default:
            break;
 800513c:	e1fb      	b.n	8005536 <SX1276OnDio0Irq+0x416>
            switch( SX1276.Settings.Modem )
 800513e:	4baa      	ldr	r3, [pc, #680]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005140:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <SX1276OnDio0Irq+0x30>
 8005148:	2b01      	cmp	r3, #1
 800514a:	f000 80ec 	beq.w	8005326 <SX1276OnDio0Irq+0x206>
                break;
 800514e:	e1d2      	b.n	80054f6 <SX1276OnDio0Irq+0x3d6>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8005150:	4ba5      	ldr	r3, [pc, #660]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005152:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 8005156:	2b00      	cmp	r3, #0
 8005158:	d04e      	beq.n	80051f8 <SX1276OnDio0Irq+0xd8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800515a:	203f      	movs	r0, #63	; 0x3f
 800515c:	f7ff fd04 	bl	8004b68 <SX1276Read>
 8005160:	4603      	mov	r3, r0
 8005162:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8005164:	7b7b      	ldrb	r3, [r7, #13]
 8005166:	b2db      	uxtb	r3, r3
 8005168:	f003 0302 	and.w	r3, r3, #2
 800516c:	2b02      	cmp	r3, #2
 800516e:	d043      	beq.n	80051f8 <SX1276OnDio0Irq+0xd8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8005170:	210b      	movs	r1, #11
 8005172:	203e      	movs	r0, #62	; 0x3e
 8005174:	f7ff fce8 	bl	8004b48 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005178:	2110      	movs	r1, #16
 800517a:	203f      	movs	r0, #63	; 0x3f
 800517c:	f7ff fce4 	bl	8004b48 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8005180:	489a      	ldr	r0, [pc, #616]	; (80053ec <SX1276OnDio0Irq+0x2cc>)
 8005182:	f001 fbef 	bl	8006964 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 8005186:	4b98      	ldr	r3, [pc, #608]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005188:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 800518c:	f083 0301 	eor.w	r3, r3, #1
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <SX1276OnDio0Irq+0x86>
                            TimerStop( &RxTimeoutSyncWord );
 8005196:	4896      	ldr	r0, [pc, #600]	; (80053f0 <SX1276OnDio0Irq+0x2d0>)
 8005198:	f001 fbe4 	bl	8006964 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 800519c:	4b92      	ldr	r3, [pc, #584]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051a4:	e00a      	b.n	80051bc <SX1276OnDio0Irq+0x9c>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80051a6:	200d      	movs	r0, #13
 80051a8:	f7ff fcde 	bl	8004b68 <SX1276Read>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	4619      	mov	r1, r3
 80051b6:	200d      	movs	r0, #13
 80051b8:	f7ff fcc6 	bl	8004b48 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80051bc:	4b8d      	ldr	r3, [pc, #564]	; (80053f4 <SX1276OnDio0Irq+0x2d4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <SX1276OnDio0Irq+0xb6>
 80051c4:	4b8b      	ldr	r3, [pc, #556]	; (80053f4 <SX1276OnDio0Irq+0x2d4>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d003      	beq.n	80051d6 <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 80051ce:	4b89      	ldr	r3, [pc, #548]	; (80053f4 <SX1276OnDio0Irq+0x2d4>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80051d6:	4b84      	ldr	r3, [pc, #528]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80051de:	4b82      	ldr	r3, [pc, #520]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80051e6:	4b80      	ldr	r3, [pc, #512]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80051ee:	4b7e      	ldr	r3, [pc, #504]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                        break;
 80051f6:	e17e      	b.n	80054f6 <SX1276OnDio0Irq+0x3d6>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80051f8:	4b7b      	ldr	r3, [pc, #492]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80051fa:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d133      	bne.n	800526a <SX1276OnDio0Irq+0x14a>
 8005202:	4b79      	ldr	r3, [pc, #484]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005204:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005208:	2b00      	cmp	r3, #0
 800520a:	d12e      	bne.n	800526a <SX1276OnDio0Irq+0x14a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800520c:	4b76      	ldr	r3, [pc, #472]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800520e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005212:	f083 0301 	eor.w	r3, r3, #1
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b00      	cmp	r3, #0
 800521a:	d004      	beq.n	8005226 <SX1276OnDio0Irq+0x106>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 800521c:	2101      	movs	r1, #1
 800521e:	4876      	ldr	r0, [pc, #472]	; (80053f8 <SX1276OnDio0Irq+0x2d8>)
 8005220:	f7ff fd2c 	bl	8004c7c <SX1276ReadFifo>
 8005224:	e007      	b.n	8005236 <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 8005226:	2032      	movs	r0, #50	; 0x32
 8005228:	f7ff fc9e 	bl	8004b68 <SX1276Read>
 800522c:	4603      	mov	r3, r0
 800522e:	b29a      	uxth	r2, r3
 8005230:	4b6d      	ldr	r3, [pc, #436]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005232:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005236:	4b6c      	ldr	r3, [pc, #432]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005238:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800523c:	461a      	mov	r2, r3
 800523e:	4b6f      	ldr	r3, [pc, #444]	; (80053fc <SX1276OnDio0Irq+0x2dc>)
 8005240:	18d0      	adds	r0, r2, r3
 8005242:	4b69      	ldr	r3, [pc, #420]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005244:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005248:	b2da      	uxtb	r2, r3
 800524a:	4b67      	ldr	r3, [pc, #412]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800524c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005250:	b2db      	uxtb	r3, r3
 8005252:	1ad3      	subs	r3, r2, r3
 8005254:	b2db      	uxtb	r3, r3
 8005256:	4619      	mov	r1, r3
 8005258:	f7ff fd10 	bl	8004c7c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800525c:	4b62      	ldr	r3, [pc, #392]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800525e:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 8005262:	4b61      	ldr	r3, [pc, #388]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005264:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005268:	e018      	b.n	800529c <SX1276OnDio0Irq+0x17c>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800526a:	4b5f      	ldr	r3, [pc, #380]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800526c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005270:	461a      	mov	r2, r3
 8005272:	4b62      	ldr	r3, [pc, #392]	; (80053fc <SX1276OnDio0Irq+0x2dc>)
 8005274:	18d0      	adds	r0, r2, r3
 8005276:	4b5c      	ldr	r3, [pc, #368]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005278:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800527c:	b2da      	uxtb	r2, r3
 800527e:	4b5a      	ldr	r3, [pc, #360]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005280:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005284:	b2db      	uxtb	r3, r3
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	b2db      	uxtb	r3, r3
 800528a:	4619      	mov	r1, r3
 800528c:	f7ff fcf6 	bl	8004c7c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005290:	4b55      	ldr	r3, [pc, #340]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005292:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 8005296:	4b54      	ldr	r3, [pc, #336]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005298:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                TimerStop( &RxTimeoutTimer );
 800529c:	4853      	ldr	r0, [pc, #332]	; (80053ec <SX1276OnDio0Irq+0x2cc>)
 800529e:	f001 fb61 	bl	8006964 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80052a2:	4b51      	ldr	r3, [pc, #324]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80052a4:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80052a8:	f083 0301 	eor.w	r3, r3, #1
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <SX1276OnDio0Irq+0x1a2>
                    SX1276.Settings.State = RF_IDLE;
 80052b2:	4b4d      	ldr	r3, [pc, #308]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutSyncWord );
 80052ba:	484d      	ldr	r0, [pc, #308]	; (80053f0 <SX1276OnDio0Irq+0x2d0>)
 80052bc:	f001 fb52 	bl	8006964 <TimerStop>
 80052c0:	e00a      	b.n	80052d8 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80052c2:	200d      	movs	r0, #13
 80052c4:	f7ff fc50 	bl	8004b68 <SX1276Read>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	4619      	mov	r1, r3
 80052d2:	200d      	movs	r0, #13
 80052d4:	f7ff fc38 	bl	8004b48 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80052d8:	4b46      	ldr	r3, [pc, #280]	; (80053f4 <SX1276OnDio0Irq+0x2d4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d011      	beq.n	8005304 <SX1276OnDio0Irq+0x1e4>
 80052e0:	4b44      	ldr	r3, [pc, #272]	; (80053f4 <SX1276OnDio0Irq+0x2d4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00c      	beq.n	8005304 <SX1276OnDio0Irq+0x1e4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80052ea:	4b42      	ldr	r3, [pc, #264]	; (80053f4 <SX1276OnDio0Irq+0x2d4>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	689c      	ldr	r4, [r3, #8]
 80052f0:	4b3d      	ldr	r3, [pc, #244]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80052f2:	f8b3 107a 	ldrh.w	r1, [r3, #122]	; 0x7a
 80052f6:	4b3c      	ldr	r3, [pc, #240]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80052f8:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80052fc:	b21a      	sxth	r2, r3
 80052fe:	2300      	movs	r3, #0
 8005300:	483e      	ldr	r0, [pc, #248]	; (80053fc <SX1276OnDio0Irq+0x2dc>)
 8005302:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8005304:	4b38      	ldr	r3, [pc, #224]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 800530c:	4b36      	ldr	r3, [pc, #216]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8005314:	4b34      	ldr	r3, [pc, #208]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                SX1276.Settings.FskPacketHandler.Size = 0;
 800531c:	4b32      	ldr	r3, [pc, #200]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800531e:	2200      	movs	r2, #0
 8005320:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                break;
 8005324:	e0e7      	b.n	80054f6 <SX1276OnDio0Irq+0x3d6>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8005326:	2140      	movs	r1, #64	; 0x40
 8005328:	2012      	movs	r0, #18
 800532a:	f7ff fc0d 	bl	8004b48 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800532e:	2012      	movs	r0, #18
 8005330:	f7ff fc1a 	bl	8004b68 <SX1276Read>
 8005334:	4603      	mov	r3, r0
 8005336:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8005338:	7b7b      	ldrb	r3, [r7, #13]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b20      	cmp	r3, #32
 8005342:	d122      	bne.n	800538a <SX1276OnDio0Irq+0x26a>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8005344:	2120      	movs	r1, #32
 8005346:	2012      	movs	r0, #18
 8005348:	f7ff fbfe 	bl	8004b48 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800534c:	4b26      	ldr	r3, [pc, #152]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800534e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8005352:	f083 0301 	eor.w	r3, r3, #1
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d003      	beq.n	8005364 <SX1276OnDio0Irq+0x244>
                            SX1276.Settings.State = RF_IDLE;
 800535c:	4b22      	ldr	r3, [pc, #136]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                        TimerStop( &RxTimeoutTimer );
 8005364:	4821      	ldr	r0, [pc, #132]	; (80053ec <SX1276OnDio0Irq+0x2cc>)
 8005366:	f001 fafd 	bl	8006964 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800536a:	4b22      	ldr	r3, [pc, #136]	; (80053f4 <SX1276OnDio0Irq+0x2d4>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 80be 	beq.w	80054f0 <SX1276OnDio0Irq+0x3d0>
 8005374:	4b1f      	ldr	r3, [pc, #124]	; (80053f4 <SX1276OnDio0Irq+0x2d4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	f000 80b8 	beq.w	80054f0 <SX1276OnDio0Irq+0x3d0>
                            RadioEvents->RxError( );
 8005380:	4b1c      	ldr	r3, [pc, #112]	; (80053f4 <SX1276OnDio0Irq+0x2d4>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	4798      	blx	r3
                        break;
 8005388:	e0b2      	b.n	80054f0 <SX1276OnDio0Irq+0x3d0>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800538a:	2019      	movs	r0, #25
 800538c:	f7ff fbec 	bl	8004b68 <SX1276Read>
 8005390:	4603      	mov	r3, r0
 8005392:	b25b      	sxtb	r3, r3
 8005394:	3302      	adds	r3, #2
 8005396:	109b      	asrs	r3, r3, #2
 8005398:	b25a      	sxtb	r2, r3
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 800539c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80053a0:	201a      	movs	r0, #26
 80053a2:	f7ff fbe1 	bl	8004b68 <SX1276Read>
 80053a6:	4603      	mov	r3, r0
 80053a8:	81fb      	strh	r3, [r7, #14]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80053aa:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80053ac:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	da3c      	bge.n	800542e <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80053b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b8:	4a11      	ldr	r2, [pc, #68]	; (8005400 <SX1276OnDio0Irq+0x2e0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d922      	bls.n	8005404 <SX1276OnDio0Irq+0x2e4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80053be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053c2:	111b      	asrs	r3, r3, #4
 80053c4:	b21b      	sxth	r3, r3
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	89fb      	ldrh	r3, [r7, #14]
 80053ca:	4413      	add	r3, r2
 80053cc:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80053ce:	4b06      	ldr	r3, [pc, #24]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80053d0:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80053d4:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80053d6:	4413      	add	r3, r2
 80053d8:	b29b      	uxth	r3, r3
 80053da:	3b9d      	subs	r3, #157	; 0x9d
 80053dc:	b29b      	uxth	r3, r3
 80053de:	b21a      	sxth	r2, r3
 80053e0:	4b01      	ldr	r3, [pc, #4]	; (80053e8 <SX1276OnDio0Irq+0x2c8>)
 80053e2:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80053e6:	e044      	b.n	8005472 <SX1276OnDio0Irq+0x352>
 80053e8:	20000300 	.word	0x20000300
 80053ec:	200003a8 	.word	0x200003a8
 80053f0:	200002e8 	.word	0x200002e8
 80053f4:	20000060 	.word	0x20000060
 80053f8:	2000037a 	.word	0x2000037a
 80053fc:	20000064 	.word	0x20000064
 8005400:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8005404:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005408:	111b      	asrs	r3, r3, #4
 800540a:	b21b      	sxth	r3, r3
 800540c:	b29a      	uxth	r2, r3
 800540e:	89fb      	ldrh	r3, [r7, #14]
 8005410:	4413      	add	r3, r2
 8005412:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8005414:	4b4a      	ldr	r3, [pc, #296]	; (8005540 <SX1276OnDio0Irq+0x420>)
 8005416:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 800541a:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800541c:	4413      	add	r3, r2
 800541e:	b29b      	uxth	r3, r3
 8005420:	3ba4      	subs	r3, #164	; 0xa4
 8005422:	b29b      	uxth	r3, r3
 8005424:	b21a      	sxth	r2, r3
 8005426:	4b46      	ldr	r3, [pc, #280]	; (8005540 <SX1276OnDio0Irq+0x420>)
 8005428:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800542c:	e021      	b.n	8005472 <SX1276OnDio0Irq+0x352>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800542e:	4b44      	ldr	r3, [pc, #272]	; (8005540 <SX1276OnDio0Irq+0x420>)
 8005430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005432:	4a44      	ldr	r2, [pc, #272]	; (8005544 <SX1276OnDio0Irq+0x424>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d90e      	bls.n	8005456 <SX1276OnDio0Irq+0x336>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8005438:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800543c:	111b      	asrs	r3, r3, #4
 800543e:	b21b      	sxth	r3, r3
 8005440:	b29a      	uxth	r2, r3
 8005442:	89fb      	ldrh	r3, [r7, #14]
 8005444:	4413      	add	r3, r2
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b9d      	subs	r3, #157	; 0x9d
 800544a:	b29b      	uxth	r3, r3
 800544c:	b21a      	sxth	r2, r3
 800544e:	4b3c      	ldr	r3, [pc, #240]	; (8005540 <SX1276OnDio0Irq+0x420>)
 8005450:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005454:	e00d      	b.n	8005472 <SX1276OnDio0Irq+0x352>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 8005456:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800545a:	111b      	asrs	r3, r3, #4
 800545c:	b21b      	sxth	r3, r3
 800545e:	b29a      	uxth	r2, r3
 8005460:	89fb      	ldrh	r3, [r7, #14]
 8005462:	4413      	add	r3, r2
 8005464:	b29b      	uxth	r3, r3
 8005466:	3ba4      	subs	r3, #164	; 0xa4
 8005468:	b29b      	uxth	r3, r3
 800546a:	b21a      	sxth	r2, r3
 800546c:	4b34      	ldr	r3, [pc, #208]	; (8005540 <SX1276OnDio0Irq+0x420>)
 800546e:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 8005472:	2013      	movs	r0, #19
 8005474:	f7ff fb78 	bl	8004b68 <SX1276Read>
 8005478:	4603      	mov	r3, r0
 800547a:	461a      	mov	r2, r3
 800547c:	4b30      	ldr	r3, [pc, #192]	; (8005540 <SX1276OnDio0Irq+0x420>)
 800547e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 8005482:	2010      	movs	r0, #16
 8005484:	f7ff fb70 	bl	8004b68 <SX1276Read>
 8005488:	4603      	mov	r3, r0
 800548a:	4619      	mov	r1, r3
 800548c:	200d      	movs	r0, #13
 800548e:	f7ff fb5b 	bl	8004b48 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 8005492:	4b2b      	ldr	r3, [pc, #172]	; (8005540 <SX1276OnDio0Irq+0x420>)
 8005494:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8005498:	4619      	mov	r1, r3
 800549a:	482b      	ldr	r0, [pc, #172]	; (8005548 <SX1276OnDio0Irq+0x428>)
 800549c:	f7ff fbee 	bl	8004c7c <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80054a0:	4b27      	ldr	r3, [pc, #156]	; (8005540 <SX1276OnDio0Irq+0x420>)
 80054a2:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80054a6:	f083 0301 	eor.w	r3, r3, #1
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <SX1276OnDio0Irq+0x398>
                        SX1276.Settings.State = RF_IDLE;
 80054b0:	4b23      	ldr	r3, [pc, #140]	; (8005540 <SX1276OnDio0Irq+0x420>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutTimer );
 80054b8:	4824      	ldr	r0, [pc, #144]	; (800554c <SX1276OnDio0Irq+0x42c>)
 80054ba:	f001 fa53 	bl	8006964 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80054be:	4b24      	ldr	r3, [pc, #144]	; (8005550 <SX1276OnDio0Irq+0x430>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d016      	beq.n	80054f4 <SX1276OnDio0Irq+0x3d4>
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <SX1276OnDio0Irq+0x430>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d011      	beq.n	80054f4 <SX1276OnDio0Irq+0x3d4>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80054d0:	4b1f      	ldr	r3, [pc, #124]	; (8005550 <SX1276OnDio0Irq+0x430>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689c      	ldr	r4, [r3, #8]
 80054d6:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <SX1276OnDio0Irq+0x420>)
 80054d8:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80054dc:	b299      	uxth	r1, r3
 80054de:	4b18      	ldr	r3, [pc, #96]	; (8005540 <SX1276OnDio0Irq+0x420>)
 80054e0:	f9b3 20a2 	ldrsh.w	r2, [r3, #162]	; 0xa2
 80054e4:	4b16      	ldr	r3, [pc, #88]	; (8005540 <SX1276OnDio0Irq+0x420>)
 80054e6:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80054ea:	4817      	ldr	r0, [pc, #92]	; (8005548 <SX1276OnDio0Irq+0x428>)
 80054ec:	47a0      	blx	r4
                break;
 80054ee:	e001      	b.n	80054f4 <SX1276OnDio0Irq+0x3d4>
                        break;
 80054f0:	bf00      	nop
 80054f2:	e020      	b.n	8005536 <SX1276OnDio0Irq+0x416>
                break;
 80054f4:	bf00      	nop
            break;
 80054f6:	e01e      	b.n	8005536 <SX1276OnDio0Irq+0x416>
            TimerStop( &TxTimeoutTimer );
 80054f8:	4816      	ldr	r0, [pc, #88]	; (8005554 <SX1276OnDio0Irq+0x434>)
 80054fa:	f001 fa33 	bl	8006964 <TimerStop>
            switch( SX1276.Settings.Modem )
 80054fe:	4b10      	ldr	r3, [pc, #64]	; (8005540 <SX1276OnDio0Irq+0x420>)
 8005500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005504:	2b01      	cmp	r3, #1
 8005506:	d103      	bne.n	8005510 <SX1276OnDio0Irq+0x3f0>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8005508:	2108      	movs	r1, #8
 800550a:	2012      	movs	r0, #18
 800550c:	f7ff fb1c 	bl	8004b48 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8005510:	4b0b      	ldr	r3, [pc, #44]	; (8005540 <SX1276OnDio0Irq+0x420>)
 8005512:	2200      	movs	r2, #0
 8005514:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005518:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <SX1276OnDio0Irq+0x430>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d008      	beq.n	8005532 <SX1276OnDio0Irq+0x412>
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <SX1276OnDio0Irq+0x430>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <SX1276OnDio0Irq+0x412>
                    RadioEvents->TxDone( );
 800552a:	4b09      	ldr	r3, [pc, #36]	; (8005550 <SX1276OnDio0Irq+0x430>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4798      	blx	r3
                break;
 8005532:	bf00      	nop
            break;
 8005534:	bf00      	nop
    }
}
 8005536:	bf00      	nop
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	bd90      	pop	{r4, r7, pc}
 800553e:	bf00      	nop
 8005540:	20000300 	.word	0x20000300
 8005544:	1f4add40 	.word	0x1f4add40
 8005548:	20000064 	.word	0x20000064
 800554c:	200003a8 	.word	0x200003a8
 8005550:	20000060 	.word	0x20000060
 8005554:	200002d0 	.word	0x200002d0

08005558 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void* context )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8005560:	4b7a      	ldr	r3, [pc, #488]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005566:	2b01      	cmp	r3, #1
 8005568:	d003      	beq.n	8005572 <SX1276OnDio1Irq+0x1a>
 800556a:	2b02      	cmp	r3, #2
 800556c:	f000 809a 	beq.w	80056a4 <SX1276OnDio1Irq+0x14c>
            default:
                break;
            }
            break;
        default:
            break;
 8005570:	e0e7      	b.n	8005742 <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 8005572:	4b76      	ldr	r3, [pc, #472]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005574:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <SX1276OnDio1Irq+0x2a>
 800557c:	2b01      	cmp	r3, #1
 800557e:	d06d      	beq.n	800565c <SX1276OnDio1Irq+0x104>
                break;
 8005580:	e08f      	b.n	80056a2 <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 8005582:	f001 f85b 	bl	800663c <SX1276GetDio1PinState>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 8085 	beq.w	8005698 <SX1276OnDio1Irq+0x140>
                TimerStop( &RxTimeoutSyncWord );
 800558e:	4870      	ldr	r0, [pc, #448]	; (8005750 <SX1276OnDio1Irq+0x1f8>)
 8005590:	f001 f9e8 	bl	8006964 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8005594:	4b6d      	ldr	r3, [pc, #436]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005596:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800559a:	2b00      	cmp	r3, #0
 800559c:	d119      	bne.n	80055d2 <SX1276OnDio1Irq+0x7a>
 800559e:	4b6b      	ldr	r3, [pc, #428]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80055a0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d114      	bne.n	80055d2 <SX1276OnDio1Irq+0x7a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80055a8:	4b68      	ldr	r3, [pc, #416]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80055aa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80055ae:	f083 0301 	eor.w	r3, r3, #1
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d004      	beq.n	80055c2 <SX1276OnDio1Irq+0x6a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80055b8:	2101      	movs	r1, #1
 80055ba:	4866      	ldr	r0, [pc, #408]	; (8005754 <SX1276OnDio1Irq+0x1fc>)
 80055bc:	f7ff fb5e 	bl	8004c7c <SX1276ReadFifo>
 80055c0:	e007      	b.n	80055d2 <SX1276OnDio1Irq+0x7a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80055c2:	2032      	movs	r0, #50	; 0x32
 80055c4:	f7ff fad0 	bl	8004b68 <SX1276Read>
 80055c8:	4603      	mov	r3, r0
 80055ca:	b29a      	uxth	r2, r3
 80055cc:	4b5f      	ldr	r3, [pc, #380]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80055ce:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80055d2:	4b5e      	ldr	r3, [pc, #376]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80055d4:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80055d8:	461a      	mov	r2, r3
 80055da:	4b5c      	ldr	r3, [pc, #368]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80055dc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	4a5a      	ldr	r2, [pc, #360]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80055e4:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 80055e8:	4293      	cmp	r3, r2
 80055ea:	db1d      	blt.n	8005628 <SX1276OnDio1Irq+0xd0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80055ec:	4b57      	ldr	r3, [pc, #348]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80055ee:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80055f2:	461a      	mov	r2, r3
 80055f4:	4b58      	ldr	r3, [pc, #352]	; (8005758 <SX1276OnDio1Irq+0x200>)
 80055f6:	441a      	add	r2, r3
 80055f8:	4b54      	ldr	r3, [pc, #336]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80055fa:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80055fe:	3b01      	subs	r3, #1
 8005600:	b2db      	uxtb	r3, r3
 8005602:	4619      	mov	r1, r3
 8005604:	4610      	mov	r0, r2
 8005606:	f7ff fb39 	bl	8004c7c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800560a:	4b50      	ldr	r3, [pc, #320]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 800560c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8005610:	4b4e      	ldr	r3, [pc, #312]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005612:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005616:	b29b      	uxth	r3, r3
 8005618:	4413      	add	r3, r2
 800561a:	b29b      	uxth	r3, r3
 800561c:	3b01      	subs	r3, #1
 800561e:	b29a      	uxth	r2, r3
 8005620:	4b4a      	ldr	r3, [pc, #296]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005622:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8005626:	e03c      	b.n	80056a2 <SX1276OnDio1Irq+0x14a>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005628:	4b48      	ldr	r3, [pc, #288]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 800562a:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800562e:	461a      	mov	r2, r3
 8005630:	4b49      	ldr	r3, [pc, #292]	; (8005758 <SX1276OnDio1Irq+0x200>)
 8005632:	18d0      	adds	r0, r2, r3
 8005634:	4b45      	ldr	r3, [pc, #276]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005636:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800563a:	b2da      	uxtb	r2, r3
 800563c:	4b43      	ldr	r3, [pc, #268]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 800563e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005642:	b2db      	uxtb	r3, r3
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	b2db      	uxtb	r3, r3
 8005648:	4619      	mov	r1, r3
 800564a:	f7ff fb17 	bl	8004c7c <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800564e:	4b3f      	ldr	r3, [pc, #252]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005650:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 8005654:	4b3d      	ldr	r3, [pc, #244]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005656:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 800565a:	e022      	b.n	80056a2 <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 800565c:	f000 ffee 	bl	800663c <SX1276GetDio1PinState>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d01a      	beq.n	800569c <SX1276OnDio1Irq+0x144>
                TimerStop( &RxTimeoutTimer );
 8005666:	483d      	ldr	r0, [pc, #244]	; (800575c <SX1276OnDio1Irq+0x204>)
 8005668:	f001 f97c 	bl	8006964 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	2012      	movs	r0, #18
 8005670:	f7ff fa6a 	bl	8004b48 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8005674:	4b35      	ldr	r3, [pc, #212]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800567c:	4b38      	ldr	r3, [pc, #224]	; (8005760 <SX1276OnDio1Irq+0x208>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00d      	beq.n	80056a0 <SX1276OnDio1Irq+0x148>
 8005684:	4b36      	ldr	r3, [pc, #216]	; (8005760 <SX1276OnDio1Irq+0x208>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <SX1276OnDio1Irq+0x148>
                    RadioEvents->RxTimeout( );
 800568e:	4b34      	ldr	r3, [pc, #208]	; (8005760 <SX1276OnDio1Irq+0x208>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	4798      	blx	r3
                break;
 8005696:	e003      	b.n	80056a0 <SX1276OnDio1Irq+0x148>
                    break;
 8005698:	bf00      	nop
 800569a:	e052      	b.n	8005742 <SX1276OnDio1Irq+0x1ea>
                    break;
 800569c:	bf00      	nop
 800569e:	e050      	b.n	8005742 <SX1276OnDio1Irq+0x1ea>
                break;
 80056a0:	bf00      	nop
            break;
 80056a2:	e04e      	b.n	8005742 <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 80056a4:	4b29      	ldr	r3, [pc, #164]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80056a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <SX1276OnDio1Irq+0x15a>
 80056ae:	2b01      	cmp	r3, #1
                break;
 80056b0:	e046      	b.n	8005740 <SX1276OnDio1Irq+0x1e8>
                if( SX1276GetDio1PinState( ) == 1 )
 80056b2:	f000 ffc3 	bl	800663c <SX1276GetDio1PinState>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d040      	beq.n	800573e <SX1276OnDio1Irq+0x1e6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80056bc:	4b23      	ldr	r3, [pc, #140]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80056be:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80056c2:	461a      	mov	r2, r3
 80056c4:	4b21      	ldr	r3, [pc, #132]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80056c6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	4a1f      	ldr	r2, [pc, #124]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80056ce:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 80056d2:	4293      	cmp	r3, r2
 80056d4:	dd19      	ble.n	800570a <SX1276OnDio1Irq+0x1b2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80056d6:	4b1d      	ldr	r3, [pc, #116]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80056d8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80056dc:	461a      	mov	r2, r3
 80056de:	4b1e      	ldr	r3, [pc, #120]	; (8005758 <SX1276OnDio1Irq+0x200>)
 80056e0:	4413      	add	r3, r2
 80056e2:	4a1a      	ldr	r2, [pc, #104]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80056e4:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 80056e8:	4611      	mov	r1, r2
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff fab6 	bl	8004c5c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80056f0:	4b16      	ldr	r3, [pc, #88]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80056f2:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 80056f6:	4b15      	ldr	r3, [pc, #84]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 80056f8:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80056fc:	b29b      	uxth	r3, r3
 80056fe:	4413      	add	r3, r2
 8005700:	b29a      	uxth	r2, r3
 8005702:	4b12      	ldr	r3, [pc, #72]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005704:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8005708:	e01a      	b.n	8005740 <SX1276OnDio1Irq+0x1e8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800570a:	4b10      	ldr	r3, [pc, #64]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 800570c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005710:	461a      	mov	r2, r3
 8005712:	4b11      	ldr	r3, [pc, #68]	; (8005758 <SX1276OnDio1Irq+0x200>)
 8005714:	18d0      	adds	r0, r2, r3
 8005716:	4b0d      	ldr	r3, [pc, #52]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005718:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800571c:	b2da      	uxtb	r2, r3
 800571e:	4b0b      	ldr	r3, [pc, #44]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005720:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005724:	b2db      	uxtb	r3, r3
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	b2db      	uxtb	r3, r3
 800572a:	4619      	mov	r1, r3
 800572c:	f7ff fa96 	bl	8004c5c <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8005730:	4b06      	ldr	r3, [pc, #24]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005732:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 8005736:	4b05      	ldr	r3, [pc, #20]	; (800574c <SX1276OnDio1Irq+0x1f4>)
 8005738:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 800573c:	e000      	b.n	8005740 <SX1276OnDio1Irq+0x1e8>
                    break;
 800573e:	bf00      	nop
            break;
 8005740:	bf00      	nop
    }
}
 8005742:	bf00      	nop
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	20000300 	.word	0x20000300
 8005750:	200002e8 	.word	0x200002e8
 8005754:	2000037a 	.word	0x2000037a
 8005758:	20000064 	.word	0x20000064
 800575c:	200003a8 	.word	0x200003a8
 8005760:	20000060 	.word	0x20000060

08005764 <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void* context )
{
 8005764:	b590      	push	{r4, r7, lr}
 8005766:	b083      	sub	sp, #12
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 800576c:	4b52      	ldr	r3, [pc, #328]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 800576e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005772:	2b01      	cmp	r3, #1
 8005774:	d002      	beq.n	800577c <SX1276OnDio2Irq+0x18>
 8005776:	2b02      	cmp	r3, #2
 8005778:	d06e      	beq.n	8005858 <SX1276OnDio2Irq+0xf4>
            default:
                break;
            }
            break;
        default:
            break;
 800577a:	e099      	b.n	80058b0 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 800577c:	4b4e      	ldr	r3, [pc, #312]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 800577e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005782:	2b00      	cmp	r3, #0
 8005784:	d002      	beq.n	800578c <SX1276OnDio2Irq+0x28>
 8005786:	2b01      	cmp	r3, #1
 8005788:	d043      	beq.n	8005812 <SX1276OnDio2Irq+0xae>
                break;
 800578a:	e064      	b.n	8005856 <SX1276OnDio2Irq+0xf2>
                if( SX1276.DIO4.port == NULL )
 800578c:	4b4a      	ldr	r3, [pc, #296]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	2b00      	cmp	r3, #0
 8005792:	d103      	bne.n	800579c <SX1276OnDio2Irq+0x38>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005794:	4b48      	ldr	r3, [pc, #288]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800579c:	4b46      	ldr	r3, [pc, #280]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 800579e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d054      	beq.n	8005850 <SX1276OnDio2Irq+0xec>
 80057a6:	4b44      	ldr	r3, [pc, #272]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 80057a8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d14f      	bne.n	8005850 <SX1276OnDio2Irq+0xec>
                    TimerStop( &RxTimeoutSyncWord );
 80057b0:	4842      	ldr	r0, [pc, #264]	; (80058bc <SX1276OnDio2Irq+0x158>)
 80057b2:	f001 f8d7 	bl	8006964 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80057b6:	4b40      	ldr	r3, [pc, #256]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 80057b8:	2201      	movs	r2, #1
 80057ba:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80057be:	2011      	movs	r0, #17
 80057c0:	f7ff f9d2 	bl	8004b68 <SX1276Read>
 80057c4:	4603      	mov	r3, r0
 80057c6:	085b      	lsrs	r3, r3, #1
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	425b      	negs	r3, r3
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	b25a      	sxtb	r2, r3
 80057d0:	4b39      	ldr	r3, [pc, #228]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 80057d2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80057d6:	201b      	movs	r0, #27
 80057d8:	f7ff f9c6 	bl	8004b68 <SX1276Read>
 80057dc:	4603      	mov	r3, r0
 80057de:	021c      	lsls	r4, r3, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80057e0:	201c      	movs	r0, #28
 80057e2:	f7ff f9c1 	bl	8004b68 <SX1276Read>
 80057e6:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80057e8:	4323      	orrs	r3, r4
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7ff faaa 	bl	8004d44 <SX1276ConvertPllStepToFreqInHz>
 80057f0:	4603      	mov	r3, r0
 80057f2:	461a      	mov	r2, r3
 80057f4:	4b30      	ldr	r3, [pc, #192]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 80057f6:	675a      	str	r2, [r3, #116]	; 0x74
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80057f8:	200c      	movs	r0, #12
 80057fa:	f7ff f9b5 	bl	8004b68 <SX1276Read>
 80057fe:	4603      	mov	r3, r0
 8005800:	095b      	lsrs	r3, r3, #5
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f003 0307 	and.w	r3, r3, #7
 8005808:	b2da      	uxtb	r2, r3
 800580a:	4b2b      	ldr	r3, [pc, #172]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 800580c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                break;
 8005810:	e01e      	b.n	8005850 <SX1276OnDio2Irq+0xec>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005812:	4b29      	ldr	r3, [pc, #164]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 8005814:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005818:	2b00      	cmp	r3, #0
 800581a:	d01b      	beq.n	8005854 <SX1276OnDio2Irq+0xf0>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800581c:	2102      	movs	r1, #2
 800581e:	2012      	movs	r0, #18
 8005820:	f7ff f992 	bl	8004b48 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005824:	4b26      	ldr	r3, [pc, #152]	; (80058c0 <SX1276OnDio2Irq+0x15c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d013      	beq.n	8005854 <SX1276OnDio2Irq+0xf0>
 800582c:	4b24      	ldr	r3, [pc, #144]	; (80058c0 <SX1276OnDio2Irq+0x15c>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	695b      	ldr	r3, [r3, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00e      	beq.n	8005854 <SX1276OnDio2Irq+0xf0>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005836:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <SX1276OnDio2Irq+0x15c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	695c      	ldr	r4, [r3, #20]
 800583c:	201c      	movs	r0, #28
 800583e:	f7ff f993 	bl	8004b68 <SX1276Read>
 8005842:	4603      	mov	r3, r0
 8005844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005848:	b2db      	uxtb	r3, r3
 800584a:	4618      	mov	r0, r3
 800584c:	47a0      	blx	r4
                break;
 800584e:	e001      	b.n	8005854 <SX1276OnDio2Irq+0xf0>
                break;
 8005850:	bf00      	nop
 8005852:	e02d      	b.n	80058b0 <SX1276OnDio2Irq+0x14c>
                break;
 8005854:	bf00      	nop
            break;
 8005856:	e02b      	b.n	80058b0 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 8005858:	4b17      	ldr	r3, [pc, #92]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 800585a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800585e:	2b00      	cmp	r3, #0
 8005860:	d020      	beq.n	80058a4 <SX1276OnDio2Irq+0x140>
 8005862:	2b01      	cmp	r3, #1
 8005864:	d120      	bne.n	80058a8 <SX1276OnDio2Irq+0x144>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005866:	4b14      	ldr	r3, [pc, #80]	; (80058b8 <SX1276OnDio2Irq+0x154>)
 8005868:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800586c:	2b00      	cmp	r3, #0
 800586e:	d01d      	beq.n	80058ac <SX1276OnDio2Irq+0x148>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005870:	2102      	movs	r1, #2
 8005872:	2012      	movs	r0, #18
 8005874:	f7ff f968 	bl	8004b48 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <SX1276OnDio2Irq+0x15c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d015      	beq.n	80058ac <SX1276OnDio2Irq+0x148>
 8005880:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <SX1276OnDio2Irq+0x15c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	695b      	ldr	r3, [r3, #20]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d010      	beq.n	80058ac <SX1276OnDio2Irq+0x148>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800588a:	4b0d      	ldr	r3, [pc, #52]	; (80058c0 <SX1276OnDio2Irq+0x15c>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	695c      	ldr	r4, [r3, #20]
 8005890:	201c      	movs	r0, #28
 8005892:	f7ff f969 	bl	8004b68 <SX1276Read>
 8005896:	4603      	mov	r3, r0
 8005898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800589c:	b2db      	uxtb	r3, r3
 800589e:	4618      	mov	r0, r3
 80058a0:	47a0      	blx	r4
                break;
 80058a2:	e003      	b.n	80058ac <SX1276OnDio2Irq+0x148>
                break;
 80058a4:	bf00      	nop
 80058a6:	e002      	b.n	80058ae <SX1276OnDio2Irq+0x14a>
                break;
 80058a8:	bf00      	nop
 80058aa:	e000      	b.n	80058ae <SX1276OnDio2Irq+0x14a>
                break;
 80058ac:	bf00      	nop
            break;
 80058ae:	bf00      	nop
    }
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd90      	pop	{r4, r7, pc}
 80058b8:	20000300 	.word	0x20000300
 80058bc:	200002e8 	.word	0x200002e8
 80058c0:	20000060 	.word	0x20000060

080058c4 <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void* context )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 80058cc:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <SX1276OnDio3Irq+0x84>)
 80058ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d030      	beq.n	8005938 <SX1276OnDio3Irq+0x74>
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d000      	beq.n	80058dc <SX1276OnDio3Irq+0x18>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 80058da:	e030      	b.n	800593e <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80058dc:	2012      	movs	r0, #18
 80058de:	f7ff f943 	bl	8004b68 <SX1276Read>
 80058e2:	4603      	mov	r3, r0
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	d112      	bne.n	8005912 <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80058ec:	2105      	movs	r1, #5
 80058ee:	2012      	movs	r0, #18
 80058f0:	f7ff f92a 	bl	8004b48 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80058f4:	4b15      	ldr	r3, [pc, #84]	; (800594c <SX1276OnDio3Irq+0x88>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d01f      	beq.n	800593c <SX1276OnDio3Irq+0x78>
 80058fc:	4b13      	ldr	r3, [pc, #76]	; (800594c <SX1276OnDio3Irq+0x88>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d01a      	beq.n	800593c <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 8005906:	4b11      	ldr	r3, [pc, #68]	; (800594c <SX1276OnDio3Irq+0x88>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	2001      	movs	r0, #1
 800590e:	4798      	blx	r3
        break;
 8005910:	e014      	b.n	800593c <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8005912:	2104      	movs	r1, #4
 8005914:	2012      	movs	r0, #18
 8005916:	f7ff f917 	bl	8004b48 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800591a:	4b0c      	ldr	r3, [pc, #48]	; (800594c <SX1276OnDio3Irq+0x88>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00c      	beq.n	800593c <SX1276OnDio3Irq+0x78>
 8005922:	4b0a      	ldr	r3, [pc, #40]	; (800594c <SX1276OnDio3Irq+0x88>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 800592c:	4b07      	ldr	r3, [pc, #28]	; (800594c <SX1276OnDio3Irq+0x88>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2000      	movs	r0, #0
 8005934:	4798      	blx	r3
        break;
 8005936:	e001      	b.n	800593c <SX1276OnDio3Irq+0x78>
        break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <SX1276OnDio3Irq+0x7a>
        break;
 800593c:	bf00      	nop
    }
}
 800593e:	bf00      	nop
 8005940:	3708      	adds	r7, #8
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	20000300 	.word	0x20000300
 800594c:	20000060 	.word	0x20000060

08005950 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void* context )
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <SX1276OnDio4Irq+0x3c>)
 800595a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800595e:	2b00      	cmp	r3, #0
 8005960:	d002      	beq.n	8005968 <SX1276OnDio4Irq+0x18>
 8005962:	2b01      	cmp	r3, #1
 8005964:	d00a      	beq.n	800597c <SX1276OnDio4Irq+0x2c>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8005966:	e00c      	b.n	8005982 <SX1276OnDio4Irq+0x32>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <SX1276OnDio4Irq+0x3c>)
 800596a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800596e:	2b00      	cmp	r3, #0
 8005970:	d106      	bne.n	8005980 <SX1276OnDio4Irq+0x30>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005972:	4b06      	ldr	r3, [pc, #24]	; (800598c <SX1276OnDio4Irq+0x3c>)
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        break;
 800597a:	e001      	b.n	8005980 <SX1276OnDio4Irq+0x30>
        break;
 800597c:	bf00      	nop
 800597e:	e000      	b.n	8005982 <SX1276OnDio4Irq+0x32>
        break;
 8005980:	bf00      	nop
    }
}
 8005982:	bf00      	nop
 8005984:	370c      	adds	r7, #12
 8005986:	46bd      	mov	sp, r7
 8005988:	bc80      	pop	{r7}
 800598a:	4770      	bx	lr
 800598c:	20000300 	.word	0x20000300

08005990 <BoardCriticalSectionBegin>:

uint8_t Uart2TxBuffer[UART2_FIFO_TX_SIZE];
uint8_t Uart2RxBuffer[UART2_FIFO_RX_SIZE];

void BoardCriticalSectionBegin( uint32_t *mask )
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005998:	f3ef 8310 	mrs	r3, PRIMASK
 800599c:	60fb      	str	r3, [r7, #12]
  return(result);
 800599e:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059a4:	b672      	cpsid	i
}
 80059a6:	bf00      	nop
    __disable_irq( );
}
 80059a8:	bf00      	nop
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bc80      	pop	{r7}
 80059b0:	4770      	bx	lr

080059b2 <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
 80059b2:	b480      	push	{r7}
 80059b4:	b085      	sub	sp, #20
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f383 8810 	msr	PRIMASK, r3
}
 80059c6:	bf00      	nop
}
 80059c8:	bf00      	nop
 80059ca:	3714      	adds	r7, #20
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bc80      	pop	{r7}
 80059d0:	4770      	bx	lr

080059d2 <BoardInitPeriph>:

void BoardInitPeriph( void )
{
 80059d2:	b480      	push	{r7}
 80059d4:	af00      	add	r7, sp, #0

}
 80059d6:	bf00      	nop
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
	...

080059e0 <BoardInitMcu>:

void BoardInitMcu( void )
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
    if( McuInitialized == false )
 80059e4:	4b06      	ldr	r3, [pc, #24]	; (8005a00 <BoardInitMcu+0x20>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	f083 0301 	eor.w	r3, r3, #1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <BoardInitMcu+0x1a>
    {
        RtcInit( );
 80059f2:	f000 f9e5 	bl	8005dc0 <RtcInit>
        BoardUnusedIoInit( );
 80059f6:	f000 f805 	bl	8005a04 <BoardUnusedIoInit>
//        LpmSetOffMode( LPM_APPLI_ID, LPM_DISABLE );

    }
}
 80059fa:	bf00      	nop
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000164 	.word	0x20000164

08005a04 <BoardUnusedIoInit>:
//    // Compute and return the temperature in degree celcius * 256
//    return ( int16_t ) COMPUTE_TEMPERATURE( tempRaw, BatteryVoltage );
//}

static void BoardUnusedIoInit( void )
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
    HAL_DBGMCU_EnableDBGSleepMode( );
 8005a08:	f7fb f9de 	bl	8000dc8 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode( );
 8005a0c:	f7fb f9ea 	bl	8000de4 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 8005a10:	f7fb f9f6 	bl	8000e00 <HAL_DBGMCU_EnableDBGStandbyMode>
}
 8005a14:	bf00      	nop
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f7fb f9af 	bl	8000d84 <HAL_Delay>
}
 8005a26:	bf00      	nop
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <init_rf>:
 */
extern Gpio_t Led1;
extern Gpio_t Led2;

void init_rf (void)
{
 8005a30:	b590      	push	{r4, r7, lr}
 8005a32:	b08b      	sub	sp, #44	; 0x2c
 8005a34:	af0a      	add	r7, sp, #40	; 0x28
  // Target board initialization
  BoardInitMcu( );
 8005a36:	f7ff ffd3 	bl	80059e0 <BoardInitMcu>
  BoardInitPeriph( );
 8005a3a:	f7ff ffca 	bl	80059d2 <BoardInitPeriph>

  // Radio initialization
  RadioEvents.TxDone = OnTxDone;
 8005a3e:	4b2c      	ldr	r3, [pc, #176]	; (8005af0 <init_rf+0xc0>)
 8005a40:	4a2c      	ldr	r2, [pc, #176]	; (8005af4 <init_rf+0xc4>)
 8005a42:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8005a44:	4b2a      	ldr	r3, [pc, #168]	; (8005af0 <init_rf+0xc0>)
 8005a46:	4a2c      	ldr	r2, [pc, #176]	; (8005af8 <init_rf+0xc8>)
 8005a48:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8005a4a:	4b29      	ldr	r3, [pc, #164]	; (8005af0 <init_rf+0xc0>)
 8005a4c:	4a2b      	ldr	r2, [pc, #172]	; (8005afc <init_rf+0xcc>)
 8005a4e:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8005a50:	4b27      	ldr	r3, [pc, #156]	; (8005af0 <init_rf+0xc0>)
 8005a52:	4a2b      	ldr	r2, [pc, #172]	; (8005b00 <init_rf+0xd0>)
 8005a54:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8005a56:	4b26      	ldr	r3, [pc, #152]	; (8005af0 <init_rf+0xc0>)
 8005a58:	4a2a      	ldr	r2, [pc, #168]	; (8005b04 <init_rf+0xd4>)
 8005a5a:	611a      	str	r2, [r3, #16]

  Radio.Init( &RadioEvents );
 8005a5c:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <init_rf+0xd8>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4823      	ldr	r0, [pc, #140]	; (8005af0 <init_rf+0xc0>)
 8005a62:	4798      	blx	r3

  Radio.SetChannel( RF_FREQUENCY );
 8005a64:	4b28      	ldr	r3, [pc, #160]	; (8005b08 <init_rf+0xd8>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	4828      	ldr	r0, [pc, #160]	; (8005b0c <init_rf+0xdc>)
 8005a6a:	4798      	blx	r3

  Radio.SetMaxPayloadLength( MODEM_LORA, BUFFER_SIZE );

#elif defined( USE_MODEM_FSK )

  Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 8005a6c:	4b26      	ldr	r3, [pc, #152]	; (8005b08 <init_rf+0xd8>)
 8005a6e:	69dc      	ldr	r4, [r3, #28]
 8005a70:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005a74:	9308      	str	r3, [sp, #32]
 8005a76:	2300      	movs	r3, #0
 8005a78:	9307      	str	r3, [sp, #28]
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	9306      	str	r3, [sp, #24]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9305      	str	r3, [sp, #20]
 8005a82:	2301      	movs	r3, #1
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	2300      	movs	r3, #0
 8005a88:	9303      	str	r3, [sp, #12]
 8005a8a:	2305      	movs	r3, #5
 8005a8c:	9302      	str	r3, [sp, #8]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8005a9e:	210e      	movs	r1, #14
 8005aa0:	2000      	movs	r0, #0
 8005aa2:	47a0      	blx	r4
                                FSK_DATARATE, 0,
                                FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
                                true, 0, 0, 0, 3000 );

  Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 8005aa4:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <init_rf+0xd8>)
 8005aa6:	699c      	ldr	r4, [r3, #24]
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	9309      	str	r3, [sp, #36]	; 0x24
 8005aac:	2300      	movs	r3, #0
 8005aae:	9308      	str	r3, [sp, #32]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	9307      	str	r3, [sp, #28]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9306      	str	r3, [sp, #24]
 8005ab8:	2301      	movs	r3, #1
 8005aba:	9305      	str	r3, [sp, #20]
 8005abc:	2300      	movs	r3, #0
 8005abe:	9304      	str	r3, [sp, #16]
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	9303      	str	r3, [sp, #12]
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9302      	str	r3, [sp, #8]
 8005ac8:	2305      	movs	r3, #5
 8005aca:	9301      	str	r3, [sp, #4]
 8005acc:	4b10      	ldr	r3, [pc, #64]	; (8005b10 <init_rf+0xe0>)
 8005ace:	9300      	str	r3, [sp, #0]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005ad6:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005ada:	2000      	movs	r0, #0
 8005adc:	47a0      	blx	r4
                                0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
                                0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, true,
                                0, 0,false, true );

  Radio.SetMaxPayloadLength( MODEM_FSK, BUFFER_SIZE );
 8005ade:	4b0a      	ldr	r3, [pc, #40]	; (8005b08 <init_rf+0xd8>)
 8005ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ae2:	2140      	movs	r1, #64	; 0x40
 8005ae4:	2000      	movs	r0, #0
 8005ae6:	4798      	blx	r3
#endif

}
 8005ae8:	bf00      	nop
 8005aea:	3704      	adds	r7, #4
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd90      	pop	{r4, r7, pc}
 8005af0:	20000168 	.word	0x20000168
 8005af4:	08005c09 	.word	0x08005c09
 8005af8:	08005c31 	.word	0x08005c31
 8005afc:	08005ca5 	.word	0x08005ca5
 8005b00:	08005cc1 	.word	0x08005cc1
 8005b04:	08005cdd 	.word	0x08005cdd
 8005b08:	08006d4c 	.word	0x08006d4c
 8005b0c:	1ad27480 	.word	0x1ad27480
 8005b10:	00014585 	.word	0x00014585

08005b14 <InitRfBer>:

#ifdef BER_TEST

// все как у init_rf за исключением того, что отключен расчёт контрольной суммы

void InitRfBer( void ) {
 8005b14:	b590      	push	{r4, r7, lr}
 8005b16:	b08b      	sub	sp, #44	; 0x2c
 8005b18:	af0a      	add	r7, sp, #40	; 0x28
	  // Target board initialization
	  BoardInitMcu( );
 8005b1a:	f7ff ff61 	bl	80059e0 <BoardInitMcu>
	  BoardInitPeriph( );
 8005b1e:	f7ff ff58 	bl	80059d2 <BoardInitPeriph>

	  // Radio initialization
	  RadioEvents.TxDone = OnTxDone;
 8005b22:	4b2c      	ldr	r3, [pc, #176]	; (8005bd4 <InitRfBer+0xc0>)
 8005b24:	4a2c      	ldr	r2, [pc, #176]	; (8005bd8 <InitRfBer+0xc4>)
 8005b26:	601a      	str	r2, [r3, #0]
	  RadioEvents.RxDone = OnRxDone;
 8005b28:	4b2a      	ldr	r3, [pc, #168]	; (8005bd4 <InitRfBer+0xc0>)
 8005b2a:	4a2c      	ldr	r2, [pc, #176]	; (8005bdc <InitRfBer+0xc8>)
 8005b2c:	609a      	str	r2, [r3, #8]
	  RadioEvents.TxTimeout = OnTxTimeout;
 8005b2e:	4b29      	ldr	r3, [pc, #164]	; (8005bd4 <InitRfBer+0xc0>)
 8005b30:	4a2b      	ldr	r2, [pc, #172]	; (8005be0 <InitRfBer+0xcc>)
 8005b32:	605a      	str	r2, [r3, #4]
	  RadioEvents.RxTimeout = OnRxTimeout;
 8005b34:	4b27      	ldr	r3, [pc, #156]	; (8005bd4 <InitRfBer+0xc0>)
 8005b36:	4a2b      	ldr	r2, [pc, #172]	; (8005be4 <InitRfBer+0xd0>)
 8005b38:	60da      	str	r2, [r3, #12]
	  RadioEvents.RxError = OnRxError;
 8005b3a:	4b26      	ldr	r3, [pc, #152]	; (8005bd4 <InitRfBer+0xc0>)
 8005b3c:	4a2a      	ldr	r2, [pc, #168]	; (8005be8 <InitRfBer+0xd4>)
 8005b3e:	611a      	str	r2, [r3, #16]

	  Radio.Init( &RadioEvents );
 8005b40:	4b2a      	ldr	r3, [pc, #168]	; (8005bec <InitRfBer+0xd8>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4823      	ldr	r0, [pc, #140]	; (8005bd4 <InitRfBer+0xc0>)
 8005b46:	4798      	blx	r3

	  Radio.SetChannel( RF_FREQUENCY );
 8005b48:	4b28      	ldr	r3, [pc, #160]	; (8005bec <InitRfBer+0xd8>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	4828      	ldr	r0, [pc, #160]	; (8005bf0 <InitRfBer+0xdc>)
 8005b4e:	4798      	blx	r3

  Radio.SetMaxPayloadLength( MODEM_LORA, BUFFER_SIZE );

#elif defined( USE_MODEM_FSK )

  Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 8005b50:	4b26      	ldr	r3, [pc, #152]	; (8005bec <InitRfBer+0xd8>)
 8005b52:	69dc      	ldr	r4, [r3, #28]
 8005b54:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005b58:	9308      	str	r3, [sp, #32]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	9307      	str	r3, [sp, #28]
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9306      	str	r3, [sp, #24]
 8005b62:	2300      	movs	r3, #0
 8005b64:	9305      	str	r3, [sp, #20]
 8005b66:	2300      	movs	r3, #0
 8005b68:	9304      	str	r3, [sp, #16]
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	9303      	str	r3, [sp, #12]
 8005b6e:	2305      	movs	r3, #5
 8005b70:	9302      	str	r3, [sp, #8]
 8005b72:	2300      	movs	r3, #0
 8005b74:	9301      	str	r3, [sp, #4]
 8005b76:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8005b82:	210e      	movs	r1, #14
 8005b84:	2000      	movs	r0, #0
 8005b86:	47a0      	blx	r4
                                FSK_DATARATE, 0,
                                FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
                                false, 0, 0, 0, 3000 );

  Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 8005b88:	4b18      	ldr	r3, [pc, #96]	; (8005bec <InitRfBer+0xd8>)
 8005b8a:	699c      	ldr	r4, [r3, #24]
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8005b90:	2300      	movs	r3, #0
 8005b92:	9308      	str	r3, [sp, #32]
 8005b94:	2300      	movs	r3, #0
 8005b96:	9307      	str	r3, [sp, #28]
 8005b98:	2300      	movs	r3, #0
 8005b9a:	9306      	str	r3, [sp, #24]
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	9305      	str	r3, [sp, #20]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	9304      	str	r3, [sp, #16]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	9303      	str	r3, [sp, #12]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	9302      	str	r3, [sp, #8]
 8005bac:	2305      	movs	r3, #5
 8005bae:	9301      	str	r3, [sp, #4]
 8005bb0:	4b10      	ldr	r3, [pc, #64]	; (8005bf4 <InitRfBer+0xe0>)
 8005bb2:	9300      	str	r3, [sp, #0]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005bba:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	47a0      	blx	r4
                                0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
                                0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, false,
                                0, 0,false, true );

  Radio.SetMaxPayloadLength( MODEM_FSK, BUFFER_SIZE );
 8005bc2:	4b0a      	ldr	r3, [pc, #40]	; (8005bec <InitRfBer+0xd8>)
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc6:	2140      	movs	r1, #64	; 0x40
 8005bc8:	2000      	movs	r0, #0
 8005bca:	4798      	blx	r3
#endif
}
 8005bcc:	bf00      	nop
 8005bce:	3704      	adds	r7, #4
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd90      	pop	{r4, r7, pc}
 8005bd4:	20000168 	.word	0x20000168
 8005bd8:	08005c09 	.word	0x08005c09
 8005bdc:	08005c31 	.word	0x08005c31
 8005be0:	08005ca5 	.word	0x08005ca5
 8005be4:	08005cc1 	.word	0x08005cc1
 8005be8:	08005cdd 	.word	0x08005cdd
 8005bec:	08006d4c 	.word	0x08006d4c
 8005bf0:	1ad27480 	.word	0x1ad27480
 8005bf4:	00014585 	.word	0x00014585

08005bf8 <ping_pong_rf>:
}
#endif


void ping_pong_rf (void)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
//  RtcInit();
  bool isMaster = true;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  init_rf( );
 8005c02:	f7ff ff15 	bl	8005a30 <init_rf>
  }

#endif

#ifdef BER_TEST
  while(1) {
 8005c06:	e7fe      	b.n	8005c06 <ping_pong_rf+0xe>

08005c08 <OnTxDone>:
         }
     }
}

void OnTxDone( void )
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8005c0c:	2108      	movs	r1, #8
 8005c0e:	4805      	ldr	r0, [pc, #20]	; (8005c24 <OnTxDone+0x1c>)
 8005c10:	f7fb fbe3 	bl	80013da <HAL_GPIO_TogglePin>
    Radio.Sleep( );
 8005c14:	4b04      	ldr	r3, [pc, #16]	; (8005c28 <OnTxDone+0x20>)
 8005c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c18:	4798      	blx	r3
    State = TX;
 8005c1a:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <OnTxDone+0x24>)
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	701a      	strb	r2, [r3, #0]
    count++;
#endif
#ifdef PER_TEST
    count++;
#endif
}
 8005c20:	bf00      	nop
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40020800 	.word	0x40020800
 8005c28:	08006d4c 	.word	0x08006d4c
 8005c2c:	20000165 	.word	0x20000165

08005c30 <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	4608      	mov	r0, r1
 8005c3a:	4611      	mov	r1, r2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	4603      	mov	r3, r0
 8005c40:	817b      	strh	r3, [r7, #10]
 8005c42:	460b      	mov	r3, r1
 8005c44:	813b      	strh	r3, [r7, #8]
 8005c46:	4613      	mov	r3, r2
 8005c48:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8005c4a:	2108      	movs	r1, #8
 8005c4c:	480e      	ldr	r0, [pc, #56]	; (8005c88 <OnRxDone+0x58>)
 8005c4e:	f7fb fbc4 	bl	80013da <HAL_GPIO_TogglePin>
    Radio.Sleep( );
 8005c52:	4b0e      	ldr	r3, [pc, #56]	; (8005c8c <OnRxDone+0x5c>)
 8005c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c56:	4798      	blx	r3
    BufferSize = size;
 8005c58:	4a0d      	ldr	r2, [pc, #52]	; (8005c90 <OnRxDone+0x60>)
 8005c5a:	897b      	ldrh	r3, [r7, #10]
 8005c5c:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <OnRxDone+0x60>)
 8005c60:	881b      	ldrh	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68f9      	ldr	r1, [r7, #12]
 8005c66:	480b      	ldr	r0, [pc, #44]	; (8005c94 <OnRxDone+0x64>)
 8005c68:	f000 ffc0 	bl	8006bec <memcpy>
    RssiValue = rssi;
 8005c6c:	893b      	ldrh	r3, [r7, #8]
 8005c6e:	b25a      	sxtb	r2, r3
 8005c70:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <OnRxDone+0x68>)
 8005c72:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 8005c74:	4a09      	ldr	r2, [pc, #36]	; (8005c9c <OnRxDone+0x6c>)
 8005c76:	79fb      	ldrb	r3, [r7, #7]
 8005c78:	7013      	strb	r3, [r2, #0]
    State = RX;
 8005c7a:	4b09      	ldr	r3, [pc, #36]	; (8005ca0 <OnRxDone+0x70>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	701a      	strb	r2, [r3, #0]
}
 8005c80:	bf00      	nop
 8005c82:	3710      	adds	r7, #16
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40020800 	.word	0x40020800
 8005c8c:	08006d4c 	.word	0x08006d4c
 8005c90:	20000040 	.word	0x20000040
 8005c94:	200003c0 	.word	0x200003c0
 8005c98:	20000166 	.word	0x20000166
 8005c9c:	20000167 	.word	0x20000167
 8005ca0:	20000165 	.word	0x20000165

08005ca4 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005ca8:	4b03      	ldr	r3, [pc, #12]	; (8005cb8 <OnTxTimeout+0x14>)
 8005caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cac:	4798      	blx	r3
    State = TX_TIMEOUT;
 8005cae:	4b03      	ldr	r3, [pc, #12]	; (8005cbc <OnTxTimeout+0x18>)
 8005cb0:	2205      	movs	r2, #5
 8005cb2:	701a      	strb	r2, [r3, #0]
}
 8005cb4:	bf00      	nop
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	08006d4c 	.word	0x08006d4c
 8005cbc:	20000165 	.word	0x20000165

08005cc0 <OnRxTimeout>:

void OnRxTimeout( void )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005cc4:	4b03      	ldr	r3, [pc, #12]	; (8005cd4 <OnRxTimeout+0x14>)
 8005cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc8:	4798      	blx	r3
    State = RX_TIMEOUT;
 8005cca:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <OnRxTimeout+0x18>)
 8005ccc:	2202      	movs	r2, #2
 8005cce:	701a      	strb	r2, [r3, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	08006d4c 	.word	0x08006d4c
 8005cd8:	20000165 	.word	0x20000165

08005cdc <OnRxError>:

void OnRxError( void )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005ce0:	4b03      	ldr	r3, [pc, #12]	; (8005cf0 <OnRxError+0x14>)
 8005ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce4:	4798      	blx	r3
    State = RX_ERROR;
 8005ce6:	4b03      	ldr	r3, [pc, #12]	; (8005cf4 <OnRxError+0x18>)
 8005ce8:	2203      	movs	r2, #3
 8005cea:	701a      	strb	r2, [r3, #0]
}
 8005cec:	bf00      	nop
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	08006d4c 	.word	0x08006d4c
 8005cf4:	20000165 	.word	0x20000165

08005cf8 <Radio_TX>:


// Перед использованием этой функции необходимо вызвать Radio.Send()
// Сама функция Radio_TX должна крутиться в бесконечном цикле
void Radio_TX (uint8_t *pData, uint8_t size ) {
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
	  switch( State )
 8005d04:	4b09      	ldr	r3, [pc, #36]	; (8005d2c <Radio_TX+0x34>)
 8005d06:	781b      	ldrb	r3, [r3, #0]
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d109      	bne.n	8005d20 <Radio_TX+0x28>
	  	{
		  case TX:
		  Radio.Send( pData, size );
 8005d0c:	4b08      	ldr	r3, [pc, #32]	; (8005d30 <Radio_TX+0x38>)
 8005d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d10:	78fa      	ldrb	r2, [r7, #3]
 8005d12:	4611      	mov	r1, r2
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	4798      	blx	r3
		  State = LOWPOWER;
 8005d18:	4b04      	ldr	r3, [pc, #16]	; (8005d2c <Radio_TX+0x34>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	701a      	strb	r2, [r3, #0]
		  break;
 8005d1e:	e000      	b.n	8005d22 <Radio_TX+0x2a>
		  case TX_TIMEOUT:
		  case RX:
		  case RX_ERROR:
		  case LOWPOWER:
		  default:
		  break;
 8005d20:	bf00      	nop
  }
}
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000165 	.word	0x20000165
 8005d30:	08006d4c 	.word	0x08006d4c

08005d34 <SearchSeq>:

// Обработчик прерываний в sx1276mb1las-board.c

#ifdef BER_TEST

uint16_t SearchSeq( BarkerLen_t len ) {
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	71fb      	strb	r3, [r7, #7]
	BarkerSeq_t* pSeq = &BarkerSeq[0];
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <SearchSeq+0x3c>)
 8005d40:	60fb      	str	r3, [r7, #12]
	for( ; pSeq <= &BarkerSeq[ sizeof( BarkerSeq )/sizeof( BarkerSeq_t ) - 1 ];  pSeq += sizeof(BarkerSeq_t) ) {
 8005d42:	e00a      	b.n	8005d5a <SearchSeq+0x26>
		if( pSeq->SequenceSize == len ) return pSeq->Sequence;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	79fa      	ldrb	r2, [r7, #7]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d102      	bne.n	8005d54 <SearchSeq+0x20>
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	885b      	ldrh	r3, [r3, #2]
 8005d52:	e007      	b.n	8005d64 <SearchSeq+0x30>
	for( ; pSeq <= &BarkerSeq[ sizeof( BarkerSeq )/sizeof( BarkerSeq_t ) - 1 ];  pSeq += sizeof(BarkerSeq_t) ) {
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3310      	adds	r3, #16
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a05      	ldr	r2, [pc, #20]	; (8005d74 <SearchSeq+0x40>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d9f0      	bls.n	8005d44 <SearchSeq+0x10>
	}
	return 0;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bc80      	pop	{r7}
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	20000024 	.word	0x20000024
 8005d74:	2000003c 	.word	0x2000003c

08005d78 <BerTestRun>:

void BerTestRun( BarkerLen_t len ) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
	InitRfBer();
 8005d82:	f7ff fec7 	bl	8005b14 <InitRfBer>
	uint8_t data[] = {0, 0};
 8005d86:	2300      	movs	r3, #0
 8005d88:	81bb      	strh	r3, [r7, #12]
	State = TX;
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <BerTestRun+0x44>)
 8005d8c:	2204      	movs	r2, #4
 8005d8e:	701a      	strb	r2, [r3, #0]
	uint16_t seq = SearchSeq( len );
 8005d90:	79fb      	ldrb	r3, [r7, #7]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7ff ffce 	bl	8005d34 <SearchSeq>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	81fb      	strh	r3, [r7, #14]
	*( uint16_t* )data = seq;
 8005d9c:	f107 030c 	add.w	r3, r7, #12
 8005da0:	89fa      	ldrh	r2, [r7, #14]
 8005da2:	801a      	strh	r2, [r3, #0]
	while(1){
		Radio_TX( data, sizeof( data ) );
 8005da4:	f107 030c 	add.w	r3, r7, #12
 8005da8:	2102      	movs	r1, #2
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7ff ffa4 	bl	8005cf8 <Radio_TX>
		HAL_Delay(1000);
 8005db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005db4:	f7fa ffe6 	bl	8000d84 <HAL_Delay>
		Radio_TX( data, sizeof( data ) );
 8005db8:	e7f4      	b.n	8005da4 <BerTestRun+0x2c>
 8005dba:	bf00      	nop
 8005dbc:	20000165 	.word	0x20000165

08005dc0 <RtcInit>:
 * \retval calendarValue Time in ticks
 */
static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time );

void RtcInit( void )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;

    if( RtcInitialized == false )
 8005dc6:	4b2f      	ldr	r3, [pc, #188]	; (8005e84 <RtcInit+0xc4>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	f083 0301 	eor.w	r3, r3, #1
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d053      	beq.n	8005e7c <RtcInit+0xbc>
    {
        __HAL_RCC_RTC_ENABLE( );
 8005dd4:	4b2c      	ldr	r3, [pc, #176]	; (8005e88 <RtcInit+0xc8>)
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance            = RTC;
 8005dda:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <RtcInit+0xcc>)
 8005ddc:	4a2c      	ldr	r2, [pc, #176]	; (8005e90 <RtcInit+0xd0>)
 8005dde:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8005de0:	4b2a      	ldr	r3, [pc, #168]	; (8005e8c <RtcInit+0xcc>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	605a      	str	r2, [r3, #4]
        RtcHandle.Init.AsynchPrediv   = PREDIV_A;  // RTC_ASYNCH_PREDIV;
 8005de6:	4b29      	ldr	r3, [pc, #164]	; (8005e8c <RtcInit+0xcc>)
 8005de8:	221f      	movs	r2, #31
 8005dea:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 8005dec:	4b27      	ldr	r3, [pc, #156]	; (8005e8c <RtcInit+0xcc>)
 8005dee:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005df2:	60da      	str	r2, [r3, #12]
        RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8005df4:	4b25      	ldr	r3, [pc, #148]	; (8005e8c <RtcInit+0xcc>)
 8005df6:	2200      	movs	r2, #0
 8005df8:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005dfa:	4b24      	ldr	r3, [pc, #144]	; (8005e8c <RtcInit+0xcc>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005e00:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <RtcInit+0xcc>)
 8005e02:	2200      	movs	r2, #0
 8005e04:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 8005e06:	4821      	ldr	r0, [pc, #132]	; (8005e8c <RtcInit+0xcc>)
 8005e08:	f7fc f9ee 	bl	80021e8 <HAL_RTC_Init>

        date.Year                     = 0;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	75fb      	strb	r3, [r7, #23]
        date.Month                    = RTC_MONTH_JANUARY;
 8005e10:	2301      	movs	r3, #1
 8005e12:	757b      	strb	r3, [r7, #21]
        date.Date                     = 1;
 8005e14:	2301      	movs	r3, #1
 8005e16:	75bb      	strb	r3, [r7, #22]
        date.WeekDay                  = RTC_WEEKDAY_MONDAY;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	753b      	strb	r3, [r7, #20]
        HAL_RTC_SetDate( &RtcHandle, &date, RTC_FORMAT_BIN );
 8005e1c:	f107 0314 	add.w	r3, r7, #20
 8005e20:	2200      	movs	r2, #0
 8005e22:	4619      	mov	r1, r3
 8005e24:	4819      	ldr	r0, [pc, #100]	; (8005e8c <RtcInit+0xcc>)
 8005e26:	f7fc fb6b 	bl	8002500 <HAL_RTC_SetDate>

        /*at 0:0:0*/
        time.Hours                    = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	703b      	strb	r3, [r7, #0]
        time.Minutes                  = 0;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	707b      	strb	r3, [r7, #1]
        time.Seconds                  = 0;
 8005e32:	2300      	movs	r3, #0
 8005e34:	70bb      	strb	r3, [r7, #2]
        time.SubSeconds               = 0;
 8005e36:	2300      	movs	r3, #0
 8005e38:	607b      	str	r3, [r7, #4]
        time.TimeFormat               = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	70fb      	strb	r3, [r7, #3]
        time.StoreOperation           = RTC_STOREOPERATION_RESET;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	613b      	str	r3, [r7, #16]
        time.DayLightSaving           = RTC_DAYLIGHTSAVING_NONE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
        HAL_RTC_SetTime( &RtcHandle, &time, RTC_FORMAT_BIN );
 8005e46:	463b      	mov	r3, r7
 8005e48:	2200      	movs	r2, #0
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	480f      	ldr	r0, [pc, #60]	; (8005e8c <RtcInit+0xcc>)
 8005e4e:	f7fc fa46 	bl	80022de <HAL_RTC_SetTime>

        // Enable Direct Read of the calendar registers (not through Shadow registers)
        HAL_RTCEx_EnableBypassShadow( &RtcHandle );
 8005e52:	480e      	ldr	r0, [pc, #56]	; (8005e8c <RtcInit+0xcc>)
 8005e54:	f7fc fedb 	bl	8002c0e <HAL_RTCEx_EnableBypassShadow>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 1, 0 );
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	2029      	movs	r0, #41	; 0x29
 8005e5e:	f7fb f892 	bl	8000f86 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 8005e62:	2029      	movs	r0, #41	; 0x29
 8005e64:	f7fb f8ab 	bl	8000fbe <HAL_NVIC_EnableIRQ>

        // Init alarm.
        HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8005e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e6c:	4807      	ldr	r0, [pc, #28]	; (8005e8c <RtcInit+0xcc>)
 8005e6e:	f7fc fd6b 	bl	8002948 <HAL_RTC_DeactivateAlarm>

        RtcSetTimerContext( );
 8005e72:	f000 f80f 	bl	8005e94 <RtcSetTimerContext>
        RtcInitialized = true;
 8005e76:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <RtcInit+0xc4>)
 8005e78:	2201      	movs	r2, #1
 8005e7a:	701a      	strb	r2, [r3, #0]
    }
}
 8005e7c:	bf00      	nop
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	2000018c 	.word	0x2000018c
 8005e88:	424706d8 	.word	0x424706d8
 8005e8c:	20000190 	.word	0x20000190
 8005e90:	40002800 	.word	0x40002800

08005e94 <RtcSetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcSetTimerContext( void )
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8005e98:	4905      	ldr	r1, [pc, #20]	; (8005eb0 <RtcSetTimerContext+0x1c>)
 8005e9a:	4806      	ldr	r0, [pc, #24]	; (8005eb4 <RtcSetTimerContext+0x20>)
 8005e9c:	f000 f9a4 	bl	80061e8 <RtcGetCalendarValue>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4b04      	ldr	r3, [pc, #16]	; (8005eb8 <RtcSetTimerContext+0x24>)
 8005ea6:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
 8005ea8:	4b03      	ldr	r3, [pc, #12]	; (8005eb8 <RtcSetTimerContext+0x24>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	200001b4 	.word	0x200001b4
 8005eb4:	200001c8 	.word	0x200001c8
 8005eb8:	200001b0 	.word	0x200001b0

08005ebc <RtcGetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcGetTimerContext( void )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
 8005ec0:	4b02      	ldr	r3, [pc, #8]	; (8005ecc <RtcGetTimerContext+0x10>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bc80      	pop	{r7}
 8005eca:	4770      	bx	lr
 8005ecc:	200001b0 	.word	0x200001b0

08005ed0 <RtcGetMinimumTimeout>:
 * \brief returns the wake up time in ticks
 *
 * \retval wake up time in ticks
 */
uint32_t RtcGetMinimumTimeout( void )
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
 8005ed4:	2303      	movs	r3, #3
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bc80      	pop	{r7}
 8005edc:	4770      	bx	lr

08005ede <RtcMs2Tick>:
 *
 * \param[IN] milliseconds Time in milliseconds
 * \retval returns time in timer ticks
 */
uint32_t RtcMs2Tick( uint32_t milliseconds )
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b082      	sub	sp, #8
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	f04f 0300 	mov.w	r3, #0
 8005eee:	f04f 0000 	mov.w	r0, #0
 8005ef2:	f04f 0100 	mov.w	r1, #0
 8005ef6:	01d9      	lsls	r1, r3, #7
 8005ef8:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8005efc:	01d0      	lsls	r0, r2, #7
 8005efe:	f04f 027d 	mov.w	r2, #125	; 0x7d
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	f7fa f939 	bl	800017c <__aeabi_uldivmod>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	4613      	mov	r3, r2
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <RtcTick2Ms>:
 *
 * \param[IN] time in timer ticks
 * \retval returns time in milliseconds
 */
uint32_t RtcTick2Ms( uint32_t tick )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> N_PREDIV_S;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	0a9b      	lsrs	r3, r3, #10
 8005f24:	60fb      	str	r3, [r7, #12]

    tick = tick & PREDIV_S;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f2c:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005f34:	fb02 f203 	mul.w	r2, r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f3e:	fb01 f303 	mul.w	r3, r1, r3
 8005f42:	0a9b      	lsrs	r3, r3, #10
 8005f44:	4413      	add	r3, r2
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bc80      	pop	{r7}
 8005f4e:	4770      	bx	lr

08005f50 <RtcSetAlarm>:
 * \note The alarm is set at now (read in this function) + timeout
 *
 * \param timeout Duration of the Timer ticks
 */
void RtcSetAlarm( uint32_t timeout )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b082      	sub	sp, #8
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
    // We don't go in Low Power mode for timeout below MIN_ALARM_DELAY
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 8005f58:	f000 f92e 	bl	80061b8 <RtcGetTimerElapsedTime>
    else
    {
//        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
    }

    RtcStartAlarm( timeout );
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f81f 	bl	8005fa0 <RtcStartAlarm>
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
	...

08005f6c <RtcStopAlarm>:

void RtcStopAlarm( void )
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
    // Disable the Alarm A interrupt
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8005f70:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f74:	4808      	ldr	r0, [pc, #32]	; (8005f98 <RtcStopAlarm+0x2c>)
 8005f76:	f7fc fce7 	bl	8002948 <HAL_RTC_DeactivateAlarm>

    // Clear RTC Alarm Flag
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8005f7a:	4b07      	ldr	r3, [pc, #28]	; (8005f98 <RtcStopAlarm+0x2c>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	4b05      	ldr	r3, [pc, #20]	; (8005f98 <RtcStopAlarm+0x2c>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005f8a:	60da      	str	r2, [r3, #12]

    // Clear the EXTI's line Flag for RTC Alarm
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8005f8c:	4b03      	ldr	r3, [pc, #12]	; (8005f9c <RtcStopAlarm+0x30>)
 8005f8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005f92:	615a      	str	r2, [r3, #20]
}
 8005f94:	bf00      	nop
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000190 	.word	0x20000190
 8005f9c:	40010400 	.word	0x40010400

08005fa0 <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
 8005fa0:	b5b0      	push	{r4, r5, r7, lr}
 8005fa2:	b08c      	sub	sp, #48	; 0x30
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
    uint16_t rtcAlarmSubSeconds = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t rtcAlarmSeconds = 0;
 8005fac:	2300      	movs	r3, #0
 8005fae:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t rtcAlarmMinutes = 0;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t rtcAlarmHours = 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t rtcAlarmDays = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	84fb      	strh	r3, [r7, #38]	; 0x26
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8005fbc:	4b6e      	ldr	r3, [pc, #440]	; (8006178 <RtcStartAlarm+0x1d8>)
 8005fbe:	f107 0410 	add.w	r4, r7, #16
 8005fc2:	1d1d      	adds	r5, r3, #4
 8005fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	6023      	str	r3, [r4, #0]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8005fcc:	4b6a      	ldr	r3, [pc, #424]	; (8006178 <RtcStartAlarm+0x1d8>)
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	60fb      	str	r3, [r7, #12]

    RtcStopAlarm( );
 8005fd2:	f7ff ffcb 	bl	8005f6c <RtcStopAlarm>

    /*reverse counter */
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005fde:	3303      	adds	r3, #3
 8005fe0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	b29b      	uxth	r3, r3
 8005fe6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fea:	b29a      	uxth	r2, r3
 8005fec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fee:	4413      	add	r3, r2
 8005ff0:	85fb      	strh	r3, [r7, #46]	; 0x2e
    // convert timeout  to seconds
    timeout >>= N_PREDIV_S;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	0a9b      	lsrs	r3, r3, #10
 8005ff6:	607b      	str	r3, [r7, #4]

    // Convert microsecs to RTC format and add to 'Now'
    rtcAlarmDays =  date.Date;
 8005ff8:	7bbb      	ldrb	r3, [r7, #14]
 8005ffa:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 8005ffc:	e008      	b.n	8006010 <RtcStartAlarm+0x70>
    {
        timeout -= TM_SECONDS_IN_1DAY;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8006004:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8006008:	607b      	str	r3, [r7, #4]
        rtcAlarmDays++;
 800600a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800600c:	3301      	adds	r3, #1
 800600e:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a5a      	ldr	r2, [pc, #360]	; (800617c <RtcStartAlarm+0x1dc>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d8f2      	bhi.n	8005ffe <RtcStartAlarm+0x5e>
    }

    // Calc hours
    rtcAlarmHours = time.Hours;
 8006018:	7c3b      	ldrb	r3, [r7, #16]
 800601a:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 800601c:	e006      	b.n	800602c <RtcStartAlarm+0x8c>
    {
        timeout -= TM_SECONDS_IN_1HOUR;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8006024:	607b      	str	r3, [r7, #4]
        rtcAlarmHours++;
 8006026:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006028:	3301      	adds	r3, #1
 800602a:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8006032:	d2f4      	bcs.n	800601e <RtcStartAlarm+0x7e>
    }

    // Calc minutes
    rtcAlarmMinutes = time.Minutes;
 8006034:	7c7b      	ldrb	r3, [r7, #17]
 8006036:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8006038:	e005      	b.n	8006046 <RtcStartAlarm+0xa6>
    {
        timeout -= TM_SECONDS_IN_1MINUTE;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	3b3c      	subs	r3, #60	; 0x3c
 800603e:	607b      	str	r3, [r7, #4]
        rtcAlarmMinutes++;
 8006040:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006042:	3301      	adds	r3, #1
 8006044:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b3b      	cmp	r3, #59	; 0x3b
 800604a:	d8f6      	bhi.n	800603a <RtcStartAlarm+0x9a>
    }

    // Calc seconds
    rtcAlarmSeconds =  time.Seconds + timeout;
 800604c:	7cbb      	ldrb	r3, [r7, #18]
 800604e:	b29a      	uxth	r2, r3
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	b29b      	uxth	r3, r3
 8006054:	4413      	add	r3, r2
 8006056:	85bb      	strh	r3, [r7, #44]	; 0x2c

    //***** Correct for modulo********
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8006058:	e006      	b.n	8006068 <RtcStartAlarm+0xc8>
    {
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 800605a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800605c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006060:	85fb      	strh	r3, [r7, #46]	; 0x2e
        rtcAlarmSeconds++;
 8006062:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006064:	3301      	adds	r3, #1
 8006066:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8006068:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800606a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800606e:	d2f4      	bcs.n	800605a <RtcStartAlarm+0xba>
    }

    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8006070:	e005      	b.n	800607e <RtcStartAlarm+0xde>
    { 
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 8006072:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006074:	3b3c      	subs	r3, #60	; 0x3c
 8006076:	85bb      	strh	r3, [r7, #44]	; 0x2c
        rtcAlarmMinutes++;
 8006078:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800607a:	3301      	adds	r3, #1
 800607c:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 800607e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006080:	2b3b      	cmp	r3, #59	; 0x3b
 8006082:	d8f6      	bhi.n	8006072 <RtcStartAlarm+0xd2>
    }

    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8006084:	e005      	b.n	8006092 <RtcStartAlarm+0xf2>
    {
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 8006086:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006088:	3b3c      	subs	r3, #60	; 0x3c
 800608a:	857b      	strh	r3, [r7, #42]	; 0x2a
        rtcAlarmHours++;
 800608c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800608e:	3301      	adds	r3, #1
 8006090:	853b      	strh	r3, [r7, #40]	; 0x28
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8006092:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006094:	2b3b      	cmp	r3, #59	; 0x3b
 8006096:	d8f6      	bhi.n	8006086 <RtcStartAlarm+0xe6>
    }

    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8006098:	e005      	b.n	80060a6 <RtcStartAlarm+0x106>
    {
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 800609a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800609c:	3b18      	subs	r3, #24
 800609e:	853b      	strh	r3, [r7, #40]	; 0x28
        rtcAlarmDays++;
 80060a0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060a2:	3301      	adds	r3, #1
 80060a4:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 80060a6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80060a8:	2b17      	cmp	r3, #23
 80060aa:	d8f6      	bhi.n	800609a <RtcStartAlarm+0xfa>
    }

    if( date.Year % 4 == 0 ) 
 80060ac:	7bfb      	ldrb	r3, [r7, #15]
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d113      	bne.n	80060e0 <RtcStartAlarm+0x140>
    {
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 80060b8:	7b7b      	ldrb	r3, [r7, #13]
 80060ba:	3b01      	subs	r3, #1
 80060bc:	4a30      	ldr	r2, [pc, #192]	; (8006180 <RtcStartAlarm+0x1e0>)
 80060be:	5cd3      	ldrb	r3, [r2, r3]
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d91e      	bls.n	8006106 <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 80060c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060ca:	7b7a      	ldrb	r2, [r7, #13]
 80060cc:	3a01      	subs	r2, #1
 80060ce:	492c      	ldr	r1, [pc, #176]	; (8006180 <RtcStartAlarm+0x1e0>)
 80060d0:	5c8a      	ldrb	r2, [r1, r2]
 80060d2:	fb93 f1f2 	sdiv	r1, r3, r2
 80060d6:	fb02 f201 	mul.w	r2, r2, r1
 80060da:	1a9b      	subs	r3, r3, r2
 80060dc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80060de:	e012      	b.n	8006106 <RtcStartAlarm+0x166>
        }
    }
    else
    {
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 80060e0:	7b7b      	ldrb	r3, [r7, #13]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	4a27      	ldr	r2, [pc, #156]	; (8006184 <RtcStartAlarm+0x1e4>)
 80060e6:	5cd3      	ldrb	r3, [r2, r3]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d90a      	bls.n	8006106 <RtcStartAlarm+0x166>
        {   
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 80060f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060f2:	7b7a      	ldrb	r2, [r7, #13]
 80060f4:	3a01      	subs	r2, #1
 80060f6:	4923      	ldr	r1, [pc, #140]	; (8006184 <RtcStartAlarm+0x1e4>)
 80060f8:	5c8a      	ldrb	r2, [r1, r2]
 80060fa:	fb93 f1f2 	sdiv	r1, r3, r2
 80060fe:	fb02 f201 	mul.w	r2, r2, r1
 8006102:	1a9b      	subs	r3, r3, r2
 8006104:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }

    /* Set RTC_AlarmStructure with calculated values*/
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8006106:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006108:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800610c:	3303      	adds	r3, #3
 800610e:	461a      	mov	r2, r3
 8006110:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <RtcStartAlarm+0x1e8>)
 8006112:	605a      	str	r2, [r3, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8006114:	4b1c      	ldr	r3, [pc, #112]	; (8006188 <RtcStartAlarm+0x1e8>)
 8006116:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800611a:	619a      	str	r2, [r3, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 800611c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800611e:	b2da      	uxtb	r2, r3
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <RtcStartAlarm+0x1e8>)
 8006122:	709a      	strb	r2, [r3, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 8006124:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006126:	b2da      	uxtb	r2, r3
 8006128:	4b17      	ldr	r3, [pc, #92]	; (8006188 <RtcStartAlarm+0x1e8>)
 800612a:	705a      	strb	r2, [r3, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 800612c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800612e:	b2da      	uxtb	r2, r3
 8006130:	4b15      	ldr	r3, [pc, #84]	; (8006188 <RtcStartAlarm+0x1e8>)
 8006132:	701a      	strb	r2, [r3, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 8006134:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006136:	b2da      	uxtb	r2, r3
 8006138:	4b13      	ldr	r3, [pc, #76]	; (8006188 <RtcStartAlarm+0x1e8>)
 800613a:	f883 2020 	strb.w	r2, [r3, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 800613e:	7cfa      	ldrb	r2, [r7, #19]
 8006140:	4b11      	ldr	r3, [pc, #68]	; (8006188 <RtcStartAlarm+0x1e8>)
 8006142:	70da      	strb	r2, [r3, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8006144:	4b10      	ldr	r3, [pc, #64]	; (8006188 <RtcStartAlarm+0x1e8>)
 8006146:	2200      	movs	r2, #0
 8006148:	61da      	str	r2, [r3, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 800614a:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <RtcStartAlarm+0x1e8>)
 800614c:	2200      	movs	r2, #0
 800614e:	615a      	str	r2, [r3, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8006150:	4b0d      	ldr	r3, [pc, #52]	; (8006188 <RtcStartAlarm+0x1e8>)
 8006152:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006156:	625a      	str	r2, [r3, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006158:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <RtcStartAlarm+0x1e8>)
 800615a:	2200      	movs	r2, #0
 800615c:	60da      	str	r2, [r3, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <RtcStartAlarm+0x1e8>)
 8006160:	2200      	movs	r2, #0
 8006162:	611a      	str	r2, [r3, #16]

    // Set RTC_Alarm
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8006164:	2200      	movs	r2, #0
 8006166:	4908      	ldr	r1, [pc, #32]	; (8006188 <RtcStartAlarm+0x1e8>)
 8006168:	4808      	ldr	r0, [pc, #32]	; (800618c <RtcStartAlarm+0x1ec>)
 800616a:	f7fc fab5 	bl	80026d8 <HAL_RTC_SetAlarm_IT>
}
 800616e:	bf00      	nop
 8006170:	3730      	adds	r7, #48	; 0x30
 8006172:	46bd      	mov	sp, r7
 8006174:	bdb0      	pop	{r4, r5, r7, pc}
 8006176:	bf00      	nop
 8006178:	200001b0 	.word	0x200001b0
 800617c:	0001517f 	.word	0x0001517f
 8006180:	08006d40 	.word	0x08006d40
 8006184:	08006d34 	.word	0x08006d34
 8006188:	20000400 	.word	0x20000400
 800618c:	20000190 	.word	0x20000190

08006190 <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8006196:	f107 0208 	add.w	r2, r7, #8
 800619a:	1d3b      	adds	r3, r7, #4
 800619c:	4611      	mov	r1, r2
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f822 	bl	80061e8 <RtcGetCalendarValue>
 80061a4:	4602      	mov	r2, r0
 80061a6:	460b      	mov	r3, r1
 80061a8:	4613      	mov	r3, r2
 80061aa:	61fb      	str	r3, [r7, #28]

    return( calendarValue );
 80061ac:	69fb      	ldr	r3, [r7, #28]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3720      	adds	r7, #32
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
	...

080061b8 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 80061be:	f107 0208 	add.w	r2, r7, #8
 80061c2:	1d3b      	adds	r3, r7, #4
 80061c4:	4611      	mov	r1, r2
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 f80e 	bl	80061e8 <RtcGetCalendarValue>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4613      	mov	r3, r2
 80061d2:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 80061d4:	4b03      	ldr	r3, [pc, #12]	; (80061e4 <RtcGetTimerElapsedTime+0x2c>)
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	1ad3      	subs	r3, r2, r3
}
 80061dc:	4618      	mov	r0, r3
 80061de:	3720      	adds	r7, #32
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}
 80061e4:	200001b0 	.word	0x200001b0

080061e8 <RtcGetCalendarValue>:

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 80061e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80061ec:	b088      	sub	sp, #32
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	6039      	str	r1, [r7, #0]
    uint64_t calendarValue = 0;
 80061f4:	f04f 0200 	mov.w	r2, #0
 80061f8:	f04f 0300 	mov.w	r3, #0
 80061fc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 8006200:	4b3f      	ldr	r3, [pc, #252]	; (8006300 <RtcGetCalendarValue+0x118>)
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	617b      	str	r3, [r7, #20]
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 8006206:	2200      	movs	r2, #0
 8006208:	6879      	ldr	r1, [r7, #4]
 800620a:	483e      	ldr	r0, [pc, #248]	; (8006304 <RtcGetCalendarValue+0x11c>)
 800620c:	f7fc fa16 	bl	800263c <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 8006210:	2200      	movs	r2, #0
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	483b      	ldr	r0, [pc, #236]	; (8006304 <RtcGetCalendarValue+0x11c>)
 8006216:	f7fc f916 	bl	8002446 <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 800621a:	4b39      	ldr	r3, [pc, #228]	; (8006300 <RtcGetCalendarValue+0x118>)
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	429a      	cmp	r2, r3
 8006222:	d1ed      	bne.n	8006200 <RtcGetCalendarValue+0x18>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	78db      	ldrb	r3, [r3, #3]
 8006228:	461a      	mov	r2, r3
 800622a:	f240 53b5 	movw	r3, #1461	; 0x5b5
 800622e:	fb03 f302 	mul.w	r3, r3, r2
 8006232:	3303      	adds	r3, #3
 8006234:	089b      	lsrs	r3, r3, #2
 8006236:	613b      	str	r3, [r7, #16]

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	78db      	ldrb	r3, [r3, #3]
 800623c:	f003 0303 	and.w	r3, r3, #3
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <RtcGetCalendarValue+0x62>
 8006246:	4b30      	ldr	r3, [pc, #192]	; (8006308 <RtcGetCalendarValue+0x120>)
 8006248:	e000      	b.n	800624c <RtcGetCalendarValue+0x64>
 800624a:	4b30      	ldr	r3, [pc, #192]	; (800630c <RtcGetCalendarValue+0x124>)
 800624c:	60fb      	str	r3, [r7, #12]

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	1e5a      	subs	r2, r3, #1
 8006254:	4613      	mov	r3, r2
 8006256:	011b      	lsls	r3, r3, #4
 8006258:	1a9b      	subs	r3, r3, r2
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	3301      	adds	r3, #1
 8006260:	0fda      	lsrs	r2, r3, #31
 8006262:	4413      	add	r3, r2
 8006264:	105b      	asrs	r3, r3, #1
 8006266:	4619      	mov	r1, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	3b01      	subs	r3, #1
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	fa22 f303 	lsr.w	r3, r2, r3
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	1acb      	subs	r3, r1, r3
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	4413      	add	r3, r2
 8006280:	613b      	str	r3, [r7, #16]

    seconds += ( date->Date -1 );
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	789b      	ldrb	r3, [r3, #2]
 8006286:	461a      	mov	r2, r3
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	4413      	add	r3, r2
 800628c:	3b01      	subs	r3, #1
 800628e:	613b      	str	r3, [r7, #16]

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	4a1f      	ldr	r2, [pc, #124]	; (8006310 <RtcGetCalendarValue+0x128>)
 8006294:	fb02 f303 	mul.w	r3, r2, r3
 8006298:	613b      	str	r3, [r7, #16]

    seconds += ( ( uint32_t )time->Seconds + 
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	789b      	ldrb	r3, [r3, #2]
 800629e:	4618      	mov	r0, r3
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80062aa:	fb03 f202 	mul.w	r2, r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	785b      	ldrb	r3, [r3, #1]
 80062b2:	4619      	mov	r1, r3
 80062b4:	460b      	mov	r3, r1
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	1a5b      	subs	r3, r3, r1
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	4403      	add	r3, r0
    seconds += ( ( uint32_t )time->Seconds + 
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	4413      	add	r3, r2
 80062c4:	613b      	str	r3, [r7, #16]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	461a      	mov	r2, r3
 80062ca:	f04f 0300 	mov.w	r3, #0
 80062ce:	0d95      	lsrs	r5, r2, #22
 80062d0:	0294      	lsls	r4, r2, #10
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80062da:	3303      	adds	r3, #3
 80062dc:	461a      	mov	r2, r3
 80062de:	f04f 0300 	mov.w	r3, #0
 80062e2:	eb14 0802 	adds.w	r8, r4, r2
 80062e6:	eb45 0903 	adc.w	r9, r5, r3
 80062ea:	e9c7 8906 	strd	r8, r9, [r7, #24]

    return( calendarValue );
 80062ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80062f2:	4610      	mov	r0, r2
 80062f4:	4619      	mov	r1, r3
 80062f6:	3720      	adds	r7, #32
 80062f8:	46bd      	mov	sp, r7
 80062fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80062fe:	bf00      	nop
 8006300:	40002800 	.word	0x40002800
 8006304:	20000190 	.word	0x20000190
 8006308:	00445550 	.word	0x00445550
 800630c:	0099aaa0 	.word	0x0099aaa0
 8006310:	00015180 	.word	0x00015180

08006314 <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
    TimerIrqHandler( );
 800631c:	f000 faa0 	bl	8006860 <TimerIrqHandler>
}
 8006320:	bf00      	nop
 8006322:	3708      	adds	r7, #8
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <SX1276IoInit>:
    NULL, // void ( *RxBoosted )( uint32_t timeout ) - SX126x Only
    NULL, // void ( *SetRxDutyCycle )( uint32_t rxTime, uint32_t sleepTime ) - SX126x Only
};

void SX1276IoInit( void )
{
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
  // DIO_0
  SX1276.DIO0.port = DIO_0_GPIO_Port;
 800632c:	4b15      	ldr	r3, [pc, #84]	; (8006384 <SX1276IoInit+0x5c>)
 800632e:	4a16      	ldr	r2, [pc, #88]	; (8006388 <SX1276IoInit+0x60>)
 8006330:	609a      	str	r2, [r3, #8]
  SX1276.DIO0.pin = DIO_0_Pin;
 8006332:	4b14      	ldr	r3, [pc, #80]	; (8006384 <SX1276IoInit+0x5c>)
 8006334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006338:	819a      	strh	r2, [r3, #12]
  // DIO_1
  SX1276.DIO1.port = DIO_1_GPIO_Port;
 800633a:	4b12      	ldr	r3, [pc, #72]	; (8006384 <SX1276IoInit+0x5c>)
 800633c:	4a12      	ldr	r2, [pc, #72]	; (8006388 <SX1276IoInit+0x60>)
 800633e:	611a      	str	r2, [r3, #16]
  SX1276.DIO1.pin = DIO_1_Pin;
 8006340:	4b10      	ldr	r3, [pc, #64]	; (8006384 <SX1276IoInit+0x5c>)
 8006342:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006346:	829a      	strh	r2, [r3, #20]
  // DIO_2
  SX1276.DIO2.port = DIO_2_GPIO_Port;
 8006348:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <SX1276IoInit+0x5c>)
 800634a:	4a10      	ldr	r2, [pc, #64]	; (800638c <SX1276IoInit+0x64>)
 800634c:	619a      	str	r2, [r3, #24]
  SX1276.DIO2.pin = DIO_2_Pin;
 800634e:	4b0d      	ldr	r3, [pc, #52]	; (8006384 <SX1276IoInit+0x5c>)
 8006350:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006354:	839a      	strh	r2, [r3, #28]
  // DIO_3
  SX1276.DIO3.port = DIO_3_GPIO_Port;
 8006356:	4b0b      	ldr	r3, [pc, #44]	; (8006384 <SX1276IoInit+0x5c>)
 8006358:	4a0c      	ldr	r2, [pc, #48]	; (800638c <SX1276IoInit+0x64>)
 800635a:	621a      	str	r2, [r3, #32]
  SX1276.DIO3.pin = DIO_3_Pin;
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <SX1276IoInit+0x5c>)
 800635e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006362:	849a      	strh	r2, [r3, #36]	; 0x24
  // DIO_4
  SX1276.DIO4.port = DIO_4_GPIO_Port;
 8006364:	4b07      	ldr	r3, [pc, #28]	; (8006384 <SX1276IoInit+0x5c>)
 8006366:	4a09      	ldr	r2, [pc, #36]	; (800638c <SX1276IoInit+0x64>)
 8006368:	629a      	str	r2, [r3, #40]	; 0x28
  SX1276.DIO4.pin = DIO_4_Pin;
 800636a:	4b06      	ldr	r3, [pc, #24]	; (8006384 <SX1276IoInit+0x5c>)
 800636c:	2220      	movs	r2, #32
 800636e:	859a      	strh	r2, [r3, #44]	; 0x2c
  // DIO_5
  SX1276.DIO5.port = DIO_5_GPIO_Port;
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <SX1276IoInit+0x5c>)
 8006372:	4a06      	ldr	r2, [pc, #24]	; (800638c <SX1276IoInit+0x64>)
 8006374:	631a      	str	r2, [r3, #48]	; 0x30
  SX1276.DIO5.pin = DIO_5_Pin;
 8006376:	4b03      	ldr	r3, [pc, #12]	; (8006384 <SX1276IoInit+0x5c>)
 8006378:	2240      	movs	r2, #64	; 0x40
 800637a:	869a      	strh	r2, [r3, #52]	; 0x34
}
 800637c:	bf00      	nop
 800637e:	46bd      	mov	sp, r7
 8006380:	bc80      	pop	{r7}
 8006382:	4770      	bx	lr
 8006384:	20000300 	.word	0x20000300
 8006388:	40020000 	.word	0x40020000
 800638c:	40020800 	.word	0x40020800

08006390 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  DioIrqCallbacks.dio0 = irqHandlers[0];
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a0d      	ldr	r2, [pc, #52]	; (80063d4 <SX1276IoIrqInit+0x44>)
 800639e:	6013      	str	r3, [r2, #0]
  DioIrqCallbacks.dio1 = irqHandlers[1];
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	4a0b      	ldr	r2, [pc, #44]	; (80063d4 <SX1276IoIrqInit+0x44>)
 80063a6:	6053      	str	r3, [r2, #4]
  DioIrqCallbacks.dio2 = irqHandlers[2];
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	4a09      	ldr	r2, [pc, #36]	; (80063d4 <SX1276IoIrqInit+0x44>)
 80063ae:	6093      	str	r3, [r2, #8]
  DioIrqCallbacks.dio3 = irqHandlers[3];
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	4a07      	ldr	r2, [pc, #28]	; (80063d4 <SX1276IoIrqInit+0x44>)
 80063b6:	60d3      	str	r3, [r2, #12]
  DioIrqCallbacks.dio4 = irqHandlers[4];
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	4a05      	ldr	r2, [pc, #20]	; (80063d4 <SX1276IoIrqInit+0x44>)
 80063be:	6113      	str	r3, [r2, #16]
  DioIrqCallbacks.dio5 = irqHandlers[5];
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	4a03      	ldr	r2, [pc, #12]	; (80063d4 <SX1276IoIrqInit+0x44>)
 80063c6:	6153      	str	r3, [r2, #20]
}
 80063c8:	bf00      	nop
 80063ca:	370c      	adds	r7, #12
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bc80      	pop	{r7}
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	20000428 	.word	0x20000428

080063d8 <SX1276SetBoardTcxo>:
{
    // No TCXO component available on this board design.
}

void SX1276SetBoardTcxo( uint8_t state )
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	71fb      	strb	r3, [r7, #7]
    // No TCXO component available on this board design.
}
 80063e2:	bf00      	nop
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bc80      	pop	{r7}
 80063ea:	4770      	bx	lr

080063ec <SX1276GetBoardTcxoWakeupTime>:

uint32_t SX1276GetBoardTcxoWakeupTime( void )
{
 80063ec:	b480      	push	{r7}
 80063ee:	af00      	add	r7, sp, #0
    return BOARD_TCXO_WAKEUP_TIME;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bc80      	pop	{r7}
 80063f8:	4770      	bx	lr
	...

080063fc <SX1276Reset>:

void SX1276Reset( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
    // Enables the TCXO if available on the board design
    SX1276SetBoardTcxo( true );
 8006400:	2001      	movs	r0, #1
 8006402:	f7ff ffe9 	bl	80063d8 <SX1276SetBoardTcxo>

    // Set RESET pin to 0
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, RESET);
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <SX1276Reset+0x3c>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	4a0b      	ldr	r2, [pc, #44]	; (8006438 <SX1276Reset+0x3c>)
 800640c:	8891      	ldrh	r1, [r2, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	4618      	mov	r0, r3
 8006412:	f7fa ffca 	bl	80013aa <HAL_GPIO_WritePin>

    // Wait 1 ms
    DelayMs( 1 );
 8006416:	2001      	movs	r0, #1
 8006418:	f7ff fafe 	bl	8005a18 <DelayMs>

    // Configure RESET as input
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, SET);
 800641c:	4b06      	ldr	r3, [pc, #24]	; (8006438 <SX1276Reset+0x3c>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a05      	ldr	r2, [pc, #20]	; (8006438 <SX1276Reset+0x3c>)
 8006422:	8891      	ldrh	r1, [r2, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f7fa ffbf 	bl	80013aa <HAL_GPIO_WritePin>

    // Wait 6 ms
    DelayMs( 6 );
 800642c:	2006      	movs	r0, #6
 800642e:	f7ff faf3 	bl	8005a18 <DelayMs>
}
 8006432:	bf00      	nop
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop
 8006438:	20000300 	.word	0x20000300

0800643c <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 800643c:	b590      	push	{r4, r7, lr}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1276Read( REG_PACONFIG );
 800644e:	2009      	movs	r0, #9
 8006450:	f7fe fb8a 	bl	8004b68 <SX1276Read>
 8006454:	4603      	mov	r3, r0
 8006456:	73fb      	strb	r3, [r7, #15]
    paDac = SX1276Read( REG_PADAC );
 8006458:	204d      	movs	r0, #77	; 0x4d
 800645a:	f7fe fb85 	bl	8004b68 <SX1276Read>
 800645e:	4603      	mov	r3, r0
 8006460:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 8006462:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800646a:	b25c      	sxtb	r4, r3
 800646c:	4b4a      	ldr	r3, [pc, #296]	; (8006598 <SX1276SetRfTxPower+0x15c>)
 800646e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006470:	4618      	mov	r0, r3
 8006472:	f000 f893 	bl	800659c <SX1276GetPaSelect>
 8006476:	4603      	mov	r3, r0
 8006478:	b25b      	sxtb	r3, r3
 800647a:	4323      	orrs	r3, r4
 800647c:	b25b      	sxtb	r3, r3
 800647e:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8006480:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006484:	2b00      	cmp	r3, #0
 8006486:	da4e      	bge.n	8006526 <SX1276SetRfTxPower+0xea>
    {
        if( power > 17 )
 8006488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648c:	2b11      	cmp	r3, #17
 800648e:	dd04      	ble.n	800649a <SX1276SetRfTxPower+0x5e>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	f043 0307 	orr.w	r3, r3, #7
 8006496:	73bb      	strb	r3, [r7, #14]
 8006498:	e008      	b.n	80064ac <SX1276SetRfTxPower+0x70>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800649a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800649e:	f023 0307 	bic.w	r3, r3, #7
 80064a2:	b25b      	sxtb	r3, r3
 80064a4:	f043 0304 	orr.w	r3, r3, #4
 80064a8:	b25b      	sxtb	r3, r3
 80064aa:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	f003 0307 	and.w	r3, r3, #7
 80064b2:	2b07      	cmp	r3, #7
 80064b4:	d11b      	bne.n	80064ee <SX1276SetRfTxPower+0xb2>
        {
            if( power < 5 )
 80064b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ba:	2b04      	cmp	r3, #4
 80064bc:	dc01      	bgt.n	80064c2 <SX1276SetRfTxPower+0x86>
            {
                power = 5;
 80064be:	2305      	movs	r3, #5
 80064c0:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 80064c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c6:	2b14      	cmp	r3, #20
 80064c8:	dd01      	ble.n	80064ce <SX1276SetRfTxPower+0x92>
            {
                power = 20;
 80064ca:	2314      	movs	r3, #20
 80064cc:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 80064ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064d2:	f023 030f 	bic.w	r3, r3, #15
 80064d6:	b25a      	sxtb	r2, r3
 80064d8:	79fb      	ldrb	r3, [r7, #7]
 80064da:	3b05      	subs	r3, #5
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	b25b      	sxtb	r3, r3
 80064e0:	f003 030f 	and.w	r3, r3, #15
 80064e4:	b25b      	sxtb	r3, r3
 80064e6:	4313      	orrs	r3, r2
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	73fb      	strb	r3, [r7, #15]
 80064ec:	e045      	b.n	800657a <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < 2 )
 80064ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	dc01      	bgt.n	80064fa <SX1276SetRfTxPower+0xbe>
            {
                power = 2;
 80064f6:	2302      	movs	r3, #2
 80064f8:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 80064fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fe:	2b11      	cmp	r3, #17
 8006500:	dd01      	ble.n	8006506 <SX1276SetRfTxPower+0xca>
            {
                power = 17;
 8006502:	2311      	movs	r3, #17
 8006504:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8006506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800650a:	f023 030f 	bic.w	r3, r3, #15
 800650e:	b25a      	sxtb	r2, r3
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	3b02      	subs	r3, #2
 8006514:	b2db      	uxtb	r3, r3
 8006516:	b25b      	sxtb	r3, r3
 8006518:	f003 030f 	and.w	r3, r3, #15
 800651c:	b25b      	sxtb	r3, r3
 800651e:	4313      	orrs	r3, r2
 8006520:	b25b      	sxtb	r3, r3
 8006522:	73fb      	strb	r3, [r7, #15]
 8006524:	e029      	b.n	800657a <SX1276SetRfTxPower+0x13e>
        }
    }
    else
    {
        if( power > 0 )
 8006526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800652a:	2b00      	cmp	r3, #0
 800652c:	dd12      	ble.n	8006554 <SX1276SetRfTxPower+0x118>
        {
            if( power > 15 )
 800652e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006532:	2b0f      	cmp	r3, #15
 8006534:	dd01      	ble.n	800653a <SX1276SetRfTxPower+0xfe>
            {
                power = 15;
 8006536:	230f      	movs	r3, #15
 8006538:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800653a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800653e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006542:	b25b      	sxtb	r3, r3
 8006544:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006548:	b25a      	sxtb	r2, r3
 800654a:	79fb      	ldrb	r3, [r7, #7]
 800654c:	4313      	orrs	r3, r2
 800654e:	b25b      	sxtb	r3, r3
 8006550:	73fb      	strb	r3, [r7, #15]
 8006552:	e012      	b.n	800657a <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < -4 )
 8006554:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006558:	f113 0f04 	cmn.w	r3, #4
 800655c:	da01      	bge.n	8006562 <SX1276SetRfTxPower+0x126>
            {
                power = -4;
 800655e:	23fc      	movs	r3, #252	; 0xfc
 8006560:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8006562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006566:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800656a:	b25a      	sxtb	r2, r3
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	3304      	adds	r3, #4
 8006570:	b2db      	uxtb	r3, r3
 8006572:	b25b      	sxtb	r3, r3
 8006574:	4313      	orrs	r3, r2
 8006576:	b25b      	sxtb	r3, r3
 8006578:	73fb      	strb	r3, [r7, #15]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	4619      	mov	r1, r3
 800657e:	2009      	movs	r0, #9
 8006580:	f7fe fae2 	bl	8004b48 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	4619      	mov	r1, r3
 8006588:	204d      	movs	r0, #77	; 0x4d
 800658a:	f7fe fadd 	bl	8004b48 <SX1276Write>
}
 800658e:	bf00      	nop
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	bd90      	pop	{r4, r7, pc}
 8006596:	bf00      	nop
 8006598:	20000300 	.word	0x20000300

0800659c <SX1276GetPaSelect>:

static uint8_t SX1276GetPaSelect( uint32_t channel )
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
    if( channel > RF_MID_BAND_THRESH )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a05      	ldr	r2, [pc, #20]	; (80065bc <SX1276GetPaSelect+0x20>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d901      	bls.n	80065b0 <SX1276GetPaSelect+0x14>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	e000      	b.n	80065b2 <SX1276GetPaSelect+0x16>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 80065b0:	2300      	movs	r3, #0
    }
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bc80      	pop	{r7}
 80065ba:	4770      	bx	lr
 80065bc:	1f4add40 	.word	0x1f4add40

080065c0 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	4603      	mov	r3, r0
 80065c8:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 80065ca:	4b0b      	ldr	r3, [pc, #44]	; (80065f8 <SX1276SetAntSwLowPower+0x38>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	79fa      	ldrb	r2, [r7, #7]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d00d      	beq.n	80065f0 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 80065d4:	4a08      	ldr	r2, [pc, #32]	; (80065f8 <SX1276SetAntSwLowPower+0x38>)
 80065d6:	79fb      	ldrb	r3, [r7, #7]
 80065d8:	7013      	strb	r3, [r2, #0]

        if( status == false )
 80065da:	79fb      	ldrb	r3, [r7, #7]
 80065dc:	f083 0301 	eor.w	r3, r3, #1
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 80065e6:	f000 f809 	bl	80065fc <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 80065ea:	e001      	b.n	80065f0 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 80065ec:	f000 f80c 	bl	8006608 <SX1276AntSwDeInit>
}
 80065f0:	bf00      	nop
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	200001cc 	.word	0x200001cc

080065fc <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 80065fc:	b480      	push	{r7}
 80065fe:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 8006600:	bf00      	nop
 8006602:	46bd      	mov	sp, r7
 8006604:	bc80      	pop	{r7}
 8006606:	4770      	bx	lr

08006608 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 8006608:	b480      	push	{r7}
 800660a:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 800660c:	bf00      	nop
 800660e:	46bd      	mov	sp, r7
 8006610:	bc80      	pop	{r7}
 8006612:	4770      	bx	lr

08006614 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	71fb      	strb	r3, [r7, #7]
}
 800661e:	bf00      	nop
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	bc80      	pop	{r7}
 8006626:	4770      	bx	lr

08006628 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8006630:	2301      	movs	r3, #1
}
 8006632:	4618      	mov	r0, r3
 8006634:	370c      	adds	r7, #12
 8006636:	46bd      	mov	sp, r7
 8006638:	bc80      	pop	{r7}
 800663a:	4770      	bx	lr

0800663c <SX1276GetDio1PinState>:

uint32_t SX1276GetDio1PinState( void )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	af00      	add	r7, sp, #0
    return GpioRead( &SX1276.DIO1 );
 8006640:	4802      	ldr	r0, [pc, #8]	; (800664c <SX1276GetDio1PinState+0x10>)
 8006642:	f7f9 ffd7 	bl	80005f4 <GpioRead>
 8006646:	4603      	mov	r3, r0
}
 8006648:	4618      	mov	r0, r3
 800664a:	bd80      	pop	{r7, pc}
 800664c:	20000310 	.word	0x20000310

08006650 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b084      	sub	sp, #16
 8006654:	af00      	add	r7, sp, #0
 8006656:	4603      	mov	r3, r0
 8006658:	80fb      	strh	r3, [r7, #6]
  void (*fptr)(void *context) = NULL;
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
  switch(GPIO_Pin)
 800665e:	88fb      	ldrh	r3, [r7, #6]
 8006660:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006664:	d019      	beq.n	800669a <HAL_GPIO_EXTI_Callback+0x4a>
 8006666:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800666a:	dc2e      	bgt.n	80066ca <HAL_GPIO_EXTI_Callback+0x7a>
 800666c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006670:	d017      	beq.n	80066a2 <HAL_GPIO_EXTI_Callback+0x52>
 8006672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006676:	dc28      	bgt.n	80066ca <HAL_GPIO_EXTI_Callback+0x7a>
 8006678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800667c:	d015      	beq.n	80066aa <HAL_GPIO_EXTI_Callback+0x5a>
 800667e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006682:	dc22      	bgt.n	80066ca <HAL_GPIO_EXTI_Callback+0x7a>
 8006684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006688:	d013      	beq.n	80066b2 <HAL_GPIO_EXTI_Callback+0x62>
 800668a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800668e:	dc1c      	bgt.n	80066ca <HAL_GPIO_EXTI_Callback+0x7a>
 8006690:	2b20      	cmp	r3, #32
 8006692:	d012      	beq.n	80066ba <HAL_GPIO_EXTI_Callback+0x6a>
 8006694:	2b40      	cmp	r3, #64	; 0x40
 8006696:	d014      	beq.n	80066c2 <HAL_GPIO_EXTI_Callback+0x72>
    case GPIO_PIN_13:
    	ButtonIsNotPushed = false;
      break;
#endif
    default:
      break;
 8006698:	e017      	b.n	80066ca <HAL_GPIO_EXTI_Callback+0x7a>
      fptr = DioIrq[0];
 800669a:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <HAL_GPIO_EXTI_Callback+0x90>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	60fb      	str	r3, [r7, #12]
      break;
 80066a0:	e014      	b.n	80066cc <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[1];
 80066a2:	4b0f      	ldr	r3, [pc, #60]	; (80066e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	60fb      	str	r3, [r7, #12]
      break;
 80066a8:	e010      	b.n	80066cc <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[2];
 80066aa:	4b0d      	ldr	r3, [pc, #52]	; (80066e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	60fb      	str	r3, [r7, #12]
      break;
 80066b0:	e00c      	b.n	80066cc <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[3];
 80066b2:	4b0b      	ldr	r3, [pc, #44]	; (80066e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	60fb      	str	r3, [r7, #12]
      break;
 80066b8:	e008      	b.n	80066cc <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[4];
 80066ba:	4b09      	ldr	r3, [pc, #36]	; (80066e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	60fb      	str	r3, [r7, #12]
      break;
 80066c0:	e004      	b.n	80066cc <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[5];
 80066c2:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <HAL_GPIO_EXTI_Callback+0x90>)
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	60fb      	str	r3, [r7, #12]
      break;
 80066c8:	e000      	b.n	80066cc <HAL_GPIO_EXTI_Callback+0x7c>
      break;
 80066ca:	bf00      	nop
}
  if(fptr != 0)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <HAL_GPIO_EXTI_Callback+0x88>
    fptr(NULL);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2000      	movs	r0, #0
 80066d6:	4798      	blx	r3
}
 80066d8:	bf00      	nop
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}
 80066e0:	2000000c 	.word	0x2000000c

080066e4 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	605a      	str	r2, [r3, #4]
    obj->IsStarted = false;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2200      	movs	r2, #0
 80066fe:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	725a      	strb	r2, [r3, #9]
    obj->Callback = callback;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	60da      	str	r2, [r3, #12]
    obj->Context = NULL;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2200      	movs	r2, #0
 8006710:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	615a      	str	r2, [r3, #20]
}
 8006718:	bf00      	nop
 800671a:	370c      	adds	r7, #12
 800671c:	46bd      	mov	sp, r7
 800671e:	bc80      	pop	{r7}
 8006720:	4770      	bx	lr
	...

08006724 <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
 8006730:	f107 0308 	add.w	r3, r7, #8
 8006734:	4618      	mov	r0, r3
 8006736:	f7ff f92b 	bl	8005990 <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <TimerStart+0x28>
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f000 f989 	bl	8006a58 <TimerExists>
 8006746:	4603      	mov	r3, r0
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
 800674c:	f107 0308 	add.w	r3, r7, #8
 8006750:	4618      	mov	r0, r3
 8006752:	f7ff f92e 	bl	80059b2 <BoardCriticalSectionEnd>
 8006756:	e02f      	b.n	80067b8 <TimerStart+0x94>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685a      	ldr	r2, [r3, #4]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	601a      	str	r2, [r3, #0]
    obj->IsStarted = true;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	725a      	strb	r2, [r3, #9]

    if( TimerListHead == NULL )
 800676c:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <TimerStart+0x9c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d105      	bne.n	8006780 <TimerStart+0x5c>
    {
        RtcSetTimerContext( );
 8006774:	f7ff fb8e 	bl	8005e94 <RtcSetTimerContext>
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f853 	bl	8006824 <TimerInsertNewHeadTimer>
 800677e:	e016      	b.n	80067ae <TimerStart+0x8a>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
 8006780:	f7ff fd1a 	bl	80061b8 <RtcGetTimerElapsedTime>
 8006784:	60f8      	str	r0, [r7, #12]
        obj->Timestamp += elapsedTime;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	441a      	add	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	601a      	str	r2, [r3, #0]

        if( obj->Timestamp < TimerListHead->Timestamp )
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <TimerStart+0x9c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	429a      	cmp	r2, r3
 800679e:	d203      	bcs.n	80067a8 <TimerStart+0x84>
        {
            TimerInsertNewHeadTimer( obj );
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f83f 	bl	8006824 <TimerInsertNewHeadTimer>
 80067a6:	e002      	b.n	80067ae <TimerStart+0x8a>
        }
        else
        {
            TimerInsertTimer( obj );
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f000 f80b 	bl	80067c4 <TimerInsertTimer>
        }
    }
    CRITICAL_SECTION_END( );
 80067ae:	f107 0308 	add.w	r3, r7, #8
 80067b2:	4618      	mov	r0, r3
 80067b4:	f7ff f8fd 	bl	80059b2 <BoardCriticalSectionEnd>
}
 80067b8:	3710      	adds	r7, #16
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	200001d0 	.word	0x200001d0

080067c4 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 80067cc:	4b14      	ldr	r3, [pc, #80]	; (8006820 <TimerInsertTimer+0x5c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
 80067d2:	4b13      	ldr	r3, [pc, #76]	; (8006820 <TimerInsertTimer+0x5c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
 80067da:	e012      	b.n	8006802 <TimerInsertTimer+0x3e>
    {
        if( obj->Timestamp > next->Timestamp )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d905      	bls.n	80067f4 <TimerInsertTimer+0x30>
        {
            cur = next;
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	60fb      	str	r3, [r7, #12]
            next = next->Next;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	60bb      	str	r3, [r7, #8]
 80067f2:	e006      	b.n	8006802 <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	615a      	str	r2, [r3, #20]
            obj->Next = next;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	615a      	str	r2, [r3, #20]
            return;
 8006800:	e009      	b.n	8006816 <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1e8      	bne.n	80067dc <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	615a      	str	r2, [r3, #20]
    obj->Next = NULL;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	615a      	str	r2, [r3, #20]
}
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	200001d0 	.word	0x200001d0

08006824 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 800682c:	4b0b      	ldr	r3, [pc, #44]	; (800685c <TimerInsertNewHeadTimer+0x38>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d002      	beq.n	800683e <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsNext2Expire = false;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	725a      	strb	r2, [r3, #9]
    }

    obj->Next = cur;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	615a      	str	r2, [r3, #20]
    TimerListHead = obj;
 8006844:	4a05      	ldr	r2, [pc, #20]	; (800685c <TimerInsertNewHeadTimer+0x38>)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 800684a:	4b04      	ldr	r3, [pc, #16]	; (800685c <TimerInsertNewHeadTimer+0x38>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f000 f968 	bl	8006b24 <TimerSetTimeout>
}
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	200001d0 	.word	0x200001d0

08006860 <TimerIrqHandler>:
{
    return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8006860:	b590      	push	{r4, r7, lr}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
 8006866:	f7ff fb29 	bl	8005ebc <RtcGetTimerContext>
 800686a:	6138      	str	r0, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
 800686c:	f7ff fb12 	bl	8005e94 <RtcSetTimerContext>
 8006870:	60f8      	str	r0, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
 800687a:	4b39      	ldr	r3, [pc, #228]	; (8006960 <TimerIrqHandler+0x100>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d01c      	beq.n	80068bc <TimerIrqHandler+0x5c>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8006882:	4b37      	ldr	r3, [pc, #220]	; (8006960 <TimerIrqHandler+0x100>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	e014      	b.n	80068b4 <TimerIrqHandler+0x54>
        {
            next = cur->Next;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	429a      	cmp	r2, r3
 8006898:	d206      	bcs.n	80068a8 <TimerIrqHandler+0x48>
            {
                next->Timestamp -= deltaContext;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681a      	ldr	r2, [r3, #0]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	1ad2      	subs	r2, r2, r3
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	e002      	b.n	80068ae <TimerIrqHandler+0x4e>
            }
            else
            {
                next->Timestamp = 0;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 80068ae:	697b      	ldr	r3, [r7, #20]
 80068b0:	695b      	ldr	r3, [r3, #20]
 80068b2:	617b      	str	r3, [r7, #20]
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e6      	bne.n	800688a <TimerIrqHandler+0x2a>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
 80068bc:	4b28      	ldr	r3, [pc, #160]	; (8006960 <TimerIrqHandler+0x100>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d02c      	beq.n	800691e <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 80068c4:	4b26      	ldr	r3, [pc, #152]	; (8006960 <TimerIrqHandler+0x100>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 80068ca:	4b25      	ldr	r3, [pc, #148]	; (8006960 <TimerIrqHandler+0x100>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	4a23      	ldr	r2, [pc, #140]	; (8006960 <TimerIrqHandler+0x100>)
 80068d2:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2200      	movs	r2, #0
 80068d8:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d100      	bne.n	80068e4 <TimerIrqHandler+0x84>
 80068e2:	e7fe      	b.n	80068e2 <TimerIrqHandler+0x82>
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	6912      	ldr	r2, [r2, #16]
 80068ec:	4610      	mov	r0, r2
 80068ee:	4798      	blx	r3
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80068f0:	e015      	b.n	800691e <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 80068f2:	4b1b      	ldr	r3, [pc, #108]	; (8006960 <TimerIrqHandler+0x100>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 80068f8:	4b19      	ldr	r3, [pc, #100]	; (8006960 <TimerIrqHandler+0x100>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	4a18      	ldr	r2, [pc, #96]	; (8006960 <TimerIrqHandler+0x100>)
 8006900:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	2200      	movs	r2, #0
 8006906:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d100      	bne.n	8006912 <TimerIrqHandler+0xb2>
 8006910:	e7fe      	b.n	8006910 <TimerIrqHandler+0xb0>
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	6912      	ldr	r2, [r2, #16]
 800691a:	4610      	mov	r0, r2
 800691c:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 800691e:	4b10      	ldr	r3, [pc, #64]	; (8006960 <TimerIrqHandler+0x100>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d007      	beq.n	8006936 <TimerIrqHandler+0xd6>
 8006926:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <TimerIrqHandler+0x100>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681c      	ldr	r4, [r3, #0]
 800692c:	f7ff fc44 	bl	80061b8 <RtcGetTimerElapsedTime>
 8006930:	4603      	mov	r3, r0
 8006932:	429c      	cmp	r4, r3
 8006934:	d3dd      	bcc.n	80068f2 <TimerIrqHandler+0x92>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8006936:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <TimerIrqHandler+0x100>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00c      	beq.n	8006958 <TimerIrqHandler+0xf8>
 800693e:	4b08      	ldr	r3, [pc, #32]	; (8006960 <TimerIrqHandler+0x100>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	7a5b      	ldrb	r3, [r3, #9]
 8006944:	f083 0301 	eor.w	r3, r3, #1
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d004      	beq.n	8006958 <TimerIrqHandler+0xf8>
    {
        TimerSetTimeout( TimerListHead );
 800694e:	4b04      	ldr	r3, [pc, #16]	; (8006960 <TimerIrqHandler+0x100>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4618      	mov	r0, r3
 8006954:	f000 f8e6 	bl	8006b24 <TimerSetTimeout>
    }
}
 8006958:	bf00      	nop
 800695a:	371c      	adds	r7, #28
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}
 8006960:	200001d0 	.word	0x200001d0

08006964 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
 800696c:	f107 030c 	add.w	r3, r7, #12
 8006970:	4618      	mov	r0, r3
 8006972:	f7ff f80d 	bl	8005990 <BoardCriticalSectionBegin>

    TimerEvent_t* prev = TimerListHead;
 8006976:	4b37      	ldr	r3, [pc, #220]	; (8006a54 <TimerStop+0xf0>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
 800697c:	4b35      	ldr	r3, [pc, #212]	; (8006a54 <TimerStop+0xf0>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8006982:	4b34      	ldr	r3, [pc, #208]	; (8006a54 <TimerStop+0xf0>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d002      	beq.n	8006990 <TimerStop+0x2c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d105      	bne.n	800699c <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
 8006990:	f107 030c 	add.w	r3, r7, #12
 8006994:	4618      	mov	r0, r3
 8006996:	f7ff f80c 	bl	80059b2 <BoardCriticalSectionEnd>
 800699a:	e057      	b.n	8006a4c <TimerStop+0xe8>
        return;
    }

    obj->IsStarted = false;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == obj ) // Stop the Head
 80069a2:	4b2c      	ldr	r3, [pc, #176]	; (8006a54 <TimerStop+0xf0>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	687a      	ldr	r2, [r7, #4]
 80069a8:	429a      	cmp	r2, r3
 80069aa:	d147      	bne.n	8006a3c <TimerStop+0xd8>
    {
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 80069ac:	4b29      	ldr	r3, [pc, #164]	; (8006a54 <TimerStop+0xf0>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	7a5b      	ldrb	r3, [r3, #9]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d019      	beq.n	80069ea <TimerStop+0x86>
        {
            TimerListHead->IsNext2Expire = false;
 80069b6:	4b27      	ldr	r3, [pc, #156]	; (8006a54 <TimerStop+0xf0>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 80069be:	4b25      	ldr	r3, [pc, #148]	; (8006a54 <TimerStop+0xf0>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00a      	beq.n	80069de <TimerStop+0x7a>
            {
                TimerListHead = TimerListHead->Next;
 80069c8:	4b22      	ldr	r3, [pc, #136]	; (8006a54 <TimerStop+0xf0>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
 80069ce:	4a21      	ldr	r2, [pc, #132]	; (8006a54 <TimerStop+0xf0>)
 80069d0:	6013      	str	r3, [r2, #0]
                TimerSetTimeout( TimerListHead );
 80069d2:	4b20      	ldr	r3, [pc, #128]	; (8006a54 <TimerStop+0xf0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f000 f8a4 	bl	8006b24 <TimerSetTimeout>
 80069dc:	e031      	b.n	8006a42 <TimerStop+0xde>
            }
            else
            {
                RtcStopAlarm( );
 80069de:	f7ff fac5 	bl	8005f6c <RtcStopAlarm>
                TimerListHead = NULL;
 80069e2:	4b1c      	ldr	r3, [pc, #112]	; (8006a54 <TimerStop+0xf0>)
 80069e4:	2200      	movs	r2, #0
 80069e6:	601a      	str	r2, [r3, #0]
 80069e8:	e02b      	b.n	8006a42 <TimerStop+0xde>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 80069ea:	4b1a      	ldr	r3, [pc, #104]	; (8006a54 <TimerStop+0xf0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d005      	beq.n	8006a00 <TimerStop+0x9c>
            {
                TimerListHead = TimerListHead->Next;
 80069f4:	4b17      	ldr	r3, [pc, #92]	; (8006a54 <TimerStop+0xf0>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	695b      	ldr	r3, [r3, #20]
 80069fa:	4a16      	ldr	r2, [pc, #88]	; (8006a54 <TimerStop+0xf0>)
 80069fc:	6013      	str	r3, [r2, #0]
 80069fe:	e020      	b.n	8006a42 <TimerStop+0xde>
            }
            else
            {
                TimerListHead = NULL;
 8006a00:	4b14      	ldr	r3, [pc, #80]	; (8006a54 <TimerStop+0xf0>)
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	e01c      	b.n	8006a42 <TimerStop+0xde>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
 8006a08:	693a      	ldr	r2, [r7, #16]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d110      	bne.n	8006a32 <TimerStop+0xce>
            {
                if( cur->Next != NULL )
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d006      	beq.n	8006a26 <TimerStop+0xc2>
                {
                    cur = cur->Next;
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	695b      	ldr	r3, [r3, #20]
 8006a1c:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	693a      	ldr	r2, [r7, #16]
 8006a22:	615a      	str	r2, [r3, #20]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8006a24:	e00d      	b.n	8006a42 <TimerStop+0xde>
                    cur = NULL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	615a      	str	r2, [r3, #20]
                break;
 8006a30:	e007      	b.n	8006a42 <TimerStop+0xde>
            }
            else
            {
                prev = cur;
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	695b      	ldr	r3, [r3, #20]
 8006a3a:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e2      	bne.n	8006a08 <TimerStop+0xa4>
            }
        }
    }
    CRITICAL_SECTION_END( );
 8006a42:	f107 030c 	add.w	r3, r7, #12
 8006a46:	4618      	mov	r0, r3
 8006a48:	f7fe ffb3 	bl	80059b2 <BoardCriticalSectionEnd>
}
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	200001d0 	.word	0x200001d0

08006a58 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b085      	sub	sp, #20
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <TimerExists+0x34>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 8006a66:	e008      	b.n	8006a7a <TimerExists+0x22>
    {
        if( cur == obj )
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d101      	bne.n	8006a74 <TimerExists+0x1c>
        {
            return true;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e006      	b.n	8006a82 <TimerExists+0x2a>
        }
        cur = cur->Next;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1f3      	bne.n	8006a68 <TimerExists+0x10>
    }
    return false;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3714      	adds	r7, #20
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bc80      	pop	{r7}
 8006a8a:	4770      	bx	lr
 8006a8c:	200001d0 	.word	0x200001d0

08006a90 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
 8006a9e:	6838      	ldr	r0, [r7, #0]
 8006aa0:	f7ff fa1d 	bl	8005ede <RtcMs2Tick>
 8006aa4:	60f8      	str	r0, [r7, #12]

    TimerStop( obj );
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f7ff ff5c 	bl	8006964 <TimerStop>

    minValue = RtcGetMinimumTimeout( );
 8006aac:	f7ff fa10 	bl	8005ed0 <RtcGetMinimumTimeout>
 8006ab0:	60b8      	str	r0, [r7, #8]

    if( ticks < minValue )
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d201      	bcs.n	8006abe <TimerSetValue+0x2e>
    {
        ticks = minValue;
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	605a      	str	r2, [r3, #4]
}
 8006aca:	bf00      	nop
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
 8006ad8:	f7ff fb5a 	bl	8006190 <RtcGetTimerValue>
 8006adc:	6078      	str	r0, [r7, #4]
    return  RtcTick2Ms( now );
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fa1a 	bl	8005f18 <RtcTick2Ms>
 8006ae4:	4603      	mov	r3, r0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b084      	sub	sp, #16
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
    if ( past == 0 )
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <TimerGetElapsedTime+0x12>
    {
        return 0;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e00d      	b.n	8006b1c <TimerGetElapsedTime+0x2e>
    }
    uint32_t nowInTicks = RtcGetTimerValue( );
 8006b00:	f7ff fb46 	bl	8006190 <RtcGetTimerValue>
 8006b04:	60f8      	str	r0, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f7ff f9e9 	bl	8005ede <RtcMs2Tick>
 8006b0c:	60b8      	str	r0, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7ff f9ff 	bl	8005f18 <RtcTick2Ms>
 8006b1a:	4603      	mov	r3, r0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8006b24:	b590      	push	{r4, r7, lr}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8006b2c:	f7ff f9d0 	bl	8005ed0 <RtcGetMinimumTimeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	60fb      	str	r3, [r7, #12]
    obj->IsNext2Expire = true;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	725a      	strb	r2, [r3, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681c      	ldr	r4, [r3, #0]
 8006b3e:	f7ff fb3b 	bl	80061b8 <RtcGetTimerElapsedTime>
 8006b42:	4602      	mov	r2, r0
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	429c      	cmp	r4, r3
 8006b4a:	d206      	bcs.n	8006b5a <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8006b4c:	f7ff fb34 	bl	80061b8 <RtcGetTimerElapsedTime>
 8006b50:	4602      	mov	r2, r0
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	441a      	add	r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7ff f9f6 	bl	8005f50 <RtcSetAlarm>
}
 8006b64:	bf00      	nop
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd90      	pop	{r4, r7, pc}

08006b6c <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	4613      	mov	r3, r2
 8006b78:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8006b7a:	e007      	b.n	8006b8c <memcpy1+0x20>
    {
        *dst++ = *src++;
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	1c53      	adds	r3, r2, #1
 8006b80:	60bb      	str	r3, [r7, #8]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	60f9      	str	r1, [r7, #12]
 8006b88:	7812      	ldrb	r2, [r2, #0]
 8006b8a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8006b8c:	88fb      	ldrh	r3, [r7, #6]
 8006b8e:	1e5a      	subs	r2, r3, #1
 8006b90:	80fa      	strh	r2, [r7, #6]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d1f2      	bne.n	8006b7c <memcpy1+0x10>
    }
}
 8006b96:	bf00      	nop
 8006b98:	bf00      	nop
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr
	...

08006ba4 <__libc_init_array>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	4d0c      	ldr	r5, [pc, #48]	; (8006bdc <__libc_init_array+0x38>)
 8006baa:	4c0d      	ldr	r4, [pc, #52]	; (8006be0 <__libc_init_array+0x3c>)
 8006bac:	1b64      	subs	r4, r4, r5
 8006bae:	10a4      	asrs	r4, r4, #2
 8006bb0:	42a6      	cmp	r6, r4
 8006bb2:	d109      	bne.n	8006bc8 <__libc_init_array+0x24>
 8006bb4:	f000 f830 	bl	8006c18 <_init>
 8006bb8:	2600      	movs	r6, #0
 8006bba:	4d0a      	ldr	r5, [pc, #40]	; (8006be4 <__libc_init_array+0x40>)
 8006bbc:	4c0a      	ldr	r4, [pc, #40]	; (8006be8 <__libc_init_array+0x44>)
 8006bbe:	1b64      	subs	r4, r4, r5
 8006bc0:	10a4      	asrs	r4, r4, #2
 8006bc2:	42a6      	cmp	r6, r4
 8006bc4:	d105      	bne.n	8006bd2 <__libc_init_array+0x2e>
 8006bc6:	bd70      	pop	{r4, r5, r6, pc}
 8006bc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bcc:	4798      	blx	r3
 8006bce:	3601      	adds	r6, #1
 8006bd0:	e7ee      	b.n	8006bb0 <__libc_init_array+0xc>
 8006bd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bd6:	4798      	blx	r3
 8006bd8:	3601      	adds	r6, #1
 8006bda:	e7f2      	b.n	8006bc2 <__libc_init_array+0x1e>
 8006bdc:	08006dc0 	.word	0x08006dc0
 8006be0:	08006dc0 	.word	0x08006dc0
 8006be4:	08006dc0 	.word	0x08006dc0
 8006be8:	08006dc4 	.word	0x08006dc4

08006bec <memcpy>:
 8006bec:	440a      	add	r2, r1
 8006bee:	4291      	cmp	r1, r2
 8006bf0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006bf4:	d100      	bne.n	8006bf8 <memcpy+0xc>
 8006bf6:	4770      	bx	lr
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bfe:	4291      	cmp	r1, r2
 8006c00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c04:	d1f9      	bne.n	8006bfa <memcpy+0xe>
 8006c06:	bd10      	pop	{r4, pc}

08006c08 <memset>:
 8006c08:	4603      	mov	r3, r0
 8006c0a:	4402      	add	r2, r0
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d100      	bne.n	8006c12 <memset+0xa>
 8006c10:	4770      	bx	lr
 8006c12:	f803 1b01 	strb.w	r1, [r3], #1
 8006c16:	e7f9      	b.n	8006c0c <memset+0x4>

08006c18 <_init>:
 8006c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c1a:	bf00      	nop
 8006c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c1e:	bc08      	pop	{r3}
 8006c20:	469e      	mov	lr, r3
 8006c22:	4770      	bx	lr

08006c24 <_fini>:
 8006c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c26:	bf00      	nop
 8006c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c2a:	bc08      	pop	{r3}
 8006c2c:	469e      	mov	lr, r3
 8006c2e:	4770      	bx	lr
