
L152RE_sx1276.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cec  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08006e28  08006e28  00016e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc0  08006fc0  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fc8  08006fc8  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fc8  08006fc8  00016fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c14  20000028  08006ff8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c3c  08006ff8  00020c3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019ac8  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d17  00000000  00000000  00039b19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001430  00000000  00000000  0003d830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003ec60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b314  00000000  00000000  0003fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001766b  00000000  00000000  0005b1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d84c  00000000  00000000  0007285f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001100ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005238  00000000  00000000  00110100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000028 	.word	0x20000028
 8000158:	00000000 	.word	0x00000000
 800015c:	08006e10 	.word	0x08006e10

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000002c 	.word	0x2000002c
 8000178:	08006e10 	.word	0x08006e10

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b4c      	ldr	r3, [pc, #304]	; (80005bc <MX_GPIO_Init+0x148>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a4b      	ldr	r2, [pc, #300]	; (80005bc <MX_GPIO_Init+0x148>)
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b49      	ldr	r3, [pc, #292]	; (80005bc <MX_GPIO_Init+0x148>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a2:	4b46      	ldr	r3, [pc, #280]	; (80005bc <MX_GPIO_Init+0x148>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a45      	ldr	r2, [pc, #276]	; (80005bc <MX_GPIO_Init+0x148>)
 80004a8:	f043 0320 	orr.w	r3, r3, #32
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b43      	ldr	r3, [pc, #268]	; (80005bc <MX_GPIO_Init+0x148>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 0320 	and.w	r3, r3, #32
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b40      	ldr	r3, [pc, #256]	; (80005bc <MX_GPIO_Init+0x148>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a3f      	ldr	r2, [pc, #252]	; (80005bc <MX_GPIO_Init+0x148>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <MX_GPIO_Init+0x148>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <MX_GPIO_Init+0x148>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a39      	ldr	r2, [pc, #228]	; (80005bc <MX_GPIO_Init+0x148>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b37      	ldr	r3, [pc, #220]	; (80005bc <MX_GPIO_Init+0x148>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX1276_RST_Pin|LED_EXT_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2109      	movs	r1, #9
 80004ee:	4834      	ldr	r0, [pc, #208]	; (80005c0 <MX_GPIO_Init+0x14c>)
 80004f0:	f000 ff67 	bl	80013c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	4832      	ldr	r0, [pc, #200]	; (80005c4 <MX_GPIO_Init+0x150>)
 80004fa:	f000 ff62 	bl	80013c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000504:	4830      	ldr	r0, [pc, #192]	; (80005c8 <MX_GPIO_Init+0x154>)
 8000506:	f000 ff5c 	bl	80013c2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DIO_4_Pin|DIO_5_Pin|DIO_3_Pin
 800050a:	f242 3360 	movw	r3, #9056	; 0x2360
 800050e:	617b      	str	r3, [r7, #20]
                          |DIO_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000510:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <MX_GPIO_Init+0x158>)
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	4828      	ldr	r0, [pc, #160]	; (80005c0 <MX_GPIO_Init+0x14c>)
 8000520:	f000 fda8 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SX1276_RST_Pin|LED_EXT_Pin;
 8000524:	2309      	movs	r3, #9
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	4821      	ldr	r0, [pc, #132]	; (80005c0 <MX_GPIO_Init+0x14c>)
 800053c:	f000 fd9a 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000540:	2320      	movs	r3, #32
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x150>)
 8000558:	f000 fd8c 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4814      	ldr	r0, [pc, #80]	; (80005c8 <MX_GPIO_Init+0x154>)
 8000576:	f000 fd7d 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO_1_Pin|DIO_0_Pin;
 800057a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_GPIO_Init+0x158>)
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_GPIO_Init+0x150>)
 8000590:	f000 fd70 	bl	8001074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2105      	movs	r1, #5
 8000598:	2017      	movs	r0, #23
 800059a:	f000 fd00 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800059e:	2017      	movs	r0, #23
 80005a0:	f000 fd19 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2105      	movs	r1, #5
 80005a8:	2028      	movs	r0, #40	; 0x28
 80005aa:	f000 fcf8 	bl	8000f9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ae:	2028      	movs	r0, #40	; 0x28
 80005b0:	f000 fd11 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020800 	.word	0x40020800
 80005c4:	40020000 	.word	0x40020000
 80005c8:	40020400 	.word	0x40020400
 80005cc:	10110000 	.word	0x10110000

080005d0 <GpioWrite>:

/* USER CODE BEGIN 2 */
void GpioWrite( Gpio_t *obj, uint32_t value ) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(obj->port, obj->pin, (GPIO_PinState) value);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	889b      	ldrh	r3, [r3, #4]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	4619      	mov	r1, r3
 80005e8:	f000 feeb 	bl	80013c2 <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <GpioRead>:

uint32_t GpioRead( Gpio_t *obj ) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin( obj->port, obj->pin);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	889b      	ldrh	r3, [r3, #4]
 8000604:	4619      	mov	r1, r3
 8000606:	4610      	mov	r0, r2
 8000608:	f000 fec4 	bl	8001394 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <GpioToggle>:

void GpioToggle( Gpio_t *obj ) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(obj->port, obj->pin);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	889b      	ldrh	r3, [r3, #4]
 8000626:	4619      	mov	r1, r3
 8000628:	4610      	mov	r0, r2
 800062a:	f000 fee2 	bl	80013f2 <HAL_GPIO_TogglePin>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063a:	f000 fb7a 	bl	8000d32 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800063e:	f000 f80b 	bl	8000658 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000642:	f7ff ff17 	bl	8000474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000646:	f000 fad9 	bl	8000bfc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800064a:	f000 f927 	bl	800089c <MX_SPI2_Init>
  MX_RTC_Init();
 800064e:	f000 f87d 	bl	800074c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ping_pong_rf();
 8000652:	f005 fa6b 	bl	8005b2c <ping_pong_rf>
//  continuos_wave();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1);
 8000656:	e7fe      	b.n	8000656 <main+0x20>

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b096      	sub	sp, #88	; 0x58
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000662:	2234      	movs	r2, #52	; 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f006 fbb8 	bl	8006ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0310 	add.w	r3, r7, #16
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800067c:	1d3b      	adds	r3, r7, #4
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000686:	4b25      	ldr	r3, [pc, #148]	; (800071c <SystemClock_Config+0xc4>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800068e:	4a23      	ldr	r2, [pc, #140]	; (800071c <SystemClock_Config+0xc4>)
 8000690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000694:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000696:	2306      	movs	r3, #6
 8000698:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800069a:	2301      	movs	r3, #1
 800069c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a2:	2310      	movs	r3, #16
 80006a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006aa:	2300      	movs	r3, #0
 80006ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006ae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80006b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80006b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80006b8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fec8 	bl	8001454 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006ca:	f000 f838 	bl	800073e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	230f      	movs	r3, #15
 80006d0:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d2:	2303      	movs	r3, #3
 80006d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006e2:	f107 0310 	add.w	r3, r7, #16
 80006e6:	2101      	movs	r1, #1
 80006e8:	4618      	mov	r0, r3
 80006ea:	f001 f9e3 	bl	8001ab4 <HAL_RCC_ClockConfig>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006f4:	f000 f823 	bl	800073e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006f8:	2301      	movs	r3, #1
 80006fa:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000700:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fc99 	bl	800203c <HAL_RCCEx_PeriphCLKConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000710:	f000 f815 	bl	800073e <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3758      	adds	r7, #88	; 0x58
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40007000 	.word	0x40007000

08000720 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000730:	d101      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000732:	f000 fb17 	bl	8000d64 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}

0800073e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	bc80      	pop	{r7}
 8000748:	4770      	bx	lr
	...

0800074c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b090      	sub	sp, #64	; 0x40
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000752:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000762:	2300      	movs	r3, #0
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2228      	movs	r2, #40	; 0x28
 800076a:	2100      	movs	r1, #0
 800076c:	4618      	mov	r0, r3
 800076e:	f006 fb35 	bl	8006ddc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000772:	4b3a      	ldr	r3, [pc, #232]	; (800085c <MX_RTC_Init+0x110>)
 8000774:	4a3a      	ldr	r2, [pc, #232]	; (8000860 <MX_RTC_Init+0x114>)
 8000776:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000778:	4b38      	ldr	r3, [pc, #224]	; (800085c <MX_RTC_Init+0x110>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800077e:	4b37      	ldr	r3, [pc, #220]	; (800085c <MX_RTC_Init+0x110>)
 8000780:	227f      	movs	r2, #127	; 0x7f
 8000782:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000784:	4b35      	ldr	r3, [pc, #212]	; (800085c <MX_RTC_Init+0x110>)
 8000786:	22ff      	movs	r2, #255	; 0xff
 8000788:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800078a:	4b34      	ldr	r3, [pc, #208]	; (800085c <MX_RTC_Init+0x110>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000790:	4b32      	ldr	r3, [pc, #200]	; (800085c <MX_RTC_Init+0x110>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000796:	4b31      	ldr	r3, [pc, #196]	; (800085c <MX_RTC_Init+0x110>)
 8000798:	2200      	movs	r2, #0
 800079a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800079c:	482f      	ldr	r0, [pc, #188]	; (800085c <MX_RTC_Init+0x110>)
 800079e:	f001 fd2f 	bl	8002200 <HAL_RTC_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80007a8:	f7ff ffc9 	bl	800073e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007be:	2300      	movs	r3, #0
 80007c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007c2:	2300      	movs	r3, #0
 80007c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007ca:	2201      	movs	r2, #1
 80007cc:	4619      	mov	r1, r3
 80007ce:	4823      	ldr	r0, [pc, #140]	; (800085c <MX_RTC_Init+0x110>)
 80007d0:	f001 fd91 	bl	80022f6 <HAL_RTC_SetTime>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80007da:	f7ff ffb0 	bl	800073e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007de:	2301      	movs	r3, #1
 80007e0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80007e4:	2301      	movs	r3, #1
 80007e6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007f6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007fa:	2201      	movs	r2, #1
 80007fc:	4619      	mov	r1, r3
 80007fe:	4817      	ldr	r0, [pc, #92]	; (800085c <MX_RTC_Init+0x110>)
 8000800:	f001 fe8a 	bl	8002518 <HAL_RTC_SetDate>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800080a:	f7ff ff98 	bl	800073e <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800080e:	2300      	movs	r3, #0
 8000810:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000812:	2300      	movs	r3, #0
 8000814:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000816:	2300      	movs	r3, #0
 8000818:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000826:	2300      	movs	r3, #0
 8000828:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800082a:	2300      	movs	r3, #0
 800082c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800082e:	2300      	movs	r3, #0
 8000830:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000832:	2301      	movs	r3, #1
 8000834:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000838:	f44f 7380 	mov.w	r3, #256	; 0x100
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800083e:	463b      	mov	r3, r7
 8000840:	2201      	movs	r2, #1
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_RTC_Init+0x110>)
 8000846:	f001 ff53 	bl	80026f0 <HAL_RTC_SetAlarm_IT>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000850:	f7ff ff75 	bl	800073e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000854:	bf00      	nop
 8000856:	3740      	adds	r7, #64	; 0x40
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001c0 	.word	0x200001c0
 8000860:	40002800 	.word	0x40002800

08000864 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a08      	ldr	r2, [pc, #32]	; (8000894 <HAL_RTC_MspInit+0x30>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d10a      	bne.n	800088c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000876:	4b08      	ldr	r3, [pc, #32]	; (8000898 <HAL_RTC_MspInit+0x34>)
 8000878:	2201      	movs	r2, #1
 800087a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800087c:	2200      	movs	r2, #0
 800087e:	2105      	movs	r1, #5
 8000880:	2029      	movs	r0, #41	; 0x29
 8000882:	f000 fb8c 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000886:	2029      	movs	r0, #41	; 0x29
 8000888:	f000 fba5 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	40002800 	.word	0x40002800
 8000898:	424706d8 	.word	0x424706d8

0800089c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_SPI2_Init+0x64>)
 80008a2:	4a18      	ldr	r2, [pc, #96]	; (8000904 <MX_SPI2_Init+0x68>)
 80008a4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_SPI2_Init+0x64>)
 80008a8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008ae:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_SPI2_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008b4:	4b12      	ldr	r3, [pc, #72]	; (8000900 <MX_SPI2_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ba:	4b11      	ldr	r3, [pc, #68]	; (8000900 <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c0:	4b0f      	ldr	r3, [pc, #60]	; (8000900 <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <MX_SPI2_Init+0x64>)
 80008c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008cc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ce:	4b0c      	ldr	r3, [pc, #48]	; (8000900 <MX_SPI2_Init+0x64>)
 80008d0:	2218      	movs	r2, #24
 80008d2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008d4:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <MX_SPI2_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <MX_SPI2_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <MX_SPI2_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <MX_SPI2_Init+0x64>)
 80008e8:	220a      	movs	r2, #10
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_SPI2_Init+0x64>)
 80008ee:	f002 f9d3 	bl	8002c98 <HAL_SPI_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008f8:	f7ff ff21 	bl	800073e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200001e0 	.word	0x200001e0
 8000904:	40003800 	.word	0x40003800

08000908 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <HAL_SPI_MspInit+0x7c>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d128      	bne.n	800097c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800092a:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_SPI_MspInit+0x80>)
 800092c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800092e:	4a16      	ldr	r2, [pc, #88]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000934:	6253      	str	r3, [r2, #36]	; 0x24
 8000936:	4b14      	ldr	r3, [pc, #80]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800093a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b11      	ldr	r3, [pc, #68]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	4a10      	ldr	r2, [pc, #64]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000948:	f043 0302 	orr.w	r3, r3, #2
 800094c:	61d3      	str	r3, [r2, #28]
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_SPI_MspInit+0x80>)
 8000950:	69db      	ldr	r3, [r3, #28]
 8000952:	f003 0302 	and.w	r3, r3, #2
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800095a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800095e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096c:	2305      	movs	r3, #5
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	4805      	ldr	r0, [pc, #20]	; (800098c <HAL_SPI_MspInit+0x84>)
 8000978:	f000 fb7c 	bl	8001074 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800097c:	bf00      	nop
 800097e:	3728      	adds	r7, #40	; 0x28
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40003800 	.word	0x40003800
 8000988:	40023800 	.word	0x40023800
 800098c:	40020400 	.word	0x40020400

08000990 <SpiInOut>:
}

/* USER CODE BEGIN 1 */

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( hspi2.Instance ) == NULL )
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	2b00      	cmp	r3, #0
    {
        assert_param( LMN_STATUS_ERROR );
    }

    __HAL_SPI_ENABLE( &hspi2 );
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <SpiInOut+0x78>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <SpiInOut+0x78>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009b2:	601a      	str	r2, [r3, #0]

    CRITICAL_SECTION_BEGIN( );
 80009b4:	f107 0308 	add.w	r3, r7, #8
 80009b8:	4618      	mov	r0, r3
 80009ba:	f004 fff5 	bl	80059a8 <BoardCriticalSectionBegin>

    while( __HAL_SPI_GET_FLAG( &hspi2, SPI_FLAG_TXE ) == RESET );
 80009be:	bf00      	nop
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <SpiInOut+0x78>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f003 0302 	and.w	r3, r3, #2
 80009ca:	2b02      	cmp	r3, #2
 80009cc:	d1f8      	bne.n	80009c0 <SpiInOut+0x30>
    hspi2.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 80009ce:	887a      	ldrh	r2, [r7, #2]
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <SpiInOut+0x78>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	b2d2      	uxtb	r2, r2
 80009d6:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &hspi2, SPI_FLAG_RXNE ) == RESET );
 80009d8:	bf00      	nop
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <SpiInOut+0x78>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	689b      	ldr	r3, [r3, #8]
 80009e0:	f003 0301 	and.w	r3, r3, #1
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d1f8      	bne.n	80009da <SpiInOut+0x4a>
    rxData = ( uint16_t ) hspi2.Instance->DR;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <SpiInOut+0x78>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	68db      	ldr	r3, [r3, #12]
 80009ee:	73fb      	strb	r3, [r7, #15]

    CRITICAL_SECTION_END( );
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 ffe8 	bl	80059ca <BoardCriticalSectionEnd>

    return( rxData );
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	b29b      	uxth	r3, r3
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200001e0 	.word	0x200001e0

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <HAL_MspInit+0x58>)
 8000a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a16:	4a13      	ldr	r2, [pc, #76]	; (8000a64 <HAL_MspInit+0x58>)
 8000a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <HAL_MspInit+0x58>)
 8000a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_MspInit+0x58>)
 8000a2c:	6a1b      	ldr	r3, [r3, #32]
 8000a2e:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_MspInit+0x58>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6213      	str	r3, [r2, #32]
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_MspInit+0x58>)
 8000a38:	6a1b      	ldr	r3, [r3, #32]
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60bb      	str	r3, [r7, #8]
 8000a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_MspInit+0x58>)
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_MspInit+0x58>)
 8000a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a4e:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <HAL_MspInit+0x58>)
 8000a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bc80      	pop	{r7}
 8000a62:	4770      	bx	lr
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	201c      	movs	r0, #28
 8000a7e:	f000 fa8e 	bl	8000f9e <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a82:	201c      	movs	r0, #28
 8000a84:	f000 faa7 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <HAL_InitTick+0xa0>)
 8000a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a8c:	4a1e      	ldr	r2, [pc, #120]	; (8000b08 <HAL_InitTick+0xa0>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6253      	str	r3, [r2, #36]	; 0x24
 8000a94:	4b1c      	ldr	r3, [pc, #112]	; (8000b08 <HAL_InitTick+0xa0>)
 8000a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f001 fa36 	bl	8001f1c <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ab0:	f001 fa0c 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 8000ab4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <HAL_InitTick+0xa4>)
 8000aba:	fba2 2303 	umull	r2, r3, r2, r3
 8000abe:	0c9b      	lsrs	r3, r3, #18
 8000ac0:	3b01      	subs	r3, #1
 8000ac2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000ac4:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <HAL_InitTick+0xa8>)
 8000ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aca:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000acc:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <HAL_InitTick+0xa8>)
 8000ace:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ad2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ad4:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <HAL_InitTick+0xa8>)
 8000ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ad8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000ada:	4b0d      	ldr	r3, [pc, #52]	; (8000b10 <HAL_InitTick+0xa8>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae0:	4b0b      	ldr	r3, [pc, #44]	; (8000b10 <HAL_InitTick+0xa8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <HAL_InitTick+0xa8>)
 8000ae8:	f002 f95f 	bl	8002daa <HAL_TIM_Base_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d104      	bne.n	8000afc <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000af2:	4807      	ldr	r0, [pc, #28]	; (8000b10 <HAL_InitTick+0xa8>)
 8000af4:	f002 f9a2 	bl	8002e3c <HAL_TIM_Base_Start_IT>
 8000af8:	4603      	mov	r3, r0
 8000afa:	e000      	b.n	8000afe <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8000afc:	2301      	movs	r3, #1
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3730      	adds	r7, #48	; 0x30
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40023800 	.word	0x40023800
 8000b0c:	431bde83 	.word	0x431bde83
 8000b10:	20000238 	.word	0x20000238

08000b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b18:	e7fe      	b.n	8000b18 <NMI_Handler+0x4>

08000b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	e7fe      	b.n	8000b24 <MemManage_Handler+0x4>

08000b26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b26:	b480      	push	{r7}
 8000b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2a:	e7fe      	b.n	8000b2a <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr

08000b3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bc80      	pop	{r7}
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bc80      	pop	{r7}
 8000b54:	4770      	bx	lr

08000b56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bc80      	pop	{r7}
 8000b60:	4770      	bx	lr

08000b62 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b66:	2020      	movs	r0, #32
 8000b68:	f000 fc5c 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b6c:	2040      	movs	r0, #64	; 0x40
 8000b6e:	f000 fc59 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000b72:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b76:	f000 fc55 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b7e:	f000 fc51 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}
	...

08000b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <TIM2_IRQHandler+0x10>)
 8000b8e:	f002 f9a7 	bl	8002ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000238 	.word	0x20000238

08000b9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ba0:	4802      	ldr	r0, [pc, #8]	; (8000bac <USART2_IRQHandler+0x10>)
 8000ba2:	f002 fb5b 	bl	800325c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20000278 	.word	0x20000278

08000bb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000bb4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000bb8:	f000 fc34 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000bbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000bc0:	f000 fc30 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bc8:	f000 fc2c 	bl	8001424 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&RtcHandle);
 8000bd4:	4802      	ldr	r0, [pc, #8]	; (8000be0 <RTC_Alarm_IRQHandler+0x10>)
 8000bd6:	f001 ff4f 	bl	8002a78 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
#endif
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000017c 	.word	0x2000017c

08000be4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000be8:	4b03      	ldr	r3, [pc, #12]	; (8000bf8 <SystemInit+0x14>)
 8000bea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bee:	609a      	str	r2, [r3, #8]
#endif
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f002 fac4 	bl	80031c0 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f7ff fd7e 	bl	800073e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000278 	.word	0x20000278
 8000c4c:	40004400 	.word	0x40004400

08000c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0x8c>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d12f      	bne.n	8000cd2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	4a1a      	ldr	r2, [pc, #104]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7c:	6253      	str	r3, [r2, #36]	; 0x24
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c90:	f043 0301 	orr.w	r3, r3, #1
 8000c94:	61d3      	str	r3, [r2, #28]
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_UART_MspInit+0x90>)
 8000c98:	69db      	ldr	r3, [r3, #28]
 8000c9a:	f003 0301 	and.w	r3, r3, #1
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb2:	2307      	movs	r3, #7
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb6:	f107 0314 	add.w	r3, r7, #20
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4809      	ldr	r0, [pc, #36]	; (8000ce4 <HAL_UART_MspInit+0x94>)
 8000cbe:	f000 f9d9 	bl	8001074 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2105      	movs	r1, #5
 8000cc6:	2026      	movs	r0, #38	; 0x26
 8000cc8:	f000 f969 	bl	8000f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ccc:	2026      	movs	r0, #38	; 0x26
 8000cce:	f000 f982 	bl	8000fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40004400 	.word	0x40004400
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ce8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cea:	e003      	b.n	8000cf4 <LoopCopyDataInit>

08000cec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000cec:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cf0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cf2:	3104      	adds	r1, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cf8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cfa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cfc:	d3f6      	bcc.n	8000cec <CopyDataInit>
  ldr r2, =_sbss
 8000cfe:	4a0a      	ldr	r2, [pc, #40]	; (8000d28 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d00:	e002      	b.n	8000d08 <LoopFillZerobss>

08000d02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000d04:	f842 3b04 	str.w	r3, [r2], #4

08000d08 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000d08:	4b08      	ldr	r3, [pc, #32]	; (8000d2c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000d0a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000d0c:	d3f9      	bcc.n	8000d02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d0e:	f7ff ff69 	bl	8000be4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d12:	f006 f831 	bl	8006d78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d16:	f7ff fc8e 	bl	8000636 <main>
  bx lr
 8000d1a:	4770      	bx	lr
  ldr r3, =_sidata
 8000d1c:	08006fd0 	.word	0x08006fd0
  ldr r0, =_sdata
 8000d20:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d24:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 8000d28:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8000d2c:	20000c3c 	.word	0x20000c3c

08000d30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d30:	e7fe      	b.n	8000d30 <ADC1_IRQHandler>

08000d32 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b082      	sub	sp, #8
 8000d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f923 	bl	8000f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff fe90 	bl	8000a68 <HAL_InitTick>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d002      	beq.n	8000d54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	71fb      	strb	r3, [r7, #7]
 8000d52:	e001      	b.n	8000d58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d54:	f7ff fe5a 	bl	8000a0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d58:	79fb      	ldrb	r3, [r7, #7]
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_IncTick+0x1c>)
 8000d6a:	681a      	ldr	r2, [r3, #0]
 8000d6c:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a03      	ldr	r2, [pc, #12]	; (8000d80 <HAL_IncTick+0x1c>)
 8000d74:	6013      	str	r3, [r2, #0]
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	200002b8 	.word	0x200002b8
 8000d84:	20000008 	.word	0x20000008

08000d88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <HAL_GetTick+0x10>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr
 8000d98:	200002b8 	.word	0x200002b8

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff fff0 	bl	8000d88 <HAL_GetTick>
 8000da8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db4:	d004      	beq.n	8000dc0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <HAL_Delay+0x40>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dc0:	bf00      	nop
 8000dc2:	f7ff ffe1 	bl	8000d88 <HAL_GetTick>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1ad3      	subs	r3, r2, r3
 8000dcc:	68fa      	ldr	r2, [r7, #12]
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d8f7      	bhi.n	8000dc2 <HAL_Delay+0x26>
  {
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	3710      	adds	r7, #16
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000008 	.word	0x20000008

08000de0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6053      	str	r3, [r2, #4]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	e0042000 	.word	0xe0042000

08000dfc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000e06:	f043 0302 	orr.w	r3, r3, #2
 8000e0a:	6053      	str	r3, [r2, #4]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bc80      	pop	{r7}
 8000e12:	4770      	bx	lr
 8000e14:	e0042000 	.word	0xe0042000

08000e18 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a03      	ldr	r2, [pc, #12]	; (8000e30 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6053      	str	r3, [r2, #4]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	e0042000 	.word	0xe0042000

08000e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f003 0307 	and.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e46:	68db      	ldr	r3, [r3, #12]
 8000e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e4a:	68ba      	ldr	r2, [r7, #8]
 8000e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e50:	4013      	ands	r3, r2
 8000e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e66:	4a04      	ldr	r2, [pc, #16]	; (8000e78 <__NVIC_SetPriorityGrouping+0x44>)
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	60d3      	str	r3, [r2, #12]
}
 8000e6c:	bf00      	nop
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <__NVIC_GetPriorityGrouping+0x18>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	0a1b      	lsrs	r3, r3, #8
 8000e86:	f003 0307 	and.w	r3, r3, #7
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bc80      	pop	{r7}
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	db0b      	blt.n	8000ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	f003 021f 	and.w	r2, r3, #31
 8000eb0:	4906      	ldr	r1, [pc, #24]	; (8000ecc <__NVIC_EnableIRQ+0x34>)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	095b      	lsrs	r3, r3, #5
 8000eb8:	2001      	movs	r0, #1
 8000eba:	fa00 f202 	lsl.w	r2, r0, r2
 8000ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	e000e100 	.word	0xe000e100

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff ff4f 	bl	8000e34 <__NVIC_SetPriorityGrouping>
}
 8000f96:	bf00      	nop
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b086      	sub	sp, #24
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	60b9      	str	r1, [r7, #8]
 8000fa8:	607a      	str	r2, [r7, #4]
 8000faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb0:	f7ff ff64 	bl	8000e7c <__NVIC_GetPriorityGrouping>
 8000fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	68b9      	ldr	r1, [r7, #8]
 8000fba:	6978      	ldr	r0, [r7, #20]
 8000fbc:	f7ff ffb2 	bl	8000f24 <NVIC_EncodePriority>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff81 	bl	8000ed0 <__NVIC_SetPriority>
}
 8000fce:	bf00      	nop
 8000fd0:	3718      	adds	r7, #24
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff ff57 	bl	8000e98 <__NVIC_EnableIRQ>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b084      	sub	sp, #16
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001004:	b2db      	uxtb	r3, r3
 8001006:	2b02      	cmp	r3, #2
 8001008:	d005      	beq.n	8001016 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2204      	movs	r2, #4
 800100e:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	e029      	b.n	800106a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 020e 	bic.w	r2, r2, #14
 8001024:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 0201 	bic.w	r2, r2, #1
 8001034:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f003 021c 	and.w	r2, r3, #28
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f202 	lsl.w	r2, r1, r2
 8001048:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2201      	movs	r2, #1
 800104e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	4798      	blx	r3
    }
  }
  return status;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001086:	2300      	movs	r3, #0
 8001088:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800108a:	e160      	b.n	800134e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	2101      	movs	r1, #1
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	fa01 f303 	lsl.w	r3, r1, r3
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	f000 8152 	beq.w	8001348 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d00b      	beq.n	80010c4 <HAL_GPIO_Init+0x50>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d007      	beq.n	80010c4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b8:	2b11      	cmp	r3, #17
 80010ba:	d003      	beq.n	80010c4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b12      	cmp	r3, #18
 80010c2:	d130      	bne.n	8001126 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	2203      	movs	r2, #3
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68da      	ldr	r2, [r3, #12]
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80010fa:	2201      	movs	r2, #1
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	f003 0201 	and.w	r2, r3, #1
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	68db      	ldr	r3, [r3, #12]
 800112a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	005b      	lsls	r3, r3, #1
 8001130:	2203      	movs	r2, #3
 8001132:	fa02 f303 	lsl.w	r3, r2, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	4013      	ands	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4313      	orrs	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0xf2>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b12      	cmp	r3, #18
 8001164:	d123      	bne.n	80011ae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	08da      	lsrs	r2, r3, #3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3208      	adds	r2, #8
 800116e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001172:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	f003 0307 	and.w	r3, r3, #7
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	220f      	movs	r2, #15
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4013      	ands	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	691a      	ldr	r2, [r3, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4313      	orrs	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	08da      	lsrs	r2, r3, #3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3208      	adds	r2, #8
 80011a8:	6939      	ldr	r1, [r7, #16]
 80011aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f003 0203 	and.w	r2, r3, #3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 80ac 	beq.w	8001348 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f0:	4b5e      	ldr	r3, [pc, #376]	; (800136c <HAL_GPIO_Init+0x2f8>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a5d      	ldr	r2, [pc, #372]	; (800136c <HAL_GPIO_Init+0x2f8>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6213      	str	r3, [r2, #32]
 80011fc:	4b5b      	ldr	r3, [pc, #364]	; (800136c <HAL_GPIO_Init+0x2f8>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	60bb      	str	r3, [r7, #8]
 8001206:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001208:	4a59      	ldr	r2, [pc, #356]	; (8001370 <HAL_GPIO_Init+0x2fc>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001214:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	f003 0303 	and.w	r3, r3, #3
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a51      	ldr	r2, [pc, #324]	; (8001374 <HAL_GPIO_Init+0x300>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d025      	beq.n	8001280 <HAL_GPIO_Init+0x20c>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a50      	ldr	r2, [pc, #320]	; (8001378 <HAL_GPIO_Init+0x304>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d01f      	beq.n	800127c <HAL_GPIO_Init+0x208>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a4f      	ldr	r2, [pc, #316]	; (800137c <HAL_GPIO_Init+0x308>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d019      	beq.n	8001278 <HAL_GPIO_Init+0x204>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	4a4e      	ldr	r2, [pc, #312]	; (8001380 <HAL_GPIO_Init+0x30c>)
 8001248:	4293      	cmp	r3, r2
 800124a:	d013      	beq.n	8001274 <HAL_GPIO_Init+0x200>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a4d      	ldr	r2, [pc, #308]	; (8001384 <HAL_GPIO_Init+0x310>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d00d      	beq.n	8001270 <HAL_GPIO_Init+0x1fc>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x314>)
 8001258:	4293      	cmp	r3, r2
 800125a:	d007      	beq.n	800126c <HAL_GPIO_Init+0x1f8>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a4b      	ldr	r2, [pc, #300]	; (800138c <HAL_GPIO_Init+0x318>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d101      	bne.n	8001268 <HAL_GPIO_Init+0x1f4>
 8001264:	2306      	movs	r3, #6
 8001266:	e00c      	b.n	8001282 <HAL_GPIO_Init+0x20e>
 8001268:	2307      	movs	r3, #7
 800126a:	e00a      	b.n	8001282 <HAL_GPIO_Init+0x20e>
 800126c:	2305      	movs	r3, #5
 800126e:	e008      	b.n	8001282 <HAL_GPIO_Init+0x20e>
 8001270:	2304      	movs	r3, #4
 8001272:	e006      	b.n	8001282 <HAL_GPIO_Init+0x20e>
 8001274:	2303      	movs	r3, #3
 8001276:	e004      	b.n	8001282 <HAL_GPIO_Init+0x20e>
 8001278:	2302      	movs	r3, #2
 800127a:	e002      	b.n	8001282 <HAL_GPIO_Init+0x20e>
 800127c:	2301      	movs	r3, #1
 800127e:	e000      	b.n	8001282 <HAL_GPIO_Init+0x20e>
 8001280:	2300      	movs	r3, #0
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	f002 0203 	and.w	r2, r2, #3
 8001288:	0092      	lsls	r2, r2, #2
 800128a:	4093      	lsls	r3, r2
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001292:	4937      	ldr	r1, [pc, #220]	; (8001370 <HAL_GPIO_Init+0x2fc>)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	3302      	adds	r3, #2
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012a0:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_GPIO_Init+0x31c>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012c4:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_GPIO_Init+0x31c>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012ca:	4b31      	ldr	r3, [pc, #196]	; (8001390 <HAL_GPIO_Init+0x31c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ee:	4a28      	ldr	r2, [pc, #160]	; (8001390 <HAL_GPIO_Init+0x31c>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012f4:	4b26      	ldr	r3, [pc, #152]	; (8001390 <HAL_GPIO_Init+0x31c>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001318:	4a1d      	ldr	r2, [pc, #116]	; (8001390 <HAL_GPIO_Init+0x31c>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800131e:	4b1c      	ldr	r3, [pc, #112]	; (8001390 <HAL_GPIO_Init+0x31c>)
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4313      	orrs	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_GPIO_Init+0x31c>)
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3301      	adds	r3, #1
 800134c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	fa22 f303 	lsr.w	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	f47f ae97 	bne.w	800108c <HAL_GPIO_Init+0x18>
  }
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	371c      	adds	r7, #28
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40010000 	.word	0x40010000
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40020800 	.word	0x40020800
 8001380:	40020c00 	.word	0x40020c00
 8001384:	40021000 	.word	0x40021000
 8001388:	40021400 	.word	0x40021400
 800138c:	40021800 	.word	0x40021800
 8001390:	40010400 	.word	0x40010400

08001394 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691a      	ldr	r2, [r3, #16]
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013ac:	2301      	movs	r3, #1
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e001      	b.n	80013b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr

080013c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
 80013ca:	460b      	mov	r3, r1
 80013cc:	807b      	strh	r3, [r7, #2]
 80013ce:	4613      	mov	r3, r2
 80013d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d2:	787b      	ldrb	r3, [r7, #1]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013d8:	887a      	ldrh	r2, [r7, #2]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80013de:	e003      	b.n	80013e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	041a      	lsls	r2, r3, #16
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	619a      	str	r2, [r3, #24]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr

080013f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001404:	887a      	ldrh	r2, [r7, #2]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	041a      	lsls	r2, r3, #16
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43d9      	mvns	r1, r3
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	400b      	ands	r3, r1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	88fb      	ldrh	r3, [r7, #6]
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800143a:	4a05      	ldr	r2, [pc, #20]	; (8001450 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001440:	88fb      	ldrh	r3, [r7, #6]
 8001442:	4618      	mov	r0, r3
 8001444:	f005 f9e6 	bl	8006814 <HAL_GPIO_EXTI_Callback>
  }
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40010400 	.word	0x40010400

08001454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b088      	sub	sp, #32
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e31d      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001466:	4b94      	ldr	r3, [pc, #592]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	f003 030c 	and.w	r3, r3, #12
 800146e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001470:	4b91      	ldr	r3, [pc, #580]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001478:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	2b00      	cmp	r3, #0
 8001484:	d07b      	beq.n	800157e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b08      	cmp	r3, #8
 800148a:	d006      	beq.n	800149a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800148c:	69bb      	ldr	r3, [r7, #24]
 800148e:	2b0c      	cmp	r3, #12
 8001490:	d10f      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5e>
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001498:	d10b      	bne.n	80014b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149a:	4b87      	ldr	r3, [pc, #540]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d06a      	beq.n	800157c <HAL_RCC_OscConfig+0x128>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d166      	bne.n	800157c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e2f7      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d106      	bne.n	80014c8 <HAL_RCC_OscConfig+0x74>
 80014ba:	4b7f      	ldr	r3, [pc, #508]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7e      	ldr	r2, [pc, #504]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e02d      	b.n	8001524 <HAL_RCC_OscConfig+0xd0>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10c      	bne.n	80014ea <HAL_RCC_OscConfig+0x96>
 80014d0:	4b79      	ldr	r3, [pc, #484]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a78      	ldr	r2, [pc, #480]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80014d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	4b76      	ldr	r3, [pc, #472]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a75      	ldr	r2, [pc, #468]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80014e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0xd0>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b05      	cmp	r3, #5
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0xb8>
 80014f2:	4b71      	ldr	r3, [pc, #452]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a70      	ldr	r2, [pc, #448]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b6e      	ldr	r3, [pc, #440]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a6d      	ldr	r2, [pc, #436]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e00b      	b.n	8001524 <HAL_RCC_OscConfig+0xd0>
 800150c:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a69      	ldr	r2, [pc, #420]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a66      	ldr	r2, [pc, #408]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 800151e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d013      	beq.n	8001554 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fc2c 	bl	8000d88 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001534:	f7ff fc28 	bl	8000d88 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b64      	cmp	r3, #100	; 0x64
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e2ad      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001546:	4b5c      	ldr	r3, [pc, #368]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d0f0      	beq.n	8001534 <HAL_RCC_OscConfig+0xe0>
 8001552:	e014      	b.n	800157e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001554:	f7ff fc18 	bl	8000d88 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800155c:	f7ff fc14 	bl	8000d88 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b64      	cmp	r3, #100	; 0x64
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e299      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800156e:	4b52      	ldr	r3, [pc, #328]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1f0      	bne.n	800155c <HAL_RCC_OscConfig+0x108>
 800157a:	e000      	b.n	800157e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800157c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d05a      	beq.n	8001640 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b04      	cmp	r3, #4
 800158e:	d005      	beq.n	800159c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b0c      	cmp	r3, #12
 8001594:	d119      	bne.n	80015ca <HAL_RCC_OscConfig+0x176>
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d116      	bne.n	80015ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159c:	4b46      	ldr	r3, [pc, #280]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_OscConfig+0x160>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e276      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b4:	4b40      	ldr	r3, [pc, #256]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	691b      	ldr	r3, [r3, #16]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	493d      	ldr	r1, [pc, #244]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c8:	e03a      	b.n	8001640 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d020      	beq.n	8001614 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <HAL_RCC_OscConfig+0x268>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fbd6 	bl	8000d88 <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015e0:	f7ff fbd2 	bl	8000d88 <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e257      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015f2:	4b31      	ldr	r3, [pc, #196]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fe:	4b2e      	ldr	r3, [pc, #184]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	691b      	ldr	r3, [r3, #16]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	492a      	ldr	r1, [pc, #168]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 800160e:	4313      	orrs	r3, r2
 8001610:	604b      	str	r3, [r1, #4]
 8001612:	e015      	b.n	8001640 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001614:	4b29      	ldr	r3, [pc, #164]	; (80016bc <HAL_RCC_OscConfig+0x268>)
 8001616:	2200      	movs	r2, #0
 8001618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161a:	f7ff fbb5 	bl	8000d88 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001620:	e008      	b.n	8001634 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001622:	f7ff fbb1 	bl	8000d88 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	2b02      	cmp	r3, #2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e236      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001634:	4b20      	ldr	r3, [pc, #128]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1f0      	bne.n	8001622 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 80b8 	beq.w	80017be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d170      	bne.n	8001736 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001654:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165c:	2b00      	cmp	r3, #0
 800165e:	d005      	beq.n	800166c <HAL_RCC_OscConfig+0x218>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	699b      	ldr	r3, [r3, #24]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e21a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1a      	ldr	r2, [r3, #32]
 8001670:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001678:	429a      	cmp	r2, r3
 800167a:	d921      	bls.n	80016c0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fc7b 	bl	8001f7c <RCC_SetFlashLatencyFromMSIRange>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e208      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4906      	ldr	r1, [pc, #24]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a2:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	061b      	lsls	r3, r3, #24
 80016b0:	4901      	ldr	r1, [pc, #4]	; (80016b8 <HAL_RCC_OscConfig+0x264>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	604b      	str	r3, [r1, #4]
 80016b6:	e020      	b.n	80016fa <HAL_RCC_OscConfig+0x2a6>
 80016b8:	40023800 	.word	0x40023800
 80016bc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c0:	4ba4      	ldr	r3, [pc, #656]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	49a1      	ldr	r1, [pc, #644]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d2:	4ba0      	ldr	r3, [pc, #640]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	061b      	lsls	r3, r3, #24
 80016e0:	499c      	ldr	r1, [pc, #624]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a1b      	ldr	r3, [r3, #32]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 fc46 	bl	8001f7c <RCC_SetFlashLatencyFromMSIRange>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e1d3      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	0b5b      	lsrs	r3, r3, #13
 8001700:	3301      	adds	r3, #1
 8001702:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800170a:	4a92      	ldr	r2, [pc, #584]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 800170c:	6892      	ldr	r2, [r2, #8]
 800170e:	0912      	lsrs	r2, r2, #4
 8001710:	f002 020f 	and.w	r2, r2, #15
 8001714:	4990      	ldr	r1, [pc, #576]	; (8001958 <HAL_RCC_OscConfig+0x504>)
 8001716:	5c8a      	ldrb	r2, [r1, r2]
 8001718:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800171a:	4a90      	ldr	r2, [pc, #576]	; (800195c <HAL_RCC_OscConfig+0x508>)
 800171c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800171e:	4b90      	ldr	r3, [pc, #576]	; (8001960 <HAL_RCC_OscConfig+0x50c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f9a0 	bl	8000a68 <HAL_InitTick>
 8001728:	4603      	mov	r3, r0
 800172a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d045      	beq.n	80017be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001732:	7bfb      	ldrb	r3, [r7, #15]
 8001734:	e1b5      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d029      	beq.n	8001792 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800173e:	4b89      	ldr	r3, [pc, #548]	; (8001964 <HAL_RCC_OscConfig+0x510>)
 8001740:	2201      	movs	r2, #1
 8001742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fb20 	bl	8000d88 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174c:	f7ff fb1c 	bl	8000d88 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e1a1      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800175e:	4b7d      	ldr	r3, [pc, #500]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800176a:	4b7a      	ldr	r3, [pc, #488]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4977      	ldr	r1, [pc, #476]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800177c:	4b75      	ldr	r3, [pc, #468]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	4972      	ldr	r1, [pc, #456]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001792:	4b74      	ldr	r3, [pc, #464]	; (8001964 <HAL_RCC_OscConfig+0x510>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001798:	f7ff faf6 	bl	8000d88 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017a0:	f7ff faf2 	bl	8000d88 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e177      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017b2:	4b68      	ldr	r3, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d030      	beq.n	800182c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d016      	beq.n	8001800 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d2:	4b65      	ldr	r3, [pc, #404]	; (8001968 <HAL_RCC_OscConfig+0x514>)
 80017d4:	2201      	movs	r2, #1
 80017d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fad6 	bl	8000d88 <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e0:	f7ff fad2 	bl	8000d88 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e157      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017f2:	4b58      	ldr	r3, [pc, #352]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80017f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0x38c>
 80017fe:	e015      	b.n	800182c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_OscConfig+0x514>)
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001806:	f7ff fabf 	bl	8000d88 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800180e:	f7ff fabb 	bl	8000d88 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e140      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001820:	4b4c      	ldr	r3, [pc, #304]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001824:	f003 0302 	and.w	r3, r3, #2
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f0      	bne.n	800180e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 80b5 	beq.w	80019a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800183a:	2300      	movs	r3, #0
 800183c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800183e:	4b45      	ldr	r3, [pc, #276]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10d      	bne.n	8001866 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b42      	ldr	r3, [pc, #264]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	4a41      	ldr	r2, [pc, #260]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6253      	str	r3, [r2, #36]	; 0x24
 8001856:	4b3f      	ldr	r3, [pc, #252]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001862:	2301      	movs	r3, #1
 8001864:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001866:	4b41      	ldr	r3, [pc, #260]	; (800196c <HAL_RCC_OscConfig+0x518>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800186e:	2b00      	cmp	r3, #0
 8001870:	d118      	bne.n	80018a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001872:	4b3e      	ldr	r3, [pc, #248]	; (800196c <HAL_RCC_OscConfig+0x518>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a3d      	ldr	r2, [pc, #244]	; (800196c <HAL_RCC_OscConfig+0x518>)
 8001878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800187c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800187e:	f7ff fa83 	bl	8000d88 <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001886:	f7ff fa7f 	bl	8000d88 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b64      	cmp	r3, #100	; 0x64
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e104      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	4b34      	ldr	r3, [pc, #208]	; (800196c <HAL_RCC_OscConfig+0x518>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0f0      	beq.n	8001886 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x466>
 80018ac:	4b29      	ldr	r3, [pc, #164]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	4a28      	ldr	r2, [pc, #160]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6353      	str	r3, [r2, #52]	; 0x34
 80018b8:	e02d      	b.n	8001916 <HAL_RCC_OscConfig+0x4c2>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d10c      	bne.n	80018dc <HAL_RCC_OscConfig+0x488>
 80018c2:	4b24      	ldr	r3, [pc, #144]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c6:	4a23      	ldr	r2, [pc, #140]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018cc:	6353      	str	r3, [r2, #52]	; 0x34
 80018ce:	4b21      	ldr	r3, [pc, #132]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	4a20      	ldr	r2, [pc, #128]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018d8:	6353      	str	r3, [r2, #52]	; 0x34
 80018da:	e01c      	b.n	8001916 <HAL_RCC_OscConfig+0x4c2>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d10c      	bne.n	80018fe <HAL_RCC_OscConfig+0x4aa>
 80018e4:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e8:	4a1a      	ldr	r2, [pc, #104]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ee:	6353      	str	r3, [r2, #52]	; 0x34
 80018f0:	4b18      	ldr	r3, [pc, #96]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	4a17      	ldr	r2, [pc, #92]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 80018f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fa:	6353      	str	r3, [r2, #52]	; 0x34
 80018fc:	e00b      	b.n	8001916 <HAL_RCC_OscConfig+0x4c2>
 80018fe:	4b15      	ldr	r3, [pc, #84]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001902:	4a14      	ldr	r2, [pc, #80]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001908:	6353      	str	r3, [r2, #52]	; 0x34
 800190a:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 800190c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800190e:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 8001910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001914:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d015      	beq.n	800194a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191e:	f7ff fa33 	bl	8000d88 <HAL_GetTick>
 8001922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001924:	e00a      	b.n	800193c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001926:	f7ff fa2f 	bl	8000d88 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	f241 3288 	movw	r2, #5000	; 0x1388
 8001934:	4293      	cmp	r3, r2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e0b2      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800193c:	4b05      	ldr	r3, [pc, #20]	; (8001954 <HAL_RCC_OscConfig+0x500>)
 800193e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ee      	beq.n	8001926 <HAL_RCC_OscConfig+0x4d2>
 8001948:	e023      	b.n	8001992 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fa1d 	bl	8000d88 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001950:	e019      	b.n	8001986 <HAL_RCC_OscConfig+0x532>
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800
 8001958:	08006e34 	.word	0x08006e34
 800195c:	20000000 	.word	0x20000000
 8001960:	20000004 	.word	0x20000004
 8001964:	42470020 	.word	0x42470020
 8001968:	42470680 	.word	0x42470680
 800196c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001970:	f7ff fa0a 	bl	8000d88 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	f241 3288 	movw	r2, #5000	; 0x1388
 800197e:	4293      	cmp	r3, r2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e08d      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001986:	4b49      	ldr	r3, [pc, #292]	; (8001aac <HAL_RCC_OscConfig+0x658>)
 8001988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800198a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ee      	bne.n	8001970 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001992:	7ffb      	ldrb	r3, [r7, #31]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b44      	ldr	r3, [pc, #272]	; (8001aac <HAL_RCC_OscConfig+0x658>)
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	4a43      	ldr	r2, [pc, #268]	; (8001aac <HAL_RCC_OscConfig+0x658>)
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d079      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d056      	beq.n	8001a60 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d13b      	bne.n	8001a32 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019ba:	4b3d      	ldr	r3, [pc, #244]	; (8001ab0 <HAL_RCC_OscConfig+0x65c>)
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff f9e2 	bl	8000d88 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c8:	f7ff f9de 	bl	8000d88 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e063      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019da:	4b34      	ldr	r3, [pc, #208]	; (8001aac <HAL_RCC_OscConfig+0x658>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f0      	bne.n	80019c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019e6:	4b31      	ldr	r3, [pc, #196]	; (8001aac <HAL_RCC_OscConfig+0x658>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f6:	4319      	orrs	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fc:	430b      	orrs	r3, r1
 80019fe:	492b      	ldr	r1, [pc, #172]	; (8001aac <HAL_RCC_OscConfig+0x658>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a04:	4b2a      	ldr	r3, [pc, #168]	; (8001ab0 <HAL_RCC_OscConfig+0x65c>)
 8001a06:	2201      	movs	r2, #1
 8001a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f9bd 	bl	8000d88 <HAL_GetTick>
 8001a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a12:	f7ff f9b9 	bl	8000d88 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e03e      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a24:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_RCC_OscConfig+0x658>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0f0      	beq.n	8001a12 <HAL_RCC_OscConfig+0x5be>
 8001a30:	e036      	b.n	8001aa0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <HAL_RCC_OscConfig+0x65c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a38:	f7ff f9a6 	bl	8000d88 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff f9a2 	bl	8000d88 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e027      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a52:	4b16      	ldr	r3, [pc, #88]	; (8001aac <HAL_RCC_OscConfig+0x658>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x5ec>
 8001a5e:	e01f      	b.n	8001aa0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e01a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a6c:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_RCC_OscConfig+0x658>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d10d      	bne.n	8001a9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d106      	bne.n	8001a9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3720      	adds	r7, #32
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	42470060 	.word	0x42470060

08001ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e11a      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ac8:	4b8f      	ldr	r3, [pc, #572]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d919      	bls.n	8001b0a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d105      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0x34>
 8001adc:	4b8a      	ldr	r3, [pc, #552]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a89      	ldr	r2, [pc, #548]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001ae2:	f043 0304 	orr.w	r3, r3, #4
 8001ae6:	6013      	str	r3, [r2, #0]
 8001ae8:	4b87      	ldr	r3, [pc, #540]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 0201 	bic.w	r2, r3, #1
 8001af0:	4985      	ldr	r1, [pc, #532]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af8:	4b83      	ldr	r3, [pc, #524]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d001      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0f9      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d008      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b16:	4b7d      	ldr	r3, [pc, #500]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	497a      	ldr	r1, [pc, #488]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 808e 	beq.w	8001c52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b3e:	4b73      	ldr	r3, [pc, #460]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d121      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e0d7      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b03      	cmp	r3, #3
 8001b54:	d107      	bne.n	8001b66 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b56:	4b6d      	ldr	r3, [pc, #436]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d115      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0cb      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d107      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b6e:	4b67      	ldr	r3, [pc, #412]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d109      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e0bf      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b7e:	4b63      	ldr	r3, [pc, #396]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e0b7      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b8e:	4b5f      	ldr	r3, [pc, #380]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	f023 0203 	bic.w	r2, r3, #3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	495c      	ldr	r1, [pc, #368]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ba0:	f7ff f8f2 	bl	8000d88 <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d112      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb0:	f7ff f8ea 	bl	8000d88 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e09b      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bc6:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b08      	cmp	r3, #8
 8001bd0:	d1ee      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0xfc>
 8001bd2:	e03e      	b.n	8001c52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b03      	cmp	r3, #3
 8001bda:	d112      	bne.n	8001c02 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bdc:	e00a      	b.n	8001bf4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bde:	f7ff f8d3 	bl	8000d88 <HAL_GetTick>
 8001be2:	4602      	mov	r2, r0
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e084      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf4:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
 8001bfc:	2b0c      	cmp	r3, #12
 8001bfe:	d1ee      	bne.n	8001bde <HAL_RCC_ClockConfig+0x12a>
 8001c00:	e027      	b.n	8001c52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d11d      	bne.n	8001c46 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0c:	f7ff f8bc 	bl	8000d88 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e06d      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c22:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 030c 	and.w	r3, r3, #12
 8001c2a:	2b04      	cmp	r3, #4
 8001c2c:	d1ee      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x158>
 8001c2e:	e010      	b.n	8001c52 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7ff f8aa 	bl	8000d88 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e05b      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c46:	4b31      	ldr	r3, [pc, #196]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f003 030c 	and.w	r3, r3, #12
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d1ee      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c52:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d219      	bcs.n	8001c94 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <HAL_RCC_ClockConfig+0x1be>
 8001c66:	4b28      	ldr	r3, [pc, #160]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a27      	ldr	r2, [pc, #156]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001c6c:	f043 0304 	orr.w	r3, r3, #4
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	4b25      	ldr	r3, [pc, #148]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 0201 	bic.w	r2, r3, #1
 8001c7a:	4923      	ldr	r1, [pc, #140]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b21      	ldr	r3, [pc, #132]	; (8001d08 <HAL_RCC_ClockConfig+0x254>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e034      	b.n	8001cfe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0304 	and.w	r3, r3, #4
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d008      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	4917      	ldr	r1, [pc, #92]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cbe:	4b13      	ldr	r3, [pc, #76]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	00db      	lsls	r3, r3, #3
 8001ccc:	490f      	ldr	r1, [pc, #60]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cd2:	f000 f823 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <HAL_RCC_ClockConfig+0x258>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	091b      	lsrs	r3, r3, #4
 8001cde:	f003 030f 	and.w	r3, r3, #15
 8001ce2:	490b      	ldr	r1, [pc, #44]	; (8001d10 <HAL_RCC_ClockConfig+0x25c>)
 8001ce4:	5ccb      	ldrb	r3, [r1, r3]
 8001ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cea:	4a0a      	ldr	r2, [pc, #40]	; (8001d14 <HAL_RCC_ClockConfig+0x260>)
 8001cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <HAL_RCC_ClockConfig+0x264>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7fe feb8 	bl	8000a68 <HAL_InitTick>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cfc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40023c00 	.word	0x40023c00
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	08006e34 	.word	0x08006e34
 8001d14:	20000000 	.word	0x20000000
 8001d18:	20000004 	.word	0x20000004

08001d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	b5b0      	push	{r4, r5, r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d22:	4b61      	ldr	r3, [pc, #388]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
 8001d2e:	2b0c      	cmp	r3, #12
 8001d30:	d00d      	beq.n	8001d4e <HAL_RCC_GetSysClockFreq+0x32>
 8001d32:	2b0c      	cmp	r3, #12
 8001d34:	f200 80a4 	bhi.w	8001e80 <HAL_RCC_GetSysClockFreq+0x164>
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d002      	beq.n	8001d42 <HAL_RCC_GetSysClockFreq+0x26>
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d003      	beq.n	8001d48 <HAL_RCC_GetSysClockFreq+0x2c>
 8001d40:	e09e      	b.n	8001e80 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d42:	4b5a      	ldr	r3, [pc, #360]	; (8001eac <HAL_RCC_GetSysClockFreq+0x190>)
 8001d44:	613b      	str	r3, [r7, #16]
      break;
 8001d46:	e0a9      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d48:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <HAL_RCC_GetSysClockFreq+0x194>)
 8001d4a:	613b      	str	r3, [r7, #16]
      break;
 8001d4c:	e0a6      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0c9b      	lsrs	r3, r3, #18
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	4a57      	ldr	r2, [pc, #348]	; (8001eb4 <HAL_RCC_GetSysClockFreq+0x198>)
 8001d58:	5cd3      	ldrb	r3, [r2, r3]
 8001d5a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	0d9b      	lsrs	r3, r3, #22
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	3301      	adds	r3, #1
 8001d66:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d68:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d041      	beq.n	8001df8 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	461c      	mov	r4, r3
 8001d78:	f04f 0500 	mov.w	r5, #0
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	4629      	mov	r1, r5
 8001d80:	f04f 0200 	mov.w	r2, #0
 8001d84:	f04f 0300 	mov.w	r3, #0
 8001d88:	014b      	lsls	r3, r1, #5
 8001d8a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d8e:	0142      	lsls	r2, r0, #5
 8001d90:	4610      	mov	r0, r2
 8001d92:	4619      	mov	r1, r3
 8001d94:	1b00      	subs	r0, r0, r4
 8001d96:	eb61 0105 	sbc.w	r1, r1, r5
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	f04f 0300 	mov.w	r3, #0
 8001da2:	018b      	lsls	r3, r1, #6
 8001da4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001da8:	0182      	lsls	r2, r0, #6
 8001daa:	1a12      	subs	r2, r2, r0
 8001dac:	eb63 0301 	sbc.w	r3, r3, r1
 8001db0:	f04f 0000 	mov.w	r0, #0
 8001db4:	f04f 0100 	mov.w	r1, #0
 8001db8:	00d9      	lsls	r1, r3, #3
 8001dba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001dbe:	00d0      	lsls	r0, r2, #3
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	1912      	adds	r2, r2, r4
 8001dc6:	eb45 0303 	adc.w	r3, r5, r3
 8001dca:	f04f 0000 	mov.w	r0, #0
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	0259      	lsls	r1, r3, #9
 8001dd4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001dd8:	0250      	lsls	r0, r2, #9
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	461a      	mov	r2, r3
 8001de6:	f04f 0300 	mov.w	r3, #0
 8001dea:	f7fe f9c7 	bl	800017c <__aeabi_uldivmod>
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4613      	mov	r3, r2
 8001df4:	617b      	str	r3, [r7, #20]
 8001df6:	e040      	b.n	8001e7a <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	461c      	mov	r4, r3
 8001dfc:	f04f 0500 	mov.w	r5, #0
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	014b      	lsls	r3, r1, #5
 8001e0e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e12:	0142      	lsls	r2, r0, #5
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	1b00      	subs	r0, r0, r4
 8001e1a:	eb61 0105 	sbc.w	r1, r1, r5
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e2c:	0182      	lsls	r2, r0, #6
 8001e2e:	1a12      	subs	r2, r2, r0
 8001e30:	eb63 0301 	sbc.w	r3, r3, r1
 8001e34:	f04f 0000 	mov.w	r0, #0
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	00d9      	lsls	r1, r3, #3
 8001e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e42:	00d0      	lsls	r0, r2, #3
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	1912      	adds	r2, r2, r4
 8001e4a:	eb45 0303 	adc.w	r3, r5, r3
 8001e4e:	f04f 0000 	mov.w	r0, #0
 8001e52:	f04f 0100 	mov.w	r1, #0
 8001e56:	0299      	lsls	r1, r3, #10
 8001e58:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e5c:	0290      	lsls	r0, r2, #10
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4610      	mov	r0, r2
 8001e64:	4619      	mov	r1, r3
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	461a      	mov	r2, r3
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	f7fe f985 	bl	800017c <__aeabi_uldivmod>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4613      	mov	r3, r2
 8001e78:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	613b      	str	r3, [r7, #16]
      break;
 8001e7e:	e00d      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	0b5b      	lsrs	r3, r3, #13
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	613b      	str	r3, [r7, #16]
      break;
 8001e9a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9c:	693b      	ldr	r3, [r7, #16]
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3718      	adds	r7, #24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	00f42400 	.word	0x00f42400
 8001eb0:	007a1200 	.word	0x007a1200
 8001eb4:	08006e28 	.word	0x08006e28

08001eb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ebc:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr
 8001ec8:	20000000 	.word	0x20000000

08001ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ed0:	f7ff fff2 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	; (8001eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	; (8001ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	08006e44 	.word	0x08006e44

08001ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ef8:	f7ff ffde 	bl	8001eb8 <HAL_RCC_GetHCLKFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	0adb      	lsrs	r3, r3, #11
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	; (8001f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40023800 	.word	0x40023800
 8001f18:	08006e44 	.word	0x08006e44

08001f1c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	220f      	movs	r2, #15
 8001f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f2c:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <HAL_RCC_GetClockConfig+0x58>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f003 0203 	and.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f38:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <HAL_RCC_GetClockConfig+0x58>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f44:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <HAL_RCC_GetClockConfig+0x58>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f50:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <HAL_RCC_GetClockConfig+0x58>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	08db      	lsrs	r3, r3, #3
 8001f56:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f5e:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <HAL_RCC_GetClockConfig+0x5c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0201 	and.w	r2, r3, #1
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	601a      	str	r2, [r3, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr
 8001f74:	40023800 	.word	0x40023800
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b087      	sub	sp, #28
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f84:	2300      	movs	r3, #0
 8001f86:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f88:	4b29      	ldr	r3, [pc, #164]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d12c      	bne.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f94:	4b26      	ldr	r3, [pc, #152]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d005      	beq.n	8001fac <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001fa0:	4b24      	ldr	r3, [pc, #144]	; (8002034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e016      	b.n	8001fda <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	4b20      	ldr	r3, [pc, #128]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb0:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb6:	6253      	str	r3, [r2, #36]	; 0x24
 8001fb8:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001fc4:	4b1b      	ldr	r3, [pc, #108]	; (8002034 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001fcc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001fe0:	d105      	bne.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001fe8:	d101      	bne.n	8001fee <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001fea:	2301      	movs	r3, #1
 8001fec:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d105      	bne.n	8002000 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001ff4:	4b10      	ldr	r3, [pc, #64]	; (8002038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	f043 0304 	orr.w	r3, r3, #4
 8001ffe:	6013      	str	r3, [r2, #0]
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 0201 	bic.w	r2, r3, #1
 8002008:	490b      	ldr	r1, [pc, #44]	; (8002038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002010:	4b09      	ldr	r3, [pc, #36]	; (8002038 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	429a      	cmp	r2, r3
 800201c:	d001      	beq.n	8002022 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	371c      	adds	r7, #28
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40007000 	.word	0x40007000
 8002038:	40023c00 	.word	0x40023c00

0800203c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d106      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80c6 	beq.w	80021ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800205e:	2300      	movs	r3, #0
 8002060:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002062:	4b64      	ldr	r3, [pc, #400]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d10d      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206e:	4b61      	ldr	r3, [pc, #388]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002072:	4a60      	ldr	r2, [pc, #384]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002074:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002078:	6253      	str	r3, [r2, #36]	; 0x24
 800207a:	4b5e      	ldr	r3, [pc, #376]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002086:	2301      	movs	r3, #1
 8002088:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800208a:	4b5b      	ldr	r3, [pc, #364]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002092:	2b00      	cmp	r3, #0
 8002094:	d118      	bne.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002096:	4b58      	ldr	r3, [pc, #352]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	4a57      	ldr	r2, [pc, #348]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800209c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020a2:	f7fe fe71 	bl	8000d88 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a8:	e008      	b.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020aa:	f7fe fe6d 	bl	8000d88 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b64      	cmp	r3, #100	; 0x64
 80020b6:	d901      	bls.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e097      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020bc:	4b4e      	ldr	r3, [pc, #312]	; (80021f8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0f0      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80020c8:	4b4a      	ldr	r3, [pc, #296]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80020d0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d106      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d00f      	beq.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020fa:	d108      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020fc:	4b3d      	ldr	r3, [pc, #244]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002108:	d101      	bne.n	800210e <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e06e      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800210e:	4b39      	ldr	r3, [pc, #228]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002112:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002116:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d041      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d005      	beq.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b00      	cmp	r3, #0
 8002136:	d10c      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	429a      	cmp	r2, r3
 8002144:	d02d      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	2b00      	cmp	r3, #0
 8002150:	d027      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002152:	4b28      	ldr	r3, [pc, #160]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002156:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800215a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002162:	4b26      	ldr	r3, [pc, #152]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002168:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002174:	2b00      	cmp	r3, #0
 8002176:	d014      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7fe fe06 	bl	8000d88 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800217e:	e00a      	b.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7fe fe02 	bl	8000d88 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e02a      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002196:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800219a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ee      	beq.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80021ae:	d10a      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80021b0:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80021c0:	490c      	ldr	r1, [pc, #48]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]
 80021c6:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021d2:	4908      	ldr	r1, [pc, #32]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021d8:	7dfb      	ldrb	r3, [r7, #23]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d105      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e2:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40007000 	.word	0x40007000
 80021fc:	424706dc 	.word	0x424706dc

08002200 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e06d      	b.n	80022ee <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7f5b      	ldrb	r3, [r3, #29]
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d105      	bne.n	8002228 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe fb1e 	bl	8000864 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	22ca      	movs	r2, #202	; 0xca
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2253      	movs	r2, #83	; 0x53
 800223c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800223e:	6878      	ldr	r0, [r7, #4]
 8002240:	f000 fc8d 	bl	8002b5e <RTC_EnterInitMode>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d008      	beq.n	800225c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	22ff      	movs	r2, #255	; 0xff
 8002250:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2204      	movs	r2, #4
 8002256:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e048      	b.n	80022ee <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6812      	ldr	r2, [r2, #0]
 8002266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800226a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800226e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6899      	ldr	r1, [r3, #8]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68d2      	ldr	r2, [r2, #12]
 8002296:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6919      	ldr	r1, [r3, #16]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	041a      	lsls	r2, r3, #16
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ba:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	22ff      	movs	r2, #255	; 0xff
 80022e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80022ec:	2300      	movs	r3, #0
  }
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022f6:	b590      	push	{r4, r7, lr}
 80022f8:	b087      	sub	sp, #28
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	7f1b      	ldrb	r3, [r3, #28]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d101      	bne.n	800230e <HAL_RTC_SetTime+0x18>
 800230a:	2302      	movs	r3, #2
 800230c:	e0a3      	b.n	8002456 <HAL_RTC_SetTime+0x160>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2201      	movs	r2, #1
 8002312:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2202      	movs	r2, #2
 8002318:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d126      	bne.n	800236e <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2200      	movs	r2, #0
 8002332:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f000 fc3a 	bl	8002bb2 <RTC_ByteToBcd2>
 800233e:	4603      	mov	r3, r0
 8002340:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fc33 	bl	8002bb2 <RTC_ByteToBcd2>
 800234c:	4603      	mov	r3, r0
 800234e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002350:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	789b      	ldrb	r3, [r3, #2]
 8002356:	4618      	mov	r0, r3
 8002358:	f000 fc2b 	bl	8002bb2 <RTC_ByteToBcd2>
 800235c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800235e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	78db      	ldrb	r3, [r3, #3]
 8002366:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e018      	b.n	80023a0 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	2200      	movs	r2, #0
 8002380:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	785b      	ldrb	r3, [r3, #1]
 800238c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800238e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002394:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	78db      	ldrb	r3, [r3, #3]
 800239a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800239c:	4313      	orrs	r3, r2
 800239e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	22ca      	movs	r2, #202	; 0xca
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2253      	movs	r2, #83	; 0x53
 80023ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80023b0:	68f8      	ldr	r0, [r7, #12]
 80023b2:	f000 fbd4 	bl	8002b5e <RTC_EnterInitMode>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d00b      	beq.n	80023d4 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	22ff      	movs	r2, #255	; 0xff
 80023c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2204      	movs	r2, #4
 80023c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e040      	b.n	8002456 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681a      	ldr	r2, [r3, #0]
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80023de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	431a      	orrs	r2, r3
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68da      	ldr	r2, [r3, #12]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800241a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 fb71 	bl	8002b04 <HAL_RTC_WaitForSynchro>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	2204      	movs	r2, #4
 8002434:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2200      	movs	r2, #0
 800243a:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e00a      	b.n	8002456 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	22ff      	movs	r2, #255	; 0xff
 8002446:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2201      	movs	r2, #1
 800244c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
  }
}
 8002456:	4618      	mov	r0, r3
 8002458:	371c      	adds	r7, #28
 800245a:	46bd      	mov	sp, r7
 800245c:	bd90      	pop	{r4, r7, pc}

0800245e <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	60f8      	str	r0, [r7, #12]
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	b29a      	uxth	r2, r3
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800248e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002492:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	0c1b      	lsrs	r3, r3, #16
 8002498:	b2db      	uxtb	r3, r3
 800249a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024bc:	b2da      	uxtb	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	0c1b      	lsrs	r3, r3, #16
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d11a      	bne.n	800250e <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fb87 	bl	8002bf0 <RTC_Bcd2ToByte>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	785b      	ldrb	r3, [r3, #1]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f000 fb7e 	bl	8002bf0 <RTC_Bcd2ToByte>
 80024f4:	4603      	mov	r3, r0
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	789b      	ldrb	r3, [r3, #2]
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fb75 	bl	8002bf0 <RTC_Bcd2ToByte>
 8002506:	4603      	mov	r3, r0
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3718      	adds	r7, #24
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002518:	b590      	push	{r4, r7, lr}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	7f1b      	ldrb	r3, [r3, #28]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <HAL_RTC_SetDate+0x18>
 800252c:	2302      	movs	r3, #2
 800252e:	e08d      	b.n	800264c <HAL_RTC_SetDate+0x134>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2201      	movs	r2, #1
 8002534:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2202      	movs	r2, #2
 800253a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10e      	bne.n	8002560 <HAL_RTC_SetDate+0x48>
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	785b      	ldrb	r3, [r3, #1]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d008      	beq.n	8002560 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	785b      	ldrb	r3, [r3, #1]
 8002552:	f023 0310 	bic.w	r3, r3, #16
 8002556:	b2db      	uxtb	r3, r3
 8002558:	330a      	adds	r3, #10
 800255a:	b2da      	uxtb	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d11c      	bne.n	80025a0 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	78db      	ldrb	r3, [r3, #3]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fb21 	bl	8002bb2 <RTC_ByteToBcd2>
 8002570:	4603      	mov	r3, r0
 8002572:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	785b      	ldrb	r3, [r3, #1]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fb1a 	bl	8002bb2 <RTC_ByteToBcd2>
 800257e:	4603      	mov	r3, r0
 8002580:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002582:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	789b      	ldrb	r3, [r3, #2]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fb12 	bl	8002bb2 <RTC_ByteToBcd2>
 800258e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002590:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e00e      	b.n	80025be <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	78db      	ldrb	r3, [r3, #3]
 80025a4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	785b      	ldrb	r3, [r3, #1]
 80025aa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80025ac:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80025b2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	22ca      	movs	r2, #202	; 0xca
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2253      	movs	r2, #83	; 0x53
 80025cc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 fac5 	bl	8002b5e <RTC_EnterInitMode>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00b      	beq.n	80025f2 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	22ff      	movs	r2, #255	; 0xff
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2204      	movs	r2, #4
 80025e6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e02c      	b.n	800264c <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025fc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002600:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68da      	ldr	r2, [r3, #12]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002610:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 fa76 	bl	8002b04 <HAL_RTC_WaitForSynchro>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00b      	beq.n	8002636 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	22ff      	movs	r2, #255	; 0xff
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2204      	movs	r2, #4
 800262a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e00a      	b.n	800264c <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	22ff      	movs	r2, #255	; 0xff
 800263c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2201      	movs	r2, #1
 8002642:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800264a:	2300      	movs	r3, #0
  }
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}

08002654 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800266a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800266e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	0c1b      	lsrs	r3, r3, #16
 8002674:	b2da      	uxtb	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	b2db      	uxtb	r3, r3
 8002680:	f003 031f 	and.w	r3, r3, #31
 8002684:	b2da      	uxtb	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002692:	b2da      	uxtb	r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	0b5b      	lsrs	r3, r3, #13
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d11a      	bne.n	80026e4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	78db      	ldrb	r3, [r3, #3]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fa9c 	bl	8002bf0 <RTC_Bcd2ToByte>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	785b      	ldrb	r3, [r3, #1]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fa93 	bl	8002bf0 <RTC_Bcd2ToByte>
 80026ca:	4603      	mov	r3, r0
 80026cc:	461a      	mov	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	789b      	ldrb	r3, [r3, #2]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 fa8a 	bl	8002bf0 <RTC_Bcd2ToByte>
 80026dc:	4603      	mov	r3, r0
 80026de:	461a      	mov	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
	...

080026f0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b089      	sub	sp, #36	; 0x24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 8002700:	2300      	movs	r3, #0
 8002702:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	7f1b      	ldrb	r3, [r3, #28]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_RTC_SetAlarm_IT+0x24>
 8002710:	2302      	movs	r3, #2
 8002712:	e11f      	b.n	8002954 <HAL_RTC_SetAlarm_IT+0x264>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2201      	movs	r2, #1
 8002718:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2202      	movs	r2, #2
 800271e:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d137      	bne.n	8002796 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	2200      	movs	r2, #0
 8002738:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fa37 	bl	8002bb2 <RTC_ByteToBcd2>
 8002744:	4603      	mov	r3, r0
 8002746:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	785b      	ldrb	r3, [r3, #1]
 800274c:	4618      	mov	r0, r3
 800274e:	f000 fa30 	bl	8002bb2 <RTC_ByteToBcd2>
 8002752:	4603      	mov	r3, r0
 8002754:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002756:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	789b      	ldrb	r3, [r3, #2]
 800275c:	4618      	mov	r0, r3
 800275e:	f000 fa28 	bl	8002bb2 <RTC_ByteToBcd2>
 8002762:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002764:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	78db      	ldrb	r3, [r3, #3]
 800276c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800276e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002778:	4618      	mov	r0, r3
 800277a:	f000 fa1a 	bl	8002bb2 <RTC_ByteToBcd2>
 800277e:	4603      	mov	r3, r0
 8002780:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002782:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800278a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002790:	4313      	orrs	r3, r2
 8002792:	61fb      	str	r3, [r7, #28]
 8002794:	e023      	b.n	80027de <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2200      	movs	r2, #0
 80027a8:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	785b      	ldrb	r3, [r3, #1]
 80027b4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80027b6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80027bc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	78db      	ldrb	r3, [r3, #3]
 80027c2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80027c4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027cc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027ce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027d4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80027da:	4313      	orrs	r3, r2
 80027dc:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	685a      	ldr	r2, [r3, #4]
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	22ca      	movs	r2, #202	; 0xca
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2253      	movs	r2, #83	; 0x53
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002802:	d148      	bne.n	8002896 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002812:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	b2da      	uxtb	r2, r3
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002824:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002826:	f7fe faaf 	bl	8000d88 <HAL_GetTick>
 800282a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800282c:	e013      	b.n	8002856 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800282e:	f7fe faab 	bl	8000d88 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800283c:	d90b      	bls.n	8002856 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	22ff      	movs	r2, #255	; 0xff
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2203      	movs	r2, #3
 800284a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e07e      	b.n	8002954 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0e4      	beq.n	800282e <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69fa      	ldr	r2, [r7, #28]
 800286a:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002882:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	e047      	b.n	8002926 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028a4:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80028b6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80028b8:	f7fe fa66 	bl	8000d88 <HAL_GetTick>
 80028bc:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80028be:	e013      	b.n	80028e8 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80028c0:	f7fe fa62 	bl	8000d88 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ce:	d90b      	bls.n	80028e8 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	22ff      	movs	r2, #255	; 0xff
 80028d6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2203      	movs	r2, #3
 80028dc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e035      	b.n	8002954 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d0e4      	beq.n	80028c0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	69fa      	ldr	r2, [r7, #28]
 80028fc:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002914:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002924:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a0c      	ldr	r2, [pc, #48]	; (800295c <HAL_RTC_SetAlarm_IT+0x26c>)
 800292c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002930:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002932:	4b0a      	ldr	r3, [pc, #40]	; (800295c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	4a09      	ldr	r2, [pc, #36]	; (800295c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002938:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800293c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	22ff      	movs	r2, #255	; 0xff
 8002944:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	2201      	movs	r2, #1
 800294a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	2200      	movs	r2, #0
 8002950:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3724      	adds	r7, #36	; 0x24
 8002958:	46bd      	mov	sp, r7
 800295a:	bd90      	pop	{r4, r7, pc}
 800295c:	40010400 	.word	0x40010400

08002960 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7f1b      	ldrb	r3, [r3, #28]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_RTC_DeactivateAlarm+0x16>
 8002972:	2302      	movs	r3, #2
 8002974:	e07b      	b.n	8002a6e <HAL_RTC_DeactivateAlarm+0x10e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2202      	movs	r2, #2
 8002980:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	22ca      	movs	r2, #202	; 0xca
 8002988:	625a      	str	r2, [r3, #36]	; 0x24
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2253      	movs	r2, #83	; 0x53
 8002990:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002998:	d12f      	bne.n	80029fa <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029a8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029b8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80029ba:	f7fe f9e5 	bl	8000d88 <HAL_GetTick>
 80029be:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80029c0:	e013      	b.n	80029ea <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029c2:	f7fe f9e1 	bl	8000d88 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d0:	d90b      	bls.n	80029ea <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	22ff      	movs	r2, #255	; 0xff
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2203      	movs	r2, #3
 80029de:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e041      	b.n	8002a6e <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d0e4      	beq.n	80029c2 <HAL_RTC_DeactivateAlarm+0x62>
 80029f8:	e02e      	b.n	8002a58 <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a08:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a18:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002a1a:	f7fe f9b5 	bl	8000d88 <HAL_GetTick>
 8002a1e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002a20:	e013      	b.n	8002a4a <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a22:	f7fe f9b1 	bl	8000d88 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a30:	d90b      	bls.n	8002a4a <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e011      	b.n	8002a6e <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f003 0302 	and.w	r3, r3, #2
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0e4      	beq.n	8002a22 <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	22ff      	movs	r2, #255	; 0xff
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3710      	adds	r7, #16
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
	...

08002a78 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d012      	beq.n	8002ab4 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d00b      	beq.n	8002ab4 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f003 fd1b 	bl	80064d8 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	b2da      	uxtb	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002ab2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	689b      	ldr	r3, [r3, #8]
 8002aba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d012      	beq.n	8002ae8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f8d8 	bl	8002c86 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	b2da      	uxtb	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002ae6:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002ae8:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002aea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aee:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	775a      	strb	r2, [r3, #29]
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40010400 	.word	0x40010400

08002b04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11c      	bne.n	8002b54 <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68da      	ldr	r2, [r3, #12]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b28:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b2a:	f7fe f92d 	bl	8000d88 <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b30:	e009      	b.n	8002b46 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b32:	f7fe f929 	bl	8000d88 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b40:	d901      	bls.n	8002b46 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e007      	b.n	8002b56 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0320 	and.w	r3, r3, #32
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0ee      	beq.n	8002b32 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d119      	bne.n	8002ba8 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f04f 32ff 	mov.w	r2, #4294967295
 8002b7c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b7e:	f7fe f903 	bl	8000d88 <HAL_GetTick>
 8002b82:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b84:	e009      	b.n	8002b9a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b86:	f7fe f8ff 	bl	8000d88 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b94:	d901      	bls.n	8002b9a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e007      	b.n	8002baa <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0ee      	beq.n	8002b86 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b085      	sub	sp, #20
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	4603      	mov	r3, r0
 8002bba:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8002bc4:	e005      	b.n	8002bd2 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002bcc:	7afb      	ldrb	r3, [r7, #11]
 8002bce:	3b0a      	subs	r3, #10
 8002bd0:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8002bd2:	7afb      	ldrb	r3, [r7, #11]
 8002bd4:	2b09      	cmp	r3, #9
 8002bd6:	d8f6      	bhi.n	8002bc6 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	b2da      	uxtb	r2, r3
 8002be0:	7afb      	ldrb	r3, [r7, #11]
 8002be2:	4313      	orrs	r3, r2
 8002be4:	b2db      	uxtb	r3, r3
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bc80      	pop	{r7}
 8002bee:	4770      	bx	lr

08002bf0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	091b      	lsrs	r3, r3, #4
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	461a      	mov	r2, r3
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	f003 030f 	and.w	r3, r3, #15
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	4413      	add	r3, r2
 8002c1a:	b2db      	uxtb	r3, r3
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bc80      	pop	{r7}
 8002c24:	4770      	bx	lr

08002c26 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	7f1b      	ldrb	r3, [r3, #28]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_RTCEx_EnableBypassShadow+0x14>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e020      	b.n	8002c7c <HAL_RTCEx_EnableBypassShadow+0x56>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2202      	movs	r2, #2
 8002c44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	22ca      	movs	r2, #202	; 0xca
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2253      	movs	r2, #83	; 0x53
 8002c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0220 	orr.w	r2, r2, #32
 8002c64:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	22ff      	movs	r2, #255	; 0xff
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bc80      	pop	{r7}
 8002c96:	4770      	bx	lr

08002c98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e07b      	b.n	8002da2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d108      	bne.n	8002cc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cba:	d009      	beq.n	8002cd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	61da      	str	r2, [r3, #28]
 8002cc2:	e005      	b.n	8002cd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d106      	bne.n	8002cf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f7fd fe0c 	bl	8000908 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2202      	movs	r2, #2
 8002cf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	699b      	ldr	r3, [r3, #24]
 8002d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d54:	ea42 0103 	orr.w	r1, r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	0c1b      	lsrs	r3, r3, #16
 8002d6e:	f003 0104 	and.w	r1, r3, #4
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	f003 0210 	and.w	r2, r3, #16
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002da0:	2300      	movs	r3, #0
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e031      	b.n	8002e20 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d106      	bne.n	8002dd6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f829 	bl	8002e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2202      	movs	r2, #2
 8002dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3304      	adds	r3, #4
 8002de6:	4619      	mov	r1, r3
 8002de8:	4610      	mov	r0, r2
 8002dea:	f000 f979 	bl	80030e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
	...

08002e3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d001      	beq.n	8002e54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e03a      	b.n	8002eca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0201 	orr.w	r2, r2, #1
 8002e6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e74:	d00e      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x58>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a16      	ldr	r2, [pc, #88]	; (8002ed4 <HAL_TIM_Base_Start_IT+0x98>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d009      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x58>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d004      	beq.n	8002e94 <HAL_TIM_Base_Start_IT+0x58>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a13      	ldr	r2, [pc, #76]	; (8002edc <HAL_TIM_Base_Start_IT+0xa0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d111      	bne.n	8002eb8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b06      	cmp	r3, #6
 8002ea4:	d010      	beq.n	8002ec8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb6:	e007      	b.n	8002ec8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3714      	adds	r7, #20
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr
 8002ed4:	40000400 	.word	0x40000400
 8002ed8:	40000800 	.word	0x40000800
 8002edc:	40010800 	.word	0x40010800

08002ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0202 	mvn.w	r2, #2
 8002f0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f8c1 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8b4 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f8c3 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0204 	mvn.w	r2, #4
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2202      	movs	r2, #2
 8002f66:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f897 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f88a 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f899 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d122      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0308 	and.w	r3, r3, #8
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d11b      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0208 	mvn.w	r2, #8
 8002fb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2204      	movs	r2, #4
 8002fba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f86d 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f860 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f86f 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0310 	and.w	r3, r3, #16
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d122      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d11b      	bne.n	8003038 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0210 	mvn.w	r2, #16
 8003008:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2208      	movs	r2, #8
 800300e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f843 	bl	80030aa <HAL_TIM_IC_CaptureCallback>
 8003024:	e005      	b.n	8003032 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f836 	bl	8003098 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f845 	bl	80030bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b01      	cmp	r3, #1
 8003044:	d10e      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f06f 0201 	mvn.w	r2, #1
 800305c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fd fb5e 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800306e:	2b40      	cmp	r3, #64	; 0x40
 8003070:	d10e      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d107      	bne.n	8003090 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f81f 	bl	80030ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003090:	bf00      	nop
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030a0:	bf00      	nop
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bc80      	pop	{r7}
 80030a8:	4770      	bx	lr

080030aa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bc80      	pop	{r7}
 80030ba:	4770      	bx	lr

080030bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bc80      	pop	{r7}
 80030cc:	4770      	bx	lr

080030ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr

080030e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f6:	d00f      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	4a2b      	ldr	r2, [pc, #172]	; (80031a8 <TIM_Base_SetConfig+0xc8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d00b      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	4a2a      	ldr	r2, [pc, #168]	; (80031ac <TIM_Base_SetConfig+0xcc>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d007      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <TIM_Base_SetConfig+0xd0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d003      	beq.n	8003118 <TIM_Base_SetConfig+0x38>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a28      	ldr	r2, [pc, #160]	; (80031b4 <TIM_Base_SetConfig+0xd4>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d108      	bne.n	800312a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003130:	d017      	beq.n	8003162 <TIM_Base_SetConfig+0x82>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <TIM_Base_SetConfig+0xc8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d013      	beq.n	8003162 <TIM_Base_SetConfig+0x82>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <TIM_Base_SetConfig+0xcc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d00f      	beq.n	8003162 <TIM_Base_SetConfig+0x82>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a1a      	ldr	r2, [pc, #104]	; (80031b0 <TIM_Base_SetConfig+0xd0>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00b      	beq.n	8003162 <TIM_Base_SetConfig+0x82>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a19      	ldr	r2, [pc, #100]	; (80031b4 <TIM_Base_SetConfig+0xd4>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <TIM_Base_SetConfig+0x82>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a18      	ldr	r2, [pc, #96]	; (80031b8 <TIM_Base_SetConfig+0xd8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0x82>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a17      	ldr	r2, [pc, #92]	; (80031bc <TIM_Base_SetConfig+0xdc>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d108      	bne.n	8003174 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	615a      	str	r2, [r3, #20]
}
 800319e:	bf00      	nop
 80031a0:	3714      	adds	r7, #20
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800
 80031b0:	40000c00 	.word	0x40000c00
 80031b4:	40010800 	.word	0x40010800
 80031b8:	40010c00 	.word	0x40010c00
 80031bc:	40011000 	.word	0x40011000

080031c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e03f      	b.n	8003252 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fd fd32 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2224      	movs	r2, #36	; 0x24
 80031f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f000 fa63 	bl	80036d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	691a      	ldr	r2, [r3, #16]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2220      	movs	r2, #32
 8003244:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2220      	movs	r2, #32
 800324c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003250:	2300      	movs	r3, #0
}
 8003252:	4618      	mov	r0, r3
 8003254:	3708      	adds	r7, #8
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	695b      	ldr	r3, [r3, #20]
 800327a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f003 030f 	and.w	r3, r3, #15
 800328a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10d      	bne.n	80032ae <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	f003 0320 	and.w	r3, r3, #32
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_UART_IRQHandler+0x52>
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	f003 0320 	and.w	r3, r3, #32
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d003      	beq.n	80032ae <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f000 f991 	bl	80035ce <UART_Receive_IT>
      return;
 80032ac:	e0d0      	b.n	8003450 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80b0 	beq.w	8003416 <HAL_UART_IRQHandler+0x1ba>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d105      	bne.n	80032cc <HAL_UART_IRQHandler+0x70>
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80a5 	beq.w	8003416 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_UART_IRQHandler+0x90>
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	f043 0201 	orr.w	r2, r3, #1
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_UART_IRQHandler+0xb0>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	f043 0202 	orr.w	r2, r3, #2
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_UART_IRQHandler+0xd0>
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	f003 0301 	and.w	r3, r3, #1
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003324:	f043 0204 	orr.w	r2, r3, #4
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	f003 0308 	and.w	r3, r3, #8
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00f      	beq.n	8003356 <HAL_UART_IRQHandler+0xfa>
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	2b00      	cmp	r3, #0
 800333e:	d104      	bne.n	800334a <HAL_UART_IRQHandler+0xee>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334e:	f043 0208 	orr.w	r2, r3, #8
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800335a:	2b00      	cmp	r3, #0
 800335c:	d077      	beq.n	800344e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	f003 0320 	and.w	r3, r3, #32
 8003364:	2b00      	cmp	r3, #0
 8003366:	d007      	beq.n	8003378 <HAL_UART_IRQHandler+0x11c>
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f92b 	bl	80035ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003382:	2b40      	cmp	r3, #64	; 0x40
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	b2db      	uxtb	r3, r3
 800338c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d102      	bne.n	80033a0 <HAL_UART_IRQHandler+0x144>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d031      	beq.n	8003404 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f876 	bl	8003492 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d123      	bne.n	80033fc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033c2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	4a21      	ldr	r2, [pc, #132]	; (8003458 <HAL_UART_IRQHandler+0x1fc>)
 80033d2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	4618      	mov	r0, r3
 80033da:	f7fd fe0a 	bl	8000ff2 <HAL_DMA_Abort_IT>
 80033de:	4603      	mov	r3, r0
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d016      	beq.n	8003412 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ee:	4610      	mov	r0, r2
 80033f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f2:	e00e      	b.n	8003412 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f843 	bl	8003480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fa:	e00a      	b.n	8003412 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 f83f 	bl	8003480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003402:	e006      	b.n	8003412 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f83b 	bl	8003480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003410:	e01d      	b.n	800344e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003412:	bf00      	nop
    return;
 8003414:	e01b      	b.n	800344e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_UART_IRQHandler+0x1d6>
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f862 	bl	80034f4 <UART_Transmit_IT>
    return;
 8003430:	e00e      	b.n	8003450 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003438:	2b00      	cmp	r3, #0
 800343a:	d009      	beq.n	8003450 <HAL_UART_IRQHandler+0x1f4>
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f8a9 	bl	800359e <UART_EndTransmit_IT>
    return;
 800344c:	e000      	b.n	8003450 <HAL_UART_IRQHandler+0x1f4>
    return;
 800344e:	bf00      	nop
  }
}
 8003450:	3720      	adds	r7, #32
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	080034cd 	.word	0x080034cd

0800345c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	bc80      	pop	{r7}
 800346c:	4770      	bx	lr

0800346e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800346e:	b480      	push	{r7}
 8003470:	b083      	sub	sp, #12
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	bc80      	pop	{r7}
 800347e:	4770      	bx	lr

08003480 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr

08003492 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80034a8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f022 0201 	bic.w	r2, r2, #1
 80034b8:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2220      	movs	r2, #32
 80034be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80034c2:	bf00      	nop
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bc80      	pop	{r7}
 80034ca:	4770      	bx	lr

080034cc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2200      	movs	r2, #0
 80034e4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f7ff ffca 	bl	8003480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b21      	cmp	r3, #33	; 0x21
 8003506:	d144      	bne.n	8003592 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003510:	d11a      	bne.n	8003548 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a1b      	ldr	r3, [r3, #32]
 8003516:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	461a      	mov	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003526:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d105      	bne.n	800353c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	1c9a      	adds	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	621a      	str	r2, [r3, #32]
 800353a:	e00e      	b.n	800355a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	621a      	str	r2, [r3, #32]
 8003546:	e008      	b.n	800355a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	1c59      	adds	r1, r3, #1
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	6211      	str	r1, [r2, #32]
 8003552:	781a      	ldrb	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29b      	uxth	r3, r3
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	4619      	mov	r1, r3
 8003568:	84d1      	strh	r1, [r2, #38]	; 0x26
 800356a:	2b00      	cmp	r3, #0
 800356c:	d10f      	bne.n	800358e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68da      	ldr	r2, [r3, #12]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800357c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800358c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800358e:	2300      	movs	r3, #0
 8003590:	e000      	b.n	8003594 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003592:	2302      	movs	r3, #2
  }
}
 8003594:	4618      	mov	r0, r3
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	bc80      	pop	{r7}
 800359c:	4770      	bx	lr

0800359e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b082      	sub	sp, #8
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68da      	ldr	r2, [r3, #12]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ff4c 	bl	800345c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b22      	cmp	r3, #34	; 0x22
 80035e0:	d171      	bne.n	80036c6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ea:	d123      	bne.n	8003634 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10e      	bne.n	8003618 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	b29b      	uxth	r3, r3
 8003602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003610:	1c9a      	adds	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	629a      	str	r2, [r3, #40]	; 0x28
 8003616:	e029      	b.n	800366c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	b29b      	uxth	r3, r3
 8003620:	b2db      	uxtb	r3, r3
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	629a      	str	r2, [r3, #40]	; 0x28
 8003632:	e01b      	b.n	800366c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	691b      	ldr	r3, [r3, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10a      	bne.n	8003652 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6858      	ldr	r0, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	1c59      	adds	r1, r3, #1
 8003648:	687a      	ldr	r2, [r7, #4]
 800364a:	6291      	str	r1, [r2, #40]	; 0x28
 800364c:	b2c2      	uxtb	r2, r0
 800364e:	701a      	strb	r2, [r3, #0]
 8003650:	e00c      	b.n	800366c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800365e:	1c58      	adds	r0, r3, #1
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	6288      	str	r0, [r1, #40]	; 0x28
 8003664:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003668:	b2d2      	uxtb	r2, r2
 800366a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003670:	b29b      	uxth	r3, r3
 8003672:	3b01      	subs	r3, #1
 8003674:	b29b      	uxth	r3, r3
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	4619      	mov	r1, r3
 800367a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800367c:	2b00      	cmp	r3, #0
 800367e:	d120      	bne.n	80036c2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68da      	ldr	r2, [r3, #12]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0220 	bic.w	r2, r2, #32
 800368e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68da      	ldr	r2, [r3, #12]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800369e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695a      	ldr	r2, [r3, #20]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 0201 	bic.w	r2, r2, #1
 80036ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f7ff fed8 	bl	800346e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e002      	b.n	80036c8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
 80036c4:	e000      	b.n	80036c8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
  }
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68da      	ldr	r2, [r3, #12]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	431a      	orrs	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	4313      	orrs	r3, r2
 8003704:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003710:	f023 030c 	bic.w	r3, r3, #12
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	6812      	ldr	r2, [r2, #0]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	430b      	orrs	r3, r1
 800371c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699a      	ldr	r2, [r3, #24]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a55      	ldr	r2, [pc, #340]	; (8003890 <UART_SetConfig+0x1c0>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d103      	bne.n	8003746 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800373e:	f7fe fbd9 	bl	8001ef4 <HAL_RCC_GetPCLK2Freq>
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	e002      	b.n	800374c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003746:	f7fe fbc1 	bl	8001ecc <HAL_RCC_GetPCLK1Freq>
 800374a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003754:	d14c      	bne.n	80037f0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	009a      	lsls	r2, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fbb2 f3f3 	udiv	r3, r2, r3
 800376c:	4a49      	ldr	r2, [pc, #292]	; (8003894 <UART_SetConfig+0x1c4>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	0119      	lsls	r1, r3, #4
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	009a      	lsls	r2, r3, #2
 8003780:	441a      	add	r2, r3
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fbb2 f2f3 	udiv	r2, r2, r3
 800378c:	4b41      	ldr	r3, [pc, #260]	; (8003894 <UART_SetConfig+0x1c4>)
 800378e:	fba3 0302 	umull	r0, r3, r3, r2
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2064      	movs	r0, #100	; 0x64
 8003796:	fb00 f303 	mul.w	r3, r0, r3
 800379a:	1ad3      	subs	r3, r2, r3
 800379c:	00db      	lsls	r3, r3, #3
 800379e:	3332      	adds	r3, #50	; 0x32
 80037a0:	4a3c      	ldr	r2, [pc, #240]	; (8003894 <UART_SetConfig+0x1c4>)
 80037a2:	fba2 2303 	umull	r2, r3, r2, r3
 80037a6:	095b      	lsrs	r3, r3, #5
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80037ae:	4419      	add	r1, r3
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009a      	lsls	r2, r3, #2
 80037ba:	441a      	add	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037c6:	4b33      	ldr	r3, [pc, #204]	; (8003894 <UART_SetConfig+0x1c4>)
 80037c8:	fba3 0302 	umull	r0, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	2064      	movs	r0, #100	; 0x64
 80037d0:	fb00 f303 	mul.w	r3, r0, r3
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	00db      	lsls	r3, r3, #3
 80037d8:	3332      	adds	r3, #50	; 0x32
 80037da:	4a2e      	ldr	r2, [pc, #184]	; (8003894 <UART_SetConfig+0x1c4>)
 80037dc:	fba2 2303 	umull	r2, r3, r2, r3
 80037e0:	095b      	lsrs	r3, r3, #5
 80037e2:	f003 0207 	and.w	r2, r3, #7
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	440a      	add	r2, r1
 80037ec:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037ee:	e04a      	b.n	8003886 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009a      	lsls	r2, r3, #2
 80037fa:	441a      	add	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	fbb2 f3f3 	udiv	r3, r2, r3
 8003806:	4a23      	ldr	r2, [pc, #140]	; (8003894 <UART_SetConfig+0x1c4>)
 8003808:	fba2 2303 	umull	r2, r3, r2, r3
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	0119      	lsls	r1, r3, #4
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4613      	mov	r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	4413      	add	r3, r2
 8003818:	009a      	lsls	r2, r3, #2
 800381a:	441a      	add	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	fbb2 f2f3 	udiv	r2, r2, r3
 8003826:	4b1b      	ldr	r3, [pc, #108]	; (8003894 <UART_SetConfig+0x1c4>)
 8003828:	fba3 0302 	umull	r0, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	2064      	movs	r0, #100	; 0x64
 8003830:	fb00 f303 	mul.w	r3, r0, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	4a16      	ldr	r2, [pc, #88]	; (8003894 <UART_SetConfig+0x1c4>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003846:	4419      	add	r1, r3
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4613      	mov	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	4413      	add	r3, r2
 8003850:	009a      	lsls	r2, r3, #2
 8003852:	441a      	add	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	fbb2 f2f3 	udiv	r2, r2, r3
 800385e:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <UART_SetConfig+0x1c4>)
 8003860:	fba3 0302 	umull	r0, r3, r3, r2
 8003864:	095b      	lsrs	r3, r3, #5
 8003866:	2064      	movs	r0, #100	; 0x64
 8003868:	fb00 f303 	mul.w	r3, r0, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	3332      	adds	r3, #50	; 0x32
 8003872:	4a08      	ldr	r2, [pc, #32]	; (8003894 <UART_SetConfig+0x1c4>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	095b      	lsrs	r3, r3, #5
 800387a:	f003 020f 	and.w	r2, r3, #15
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	440a      	add	r2, r1
 8003884:	609a      	str	r2, [r3, #8]
}
 8003886:	bf00      	nop
 8003888:	3710      	adds	r7, #16
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40013800 	.word	0x40013800
 8003894:	51eb851f 	.word	0x51eb851f

08003898 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  // my
    SX1276.Reset.port = SX1276_RST_GPIO_Port;
 80038a0:	4b2f      	ldr	r3, [pc, #188]	; (8003960 <SX1276Init+0xc8>)
 80038a2:	4a30      	ldr	r2, [pc, #192]	; (8003964 <SX1276Init+0xcc>)
 80038a4:	601a      	str	r2, [r3, #0]
    SX1276.Reset.pin = SX1276_RST_Pin;
 80038a6:	4b2e      	ldr	r3, [pc, #184]	; (8003960 <SX1276Init+0xc8>)
 80038a8:	2201      	movs	r2, #1
 80038aa:	809a      	strh	r2, [r3, #4]

    SX1276.Spi.Nss.port = SPI2_NSS_GPIO_Port;
 80038ac:	4b2c      	ldr	r3, [pc, #176]	; (8003960 <SX1276Init+0xc8>)
 80038ae:	4a2e      	ldr	r2, [pc, #184]	; (8003968 <SX1276Init+0xd0>)
 80038b0:	63da      	str	r2, [r3, #60]	; 0x3c
    SX1276.Spi.Nss.pin  = SPI2_NSS_Pin;
 80038b2:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <SX1276Init+0xc8>)
 80038b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    SX1276.Spi.SpiId = SPI_2;
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <SX1276Init+0xc8>)
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    uint8_t i;

    RadioEvents = events;
 80038c4:	4a29      	ldr	r2, [pc, #164]	; (800396c <SX1276Init+0xd4>)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80038ca:	4929      	ldr	r1, [pc, #164]	; (8003970 <SX1276Init+0xd8>)
 80038cc:	4829      	ldr	r0, [pc, #164]	; (8003974 <SX1276Init+0xdc>)
 80038ce:	f002 fff3 	bl	80068b8 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80038d2:	4927      	ldr	r1, [pc, #156]	; (8003970 <SX1276Init+0xd8>)
 80038d4:	4828      	ldr	r0, [pc, #160]	; (8003978 <SX1276Init+0xe0>)
 80038d6:	f002 ffef 	bl	80068b8 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80038da:	4925      	ldr	r1, [pc, #148]	; (8003970 <SX1276Init+0xd8>)
 80038dc:	4827      	ldr	r0, [pc, #156]	; (800397c <SX1276Init+0xe4>)
 80038de:	f002 ffeb 	bl	80068b8 <TimerInit>

    SX1276Reset( );
 80038e2:	f002 fe6d 	bl	80065c0 <SX1276Reset>

    RxChainCalibration( );
 80038e6:	f000 f8fb 	bl	8003ae0 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80038ea:	2000      	movs	r0, #0
 80038ec:	f001 f8b4 	bl	8004a58 <SX1276SetOpMode>

    SX1276IoInit();
 80038f0:	f002 fdfc 	bl	80064ec <SX1276IoInit>

    SX1276IoIrqInit( DioIrq );
 80038f4:	4822      	ldr	r0, [pc, #136]	; (8003980 <SX1276Init+0xe8>)
 80038f6:	f002 fe2d 	bl	8006554 <SX1276IoIrqInit>


    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80038fa:	2300      	movs	r3, #0
 80038fc:	73fb      	strb	r3, [r7, #15]
 80038fe:	e020      	b.n	8003942 <SX1276Init+0xaa>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	4920      	ldr	r1, [pc, #128]	; (8003984 <SX1276Init+0xec>)
 8003904:	4613      	mov	r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4413      	add	r3, r2
 800390a:	440b      	add	r3, r1
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	4618      	mov	r0, r3
 8003910:	f001 f8ce 	bl	8004ab0 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8003914:	7bfa      	ldrb	r2, [r7, #15]
 8003916:	491b      	ldr	r1, [pc, #108]	; (8003984 <SX1276Init+0xec>)
 8003918:	4613      	mov	r3, r2
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4413      	add	r3, r2
 800391e:	440b      	add	r3, r1
 8003920:	3301      	adds	r3, #1
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	4618      	mov	r0, r3
 8003926:	7bfa      	ldrb	r2, [r7, #15]
 8003928:	4916      	ldr	r1, [pc, #88]	; (8003984 <SX1276Init+0xec>)
 800392a:	4613      	mov	r3, r2
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	4413      	add	r3, r2
 8003930:	440b      	add	r3, r1
 8003932:	3302      	adds	r3, #2
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	4619      	mov	r1, r3
 8003938:	f001 f912 	bl	8004b60 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800393c:	7bfb      	ldrb	r3, [r7, #15]
 800393e:	3301      	adds	r3, #1
 8003940:	73fb      	strb	r3, [r7, #15]
 8003942:	7bfb      	ldrb	r3, [r7, #15]
 8003944:	2b0f      	cmp	r3, #15
 8003946:	d9db      	bls.n	8003900 <SX1276Init+0x68>
    }

    SX1276SetModem( MODEM_FSK );
 8003948:	2000      	movs	r0, #0
 800394a:	f001 f8b1 	bl	8004ab0 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800394e:	4b04      	ldr	r3, [pc, #16]	; (8003960 <SX1276Init+0xc8>)
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8003956:	bf00      	nop
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200002ec 	.word	0x200002ec
 8003964:	40020800 	.word	0x40020800
 8003968:	40020400 	.word	0x40020400
 800396c:	20000044 	.word	0x20000044
 8003970:	08004fe9 	.word	0x08004fe9
 8003974:	200002bc 	.word	0x200002bc
 8003978:	20000394 	.word	0x20000394
 800397c:	200002d4 	.word	0x200002d4
 8003980:	2000000c 	.word	0x2000000c
 8003984:	08006e4c 	.word	0x08006e4c

08003988 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8003988:	b480      	push	{r7}
 800398a:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800398c:	4b03      	ldr	r3, [pc, #12]	; (800399c <SX1276GetStatus+0x14>)
 800398e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	bc80      	pop	{r7}
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop
 800399c:	200002ec 	.word	0x200002ec

080039a0 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f001 f9f5 	bl	8004d98 <SX1276ConvertFreqInHzToPllStep>
 80039ae:	60f8      	str	r0, [r7, #12]

    SX1276.Settings.Channel = freq;
 80039b0:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <SX1276SetChannel+0x48>)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6493      	str	r3, [r2, #72]	; 0x48

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	0c1b      	lsrs	r3, r3, #16
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	4619      	mov	r1, r3
 80039be:	2006      	movs	r0, #6
 80039c0:	f001 f8ce 	bl	8004b60 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	0a1b      	lsrs	r3, r3, #8
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	4619      	mov	r1, r3
 80039cc:	2007      	movs	r0, #7
 80039ce:	f001 f8c7 	bl	8004b60 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	4619      	mov	r1, r3
 80039d8:	2008      	movs	r0, #8
 80039da:	f001 f8c1 	bl	8004b60 <SX1276Write>
}
 80039de:	bf00      	nop
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	200002ec 	.word	0x200002ec

080039ec <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	603b      	str	r3, [r7, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80039fc:	2301      	movs	r3, #1
 80039fe:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8003a00:	2300      	movs	r3, #0
 8003a02:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 8003a08:	f000 fd34 	bl	8004474 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f001 f84f 	bl	8004ab0 <SX1276SetModem>

    SX1276SetChannel( freq );
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f7ff ffc4 	bl	80039a0 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8003a18:	68b8      	ldr	r0, [r7, #8]
 8003a1a:	f001 f9e3 	bl	8004de4 <GetFskBandwidthRegValue>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	4619      	mov	r1, r3
 8003a22:	2012      	movs	r0, #18
 8003a24:	f001 f89c 	bl	8004b60 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8003a28:	68b8      	ldr	r0, [r7, #8]
 8003a2a:	f001 f9db 	bl	8004de4 <GetFskBandwidthRegValue>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	4619      	mov	r1, r3
 8003a32:	2013      	movs	r0, #19
 8003a34:	f001 f894 	bl	8004b60 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003a38:	2005      	movs	r0, #5
 8003a3a:	f001 f80d 	bl	8004a58 <SX1276SetOpMode>

    DelayMs( 1 );
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f001 fff6 	bl	8005a30 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8003a44:	f003 f92f 	bl	8006ca6 <TimerGetCurrentTime>
 8003a48:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003a4a:	e00d      	b.n	8003a68 <SX1276IsChannelFree+0x7c>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f000 ffc5 	bl	80049dc <SX1276ReadRssi>
 8003a52:	4603      	mov	r3, r0
 8003a54:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8003a56:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003a5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	dd02      	ble.n	8003a68 <SX1276IsChannelFree+0x7c>
        {
            status = false;
 8003a62:	2300      	movs	r3, #0
 8003a64:	75fb      	strb	r3, [r7, #23]
            break;
 8003a66:	e006      	b.n	8003a76 <SX1276IsChannelFree+0x8a>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003a68:	6938      	ldr	r0, [r7, #16]
 8003a6a:	f003 f92a 	bl	8006cc2 <TimerGetElapsedTime>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d8ea      	bhi.n	8003a4c <SX1276IsChannelFree+0x60>
        }
    }
    SX1276SetSleep( );
 8003a76:	f000 fcfd 	bl	8004474 <SX1276SetSleep>
    return status;
 8003a7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8003a8e:	2001      	movs	r0, #1
 8003a90:	f001 f80e 	bl	8004ab0 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003a94:	21ff      	movs	r1, #255	; 0xff
 8003a96:	2011      	movs	r0, #17
 8003a98:	f001 f862 	bl	8004b60 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003a9c:	2005      	movs	r0, #5
 8003a9e:	f000 ffdb 	bl	8004a58 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	71fb      	strb	r3, [r7, #7]
 8003aa6:	e011      	b.n	8003acc <SX1276Random+0x48>
    {
        DelayMs( 1 );
 8003aa8:	2001      	movs	r0, #1
 8003aaa:	f001 ffc1 	bl	8005a30 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8003aae:	202c      	movs	r0, #44	; 0x2c
 8003ab0:	f001 f866 	bl	8004b80 <SX1276Read>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f003 0201 	and.w	r2, r3, #1
 8003aba:	79fb      	ldrb	r3, [r7, #7]
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8003ac6:	79fb      	ldrb	r3, [r7, #7]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	71fb      	strb	r3, [r7, #7]
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	2b1f      	cmp	r3, #31
 8003ad0:	d9ea      	bls.n	8003aa8 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 8003ad2:	f000 fccf 	bl	8004474 <SX1276SetSleep>

    return rnd;
 8003ad6:	683b      	ldr	r3, [r7, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}

08003ae0 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8003ae0:	b590      	push	{r4, r7, lr}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8003ae6:	2009      	movs	r0, #9
 8003ae8:	f001 f84a 	bl	8004b80 <SX1276Read>
 8003aec:	4603      	mov	r3, r0
 8003aee:	71fb      	strb	r3, [r7, #7]

    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003af0:	2006      	movs	r0, #6
 8003af2:	f001 f845 	bl	8004b80 <SX1276Read>
 8003af6:	4603      	mov	r3, r0
 8003af8:	041c      	lsls	r4, r3, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8003afa:	2007      	movs	r0, #7
 8003afc:	f001 f840 	bl	8004b80 <SX1276Read>
 8003b00:	4603      	mov	r3, r0
 8003b02:	021b      	lsls	r3, r3, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003b04:	431c      	orrs	r4, r3
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8003b06:	2008      	movs	r0, #8
 8003b08:	f001 f83a 	bl	8004b80 <SX1276Read>
 8003b0c:	4603      	mov	r3, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003b0e:	4323      	orrs	r3, r4
 8003b10:	4618      	mov	r0, r3
 8003b12:	f001 f923 	bl	8004d5c <SX1276ConvertPllStepToFreqInHz>
 8003b16:	6038      	str	r0, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8003b18:	2100      	movs	r1, #0
 8003b1a:	2009      	movs	r0, #9
 8003b1c:	f001 f820 	bl	8004b60 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8003b20:	203b      	movs	r0, #59	; 0x3b
 8003b22:	f001 f82d 	bl	8004b80 <SX1276Read>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	4619      	mov	r1, r3
 8003b30:	203b      	movs	r0, #59	; 0x3b
 8003b32:	f001 f815 	bl	8004b60 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003b36:	bf00      	nop
 8003b38:	203b      	movs	r0, #59	; 0x3b
 8003b3a:	f001 f821 	bl	8004b80 <SX1276Read>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b20      	cmp	r3, #32
 8003b46:	d0f7      	beq.n	8003b38 <RxChainCalibration+0x58>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8003b48:	4811      	ldr	r0, [pc, #68]	; (8003b90 <RxChainCalibration+0xb0>)
 8003b4a:	f7ff ff29 	bl	80039a0 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8003b4e:	203b      	movs	r0, #59	; 0x3b
 8003b50:	f001 f816 	bl	8004b80 <SX1276Read>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	203b      	movs	r0, #59	; 0x3b
 8003b60:	f000 fffe 	bl	8004b60 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003b64:	bf00      	nop
 8003b66:	203b      	movs	r0, #59	; 0x3b
 8003b68:	f001 f80a 	bl	8004b80 <SX1276Read>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f003 0320 	and.w	r3, r3, #32
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d0f7      	beq.n	8003b66 <RxChainCalibration+0x86>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8003b76:	79fb      	ldrb	r3, [r7, #7]
 8003b78:	4619      	mov	r1, r3
 8003b7a:	2009      	movs	r0, #9
 8003b7c:	f000 fff0 	bl	8004b60 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8003b80:	6838      	ldr	r0, [r7, #0]
 8003b82:	f7ff ff0d 	bl	80039a0 <SX1276SetChannel>
}
 8003b86:	bf00      	nop
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd90      	pop	{r4, r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	33bca100 	.word	0x33bca100

08003b94 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60b9      	str	r1, [r7, #8]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 ff80 	bl	8004ab0 <SX1276SetModem>

    switch( modem )
 8003bb0:	7bfb      	ldrb	r3, [r7, #15]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <SX1276SetRxConfig+0x2a>
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	f000 8099 	beq.w	8003cee <SX1276SetRxConfig+0x15a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8003bbc:	e1c3      	b.n	8003f46 <SX1276SetRxConfig+0x3b2>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003bbe:	4a78      	ldr	r2, [pc, #480]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8003bc4:	4a76      	ldr	r2, [pc, #472]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8003bca:	4a75      	ldr	r2, [pc, #468]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
 8003bce:	6593      	str	r3, [r2, #88]	; 0x58
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003bd0:	4a73      	ldr	r2, [pc, #460]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003bd2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bd6:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8003bda:	4a71      	ldr	r2, [pc, #452]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003bdc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003be0:	f882 3063 	strb.w	r3, [r2, #99]	; 0x63
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003be4:	4a6e      	ldr	r2, [pc, #440]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003be6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bea:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003bee:	4a6c      	ldr	r2, [pc, #432]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003bf0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003bf4:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8003bf8:	4a69      	ldr	r2, [pc, #420]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003bfa:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003bfe:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003c02:	4a67      	ldr	r2, [pc, #412]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003c04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c06:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8003c0a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003c0c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003c10:	fb02 f203 	mul.w	r2, r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c1a:	4a61      	ldr	r2, [pc, #388]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003c1c:	66d3      	str	r3, [r2, #108]	; 0x6c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8003c1e:	4a61      	ldr	r2, [pc, #388]	; (8003da4 <SX1276SetRxConfig+0x210>)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c26:	617b      	str	r3, [r7, #20]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	0a1b      	lsrs	r3, r3, #8
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	4619      	mov	r1, r3
 8003c30:	2002      	movs	r0, #2
 8003c32:	f000 ff95 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	2003      	movs	r0, #3
 8003c3e:	f000 ff8f 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8003c42:	68b8      	ldr	r0, [r7, #8]
 8003c44:	f001 f8ce 	bl	8004de4 <GetFskBandwidthRegValue>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	2012      	movs	r0, #18
 8003c4e:	f000 ff87 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8003c52:	6a38      	ldr	r0, [r7, #32]
 8003c54:	f001 f8c6 	bl	8004de4 <GetFskBandwidthRegValue>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	2013      	movs	r0, #19
 8003c5e:	f000 ff7f 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003c62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c64:	0a1b      	lsrs	r3, r3, #8
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	2025      	movs	r0, #37	; 0x25
 8003c6e:	f000 ff77 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	4619      	mov	r1, r3
 8003c78:	2026      	movs	r0, #38	; 0x26
 8003c7a:	f000 ff71 	bl	8004b60 <SX1276Write>
            if( fixLen == 1 )
 8003c7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d006      	beq.n	8003c94 <SX1276SetRxConfig+0x100>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8003c86:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	2032      	movs	r0, #50	; 0x32
 8003c8e:	f000 ff67 	bl	8004b60 <SX1276Write>
 8003c92:	e003      	b.n	8003c9c <SX1276SetRxConfig+0x108>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8003c94:	21ff      	movs	r1, #255	; 0xff
 8003c96:	2032      	movs	r0, #50	; 0x32
 8003c98:	f000 ff62 	bl	8004b60 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8003c9c:	2030      	movs	r0, #48	; 0x30
 8003c9e:	f000 ff6f 	bl	8004b80 <SX1276Read>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8003ca6:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003caa:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003cac:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003cb0:	2a00      	cmp	r2, #0
 8003cb2:	d001      	beq.n	8003cb8 <SX1276SetRxConfig+0x124>
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	e001      	b.n	8003cbc <SX1276SetRxConfig+0x128>
 8003cb8:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8003cc0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003cc4:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003cc6:	b25b      	sxtb	r3, r3
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	4619      	mov	r1, r3
 8003cd0:	2030      	movs	r0, #48	; 0x30
 8003cd2:	f000 ff45 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003cd6:	2031      	movs	r0, #49	; 0x31
 8003cd8:	f000 ff52 	bl	8004b80 <SX1276Read>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	2031      	movs	r0, #49	; 0x31
 8003ce8:	f000 ff3a 	bl	8004b60 <SX1276Write>
        break;
 8003cec:	e12b      	b.n	8003f46 <SX1276SetRxConfig+0x3b2>
            if( bandwidth > 2 )
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d900      	bls.n	8003cf6 <SX1276SetRxConfig+0x162>
                while( 1 );
 8003cf4:	e7fe      	b.n	8003cf4 <SX1276SetRxConfig+0x160>
            bandwidth += 7;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	3307      	adds	r3, #7
 8003cfa:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003cfc:	4a28      	ldr	r2, [pc, #160]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8003d04:	4a26      	ldr	r2, [pc, #152]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8003d0c:	4a24      	ldr	r2, [pc, #144]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d0e:	7bbb      	ldrb	r3, [r7, #14]
 8003d10:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003d14:	4a22      	ldr	r2, [pc, #136]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d18:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003d1c:	4a20      	ldr	r2, [pc, #128]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d1e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d22:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8003d26:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d28:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d2c:	f882 3091 	strb.w	r3, [r2, #145]	; 0x91
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003d30:	4a1b      	ldr	r2, [pc, #108]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d32:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d36:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8003d3a:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d3c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003d40:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003d44:	4a16      	ldr	r2, [pc, #88]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d46:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003d4a:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8003d4e:	4a14      	ldr	r2, [pc, #80]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d50:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003d54:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003d58:	4a11      	ldr	r2, [pc, #68]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003d5e:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
            if( datarate > 12 )
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	d902      	bls.n	8003d6e <SX1276SetRxConfig+0x1da>
                datarate = 12;
 8003d68:	230c      	movs	r3, #12
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e004      	b.n	8003d78 <SX1276SetRxConfig+0x1e4>
            else if( datarate < 6 )
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2b05      	cmp	r3, #5
 8003d72:	d801      	bhi.n	8003d78 <SX1276SetRxConfig+0x1e4>
                datarate = 6;
 8003d74:	2306      	movs	r3, #6
 8003d76:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b07      	cmp	r3, #7
 8003d7c:	d105      	bne.n	8003d8a <SX1276SetRxConfig+0x1f6>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b0b      	cmp	r3, #11
 8003d82:	d008      	beq.n	8003d96 <SX1276SetRxConfig+0x202>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b0c      	cmp	r3, #12
 8003d88:	d005      	beq.n	8003d96 <SX1276SetRxConfig+0x202>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b08      	cmp	r3, #8
 8003d8e:	d10b      	bne.n	8003da8 <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b0c      	cmp	r3, #12
 8003d94:	d108      	bne.n	8003da8 <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003d96:	4b02      	ldr	r3, [pc, #8]	; (8003da0 <SX1276SetRxConfig+0x20c>)
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8003d9e:	e007      	b.n	8003db0 <SX1276SetRxConfig+0x21c>
 8003da0:	200002ec 	.word	0x200002ec
 8003da4:	01e84800 	.word	0x01e84800
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003da8:	4b69      	ldr	r3, [pc, #420]	; (8003f50 <SX1276SetRxConfig+0x3bc>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8003db0:	201d      	movs	r0, #29
 8003db2:	f000 fee5 	bl	8004b80 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	b2da      	uxtb	r2, r3
 8003dbe:	7bbb      	ldrb	r3, [r7, #14]
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003dc8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	201d      	movs	r0, #29
 8003dd4:	f000 fec4 	bl	8004b60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8003dd8:	201e      	movs	r0, #30
 8003dda:	f000 fed1 	bl	8004b80 <SX1276Read>
 8003dde:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003df2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003dfe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e00:	0a1b      	lsrs	r3, r3, #8
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f003 0303 	and.w	r3, r3, #3
 8003e0a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	4619      	mov	r1, r3
 8003e12:	201e      	movs	r0, #30
 8003e14:	f000 fea4 	bl	8004b60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003e18:	2026      	movs	r0, #38	; 0x26
 8003e1a:	f000 feb1 	bl	8004b80 <SX1276Read>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	b25b      	sxtb	r3, r3
 8003e22:	f023 0308 	bic.w	r3, r3, #8
 8003e26:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003e28:	4b49      	ldr	r3, [pc, #292]	; (8003f50 <SX1276SetRxConfig+0x3bc>)
 8003e2a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003e2e:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8003e30:	b25b      	sxtb	r3, r3
 8003e32:	4313      	orrs	r3, r2
 8003e34:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	4619      	mov	r1, r3
 8003e3a:	2026      	movs	r0, #38	; 0x26
 8003e3c:	f000 fe90 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003e40:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	4619      	mov	r1, r3
 8003e46:	201f      	movs	r0, #31
 8003e48:	f000 fe8a 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003e4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	4619      	mov	r1, r3
 8003e56:	2020      	movs	r0, #32
 8003e58:	f000 fe82 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003e5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	4619      	mov	r1, r3
 8003e62:	2021      	movs	r0, #33	; 0x21
 8003e64:	f000 fe7c 	bl	8004b60 <SX1276Write>
            if( fixLen == 1 )
 8003e68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d005      	beq.n	8003e7c <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8003e70:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003e74:	4619      	mov	r1, r3
 8003e76:	2022      	movs	r0, #34	; 0x22
 8003e78:	f000 fe72 	bl	8004b60 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003e7c:	4b34      	ldr	r3, [pc, #208]	; (8003f50 <SX1276SetRxConfig+0x3bc>)
 8003e7e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d011      	beq.n	8003eaa <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003e86:	2044      	movs	r0, #68	; 0x44
 8003e88:	f000 fe7a 	bl	8004b80 <SX1276Read>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	4619      	mov	r1, r3
 8003e96:	2044      	movs	r0, #68	; 0x44
 8003e98:	f000 fe62 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8003e9c:	4b2c      	ldr	r3, [pc, #176]	; (8003f50 <SX1276SetRxConfig+0x3bc>)
 8003e9e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	2024      	movs	r0, #36	; 0x24
 8003ea6:	f000 fe5b 	bl	8004b60 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	2b09      	cmp	r3, #9
 8003eae:	d10d      	bne.n	8003ecc <SX1276SetRxConfig+0x338>
 8003eb0:	4b27      	ldr	r3, [pc, #156]	; (8003f50 <SX1276SetRxConfig+0x3bc>)
 8003eb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003eb4:	4a27      	ldr	r2, [pc, #156]	; (8003f54 <SX1276SetRxConfig+0x3c0>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d908      	bls.n	8003ecc <SX1276SetRxConfig+0x338>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8003eba:	2102      	movs	r1, #2
 8003ebc:	2036      	movs	r0, #54	; 0x36
 8003ebe:	f000 fe4f 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8003ec2:	2164      	movs	r1, #100	; 0x64
 8003ec4:	203a      	movs	r0, #58	; 0x3a
 8003ec6:	f000 fe4b 	bl	8004b60 <SX1276Write>
 8003eca:	e00f      	b.n	8003eec <SX1276SetRxConfig+0x358>
            else if( bandwidth == 9 )
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b09      	cmp	r3, #9
 8003ed0:	d108      	bne.n	8003ee4 <SX1276SetRxConfig+0x350>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8003ed2:	2102      	movs	r1, #2
 8003ed4:	2036      	movs	r0, #54	; 0x36
 8003ed6:	f000 fe43 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8003eda:	217f      	movs	r1, #127	; 0x7f
 8003edc:	203a      	movs	r0, #58	; 0x3a
 8003ede:	f000 fe3f 	bl	8004b60 <SX1276Write>
 8003ee2:	e003      	b.n	8003eec <SX1276SetRxConfig+0x358>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8003ee4:	2103      	movs	r1, #3
 8003ee6:	2036      	movs	r0, #54	; 0x36
 8003ee8:	f000 fe3a 	bl	8004b60 <SX1276Write>
            if( datarate == 6 )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b06      	cmp	r3, #6
 8003ef0:	d114      	bne.n	8003f1c <SX1276SetRxConfig+0x388>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003ef2:	2031      	movs	r0, #49	; 0x31
 8003ef4:	f000 fe44 	bl	8004b80 <SX1276Read>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	b25b      	sxtb	r3, r3
 8003efc:	f023 0307 	bic.w	r3, r3, #7
 8003f00:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003f02:	f043 0305 	orr.w	r3, r3, #5
 8003f06:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	2031      	movs	r0, #49	; 0x31
 8003f0e:	f000 fe27 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003f12:	210c      	movs	r1, #12
 8003f14:	2037      	movs	r0, #55	; 0x37
 8003f16:	f000 fe23 	bl	8004b60 <SX1276Write>
        break;
 8003f1a:	e013      	b.n	8003f44 <SX1276SetRxConfig+0x3b0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003f1c:	2031      	movs	r0, #49	; 0x31
 8003f1e:	f000 fe2f 	bl	8004b80 <SX1276Read>
 8003f22:	4603      	mov	r3, r0
 8003f24:	b25b      	sxtb	r3, r3
 8003f26:	f023 0307 	bic.w	r3, r3, #7
 8003f2a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003f2c:	f043 0303 	orr.w	r3, r3, #3
 8003f30:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003f32:	b2db      	uxtb	r3, r3
 8003f34:	4619      	mov	r1, r3
 8003f36:	2031      	movs	r0, #49	; 0x31
 8003f38:	f000 fe12 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003f3c:	210a      	movs	r1, #10
 8003f3e:	2037      	movs	r0, #55	; 0x37
 8003f40:	f000 fe0e 	bl	8004b60 <SX1276Write>
        break;
 8003f44:	bf00      	nop
}
 8003f46:	bf00      	nop
 8003f48:	3718      	adds	r7, #24
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	200002ec 	.word	0x200002ec
 8003f54:	1f4add40 	.word	0x1f4add40

08003f58 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60ba      	str	r2, [r7, #8]
 8003f60:	607b      	str	r3, [r7, #4]
 8003f62:	4603      	mov	r3, r0
 8003f64:	73fb      	strb	r3, [r7, #15]
 8003f66:	460b      	mov	r3, r1
 8003f68:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8003f6a:	7bfb      	ldrb	r3, [r7, #15]
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fd9f 	bl	8004ab0 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8003f72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f76:	4618      	mov	r0, r3
 8003f78:	f002 fb42 	bl	8006600 <SX1276SetRfTxPower>

    switch( modem )
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d002      	beq.n	8003f88 <SX1276SetTxConfig+0x30>
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d07d      	beq.n	8004082 <SX1276SetTxConfig+0x12a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8003f86:	e16a      	b.n	800425e <SX1276SetTxConfig+0x306>
            SX1276.Settings.Fsk.Power = power;
 8003f88:	4ab7      	ldr	r2, [pc, #732]	; (8004268 <SX1276SetTxConfig+0x310>)
 8003f8a:	7bbb      	ldrb	r3, [r7, #14]
 8003f8c:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            SX1276.Settings.Fsk.Fdev = fdev;
 8003f90:	4ab5      	ldr	r2, [pc, #724]	; (8004268 <SX1276SetTxConfig+0x310>)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6513      	str	r3, [r2, #80]	; 0x50
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003f96:	4ab4      	ldr	r2, [pc, #720]	; (8004268 <SX1276SetTxConfig+0x310>)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8003f9c:	4ab2      	ldr	r2, [pc, #712]	; (8004268 <SX1276SetTxConfig+0x310>)
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003fa2:	4ab1      	ldr	r2, [pc, #708]	; (8004268 <SX1276SetTxConfig+0x310>)
 8003fa4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003fa6:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003faa:	4aaf      	ldr	r2, [pc, #700]	; (8004268 <SX1276SetTxConfig+0x310>)
 8003fac:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003fb0:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003fb4:	4aac      	ldr	r2, [pc, #688]	; (8004268 <SX1276SetTxConfig+0x310>)
 8003fb6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fba:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003fbe:	4aaa      	ldr	r2, [pc, #680]	; (8004268 <SX1276SetTxConfig+0x310>)
 8003fc0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003fc4:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8003fc8:	4aa7      	ldr	r2, [pc, #668]	; (8004268 <SX1276SetTxConfig+0x310>)
 8003fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fcc:	6693      	str	r3, [r2, #104]	; 0x68
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8003fce:	68b8      	ldr	r0, [r7, #8]
 8003fd0:	f000 fee2 	bl	8004d98 <SX1276ConvertFreqInHzToPllStep>
 8003fd4:	6178      	str	r0, [r7, #20]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	0a1b      	lsrs	r3, r3, #8
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	4619      	mov	r1, r3
 8003fde:	2004      	movs	r0, #4
 8003fe0:	f000 fdbe 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	4619      	mov	r1, r3
 8003fea:	2005      	movs	r0, #5
 8003fec:	f000 fdb8 	bl	8004b60 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8003ff0:	4a9e      	ldr	r2, [pc, #632]	; (800426c <SX1276SetTxConfig+0x314>)
 8003ff2:	6a3b      	ldr	r3, [r7, #32]
 8003ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff8:	613b      	str	r3, [r7, #16]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	4619      	mov	r1, r3
 8004002:	2002      	movs	r0, #2
 8004004:	f000 fdac 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	b2db      	uxtb	r3, r3
 800400c:	4619      	mov	r1, r3
 800400e:	2003      	movs	r0, #3
 8004010:	f000 fda6 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8004014:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b29b      	uxth	r3, r3
 800401a:	b2db      	uxtb	r3, r3
 800401c:	4619      	mov	r1, r3
 800401e:	2025      	movs	r0, #37	; 0x25
 8004020:	f000 fd9e 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8004024:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004026:	b2db      	uxtb	r3, r3
 8004028:	4619      	mov	r1, r3
 800402a:	2026      	movs	r0, #38	; 0x26
 800402c:	f000 fd98 	bl	8004b60 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004030:	2030      	movs	r0, #48	; 0x30
 8004032:	f000 fda5 	bl	8004b80 <SX1276Read>
 8004036:	4603      	mov	r3, r0
 8004038:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800403a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800403e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004040:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004044:	2a00      	cmp	r2, #0
 8004046:	d001      	beq.n	800404c <SX1276SetTxConfig+0xf4>
 8004048:	2200      	movs	r2, #0
 800404a:	e001      	b.n	8004050 <SX1276SetTxConfig+0xf8>
 800404c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8004050:	4313      	orrs	r3, r2
 8004052:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8004054:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004058:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800405a:	b25b      	sxtb	r3, r3
 800405c:	4313      	orrs	r3, r2
 800405e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8004060:	b2db      	uxtb	r3, r3
 8004062:	4619      	mov	r1, r3
 8004064:	2030      	movs	r0, #48	; 0x30
 8004066:	f000 fd7b 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800406a:	2031      	movs	r0, #49	; 0x31
 800406c:	f000 fd88 	bl	8004b80 <SX1276Read>
 8004070:	4603      	mov	r3, r0
 8004072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004076:	b2db      	uxtb	r3, r3
 8004078:	4619      	mov	r1, r3
 800407a:	2031      	movs	r0, #49	; 0x31
 800407c:	f000 fd70 	bl	8004b60 <SX1276Write>
        break;
 8004080:	e0ed      	b.n	800425e <SX1276SetTxConfig+0x306>
            SX1276.Settings.LoRa.Power = power;
 8004082:	4a79      	ldr	r2, [pc, #484]	; (8004268 <SX1276SetTxConfig+0x310>)
 8004084:	7bbb      	ldrb	r3, [r7, #14]
 8004086:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
            if( bandwidth > 2 )
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b02      	cmp	r3, #2
 800408e:	d900      	bls.n	8004092 <SX1276SetTxConfig+0x13a>
                while( 1 );
 8004090:	e7fe      	b.n	8004090 <SX1276SetTxConfig+0x138>
            bandwidth += 7;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	3307      	adds	r3, #7
 8004096:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004098:	4a73      	ldr	r2, [pc, #460]	; (8004268 <SX1276SetTxConfig+0x310>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 80040a0:	4a71      	ldr	r2, [pc, #452]	; (8004268 <SX1276SetTxConfig+0x310>)
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 80040a8:	4a6f      	ldr	r2, [pc, #444]	; (8004268 <SX1276SetTxConfig+0x310>)
 80040aa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80040ae:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 80040b2:	4a6d      	ldr	r2, [pc, #436]	; (8004268 <SX1276SetTxConfig+0x310>)
 80040b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040b6:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 80040ba:	4a6b      	ldr	r2, [pc, #428]	; (8004268 <SX1276SetTxConfig+0x310>)
 80040bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040c0:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80040c4:	4a68      	ldr	r2, [pc, #416]	; (8004268 <SX1276SetTxConfig+0x310>)
 80040c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80040ca:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80040ce:	4a66      	ldr	r2, [pc, #408]	; (8004268 <SX1276SetTxConfig+0x310>)
 80040d0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80040d4:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80040d8:	4a63      	ldr	r2, [pc, #396]	; (8004268 <SX1276SetTxConfig+0x310>)
 80040da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040de:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80040e2:	4a61      	ldr	r2, [pc, #388]	; (8004268 <SX1276SetTxConfig+0x310>)
 80040e4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80040e8:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80040ec:	4a5e      	ldr	r2, [pc, #376]	; (8004268 <SX1276SetTxConfig+0x310>)
 80040ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
            if( datarate > 12 )
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2b0c      	cmp	r3, #12
 80040f8:	d902      	bls.n	8004100 <SX1276SetTxConfig+0x1a8>
                datarate = 12;
 80040fa:	230c      	movs	r3, #12
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	e004      	b.n	800410a <SX1276SetTxConfig+0x1b2>
            else if( datarate < 6 )
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	2b05      	cmp	r3, #5
 8004104:	d801      	bhi.n	800410a <SX1276SetTxConfig+0x1b2>
                datarate = 6;
 8004106:	2306      	movs	r3, #6
 8004108:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b07      	cmp	r3, #7
 800410e:	d105      	bne.n	800411c <SX1276SetTxConfig+0x1c4>
 8004110:	6a3b      	ldr	r3, [r7, #32]
 8004112:	2b0b      	cmp	r3, #11
 8004114:	d008      	beq.n	8004128 <SX1276SetTxConfig+0x1d0>
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	2b0c      	cmp	r3, #12
 800411a:	d005      	beq.n	8004128 <SX1276SetTxConfig+0x1d0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b08      	cmp	r3, #8
 8004120:	d107      	bne.n	8004132 <SX1276SetTxConfig+0x1da>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	d104      	bne.n	8004132 <SX1276SetTxConfig+0x1da>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8004128:	4b4f      	ldr	r3, [pc, #316]	; (8004268 <SX1276SetTxConfig+0x310>)
 800412a:	2201      	movs	r2, #1
 800412c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8004130:	e003      	b.n	800413a <SX1276SetTxConfig+0x1e2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004132:	4b4d      	ldr	r3, [pc, #308]	; (8004268 <SX1276SetTxConfig+0x310>)
 8004134:	2200      	movs	r2, #0
 8004136:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800413a:	4b4b      	ldr	r3, [pc, #300]	; (8004268 <SX1276SetTxConfig+0x310>)
 800413c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004140:	2b00      	cmp	r3, #0
 8004142:	d011      	beq.n	8004168 <SX1276SetTxConfig+0x210>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8004144:	2044      	movs	r0, #68	; 0x44
 8004146:	f000 fd1b 	bl	8004b80 <SX1276Read>
 800414a:	4603      	mov	r3, r0
 800414c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004150:	b2db      	uxtb	r3, r3
 8004152:	4619      	mov	r1, r3
 8004154:	2044      	movs	r0, #68	; 0x44
 8004156:	f000 fd03 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800415a:	4b43      	ldr	r3, [pc, #268]	; (8004268 <SX1276SetTxConfig+0x310>)
 800415c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004160:	4619      	mov	r1, r3
 8004162:	2024      	movs	r0, #36	; 0x24
 8004164:	f000 fcfc 	bl	8004b60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004168:	201d      	movs	r0, #29
 800416a:	f000 fd09 	bl	8004b80 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	b2da      	uxtb	r2, r3
 8004176:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	b2db      	uxtb	r3, r3
 800417e:	4313      	orrs	r3, r2
 8004180:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004182:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004186:	4313      	orrs	r3, r2
 8004188:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800418a:	4619      	mov	r1, r3
 800418c:	201d      	movs	r0, #29
 800418e:	f000 fce7 	bl	8004b60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8004192:	201e      	movs	r0, #30
 8004194:	f000 fcf4 	bl	8004b80 <SX1276Read>
 8004198:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800419a:	f003 030b 	and.w	r3, r3, #11
 800419e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 80041a8:	4313      	orrs	r3, r2
 80041aa:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 80041ac:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 80041b4:	4313      	orrs	r3, r2
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	4619      	mov	r1, r3
 80041ba:	201e      	movs	r0, #30
 80041bc:	f000 fcd0 	bl	8004b60 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80041c0:	2026      	movs	r0, #38	; 0x26
 80041c2:	f000 fcdd 	bl	8004b80 <SX1276Read>
 80041c6:	4603      	mov	r3, r0
 80041c8:	b25b      	sxtb	r3, r3
 80041ca:	f023 0308 	bic.w	r3, r3, #8
 80041ce:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80041d0:	4b25      	ldr	r3, [pc, #148]	; (8004268 <SX1276SetTxConfig+0x310>)
 80041d2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80041d6:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80041d8:	b25b      	sxtb	r3, r3
 80041da:	4313      	orrs	r3, r2
 80041dc:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80041de:	b2db      	uxtb	r3, r3
 80041e0:	4619      	mov	r1, r3
 80041e2:	2026      	movs	r0, #38	; 0x26
 80041e4:	f000 fcbc 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80041e8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	4619      	mov	r1, r3
 80041f2:	2020      	movs	r0, #32
 80041f4:	f000 fcb4 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80041f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	4619      	mov	r1, r3
 80041fe:	2021      	movs	r0, #33	; 0x21
 8004200:	f000 fcae 	bl	8004b60 <SX1276Write>
            if( datarate == 6 )
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	2b06      	cmp	r3, #6
 8004208:	d114      	bne.n	8004234 <SX1276SetTxConfig+0x2dc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800420a:	2031      	movs	r0, #49	; 0x31
 800420c:	f000 fcb8 	bl	8004b80 <SX1276Read>
 8004210:	4603      	mov	r3, r0
 8004212:	b25b      	sxtb	r3, r3
 8004214:	f023 0307 	bic.w	r3, r3, #7
 8004218:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800421a:	f043 0305 	orr.w	r3, r3, #5
 800421e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004220:	b2db      	uxtb	r3, r3
 8004222:	4619      	mov	r1, r3
 8004224:	2031      	movs	r0, #49	; 0x31
 8004226:	f000 fc9b 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800422a:	210c      	movs	r1, #12
 800422c:	2037      	movs	r0, #55	; 0x37
 800422e:	f000 fc97 	bl	8004b60 <SX1276Write>
        break;
 8004232:	e013      	b.n	800425c <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004234:	2031      	movs	r0, #49	; 0x31
 8004236:	f000 fca3 	bl	8004b80 <SX1276Read>
 800423a:	4603      	mov	r3, r0
 800423c:	b25b      	sxtb	r3, r3
 800423e:	f023 0307 	bic.w	r3, r3, #7
 8004242:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004244:	f043 0303 	orr.w	r3, r3, #3
 8004248:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800424a:	b2db      	uxtb	r3, r3
 800424c:	4619      	mov	r1, r3
 800424e:	2031      	movs	r0, #49	; 0x31
 8004250:	f000 fc86 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004254:	210a      	movs	r1, #10
 8004256:	2037      	movs	r0, #55	; 0x37
 8004258:	f000 fc82 	bl	8004b60 <SX1276Write>
        break;
 800425c:	bf00      	nop
}
 800425e:	bf00      	nop
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200002ec 	.word	0x200002ec
 800426c:	01e84800 	.word	0x01e84800

08004270 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af04      	add	r7, sp, #16
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	461a      	mov	r2, r3
 800427c:	4603      	mov	r3, r0
 800427e:	73fb      	strb	r3, [r7, #15]
 8004280:	4613      	mov	r3, r2
 8004282:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8004284:	2300      	movs	r3, #0
 8004286:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8004288:	2301      	movs	r3, #1
 800428a:	613b      	str	r3, [r7, #16]

    switch( modem )
 800428c:	7bfb      	ldrb	r3, [r7, #15]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <SX1276GetTimeOnAir+0x28>
 8004292:	2b01      	cmp	r3, #1
 8004294:	d012      	beq.n	80042bc <SX1276GetTimeOnAir+0x4c>
 8004296:	e02c      	b.n	80042f2 <SX1276GetTimeOnAir+0x82>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8004298:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800429c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80042a0:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80042a4:	8c38      	ldrh	r0, [r7, #32]
 80042a6:	f000 fdef 	bl	8004e88 <SX1276GetGfskTimeOnAirNumerator>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042b0:	fb02 f303 	mul.w	r3, r2, r3
 80042b4:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	613b      	str	r3, [r7, #16]
        }
        break;
 80042ba:	e01a      	b.n	80042f2 <SX1276GetTimeOnAir+0x82>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 80042bc:	8c39      	ldrh	r1, [r7, #32]
 80042be:	7bba      	ldrb	r2, [r7, #14]
 80042c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042c4:	9302      	str	r3, [sp, #8]
 80042c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	460b      	mov	r3, r1
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	68b8      	ldr	r0, [r7, #8]
 80042d8:	f000 fe05 	bl	8004ee6 <SX1276GetLoRaTimeOnAirNumerator>
 80042dc:	4603      	mov	r3, r0
 80042de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042e2:	fb02 f303 	mul.w	r3, r2, r3
 80042e6:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 80042e8:	68b8      	ldr	r0, [r7, #8]
 80042ea:	f000 fda5 	bl	8004e38 <SX1276GetLoRaBandwidthInHz>
 80042ee:	6138      	str	r0, [r7, #16]
        }
        break;
 80042f0:	bf00      	nop
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	1e5a      	subs	r2, r3, #1
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 8004314:	2300      	movs	r3, #0
 8004316:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8004318:	4b54      	ldr	r3, [pc, #336]	; (800446c <SX1276Send+0x164>)
 800431a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800431e:	2b00      	cmp	r3, #0
 8004320:	d002      	beq.n	8004328 <SX1276Send+0x20>
 8004322:	2b01      	cmp	r3, #1
 8004324:	d049      	beq.n	80043ba <SX1276Send+0xb2>
 8004326:	e099      	b.n	800445c <SX1276Send+0x154>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <SX1276Send+0x164>)
 800432a:	2200      	movs	r2, #0
 800432c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = size;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	b29a      	uxth	r2, r3
 8004334:	4b4d      	ldr	r3, [pc, #308]	; (800446c <SX1276Send+0x164>)
 8004336:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

            if( SX1276.Settings.Fsk.FixLen == false )
 800433a:	4b4c      	ldr	r3, [pc, #304]	; (800446c <SX1276Send+0x164>)
 800433c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004340:	f083 0301 	eor.w	r3, r3, #1
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d005      	beq.n	8004356 <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800434a:	1cfb      	adds	r3, r7, #3
 800434c:	2101      	movs	r1, #1
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fc90 	bl	8004c74 <SX1276WriteFifo>
 8004354:	e004      	b.n	8004360 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	4619      	mov	r1, r3
 800435a:	2032      	movs	r0, #50	; 0x32
 800435c:	f000 fc00 	bl	8004b60 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <SX1276Send+0x6e>
 8004366:	78fb      	ldrb	r3, [r7, #3]
 8004368:	2b40      	cmp	r3, #64	; 0x40
 800436a:	d804      	bhi.n	8004376 <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <SX1276Send+0x164>)
 8004370:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8004374:	e00a      	b.n	800438c <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	b29b      	uxth	r3, r3
 800437a:	461a      	mov	r2, r3
 800437c:	6879      	ldr	r1, [r7, #4]
 800437e:	483c      	ldr	r0, [pc, #240]	; (8004470 <SX1276Send+0x168>)
 8004380:	f002 fcde 	bl	8006d40 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8004384:	4b39      	ldr	r3, [pc, #228]	; (800446c <SX1276Send+0x164>)
 8004386:	2220      	movs	r2, #32
 8004388:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800438c:	4b37      	ldr	r3, [pc, #220]	; (800446c <SX1276Send+0x164>)
 800438e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 fc6d 	bl	8004c74 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800439a:	4b34      	ldr	r3, [pc, #208]	; (800446c <SX1276Send+0x164>)
 800439c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 80043a0:	4b32      	ldr	r3, [pc, #200]	; (800446c <SX1276Send+0x164>)
 80043a2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80043a6:	b29b      	uxth	r3, r3
 80043a8:	4413      	add	r3, r2
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	4b2f      	ldr	r3, [pc, #188]	; (800446c <SX1276Send+0x164>)
 80043ae:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 80043b2:	4b2e      	ldr	r3, [pc, #184]	; (800446c <SX1276Send+0x164>)
 80043b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80043b8:	e050      	b.n	800445c <SX1276Send+0x154>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80043ba:	4b2c      	ldr	r3, [pc, #176]	; (800446c <SX1276Send+0x164>)
 80043bc:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00f      	beq.n	80043e4 <SX1276Send+0xdc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80043c4:	2033      	movs	r0, #51	; 0x33
 80043c6:	f000 fbdb 	bl	8004b80 <SX1276Read>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	4619      	mov	r1, r3
 80043d4:	2033      	movs	r0, #51	; 0x33
 80043d6:	f000 fbc3 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80043da:	2119      	movs	r1, #25
 80043dc:	203b      	movs	r0, #59	; 0x3b
 80043de:	f000 fbbf 	bl	8004b60 <SX1276Write>
 80043e2:	e013      	b.n	800440c <SX1276Send+0x104>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80043e4:	2033      	movs	r0, #51	; 0x33
 80043e6:	f000 fbcb 	bl	8004b80 <SX1276Read>
 80043ea:	4603      	mov	r3, r0
 80043ec:	b25b      	sxtb	r3, r3
 80043ee:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80043f2:	b25b      	sxtb	r3, r3
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	4619      	mov	r1, r3
 80043fe:	2033      	movs	r0, #51	; 0x33
 8004400:	f000 fbae 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004404:	211d      	movs	r1, #29
 8004406:	203b      	movs	r0, #59	; 0x3b
 8004408:	f000 fbaa 	bl	8004b60 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	4b17      	ldr	r3, [pc, #92]	; (800446c <SX1276Send+0x164>)
 8004410:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	4619      	mov	r1, r3
 8004418:	2022      	movs	r0, #34	; 0x22
 800441a:	f000 fba1 	bl	8004b60 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800441e:	2100      	movs	r1, #0
 8004420:	200e      	movs	r0, #14
 8004422:	f000 fb9d 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004426:	2100      	movs	r1, #0
 8004428:	200d      	movs	r0, #13
 800442a:	f000 fb99 	bl	8004b60 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800442e:	2001      	movs	r0, #1
 8004430:	f000 fba6 	bl	8004b80 <SX1276Read>
 8004434:	4603      	mov	r3, r0
 8004436:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800443a:	2b00      	cmp	r3, #0
 800443c:	d104      	bne.n	8004448 <SX1276Send+0x140>
            {
                SX1276SetStby( );
 800443e:	f000 f839 	bl	80044b4 <SX1276SetStby>
                DelayMs( 1 );
 8004442:	2001      	movs	r0, #1
 8004444:	f001 faf4 	bl	8005a30 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8004448:	78fb      	ldrb	r3, [r7, #3]
 800444a:	4619      	mov	r1, r3
 800444c:	6878      	ldr	r0, [r7, #4]
 800444e:	f000 fc11 	bl	8004c74 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <SX1276Send+0x164>)
 8004454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004458:	60fb      	str	r3, [r7, #12]
        }
        break;
 800445a:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f9cb 	bl	80047f8 <SX1276SetTx>
}
 8004462:	bf00      	nop
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	200002ec 	.word	0x200002ec
 8004470:	20000048 	.word	0x20000048

08004474 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8004478:	480a      	ldr	r0, [pc, #40]	; (80044a4 <SX1276SetSleep+0x30>)
 800447a:	f002 fb5d 	bl	8006b38 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800447e:	480a      	ldr	r0, [pc, #40]	; (80044a8 <SX1276SetSleep+0x34>)
 8004480:	f002 fb5a 	bl	8006b38 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8004484:	4809      	ldr	r0, [pc, #36]	; (80044ac <SX1276SetSleep+0x38>)
 8004486:	f002 fb57 	bl	8006b38 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800448a:	2000      	movs	r0, #0
 800448c:	f000 fae4 	bl	8004a58 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    SX1276SetBoardTcxo( false );
 8004490:	2000      	movs	r0, #0
 8004492:	f002 f883 	bl	800659c <SX1276SetBoardTcxo>

    SX1276.Settings.State = RF_IDLE;
 8004496:	4b06      	ldr	r3, [pc, #24]	; (80044b0 <SX1276SetSleep+0x3c>)
 8004498:	2200      	movs	r2, #0
 800449a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800449e:	bf00      	nop
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	20000394 	.word	0x20000394
 80044a8:	200002bc 	.word	0x200002bc
 80044ac:	200002d4 	.word	0x200002d4
 80044b0:	200002ec 	.word	0x200002ec

080044b4 <SX1276SetStby>:

void SX1276SetStby( void )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80044b8:	4808      	ldr	r0, [pc, #32]	; (80044dc <SX1276SetStby+0x28>)
 80044ba:	f002 fb3d 	bl	8006b38 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80044be:	4808      	ldr	r0, [pc, #32]	; (80044e0 <SX1276SetStby+0x2c>)
 80044c0:	f002 fb3a 	bl	8006b38 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80044c4:	4807      	ldr	r0, [pc, #28]	; (80044e4 <SX1276SetStby+0x30>)
 80044c6:	f002 fb37 	bl	8006b38 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80044ca:	2001      	movs	r0, #1
 80044cc:	f000 fac4 	bl	8004a58 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80044d0:	4b05      	ldr	r3, [pc, #20]	; (80044e8 <SX1276SetStby+0x34>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000394 	.word	0x20000394
 80044e0:	200002bc 	.word	0x200002bc
 80044e4:	200002d4 	.word	0x200002d4
 80044e8:	200002ec 	.word	0x200002ec

080044ec <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 80044f4:	2300      	movs	r3, #0
 80044f6:	73fb      	strb	r3, [r7, #15]
    TimerStop( &TxTimeoutTimer );
 80044f8:	48ba      	ldr	r0, [pc, #744]	; (80047e4 <SX1276SetRx+0x2f8>)
 80044fa:	f002 fb1d 	bl	8006b38 <TimerStop>

    switch( SX1276.Settings.Modem )
 80044fe:	4bba      	ldr	r3, [pc, #744]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004500:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004504:	2b00      	cmp	r3, #0
 8004506:	d002      	beq.n	800450e <SX1276SetRx+0x22>
 8004508:	2b01      	cmp	r3, #1
 800450a:	d03e      	beq.n	800458a <SX1276SetRx+0x9e>
 800450c:	e12f      	b.n	800476e <SX1276SetRx+0x282>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800450e:	4bb6      	ldr	r3, [pc, #728]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004510:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004514:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004516:	2040      	movs	r0, #64	; 0x40
 8004518:	f000 fb32 	bl	8004b80 <SX1276Read>
 800451c:	4603      	mov	r3, r0
 800451e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8004526:	f043 030c 	orr.w	r3, r3, #12
 800452a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800452c:	b2db      	uxtb	r3, r3
 800452e:	4619      	mov	r1, r3
 8004530:	2040      	movs	r0, #64	; 0x40
 8004532:	f000 fb15 	bl	8004b60 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004536:	2041      	movs	r0, #65	; 0x41
 8004538:	f000 fb22 	bl	8004b80 <SX1276Read>
 800453c:	4603      	mov	r3, r0
 800453e:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8004542:	b2db      	uxtb	r3, r3
 8004544:	4619      	mov	r1, r3
 8004546:	2041      	movs	r0, #65	; 0x41
 8004548:	f000 fb0a 	bl	8004b60 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800454c:	2035      	movs	r0, #53	; 0x35
 800454e:	f000 fb17 	bl	8004b80 <SX1276Read>
 8004552:	4603      	mov	r3, r0
 8004554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004558:	b2da      	uxtb	r2, r3
 800455a:	4ba3      	ldr	r3, [pc, #652]	; (80047e8 <SX1276SetRx+0x2fc>)
 800455c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8004560:	211e      	movs	r1, #30
 8004562:	200d      	movs	r0, #13
 8004564:	f000 fafc 	bl	8004b60 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004568:	4b9f      	ldr	r3, [pc, #636]	; (80047e8 <SX1276SetRx+0x2fc>)
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004570:	4b9d      	ldr	r3, [pc, #628]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004572:	2200      	movs	r2, #0
 8004574:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004578:	4b9b      	ldr	r3, [pc, #620]	; (80047e8 <SX1276SetRx+0x2fc>)
 800457a:	2200      	movs	r2, #0
 800457c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004580:	4b99      	ldr	r3, [pc, #612]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004582:	2200      	movs	r2, #0
 8004584:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
        }
        break;
 8004588:	e0f1      	b.n	800476e <SX1276SetRx+0x282>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800458a:	4b97      	ldr	r3, [pc, #604]	; (80047e8 <SX1276SetRx+0x2fc>)
 800458c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004590:	2b00      	cmp	r3, #0
 8004592:	d00f      	beq.n	80045b4 <SX1276SetRx+0xc8>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8004594:	2033      	movs	r0, #51	; 0x33
 8004596:	f000 faf3 	bl	8004b80 <SX1276Read>
 800459a:	4603      	mov	r3, r0
 800459c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	4619      	mov	r1, r3
 80045a4:	2033      	movs	r0, #51	; 0x33
 80045a6:	f000 fadb 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80045aa:	2119      	movs	r1, #25
 80045ac:	203b      	movs	r0, #59	; 0x3b
 80045ae:	f000 fad7 	bl	8004b60 <SX1276Write>
 80045b2:	e013      	b.n	80045dc <SX1276SetRx+0xf0>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80045b4:	2033      	movs	r0, #51	; 0x33
 80045b6:	f000 fae3 	bl	8004b80 <SX1276Read>
 80045ba:	4603      	mov	r3, r0
 80045bc:	b25b      	sxtb	r3, r3
 80045be:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	b25b      	sxtb	r3, r3
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	4619      	mov	r1, r3
 80045ce:	2033      	movs	r0, #51	; 0x33
 80045d0:	f000 fac6 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80045d4:	211d      	movs	r1, #29
 80045d6:	203b      	movs	r0, #59	; 0x3b
 80045d8:	f000 fac2 	bl	8004b60 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80045dc:	4b82      	ldr	r3, [pc, #520]	; (80047e8 <SX1276SetRx+0x2fc>)
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e2:	2b08      	cmp	r3, #8
 80045e4:	f200 8087 	bhi.w	80046f6 <SX1276SetRx+0x20a>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80045e8:	2031      	movs	r0, #49	; 0x31
 80045ea:	f000 fac9 	bl	8004b80 <SX1276Read>
 80045ee:	4603      	mov	r3, r0
 80045f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4619      	mov	r1, r3
 80045f8:	2031      	movs	r0, #49	; 0x31
 80045fa:	f000 fab1 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80045fe:	2100      	movs	r1, #0
 8004600:	2030      	movs	r0, #48	; 0x30
 8004602:	f000 faad 	bl	8004b60 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8004606:	4b78      	ldr	r3, [pc, #480]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	2b08      	cmp	r3, #8
 800460e:	d87d      	bhi.n	800470c <SX1276SetRx+0x220>
 8004610:	a201      	add	r2, pc, #4	; (adr r2, 8004618 <SX1276SetRx+0x12c>)
 8004612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004616:	bf00      	nop
 8004618:	0800463d 	.word	0x0800463d
 800461c:	08004657 	.word	0x08004657
 8004620:	08004671 	.word	0x08004671
 8004624:	0800468b 	.word	0x0800468b
 8004628:	080046a5 	.word	0x080046a5
 800462c:	080046bf 	.word	0x080046bf
 8004630:	080046d9 	.word	0x080046d9
 8004634:	080046e3 	.word	0x080046e3
 8004638:	080046ed 	.word	0x080046ed
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800463c:	2148      	movs	r1, #72	; 0x48
 800463e:	202f      	movs	r0, #47	; 0x2f
 8004640:	f000 fa8e 	bl	8004b60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8004644:	4b68      	ldr	r3, [pc, #416]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004648:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800464c:	3302      	adds	r3, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff f9a6 	bl	80039a0 <SX1276SetChannel>
                    break;
 8004654:	e05a      	b.n	800470c <SX1276SetRx+0x220>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004656:	2144      	movs	r1, #68	; 0x44
 8004658:	202f      	movs	r0, #47	; 0x2f
 800465a:	f000 fa81 	bl	8004b60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800465e:	4b62      	ldr	r3, [pc, #392]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004662:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004666:	3334      	adds	r3, #52	; 0x34
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff f999 	bl	80039a0 <SX1276SetChannel>
                    break;
 800466e:	e04d      	b.n	800470c <SX1276SetRx+0x220>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004670:	2144      	movs	r1, #68	; 0x44
 8004672:	202f      	movs	r0, #47	; 0x2f
 8004674:	f000 fa74 	bl	8004b60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8004678:	4b5b      	ldr	r3, [pc, #364]	; (80047e8 <SX1276SetRx+0x2fc>)
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8004680:	3304      	adds	r3, #4
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff f98c 	bl	80039a0 <SX1276SetChannel>
                    break;
 8004688:	e040      	b.n	800470c <SX1276SetRx+0x220>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800468a:	2144      	movs	r1, #68	; 0x44
 800468c:	202f      	movs	r0, #47	; 0x2f
 800468e:	f000 fa67 	bl	8004b60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8004692:	4b55      	ldr	r3, [pc, #340]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004694:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004696:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 800469a:	335e      	adds	r3, #94	; 0x5e
 800469c:	4618      	mov	r0, r3
 800469e:	f7ff f97f 	bl	80039a0 <SX1276SetChannel>
                    break;
 80046a2:	e033      	b.n	800470c <SX1276SetRx+0x220>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80046a4:	2144      	movs	r1, #68	; 0x44
 80046a6:	202f      	movs	r0, #47	; 0x2f
 80046a8:	f000 fa5a 	bl	8004b60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 80046ac:	4b4e      	ldr	r3, [pc, #312]	; (80047e8 <SX1276SetRx+0x2fc>)
 80046ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b0:	f503 43f4 	add.w	r3, r3, #31232	; 0x7a00
 80046b4:	3312      	adds	r3, #18
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff f972 	bl	80039a0 <SX1276SetChannel>
                    break;
 80046bc:	e026      	b.n	800470c <SX1276SetRx+0x220>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80046be:	2144      	movs	r1, #68	; 0x44
 80046c0:	202f      	movs	r0, #47	; 0x2f
 80046c2:	f000 fa4d 	bl	8004b60 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80046c6:	4b48      	ldr	r3, [pc, #288]	; (80047e8 <SX1276SetRx+0x2fc>)
 80046c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ca:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 80046ce:	33c6      	adds	r3, #198	; 0xc6
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7ff f965 	bl	80039a0 <SX1276SetChannel>
                    break;
 80046d6:	e019      	b.n	800470c <SX1276SetRx+0x220>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80046d8:	2140      	movs	r1, #64	; 0x40
 80046da:	202f      	movs	r0, #47	; 0x2f
 80046dc:	f000 fa40 	bl	8004b60 <SX1276Write>
                    break;
 80046e0:	e014      	b.n	800470c <SX1276SetRx+0x220>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80046e2:	2140      	movs	r1, #64	; 0x40
 80046e4:	202f      	movs	r0, #47	; 0x2f
 80046e6:	f000 fa3b 	bl	8004b60 <SX1276Write>
                    break;
 80046ea:	e00f      	b.n	800470c <SX1276SetRx+0x220>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80046ec:	2140      	movs	r1, #64	; 0x40
 80046ee:	202f      	movs	r0, #47	; 0x2f
 80046f0:	f000 fa36 	bl	8004b60 <SX1276Write>
                    break;
 80046f4:	e00a      	b.n	800470c <SX1276SetRx+0x220>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80046f6:	2031      	movs	r0, #49	; 0x31
 80046f8:	f000 fa42 	bl	8004b80 <SX1276Read>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004702:	b2db      	uxtb	r3, r3
 8004704:	4619      	mov	r1, r3
 8004706:	2031      	movs	r0, #49	; 0x31
 8004708:	f000 fa2a 	bl	8004b60 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800470c:	4b36      	ldr	r3, [pc, #216]	; (80047e8 <SX1276SetRx+0x2fc>)
 800470e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004712:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004714:	4b34      	ldr	r3, [pc, #208]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004716:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00f      	beq.n	800473e <SX1276SetRx+0x252>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800471e:	211d      	movs	r1, #29
 8004720:	2011      	movs	r0, #17
 8004722:	f000 fa1d 	bl	8004b60 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8004726:	2040      	movs	r0, #64	; 0x40
 8004728:	f000 fa2a 	bl	8004b80 <SX1276Read>
 800472c:	4603      	mov	r3, r0
 800472e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004732:	b2db      	uxtb	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	2040      	movs	r0, #64	; 0x40
 8004738:	f000 fa12 	bl	8004b60 <SX1276Write>
 800473c:	e00e      	b.n	800475c <SX1276SetRx+0x270>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800473e:	211f      	movs	r1, #31
 8004740:	2011      	movs	r0, #17
 8004742:	f000 fa0d 	bl	8004b60 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8004746:	2040      	movs	r0, #64	; 0x40
 8004748:	f000 fa1a 	bl	8004b80 <SX1276Read>
 800474c:	4603      	mov	r3, r0
 800474e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004752:	b2db      	uxtb	r3, r3
 8004754:	4619      	mov	r1, r3
 8004756:	2040      	movs	r0, #64	; 0x40
 8004758:	f000 fa02 	bl	8004b60 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800475c:	2100      	movs	r1, #0
 800475e:	200f      	movs	r0, #15
 8004760:	f000 f9fe 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004764:	2100      	movs	r1, #0
 8004766:	200d      	movs	r0, #13
 8004768:	f000 f9fa 	bl	8004b60 <SX1276Write>
        }
        break;
 800476c:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800476e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004772:	2100      	movs	r1, #0
 8004774:	481d      	ldr	r0, [pc, #116]	; (80047ec <SX1276SetRx+0x300>)
 8004776:	f002 fb31 	bl	8006ddc <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800477a:	4b1b      	ldr	r3, [pc, #108]	; (80047e8 <SX1276SetRx+0x2fc>)
 800477c:	2201      	movs	r2, #1
 800477e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if( timeout != 0 )
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d006      	beq.n	8004796 <SX1276SetRx+0x2aa>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004788:	6879      	ldr	r1, [r7, #4]
 800478a:	4819      	ldr	r0, [pc, #100]	; (80047f0 <SX1276SetRx+0x304>)
 800478c:	f002 fa6a 	bl	8006c64 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8004790:	4817      	ldr	r0, [pc, #92]	; (80047f0 <SX1276SetRx+0x304>)
 8004792:	f002 f8b1 	bl	80068f8 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8004796:	4b14      	ldr	r3, [pc, #80]	; (80047e8 <SX1276SetRx+0x2fc>)
 8004798:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800479c:	2b00      	cmp	r3, #0
 800479e:	d112      	bne.n	80047c6 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER ); // ??
 80047a0:	2005      	movs	r0, #5
 80047a2:	f000 f959 	bl	8004a58 <SX1276SetOpMode>

        if( rxContinuous == false )
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	f083 0301 	eor.w	r3, r3, #1
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d013      	beq.n	80047da <SX1276SetRx+0x2ee>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 80047b2:	4b0d      	ldr	r3, [pc, #52]	; (80047e8 <SX1276SetRx+0x2fc>)
 80047b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b6:	4619      	mov	r1, r3
 80047b8:	480e      	ldr	r0, [pc, #56]	; (80047f4 <SX1276SetRx+0x308>)
 80047ba:	f002 fa53 	bl	8006c64 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 80047be:	480d      	ldr	r0, [pc, #52]	; (80047f4 <SX1276SetRx+0x308>)
 80047c0:	f002 f89a 	bl	80068f8 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 80047c4:	e009      	b.n	80047da <SX1276SetRx+0x2ee>
        if( rxContinuous == true )
 80047c6:	7bfb      	ldrb	r3, [r7, #15]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d003      	beq.n	80047d4 <SX1276SetRx+0x2e8>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80047cc:	2005      	movs	r0, #5
 80047ce:	f000 f943 	bl	8004a58 <SX1276SetOpMode>
}
 80047d2:	e002      	b.n	80047da <SX1276SetRx+0x2ee>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80047d4:	2006      	movs	r0, #6
 80047d6:	f000 f93f 	bl	8004a58 <SX1276SetOpMode>
}
 80047da:	bf00      	nop
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	200002bc 	.word	0x200002bc
 80047e8:	200002ec 	.word	0x200002ec
 80047ec:	20000048 	.word	0x20000048
 80047f0:	20000394 	.word	0x20000394
 80047f4:	200002d4 	.word	0x200002d4

080047f8 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8004800:	4836      	ldr	r0, [pc, #216]	; (80048dc <SX1276SetTx+0xe4>)
 8004802:	f002 f999 	bl	8006b38 <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4835      	ldr	r0, [pc, #212]	; (80048e0 <SX1276SetTx+0xe8>)
 800480a:	f002 fa2b 	bl	8006c64 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 800480e:	4b35      	ldr	r3, [pc, #212]	; (80048e4 <SX1276SetTx+0xec>)
 8004810:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004814:	2b00      	cmp	r3, #0
 8004816:	d002      	beq.n	800481e <SX1276SetTx+0x26>
 8004818:	2b01      	cmp	r3, #1
 800481a:	d021      	beq.n	8004860 <SX1276SetTx+0x68>
 800481c:	e04f      	b.n	80048be <SX1276SetTx+0xc6>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800481e:	2040      	movs	r0, #64	; 0x40
 8004820:	f000 f9ae 	bl	8004b80 <SX1276Read>
 8004824:	4603      	mov	r3, r0
 8004826:	f003 0303 	and.w	r3, r3, #3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	4619      	mov	r1, r3
 800482e:	2040      	movs	r0, #64	; 0x40
 8004830:	f000 f996 	bl	8004b60 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004834:	2041      	movs	r0, #65	; 0x41
 8004836:	f000 f9a3 	bl	8004b80 <SX1276Read>
 800483a:	4603      	mov	r3, r0
 800483c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004840:	b2db      	uxtb	r3, r3
 8004842:	4619      	mov	r1, r3
 8004844:	2041      	movs	r0, #65	; 0x41
 8004846:	f000 f98b 	bl	8004b60 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800484a:	2035      	movs	r0, #53	; 0x35
 800484c:	f000 f998 	bl	8004b80 <SX1276Read>
 8004850:	4603      	mov	r3, r0
 8004852:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004856:	b2da      	uxtb	r2, r3
 8004858:	4b22      	ldr	r3, [pc, #136]	; (80048e4 <SX1276SetTx+0xec>)
 800485a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        }
        break;
 800485e:	e02e      	b.n	80048be <SX1276SetTx+0xc6>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004860:	4b20      	ldr	r3, [pc, #128]	; (80048e4 <SX1276SetTx+0xec>)
 8004862:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004866:	2b00      	cmp	r3, #0
 8004868:	d014      	beq.n	8004894 <SX1276SetTx+0x9c>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800486a:	21f5      	movs	r1, #245	; 0xf5
 800486c:	2011      	movs	r0, #17
 800486e:	f000 f977 	bl	8004b60 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8004872:	2040      	movs	r0, #64	; 0x40
 8004874:	f000 f984 	bl	8004b80 <SX1276Read>
 8004878:	4603      	mov	r3, r0
 800487a:	b25b      	sxtb	r3, r3
 800487c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004880:	b25b      	sxtb	r3, r3
 8004882:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004886:	b25b      	sxtb	r3, r3
 8004888:	b2db      	uxtb	r3, r3
 800488a:	4619      	mov	r1, r3
 800488c:	2040      	movs	r0, #64	; 0x40
 800488e:	f000 f967 	bl	8004b60 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8004892:	e013      	b.n	80048bc <SX1276SetTx+0xc4>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004894:	21f7      	movs	r1, #247	; 0xf7
 8004896:	2011      	movs	r0, #17
 8004898:	f000 f962 	bl	8004b60 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800489c:	2040      	movs	r0, #64	; 0x40
 800489e:	f000 f96f 	bl	8004b80 <SX1276Read>
 80048a2:	4603      	mov	r3, r0
 80048a4:	b25b      	sxtb	r3, r3
 80048a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048aa:	b25b      	sxtb	r3, r3
 80048ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b0:	b25b      	sxtb	r3, r3
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	4619      	mov	r1, r3
 80048b6:	2040      	movs	r0, #64	; 0x40
 80048b8:	f000 f952 	bl	8004b60 <SX1276Write>
        break;
 80048bc:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 80048be:	4b09      	ldr	r3, [pc, #36]	; (80048e4 <SX1276SetTx+0xec>)
 80048c0:	2202      	movs	r2, #2
 80048c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 80048c6:	4806      	ldr	r0, [pc, #24]	; (80048e0 <SX1276SetTx+0xe8>)
 80048c8:	f002 f816 	bl	80068f8 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80048cc:	2003      	movs	r0, #3
 80048ce:	f000 f8c3 	bl	8004a58 <SX1276SetOpMode>
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000394 	.word	0x20000394
 80048e0:	200002bc 	.word	0x200002bc
 80048e4:	200002ec 	.word	0x200002ec

080048e8 <SX1276StartCad>:

void SX1276StartCad( void )
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80048ec:	4b10      	ldr	r3, [pc, #64]	; (8004930 <SX1276StartCad+0x48>)
 80048ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d019      	beq.n	800492a <SX1276StartCad+0x42>
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d000      	beq.n	80048fc <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80048fa:	e017      	b.n	800492c <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80048fc:	21fa      	movs	r1, #250	; 0xfa
 80048fe:	2011      	movs	r0, #17
 8004900:	f000 f92e 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8004904:	2040      	movs	r0, #64	; 0x40
 8004906:	f000 f93b 	bl	8004b80 <SX1276Read>
 800490a:	4603      	mov	r3, r0
 800490c:	f023 0303 	bic.w	r3, r3, #3
 8004910:	b2db      	uxtb	r3, r3
 8004912:	4619      	mov	r1, r3
 8004914:	2040      	movs	r0, #64	; 0x40
 8004916:	f000 f923 	bl	8004b60 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <SX1276StartCad+0x48>)
 800491c:	2203      	movs	r2, #3
 800491e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8004922:	2007      	movs	r0, #7
 8004924:	f000 f898 	bl	8004a58 <SX1276SetOpMode>
        break;
 8004928:	e000      	b.n	800492c <SX1276StartCad+0x44>
        break;
 800492a:	bf00      	nop
    }
}
 800492c:	bf00      	nop
 800492e:	bd80      	pop	{r7, pc}
 8004930:	200002ec 	.word	0x200002ec

08004934 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08e      	sub	sp, #56	; 0x38
 8004938:	af0a      	add	r7, sp, #40	; 0x28
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	70fb      	strb	r3, [r7, #3]
 8004940:	4613      	mov	r3, r2
 8004942:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8004944:	883b      	ldrh	r3, [r7, #0]
 8004946:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800494a:	fb02 f303 	mul.w	r3, r2, r3
 800494e:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f7ff f825 	bl	80039a0 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8004956:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	9308      	str	r3, [sp, #32]
 800495e:	2300      	movs	r3, #0
 8004960:	9307      	str	r3, [sp, #28]
 8004962:	2300      	movs	r3, #0
 8004964:	9306      	str	r3, [sp, #24]
 8004966:	2300      	movs	r3, #0
 8004968:	9305      	str	r3, [sp, #20]
 800496a:	2300      	movs	r3, #0
 800496c:	9304      	str	r3, [sp, #16]
 800496e:	2300      	movs	r3, #0
 8004970:	9303      	str	r3, [sp, #12]
 8004972:	2305      	movs	r3, #5
 8004974:	9302      	str	r3, [sp, #8]
 8004976:	2300      	movs	r3, #0
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	2300      	movs	r3, #0
 8004982:	2200      	movs	r2, #0
 8004984:	2000      	movs	r0, #0
 8004986:	f7ff fae7 	bl	8003f58 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800498a:	2031      	movs	r0, #49	; 0x31
 800498c:	f000 f8f8 	bl	8004b80 <SX1276Read>
 8004990:	4603      	mov	r3, r0
 8004992:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004996:	b2db      	uxtb	r3, r3
 8004998:	4619      	mov	r1, r3
 800499a:	2031      	movs	r0, #49	; 0x31
 800499c:	f000 f8e0 	bl	8004b60 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 80049a0:	21f0      	movs	r1, #240	; 0xf0
 80049a2:	2040      	movs	r0, #64	; 0x40
 80049a4:	f000 f8dc 	bl	8004b60 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 80049a8:	21a0      	movs	r1, #160	; 0xa0
 80049aa:	2041      	movs	r0, #65	; 0x41
 80049ac:	f000 f8d8 	bl	8004b60 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80049b0:	68f9      	ldr	r1, [r7, #12]
 80049b2:	4808      	ldr	r0, [pc, #32]	; (80049d4 <SX1276SetTxContinuousWave+0xa0>)
 80049b4:	f002 f956 	bl	8006c64 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING; //??
 80049b8:	4b07      	ldr	r3, [pc, #28]	; (80049d8 <SX1276SetTxContinuousWave+0xa4>)
 80049ba:	2202      	movs	r2, #2
 80049bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 80049c0:	4804      	ldr	r0, [pc, #16]	; (80049d4 <SX1276SetTxContinuousWave+0xa0>)
 80049c2:	f001 ff99 	bl	80068f8 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80049c6:	2003      	movs	r0, #3
 80049c8:	f000 f846 	bl	8004a58 <SX1276SetOpMode>
}
 80049cc:	bf00      	nop
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	200002bc 	.word	0x200002bc
 80049d8:	200002ec 	.word	0x200002ec

080049dc <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	4603      	mov	r3, r0
 80049e4:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 80049e6:	2300      	movs	r3, #0
 80049e8:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 80049ea:	79fb      	ldrb	r3, [r7, #7]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d002      	beq.n	80049f6 <SX1276ReadRssi+0x1a>
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d00b      	beq.n	8004a0c <SX1276ReadRssi+0x30>
 80049f4:	e021      	b.n	8004a3a <SX1276ReadRssi+0x5e>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80049f6:	2011      	movs	r0, #17
 80049f8:	f000 f8c2 	bl	8004b80 <SX1276Read>
 80049fc:	4603      	mov	r3, r0
 80049fe:	085b      	lsrs	r3, r3, #1
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	425b      	negs	r3, r3
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	81fb      	strh	r3, [r7, #14]
        break;
 8004a0a:	e01a      	b.n	8004a42 <SX1276ReadRssi+0x66>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004a0c:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <SX1276ReadRssi+0x74>)
 8004a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a10:	4a10      	ldr	r2, [pc, #64]	; (8004a54 <SX1276ReadRssi+0x78>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d908      	bls.n	8004a28 <SX1276ReadRssi+0x4c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8004a16:	201b      	movs	r0, #27
 8004a18:	f000 f8b2 	bl	8004b80 <SX1276Read>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b9d      	subs	r3, #157	; 0x9d
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8004a26:	e00c      	b.n	8004a42 <SX1276ReadRssi+0x66>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004a28:	201b      	movs	r0, #27
 8004a2a:	f000 f8a9 	bl	8004b80 <SX1276Read>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3ba4      	subs	r3, #164	; 0xa4
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	81fb      	strh	r3, [r7, #14]
        break;
 8004a38:	e003      	b.n	8004a42 <SX1276ReadRssi+0x66>
    default:
        rssi = -1;
 8004a3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a3e:	81fb      	strh	r3, [r7, #14]
        break;
 8004a40:	bf00      	nop
    }
    return rssi;
 8004a42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	200002ec 	.word	0x200002ec
 8004a54:	1f4add40 	.word	0x1f4add40

08004a58 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	4603      	mov	r3, r0
 8004a60:	71fb      	strb	r3, [r7, #7]
            SX1276DbgPinTxWrite( 0 );
            SX1276DbgPinRxWrite( 0 );
            break;
    }
#endif
    if( opMode == RF_OPMODE_SLEEP )
 8004a62:	79fb      	ldrb	r3, [r7, #7]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 8004a68:	2001      	movs	r0, #1
 8004a6a:	f001 fe8b 	bl	8006784 <SX1276SetAntSwLowPower>
 8004a6e:	e009      	b.n	8004a84 <SX1276SetOpMode+0x2c>
    }
    else
    {
        // Enable TCXO if operating mode different from SLEEP.
        SX1276SetBoardTcxo( true );
 8004a70:	2001      	movs	r0, #1
 8004a72:	f001 fd93 	bl	800659c <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8004a76:	2000      	movs	r0, #0
 8004a78:	f001 fe84 	bl	8006784 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f001 feaa 	bl	80067d8 <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004a84:	2001      	movs	r0, #1
 8004a86:	f000 f87b 	bl	8004b80 <SX1276Read>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	b25b      	sxtb	r3, r3
 8004a8e:	f023 0307 	bic.w	r3, r3, #7
 8004a92:	b25a      	sxtb	r2, r3
 8004a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	b25b      	sxtb	r3, r3
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	2001      	movs	r0, #1
 8004aa2:	f000 f85d 	bl	8004b60 <SX1276Write>
}
 8004aa6:	bf00      	nop
 8004aa8:	3708      	adds	r7, #8
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
	...

08004ab0 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	71fb      	strb	r3, [r7, #7]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004aba:	2001      	movs	r0, #1
 8004abc:	f000 f860 	bl	8004b80 <SX1276Read>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	b25b      	sxtb	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	da04      	bge.n	8004ad2 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8004ac8:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <SX1276SetModem+0xac>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ad0:	e003      	b.n	8004ada <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8004ad2:	4b22      	ldr	r3, [pc, #136]	; (8004b5c <SX1276SetModem+0xac>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }

    if( SX1276.Settings.Modem == modem )
 8004ada:	4b20      	ldr	r3, [pc, #128]	; (8004b5c <SX1276SetModem+0xac>)
 8004adc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ae0:	79fa      	ldrb	r2, [r7, #7]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d036      	beq.n	8004b54 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8004ae6:	4a1d      	ldr	r2, [pc, #116]	; (8004b5c <SX1276SetModem+0xac>)
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    switch( SX1276.Settings.Modem )
 8004aee:	4b1b      	ldr	r3, [pc, #108]	; (8004b5c <SX1276SetModem+0xac>)
 8004af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d016      	beq.n	8004b26 <SX1276SetModem+0x76>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004af8:	2000      	movs	r0, #0
 8004afa:	f7ff ffad 	bl	8004a58 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004afe:	2001      	movs	r0, #1
 8004b00:	f000 f83e 	bl	8004b80 <SX1276Read>
 8004b04:	4603      	mov	r3, r0
 8004b06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	2001      	movs	r0, #1
 8004b10:	f000 f826 	bl	8004b60 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004b14:	2100      	movs	r1, #0
 8004b16:	2040      	movs	r0, #64	; 0x40
 8004b18:	f000 f822 	bl	8004b60 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004b1c:	2130      	movs	r1, #48	; 0x30
 8004b1e:	2041      	movs	r0, #65	; 0x41
 8004b20:	f000 f81e 	bl	8004b60 <SX1276Write>
        break;
 8004b24:	e017      	b.n	8004b56 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004b26:	2000      	movs	r0, #0
 8004b28:	f7ff ff96 	bl	8004a58 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	f000 f827 	bl	8004b80 <SX1276Read>
 8004b32:	4603      	mov	r3, r0
 8004b34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b38:	b2db      	uxtb	r3, r3
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	2001      	movs	r0, #1
 8004b3e:	f000 f80f 	bl	8004b60 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004b42:	2100      	movs	r1, #0
 8004b44:	2040      	movs	r0, #64	; 0x40
 8004b46:	f000 f80b 	bl	8004b60 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	2041      	movs	r0, #65	; 0x41
 8004b4e:	f000 f807 	bl	8004b60 <SX1276Write>
        break;
 8004b52:	e000      	b.n	8004b56 <SX1276SetModem+0xa6>
        return;
 8004b54:	bf00      	nop
    }
}
 8004b56:	3708      	adds	r7, #8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}
 8004b5c:	200002ec 	.word	0x200002ec

08004b60 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( addr, &data, 1 );
 8004b6c:	1cfb      	adds	r3, r7, #3
 8004b6e:	2201      	movs	r2, #1
 8004b70:	4619      	mov	r1, r3
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f814 	bl	8004ba0 <SX1276WriteBuffer>
}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8004b88:	f107 030f 	add.w	r3, r7, #15
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	4619      	mov	r1, r3
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f839 	bl	8004c08 <SX1276ReadBuffer>
    return data;
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	4613      	mov	r3, r2
 8004bac:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4813      	ldr	r0, [pc, #76]	; (8004c00 <SX1276WriteBuffer+0x60>)
 8004bb2:	f7fb fd0d 	bl	80005d0 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbe:	b29b      	uxth	r3, r3
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	4810      	ldr	r0, [pc, #64]	; (8004c04 <SX1276WriteBuffer+0x64>)
 8004bc4:	f7fb fee4 	bl	8000990 <SpiInOut>
    for( i = 0; i < size; i++ )
 8004bc8:	2300      	movs	r3, #0
 8004bca:	75fb      	strb	r3, [r7, #23]
 8004bcc:	e00b      	b.n	8004be6 <SX1276WriteBuffer+0x46>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 8004bce:	7dfb      	ldrb	r3, [r7, #23]
 8004bd0:	68ba      	ldr	r2, [r7, #8]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	4619      	mov	r1, r3
 8004bda:	480a      	ldr	r0, [pc, #40]	; (8004c04 <SX1276WriteBuffer+0x64>)
 8004bdc:	f7fb fed8 	bl	8000990 <SpiInOut>
    for( i = 0; i < size; i++ )
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	3301      	adds	r3, #1
 8004be4:	75fb      	strb	r3, [r7, #23]
 8004be6:	7dfa      	ldrb	r2, [r7, #23]
 8004be8:	79fb      	ldrb	r3, [r7, #7]
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d3ef      	bcc.n	8004bce <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8004bee:	2101      	movs	r1, #1
 8004bf0:	4803      	ldr	r0, [pc, #12]	; (8004c00 <SX1276WriteBuffer+0x60>)
 8004bf2:	f7fb fced 	bl	80005d0 <GpioWrite>
}
 8004bf6:	bf00      	nop
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20000328 	.word	0x20000328
 8004c04:	20000324 	.word	0x20000324

08004c08 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	4613      	mov	r3, r2
 8004c14:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8004c16:	2100      	movs	r1, #0
 8004c18:	4814      	ldr	r0, [pc, #80]	; (8004c6c <SX1276ReadBuffer+0x64>)
 8004c1a:	f7fb fcd9 	bl	80005d0 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	4619      	mov	r1, r3
 8004c2a:	4811      	ldr	r0, [pc, #68]	; (8004c70 <SX1276ReadBuffer+0x68>)
 8004c2c:	f7fb feb0 	bl	8000990 <SpiInOut>

    for( i = 0; i < size; i++ )
 8004c30:	2300      	movs	r3, #0
 8004c32:	75fb      	strb	r3, [r7, #23]
 8004c34:	e00d      	b.n	8004c52 <SX1276ReadBuffer+0x4a>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 8004c36:	2100      	movs	r1, #0
 8004c38:	480d      	ldr	r0, [pc, #52]	; (8004c70 <SX1276ReadBuffer+0x68>)
 8004c3a:	f7fb fea9 	bl	8000990 <SpiInOut>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	4619      	mov	r1, r3
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	4413      	add	r3, r2
 8004c48:	b2ca      	uxtb	r2, r1
 8004c4a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8004c4c:	7dfb      	ldrb	r3, [r7, #23]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	75fb      	strb	r3, [r7, #23]
 8004c52:	7dfa      	ldrb	r2, [r7, #23]
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d3ed      	bcc.n	8004c36 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8004c5a:	2101      	movs	r1, #1
 8004c5c:	4803      	ldr	r0, [pc, #12]	; (8004c6c <SX1276ReadBuffer+0x64>)
 8004c5e:	f7fb fcb7 	bl	80005d0 <GpioWrite>
}
 8004c62:	bf00      	nop
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000328 	.word	0x20000328
 8004c70:	20000324 	.word	0x20000324

08004c74 <SX1276WriteFifo>:

static void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	461a      	mov	r2, r3
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7ff ff8a 	bl	8004ba0 <SX1276WriteBuffer>
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <SX1276ReadFifo>:

static void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	2000      	movs	r0, #0
 8004ca8:	f7ff ffae 	bl	8004c08 <SX1276ReadBuffer>
}
 8004cac:	bf00      	nop
 8004cae:	3708      	adds	r7, #8
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}

08004cb4 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b082      	sub	sp, #8
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	460a      	mov	r2, r1
 8004cbe:	71fb      	strb	r3, [r7, #7]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7ff fef2 	bl	8004ab0 <SX1276SetModem>

    switch( modem )
 8004ccc:	79fb      	ldrb	r3, [r7, #7]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <SX1276SetMaxPayloadLength+0x24>
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d00e      	beq.n	8004cf4 <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8004cd6:	e014      	b.n	8004d02 <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <SX1276SetMaxPayloadLength+0x58>)
 8004cda:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004cde:	f083 0301 	eor.w	r3, r3, #1
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00b      	beq.n	8004d00 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004ce8:	79bb      	ldrb	r3, [r7, #6]
 8004cea:	4619      	mov	r1, r3
 8004cec:	2032      	movs	r0, #50	; 0x32
 8004cee:	f7ff ff37 	bl	8004b60 <SX1276Write>
        break;
 8004cf2:	e005      	b.n	8004d00 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004cf4:	79bb      	ldrb	r3, [r7, #6]
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	2023      	movs	r0, #35	; 0x23
 8004cfa:	f7ff ff31 	bl	8004b60 <SX1276Write>
        break;
 8004cfe:	e000      	b.n	8004d02 <SX1276SetMaxPayloadLength+0x4e>
        break;
 8004d00:	bf00      	nop
}
 8004d02:	bf00      	nop
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	200002ec 	.word	0x200002ec

08004d10 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	f7ff fec8 	bl	8004ab0 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004d20:	4a09      	ldr	r2, [pc, #36]	; (8004d48 <SX1276SetPublicNetwork+0x38>)
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
    if( enable == true )
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d004      	beq.n	8004d38 <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004d2e:	2134      	movs	r1, #52	; 0x34
 8004d30:	2039      	movs	r0, #57	; 0x39
 8004d32:	f7ff ff15 	bl	8004b60 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8004d36:	e003      	b.n	8004d40 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004d38:	2112      	movs	r1, #18
 8004d3a:	2039      	movs	r0, #57	; 0x39
 8004d3c:	f7ff ff10 	bl	8004b60 <SX1276Write>
}
 8004d40:	bf00      	nop
 8004d42:	3708      	adds	r7, #8
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	200002ec 	.word	0x200002ec

08004d4c <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8004d50:	f001 fc2e 	bl	80065b0 <SX1276GetBoardTcxoWakeupTime>
 8004d54:	4603      	mov	r3, r0
 8004d56:	3301      	adds	r3, #1
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	bd80      	pop	{r7, pc}

08004d5c <SX1276ConvertPllStepToFreqInHz>:

static uint32_t SX1276ConvertPllStepToFreqInHz( uint32_t pllSteps )
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b085      	sub	sp, #20
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
    uint32_t freqInHzInt;
    uint32_t freqInHzFrac;
    
    // freqInHz = pllSteps * ( SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	0a1b      	lsrs	r3, r3, #8
 8004d68:	60fb      	str	r3, [r7, #12]
    freqInHzFrac = pllSteps - ( freqInHzInt << SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004d7a:	fb02 f203 	mul.w	r2, r2, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f643 5109 	movw	r1, #15625	; 0x3d09
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	3380      	adds	r3, #128	; 0x80
 8004d8a:	0a1b      	lsrs	r3, r3, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8004d8c:	4413      	add	r3, r2
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bc80      	pop	{r7}
 8004d96:	4770      	bx	lr

08004d98 <SX1276ConvertFreqInHzToPllStep>:

static uint32_t SX1276ConvertFreqInHzToPllStep( uint32_t freqInHz )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b085      	sub	sp, #20
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a0f      	ldr	r2, [pc, #60]	; (8004de0 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8004da4:	fba2 2303 	umull	r2, r3, r2, r3
 8004da8:	0b1b      	lsrs	r3, r3, #12
 8004daa:	60fb      	str	r3, [r7, #12]
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004db2:	fb02 f303 	mul.w	r3, r2, r3
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	021a      	lsls	r2, r3, #8
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	021b      	lsls	r3, r3, #8
 8004dc4:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8004dc8:	3304      	adds	r3, #4
 8004dca:	4905      	ldr	r1, [pc, #20]	; (8004de0 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8004dcc:	fba1 1303 	umull	r1, r3, r1, r3
 8004dd0:	0b1b      	lsrs	r3, r3, #12
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004dd2:	4413      	add	r3, r2
             SX1276_PLL_STEP_SCALED );
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	431bde83 	.word	0x431bde83

08004de4 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004dec:	2300      	movs	r3, #0
 8004dee:	73fb      	strb	r3, [r7, #15]
 8004df0:	e017      	b.n	8004e22 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8004df2:	7bfb      	ldrb	r3, [r7, #15]
 8004df4:	4a0f      	ldr	r2, [pc, #60]	; (8004e34 <GetFskBandwidthRegValue+0x50>)
 8004df6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d30d      	bcc.n	8004e1c <GetFskBandwidthRegValue+0x38>
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	3301      	adds	r3, #1
 8004e04:	4a0b      	ldr	r2, [pc, #44]	; (8004e34 <GetFskBandwidthRegValue+0x50>)
 8004e06:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d205      	bcs.n	8004e1c <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8004e10:	7bfb      	ldrb	r3, [r7, #15]
 8004e12:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <GetFskBandwidthRegValue+0x50>)
 8004e14:	00db      	lsls	r3, r3, #3
 8004e16:	4413      	add	r3, r2
 8004e18:	791b      	ldrb	r3, [r3, #4]
 8004e1a:	e006      	b.n	8004e2a <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	3301      	adds	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	2b14      	cmp	r3, #20
 8004e26:	d9e4      	bls.n	8004df2 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8004e28:	e7fe      	b.n	8004e28 <GetFskBandwidthRegValue+0x44>
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3714      	adds	r7, #20
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bc80      	pop	{r7}
 8004e32:	4770      	bx	lr
 8004e34:	08006e7c 	.word	0x08006e7c

08004e38 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b085      	sub	sp, #20
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 8004e40:	2300      	movs	r3, #0
 8004e42:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b02      	cmp	r3, #2
 8004e48:	d00f      	beq.n	8004e6a <SX1276GetLoRaBandwidthInHz+0x32>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d80f      	bhi.n	8004e70 <SX1276GetLoRaBandwidthInHz+0x38>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <SX1276GetLoRaBandwidthInHz+0x26>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d003      	beq.n	8004e64 <SX1276GetLoRaBandwidthInHz+0x2c>
 8004e5c:	e008      	b.n	8004e70 <SX1276GetLoRaBandwidthInHz+0x38>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 8004e5e:	4b07      	ldr	r3, [pc, #28]	; (8004e7c <SX1276GetLoRaBandwidthInHz+0x44>)
 8004e60:	60fb      	str	r3, [r7, #12]
        break;
 8004e62:	e005      	b.n	8004e70 <SX1276GetLoRaBandwidthInHz+0x38>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <SX1276GetLoRaBandwidthInHz+0x48>)
 8004e66:	60fb      	str	r3, [r7, #12]
        break;
 8004e68:	e002      	b.n	8004e70 <SX1276GetLoRaBandwidthInHz+0x38>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <SX1276GetLoRaBandwidthInHz+0x4c>)
 8004e6c:	60fb      	str	r3, [r7, #12]
        break;
 8004e6e:	bf00      	nop
    }

    return bandwidthInHz;
 8004e70:	68fb      	ldr	r3, [r7, #12]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bc80      	pop	{r7}
 8004e7a:	4770      	bx	lr
 8004e7c:	0001e848 	.word	0x0001e848
 8004e80:	0003d090 	.word	0x0003d090
 8004e84:	0007a120 	.word	0x0007a120

08004e88 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 8004e88:	b490      	push	{r4, r7}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	4604      	mov	r4, r0
 8004e90:	4608      	mov	r0, r1
 8004e92:	4611      	mov	r1, r2
 8004e94:	461a      	mov	r2, r3
 8004e96:	4623      	mov	r3, r4
 8004e98:	80fb      	strh	r3, [r7, #6]
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	717b      	strb	r3, [r7, #5]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	713b      	strb	r3, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	70fb      	strb	r3, [r7, #3]
    const uint8_t syncWordLength = 3;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	73fb      	strb	r3, [r7, #15]

    return ( preambleLen << 3 ) +
 8004eaa:	88fb      	ldrh	r3, [r7, #6]
 8004eac:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8004eae:	797a      	ldrb	r2, [r7, #5]
 8004eb0:	f082 0201 	eor.w	r2, r2, #1
 8004eb4:	b2d2      	uxtb	r2, r2
 8004eb6:	2a00      	cmp	r2, #0
 8004eb8:	d001      	beq.n	8004ebe <SX1276GetGfskTimeOnAirNumerator+0x36>
 8004eba:	2208      	movs	r2, #8
 8004ebc:	e000      	b.n	8004ec0 <SX1276GetGfskTimeOnAirNumerator+0x38>
 8004ebe:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8004ec0:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 8004ec2:	7bfb      	ldrb	r3, [r7, #15]
 8004ec4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8004ec6:	441a      	add	r2, r3
             ( ( payloadLen +
 8004ec8:	793b      	ldrb	r3, [r7, #4]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8004eca:	78f9      	ldrb	r1, [r7, #3]
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	d001      	beq.n	8004ed4 <SX1276GetGfskTimeOnAirNumerator+0x4c>
 8004ed0:	2102      	movs	r1, #2
 8004ed2:	e000      	b.n	8004ed6 <SX1276GetGfskTimeOnAirNumerator+0x4e>
 8004ed4:	2100      	movs	r1, #0
               ( 0 ) + // Address filter size
 8004ed6:	440b      	add	r3, r1
               ) << 3 
 8004ed8:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 8004eda:	4413      	add	r3, r2
             );
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bc90      	pop	{r4, r7}
 8004ee4:	4770      	bx	lr

08004ee6 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b08b      	sub	sp, #44	; 0x2c
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	71fb      	strb	r3, [r7, #7]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8004efc:	79fb      	ldrb	r3, [r7, #7]
 8004efe:	3304      	adds	r3, #4
 8004f00:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8004f02:	2300      	movs	r3, #0
 8004f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b05      	cmp	r3, #5
 8004f0c:	d002      	beq.n	8004f14 <SX1276GetLoRaTimeOnAirNumerator+0x2e>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d104      	bne.n	8004f1e <SX1276GetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8004f14:	88bb      	ldrh	r3, [r7, #4]
 8004f16:	2b0b      	cmp	r3, #11
 8004f18:	d801      	bhi.n	8004f1e <SX1276GetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8004f1a:	230c      	movs	r3, #12
 8004f1c:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d105      	bne.n	8004f30 <SX1276GetLoRaTimeOnAirNumerator+0x4a>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	2b0b      	cmp	r3, #11
 8004f28:	d008      	beq.n	8004f3c <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	d005      	beq.n	8004f3c <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d105      	bne.n	8004f42 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b0c      	cmp	r3, #12
 8004f3a:	d102      	bne.n	8004f42 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004f42:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f46:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8004f48:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	d001      	beq.n	8004f54 <SX1276GetLoRaTimeOnAirNumerator+0x6e>
 8004f50:	2210      	movs	r2, #16
 8004f52:	e000      	b.n	8004f56 <SX1276GetLoRaTimeOnAirNumerator+0x70>
 8004f54:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004f56:	4413      	add	r3, r2
 8004f58:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8004f5e:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8004f60:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004f64:	2a00      	cmp	r2, #0
 8004f66:	d001      	beq.n	8004f6c <SX1276GetLoRaTimeOnAirNumerator+0x86>
 8004f68:	2200      	movs	r2, #0
 8004f6a:	e000      	b.n	8004f6e <SX1276GetLoRaTimeOnAirNumerator+0x88>
 8004f6c:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8004f6e:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004f70:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8004f72:	68bb      	ldr	r3, [r7, #8]
 8004f74:	2b06      	cmp	r3, #6
 8004f76:	d803      	bhi.n	8004f80 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	623b      	str	r3, [r7, #32]
 8004f7e:	e00e      	b.n	8004f9e <SX1276GetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	3308      	adds	r3, #8
 8004f84:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8004f86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <SX1276GetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	3b02      	subs	r3, #2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	623b      	str	r3, [r7, #32]
 8004f96:	e002      	b.n	8004f9e <SX1276GetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	da01      	bge.n	8004fa8 <SX1276GetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8004fa8:	69fa      	ldr	r2, [r7, #28]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	4413      	add	r3, r2
 8004fae:	1e5a      	subs	r2, r3, #1
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	fb02 f203 	mul.w	r2, r2, r3
 8004fbc:	88bb      	ldrh	r3, [r7, #4]
 8004fbe:	4413      	add	r3, r2
    int32_t intermediate =
 8004fc0:	330c      	adds	r3, #12
 8004fc2:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b06      	cmp	r3, #6
 8004fc8:	d802      	bhi.n	8004fd0 <SX1276GetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	3302      	adds	r3, #2
 8004fce:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	1c5a      	adds	r2, r3, #1
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	3b02      	subs	r3, #2
 8004fda:	fa02 f303 	lsl.w	r3, r2, r3
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	372c      	adds	r7, #44	; 0x2c
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc80      	pop	{r7}
 8004fe6:	4770      	bx	lr

08004fe8 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8004ff0:	4b4d      	ldr	r3, [pc, #308]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 8004ff2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d002      	beq.n	8005000 <SX1276OnTimeoutIrq+0x18>
 8004ffa:	2b02      	cmp	r3, #2
 8004ffc:	d043      	beq.n	8005086 <SX1276OnTimeoutIrq+0x9e>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8004ffe:	e08e      	b.n	800511e <SX1276OnTimeoutIrq+0x136>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8005000:	4b49      	ldr	r3, [pc, #292]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 8005002:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005006:	2b00      	cmp	r3, #0
 8005008:	d12f      	bne.n	800506a <SX1276OnTimeoutIrq+0x82>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800500a:	4b47      	ldr	r3, [pc, #284]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 800500c:	2200      	movs	r2, #0
 800500e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8005012:	4b45      	ldr	r3, [pc, #276]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800501a:	4b43      	ldr	r3, [pc, #268]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 800501c:	2200      	movs	r2, #0
 800501e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8005022:	4b41      	ldr	r3, [pc, #260]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 8005024:	2200      	movs	r2, #0
 8005026:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800502a:	210b      	movs	r1, #11
 800502c:	203e      	movs	r0, #62	; 0x3e
 800502e:	f7ff fd97 	bl	8004b60 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005032:	2110      	movs	r1, #16
 8005034:	203f      	movs	r0, #63	; 0x3f
 8005036:	f7ff fd93 	bl	8004b60 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800503a:	4b3b      	ldr	r3, [pc, #236]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 800503c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <SX1276OnTimeoutIrq+0x74>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8005044:	200d      	movs	r0, #13
 8005046:	f7ff fd9b 	bl	8004b80 <SX1276Read>
 800504a:	4603      	mov	r3, r0
 800504c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005050:	b2db      	uxtb	r3, r3
 8005052:	4619      	mov	r1, r3
 8005054:	200d      	movs	r0, #13
 8005056:	f7ff fd83 	bl	8004b60 <SX1276Write>
 800505a:	e006      	b.n	800506a <SX1276OnTimeoutIrq+0x82>
                SX1276.Settings.State = RF_IDLE;
 800505c:	4b32      	ldr	r3, [pc, #200]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 800505e:	2200      	movs	r2, #0
 8005060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                TimerStop( &RxTimeoutSyncWord );
 8005064:	4831      	ldr	r0, [pc, #196]	; (800512c <SX1276OnTimeoutIrq+0x144>)
 8005066:	f001 fd67 	bl	8006b38 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800506a:	4b31      	ldr	r3, [pc, #196]	; (8005130 <SX1276OnTimeoutIrq+0x148>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d052      	beq.n	8005118 <SX1276OnTimeoutIrq+0x130>
 8005072:	4b2f      	ldr	r3, [pc, #188]	; (8005130 <SX1276OnTimeoutIrq+0x148>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d04d      	beq.n	8005118 <SX1276OnTimeoutIrq+0x130>
            RadioEvents->RxTimeout( );
 800507c:	4b2c      	ldr	r3, [pc, #176]	; (8005130 <SX1276OnTimeoutIrq+0x148>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	4798      	blx	r3
        break;
 8005084:	e048      	b.n	8005118 <SX1276OnTimeoutIrq+0x130>
        SX1276Reset( );
 8005086:	f001 fa9b 	bl	80065c0 <SX1276Reset>
        RxChainCalibration( );
 800508a:	f7fe fd29 	bl	8003ae0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800508e:	2000      	movs	r0, #0
 8005090:	f7ff fce2 	bl	8004a58 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005094:	2300      	movs	r3, #0
 8005096:	73fb      	strb	r3, [r7, #15]
 8005098:	e020      	b.n	80050dc <SX1276OnTimeoutIrq+0xf4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800509a:	7bfa      	ldrb	r2, [r7, #15]
 800509c:	4925      	ldr	r1, [pc, #148]	; (8005134 <SX1276OnTimeoutIrq+0x14c>)
 800509e:	4613      	mov	r3, r2
 80050a0:	005b      	lsls	r3, r3, #1
 80050a2:	4413      	add	r3, r2
 80050a4:	440b      	add	r3, r1
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7ff fd01 	bl	8004ab0 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80050ae:	7bfa      	ldrb	r2, [r7, #15]
 80050b0:	4920      	ldr	r1, [pc, #128]	; (8005134 <SX1276OnTimeoutIrq+0x14c>)
 80050b2:	4613      	mov	r3, r2
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	4413      	add	r3, r2
 80050b8:	440b      	add	r3, r1
 80050ba:	3301      	adds	r3, #1
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	7bfa      	ldrb	r2, [r7, #15]
 80050c2:	491c      	ldr	r1, [pc, #112]	; (8005134 <SX1276OnTimeoutIrq+0x14c>)
 80050c4:	4613      	mov	r3, r2
 80050c6:	005b      	lsls	r3, r3, #1
 80050c8:	4413      	add	r3, r2
 80050ca:	440b      	add	r3, r1
 80050cc:	3302      	adds	r3, #2
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	4619      	mov	r1, r3
 80050d2:	f7ff fd45 	bl	8004b60 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80050d6:	7bfb      	ldrb	r3, [r7, #15]
 80050d8:	3301      	adds	r3, #1
 80050da:	73fb      	strb	r3, [r7, #15]
 80050dc:	7bfb      	ldrb	r3, [r7, #15]
 80050de:	2b0f      	cmp	r3, #15
 80050e0:	d9db      	bls.n	800509a <SX1276OnTimeoutIrq+0xb2>
        SX1276SetModem( MODEM_FSK );
 80050e2:	2000      	movs	r0, #0
 80050e4:	f7ff fce4 	bl	8004ab0 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80050e8:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 80050ea:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7ff fe0e 	bl	8004d10 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80050f4:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <SX1276OnTimeoutIrq+0x140>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80050fc:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <SX1276OnTimeoutIrq+0x148>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d00b      	beq.n	800511c <SX1276OnTimeoutIrq+0x134>
 8005104:	4b0a      	ldr	r3, [pc, #40]	; (8005130 <SX1276OnTimeoutIrq+0x148>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d006      	beq.n	800511c <SX1276OnTimeoutIrq+0x134>
            RadioEvents->TxTimeout( );
 800510e:	4b08      	ldr	r3, [pc, #32]	; (8005130 <SX1276OnTimeoutIrq+0x148>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	4798      	blx	r3
        break;
 8005116:	e001      	b.n	800511c <SX1276OnTimeoutIrq+0x134>
        break;
 8005118:	bf00      	nop
 800511a:	e000      	b.n	800511e <SX1276OnTimeoutIrq+0x136>
        break;
 800511c:	bf00      	nop
    }
}
 800511e:	bf00      	nop
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	200002ec 	.word	0x200002ec
 800512c:	200002d4 	.word	0x200002d4
 8005130:	20000044 	.word	0x20000044
 8005134:	08006e4c 	.word	0x08006e4c

08005138 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void* context )
{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8005140:	2300      	movs	r3, #0
 8005142:	737b      	strb	r3, [r7, #13]

    switch( SX1276.Settings.State )
 8005144:	4bae      	ldr	r3, [pc, #696]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005146:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800514a:	2b01      	cmp	r3, #1
 800514c:	d003      	beq.n	8005156 <SX1276OnDio0Irq+0x1e>
 800514e:	2b02      	cmp	r3, #2
 8005150:	f000 81de 	beq.w	8005510 <SX1276OnDio0Irq+0x3d8>
                }
                break;
            }
            break;
        default:
            break;
 8005154:	e1fb      	b.n	800554e <SX1276OnDio0Irq+0x416>
            switch( SX1276.Settings.Modem )
 8005156:	4baa      	ldr	r3, [pc, #680]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <SX1276OnDio0Irq+0x30>
 8005160:	2b01      	cmp	r3, #1
 8005162:	f000 80ec 	beq.w	800533e <SX1276OnDio0Irq+0x206>
                break;
 8005166:	e1d2      	b.n	800550e <SX1276OnDio0Irq+0x3d6>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8005168:	4ba5      	ldr	r3, [pc, #660]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 800516a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800516e:	2b00      	cmp	r3, #0
 8005170:	d04e      	beq.n	8005210 <SX1276OnDio0Irq+0xd8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8005172:	203f      	movs	r0, #63	; 0x3f
 8005174:	f7ff fd04 	bl	8004b80 <SX1276Read>
 8005178:	4603      	mov	r3, r0
 800517a:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800517c:	7b7b      	ldrb	r3, [r7, #13]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f003 0302 	and.w	r3, r3, #2
 8005184:	2b02      	cmp	r3, #2
 8005186:	d043      	beq.n	8005210 <SX1276OnDio0Irq+0xd8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8005188:	210b      	movs	r1, #11
 800518a:	203e      	movs	r0, #62	; 0x3e
 800518c:	f7ff fce8 	bl	8004b60 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005190:	2110      	movs	r1, #16
 8005192:	203f      	movs	r0, #63	; 0x3f
 8005194:	f7ff fce4 	bl	8004b60 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8005198:	489a      	ldr	r0, [pc, #616]	; (8005404 <SX1276OnDio0Irq+0x2cc>)
 800519a:	f001 fccd 	bl	8006b38 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800519e:	4b98      	ldr	r3, [pc, #608]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80051a0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80051a4:	f083 0301 	eor.w	r3, r3, #1
 80051a8:	b2db      	uxtb	r3, r3
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d007      	beq.n	80051be <SX1276OnDio0Irq+0x86>
                            TimerStop( &RxTimeoutSyncWord );
 80051ae:	4896      	ldr	r0, [pc, #600]	; (8005408 <SX1276OnDio0Irq+0x2d0>)
 80051b0:	f001 fcc2 	bl	8006b38 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 80051b4:	4b92      	ldr	r3, [pc, #584]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051bc:	e00a      	b.n	80051d4 <SX1276OnDio0Irq+0x9c>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80051be:	200d      	movs	r0, #13
 80051c0:	f7ff fcde 	bl	8004b80 <SX1276Read>
 80051c4:	4603      	mov	r3, r0
 80051c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	4619      	mov	r1, r3
 80051ce:	200d      	movs	r0, #13
 80051d0:	f7ff fcc6 	bl	8004b60 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80051d4:	4b8d      	ldr	r3, [pc, #564]	; (800540c <SX1276OnDio0Irq+0x2d4>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d008      	beq.n	80051ee <SX1276OnDio0Irq+0xb6>
 80051dc:	4b8b      	ldr	r3, [pc, #556]	; (800540c <SX1276OnDio0Irq+0x2d4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 80051e6:	4b89      	ldr	r3, [pc, #548]	; (800540c <SX1276OnDio0Irq+0x2d4>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80051ee:	4b84      	ldr	r3, [pc, #528]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80051f6:	4b82      	ldr	r3, [pc, #520]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80051fe:	4b80      	ldr	r3, [pc, #512]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005200:	2200      	movs	r2, #0
 8005202:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8005206:	4b7e      	ldr	r3, [pc, #504]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005208:	2200      	movs	r2, #0
 800520a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                        break;
 800520e:	e17e      	b.n	800550e <SX1276OnDio0Irq+0x3d6>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8005210:	4b7b      	ldr	r3, [pc, #492]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005212:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005216:	2b00      	cmp	r3, #0
 8005218:	d133      	bne.n	8005282 <SX1276OnDio0Irq+0x14a>
 800521a:	4b79      	ldr	r3, [pc, #484]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 800521c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005220:	2b00      	cmp	r3, #0
 8005222:	d12e      	bne.n	8005282 <SX1276OnDio0Irq+0x14a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8005224:	4b76      	ldr	r3, [pc, #472]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005226:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800522a:	f083 0301 	eor.w	r3, r3, #1
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d004      	beq.n	800523e <SX1276OnDio0Irq+0x106>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8005234:	2101      	movs	r1, #1
 8005236:	4876      	ldr	r0, [pc, #472]	; (8005410 <SX1276OnDio0Irq+0x2d8>)
 8005238:	f7ff fd2c 	bl	8004c94 <SX1276ReadFifo>
 800523c:	e007      	b.n	800524e <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800523e:	2032      	movs	r0, #50	; 0x32
 8005240:	f7ff fc9e 	bl	8004b80 <SX1276Read>
 8005244:	4603      	mov	r3, r0
 8005246:	b29a      	uxth	r2, r3
 8005248:	4b6d      	ldr	r3, [pc, #436]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 800524a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800524e:	4b6c      	ldr	r3, [pc, #432]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005250:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005254:	461a      	mov	r2, r3
 8005256:	4b6f      	ldr	r3, [pc, #444]	; (8005414 <SX1276OnDio0Irq+0x2dc>)
 8005258:	18d0      	adds	r0, r2, r3
 800525a:	4b69      	ldr	r3, [pc, #420]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 800525c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005260:	b2da      	uxtb	r2, r3
 8005262:	4b67      	ldr	r3, [pc, #412]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005264:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005268:	b2db      	uxtb	r3, r3
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	b2db      	uxtb	r3, r3
 800526e:	4619      	mov	r1, r3
 8005270:	f7ff fd10 	bl	8004c94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005274:	4b62      	ldr	r3, [pc, #392]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005276:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800527a:	4b61      	ldr	r3, [pc, #388]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 800527c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005280:	e018      	b.n	80052b4 <SX1276OnDio0Irq+0x17c>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005282:	4b5f      	ldr	r3, [pc, #380]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005284:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005288:	461a      	mov	r2, r3
 800528a:	4b62      	ldr	r3, [pc, #392]	; (8005414 <SX1276OnDio0Irq+0x2dc>)
 800528c:	18d0      	adds	r0, r2, r3
 800528e:	4b5c      	ldr	r3, [pc, #368]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005290:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005294:	b2da      	uxtb	r2, r3
 8005296:	4b5a      	ldr	r3, [pc, #360]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005298:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800529c:	b2db      	uxtb	r3, r3
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	4619      	mov	r1, r3
 80052a4:	f7ff fcf6 	bl	8004c94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80052a8:	4b55      	ldr	r3, [pc, #340]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80052aa:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 80052ae:	4b54      	ldr	r3, [pc, #336]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80052b0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                TimerStop( &RxTimeoutTimer );
 80052b4:	4853      	ldr	r0, [pc, #332]	; (8005404 <SX1276OnDio0Irq+0x2cc>)
 80052b6:	f001 fc3f 	bl	8006b38 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 80052ba:	4b51      	ldr	r3, [pc, #324]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80052bc:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80052c0:	f083 0301 	eor.w	r3, r3, #1
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <SX1276OnDio0Irq+0x1a2>
                    SX1276.Settings.State = RF_IDLE;
 80052ca:	4b4d      	ldr	r3, [pc, #308]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutSyncWord );
 80052d2:	484d      	ldr	r0, [pc, #308]	; (8005408 <SX1276OnDio0Irq+0x2d0>)
 80052d4:	f001 fc30 	bl	8006b38 <TimerStop>
 80052d8:	e00a      	b.n	80052f0 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80052da:	200d      	movs	r0, #13
 80052dc:	f7ff fc50 	bl	8004b80 <SX1276Read>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	4619      	mov	r1, r3
 80052ea:	200d      	movs	r0, #13
 80052ec:	f7ff fc38 	bl	8004b60 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80052f0:	4b46      	ldr	r3, [pc, #280]	; (800540c <SX1276OnDio0Irq+0x2d4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d011      	beq.n	800531c <SX1276OnDio0Irq+0x1e4>
 80052f8:	4b44      	ldr	r3, [pc, #272]	; (800540c <SX1276OnDio0Irq+0x2d4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00c      	beq.n	800531c <SX1276OnDio0Irq+0x1e4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8005302:	4b42      	ldr	r3, [pc, #264]	; (800540c <SX1276OnDio0Irq+0x2d4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689c      	ldr	r4, [r3, #8]
 8005308:	4b3d      	ldr	r3, [pc, #244]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 800530a:	f8b3 107a 	ldrh.w	r1, [r3, #122]	; 0x7a
 800530e:	4b3c      	ldr	r3, [pc, #240]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005310:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8005314:	b21a      	sxth	r2, r3
 8005316:	2300      	movs	r3, #0
 8005318:	483e      	ldr	r0, [pc, #248]	; (8005414 <SX1276OnDio0Irq+0x2dc>)
 800531a:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800531c:	4b38      	ldr	r3, [pc, #224]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8005324:	4b36      	ldr	r3, [pc, #216]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005326:	2200      	movs	r2, #0
 8005328:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800532c:	4b34      	ldr	r3, [pc, #208]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 800532e:	2200      	movs	r2, #0
 8005330:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8005334:	4b32      	ldr	r3, [pc, #200]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005336:	2200      	movs	r2, #0
 8005338:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                break;
 800533c:	e0e7      	b.n	800550e <SX1276OnDio0Irq+0x3d6>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800533e:	2140      	movs	r1, #64	; 0x40
 8005340:	2012      	movs	r0, #18
 8005342:	f7ff fc0d 	bl	8004b60 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8005346:	2012      	movs	r0, #18
 8005348:	f7ff fc1a 	bl	8004b80 <SX1276Read>
 800534c:	4603      	mov	r3, r0
 800534e:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8005350:	7b7b      	ldrb	r3, [r7, #13]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	f003 0320 	and.w	r3, r3, #32
 8005358:	2b20      	cmp	r3, #32
 800535a:	d122      	bne.n	80053a2 <SX1276OnDio0Irq+0x26a>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800535c:	2120      	movs	r1, #32
 800535e:	2012      	movs	r0, #18
 8005360:	f7ff fbfe 	bl	8004b60 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8005364:	4b26      	ldr	r3, [pc, #152]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005366:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800536a:	f083 0301 	eor.w	r3, r3, #1
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <SX1276OnDio0Irq+0x244>
                            SX1276.Settings.State = RF_IDLE;
 8005374:	4b22      	ldr	r3, [pc, #136]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                        TimerStop( &RxTimeoutTimer );
 800537c:	4821      	ldr	r0, [pc, #132]	; (8005404 <SX1276OnDio0Irq+0x2cc>)
 800537e:	f001 fbdb 	bl	8006b38 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8005382:	4b22      	ldr	r3, [pc, #136]	; (800540c <SX1276OnDio0Irq+0x2d4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 80be 	beq.w	8005508 <SX1276OnDio0Irq+0x3d0>
 800538c:	4b1f      	ldr	r3, [pc, #124]	; (800540c <SX1276OnDio0Irq+0x2d4>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80b8 	beq.w	8005508 <SX1276OnDio0Irq+0x3d0>
                            RadioEvents->RxError( );
 8005398:	4b1c      	ldr	r3, [pc, #112]	; (800540c <SX1276OnDio0Irq+0x2d4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	4798      	blx	r3
                        break;
 80053a0:	e0b2      	b.n	8005508 <SX1276OnDio0Irq+0x3d0>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 80053a2:	2019      	movs	r0, #25
 80053a4:	f7ff fbec 	bl	8004b80 <SX1276Read>
 80053a8:	4603      	mov	r3, r0
 80053aa:	b25b      	sxtb	r3, r3
 80053ac:	3302      	adds	r3, #2
 80053ae:	109b      	asrs	r3, r3, #2
 80053b0:	b25a      	sxtb	r2, r3
 80053b2:	4b13      	ldr	r3, [pc, #76]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80053b4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 80053b8:	201a      	movs	r0, #26
 80053ba:	f7ff fbe1 	bl	8004b80 <SX1276Read>
 80053be:	4603      	mov	r3, r0
 80053c0:	81fb      	strh	r3, [r7, #14]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80053c2:	4b0f      	ldr	r3, [pc, #60]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80053c4:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	da3c      	bge.n	8005446 <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80053cc:	4b0c      	ldr	r3, [pc, #48]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80053ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053d0:	4a11      	ldr	r2, [pc, #68]	; (8005418 <SX1276OnDio0Irq+0x2e0>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d922      	bls.n	800541c <SX1276OnDio0Irq+0x2e4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80053d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053da:	111b      	asrs	r3, r3, #4
 80053dc:	b21b      	sxth	r3, r3
 80053de:	b29a      	uxth	r2, r3
 80053e0:	89fb      	ldrh	r3, [r7, #14]
 80053e2:	4413      	add	r3, r2
 80053e4:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80053e6:	4b06      	ldr	r3, [pc, #24]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80053e8:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80053ec:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80053ee:	4413      	add	r3, r2
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	3b9d      	subs	r3, #157	; 0x9d
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	b21a      	sxth	r2, r3
 80053f8:	4b01      	ldr	r3, [pc, #4]	; (8005400 <SX1276OnDio0Irq+0x2c8>)
 80053fa:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80053fe:	e044      	b.n	800548a <SX1276OnDio0Irq+0x352>
 8005400:	200002ec 	.word	0x200002ec
 8005404:	20000394 	.word	0x20000394
 8005408:	200002d4 	.word	0x200002d4
 800540c:	20000044 	.word	0x20000044
 8005410:	20000366 	.word	0x20000366
 8005414:	20000048 	.word	0x20000048
 8005418:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800541c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005420:	111b      	asrs	r3, r3, #4
 8005422:	b21b      	sxth	r3, r3
 8005424:	b29a      	uxth	r2, r3
 8005426:	89fb      	ldrh	r3, [r7, #14]
 8005428:	4413      	add	r3, r2
 800542a:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800542c:	4b4a      	ldr	r3, [pc, #296]	; (8005558 <SX1276OnDio0Irq+0x420>)
 800542e:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8005432:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8005434:	4413      	add	r3, r2
 8005436:	b29b      	uxth	r3, r3
 8005438:	3ba4      	subs	r3, #164	; 0xa4
 800543a:	b29b      	uxth	r3, r3
 800543c:	b21a      	sxth	r2, r3
 800543e:	4b46      	ldr	r3, [pc, #280]	; (8005558 <SX1276OnDio0Irq+0x420>)
 8005440:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005444:	e021      	b.n	800548a <SX1276OnDio0Irq+0x352>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8005446:	4b44      	ldr	r3, [pc, #272]	; (8005558 <SX1276OnDio0Irq+0x420>)
 8005448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800544a:	4a44      	ldr	r2, [pc, #272]	; (800555c <SX1276OnDio0Irq+0x424>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d90e      	bls.n	800546e <SX1276OnDio0Irq+0x336>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8005450:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005454:	111b      	asrs	r3, r3, #4
 8005456:	b21b      	sxth	r3, r3
 8005458:	b29a      	uxth	r2, r3
 800545a:	89fb      	ldrh	r3, [r7, #14]
 800545c:	4413      	add	r3, r2
 800545e:	b29b      	uxth	r3, r3
 8005460:	3b9d      	subs	r3, #157	; 0x9d
 8005462:	b29b      	uxth	r3, r3
 8005464:	b21a      	sxth	r2, r3
 8005466:	4b3c      	ldr	r3, [pc, #240]	; (8005558 <SX1276OnDio0Irq+0x420>)
 8005468:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800546c:	e00d      	b.n	800548a <SX1276OnDio0Irq+0x352>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800546e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005472:	111b      	asrs	r3, r3, #4
 8005474:	b21b      	sxth	r3, r3
 8005476:	b29a      	uxth	r2, r3
 8005478:	89fb      	ldrh	r3, [r7, #14]
 800547a:	4413      	add	r3, r2
 800547c:	b29b      	uxth	r3, r3
 800547e:	3ba4      	subs	r3, #164	; 0xa4
 8005480:	b29b      	uxth	r3, r3
 8005482:	b21a      	sxth	r2, r3
 8005484:	4b34      	ldr	r3, [pc, #208]	; (8005558 <SX1276OnDio0Irq+0x420>)
 8005486:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800548a:	2013      	movs	r0, #19
 800548c:	f7ff fb78 	bl	8004b80 <SX1276Read>
 8005490:	4603      	mov	r3, r0
 8005492:	461a      	mov	r2, r3
 8005494:	4b30      	ldr	r3, [pc, #192]	; (8005558 <SX1276OnDio0Irq+0x420>)
 8005496:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800549a:	2010      	movs	r0, #16
 800549c:	f7ff fb70 	bl	8004b80 <SX1276Read>
 80054a0:	4603      	mov	r3, r0
 80054a2:	4619      	mov	r1, r3
 80054a4:	200d      	movs	r0, #13
 80054a6:	f7ff fb5b 	bl	8004b60 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 80054aa:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <SX1276OnDio0Irq+0x420>)
 80054ac:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80054b0:	4619      	mov	r1, r3
 80054b2:	482b      	ldr	r0, [pc, #172]	; (8005560 <SX1276OnDio0Irq+0x428>)
 80054b4:	f7ff fbee 	bl	8004c94 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 80054b8:	4b27      	ldr	r3, [pc, #156]	; (8005558 <SX1276OnDio0Irq+0x420>)
 80054ba:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80054be:	f083 0301 	eor.w	r3, r3, #1
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <SX1276OnDio0Irq+0x398>
                        SX1276.Settings.State = RF_IDLE;
 80054c8:	4b23      	ldr	r3, [pc, #140]	; (8005558 <SX1276OnDio0Irq+0x420>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutTimer );
 80054d0:	4824      	ldr	r0, [pc, #144]	; (8005564 <SX1276OnDio0Irq+0x42c>)
 80054d2:	f001 fb31 	bl	8006b38 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80054d6:	4b24      	ldr	r3, [pc, #144]	; (8005568 <SX1276OnDio0Irq+0x430>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d016      	beq.n	800550c <SX1276OnDio0Irq+0x3d4>
 80054de:	4b22      	ldr	r3, [pc, #136]	; (8005568 <SX1276OnDio0Irq+0x430>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d011      	beq.n	800550c <SX1276OnDio0Irq+0x3d4>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80054e8:	4b1f      	ldr	r3, [pc, #124]	; (8005568 <SX1276OnDio0Irq+0x430>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689c      	ldr	r4, [r3, #8]
 80054ee:	4b1a      	ldr	r3, [pc, #104]	; (8005558 <SX1276OnDio0Irq+0x420>)
 80054f0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80054f4:	b299      	uxth	r1, r3
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <SX1276OnDio0Irq+0x420>)
 80054f8:	f9b3 20a2 	ldrsh.w	r2, [r3, #162]	; 0xa2
 80054fc:	4b16      	ldr	r3, [pc, #88]	; (8005558 <SX1276OnDio0Irq+0x420>)
 80054fe:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8005502:	4817      	ldr	r0, [pc, #92]	; (8005560 <SX1276OnDio0Irq+0x428>)
 8005504:	47a0      	blx	r4
                break;
 8005506:	e001      	b.n	800550c <SX1276OnDio0Irq+0x3d4>
                        break;
 8005508:	bf00      	nop
 800550a:	e020      	b.n	800554e <SX1276OnDio0Irq+0x416>
                break;
 800550c:	bf00      	nop
            break;
 800550e:	e01e      	b.n	800554e <SX1276OnDio0Irq+0x416>
            TimerStop( &TxTimeoutTimer );
 8005510:	4816      	ldr	r0, [pc, #88]	; (800556c <SX1276OnDio0Irq+0x434>)
 8005512:	f001 fb11 	bl	8006b38 <TimerStop>
            switch( SX1276.Settings.Modem )
 8005516:	4b10      	ldr	r3, [pc, #64]	; (8005558 <SX1276OnDio0Irq+0x420>)
 8005518:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800551c:	2b01      	cmp	r3, #1
 800551e:	d103      	bne.n	8005528 <SX1276OnDio0Irq+0x3f0>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8005520:	2108      	movs	r1, #8
 8005522:	2012      	movs	r0, #18
 8005524:	f7ff fb1c 	bl	8004b60 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8005528:	4b0b      	ldr	r3, [pc, #44]	; (8005558 <SX1276OnDio0Irq+0x420>)
 800552a:	2200      	movs	r2, #0
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005530:	4b0d      	ldr	r3, [pc, #52]	; (8005568 <SX1276OnDio0Irq+0x430>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d008      	beq.n	800554a <SX1276OnDio0Irq+0x412>
 8005538:	4b0b      	ldr	r3, [pc, #44]	; (8005568 <SX1276OnDio0Irq+0x430>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <SX1276OnDio0Irq+0x412>
                    RadioEvents->TxDone( );
 8005542:	4b09      	ldr	r3, [pc, #36]	; (8005568 <SX1276OnDio0Irq+0x430>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4798      	blx	r3
                break;
 800554a:	bf00      	nop
            break;
 800554c:	bf00      	nop
    }
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	bd90      	pop	{r4, r7, pc}
 8005556:	bf00      	nop
 8005558:	200002ec 	.word	0x200002ec
 800555c:	1f4add40 	.word	0x1f4add40
 8005560:	20000048 	.word	0x20000048
 8005564:	20000394 	.word	0x20000394
 8005568:	20000044 	.word	0x20000044
 800556c:	200002bc 	.word	0x200002bc

08005570 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void* context )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8005578:	4b7a      	ldr	r3, [pc, #488]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800557a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800557e:	2b01      	cmp	r3, #1
 8005580:	d003      	beq.n	800558a <SX1276OnDio1Irq+0x1a>
 8005582:	2b02      	cmp	r3, #2
 8005584:	f000 809a 	beq.w	80056bc <SX1276OnDio1Irq+0x14c>
            default:
                break;
            }
            break;
        default:
            break;
 8005588:	e0e7      	b.n	800575a <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 800558a:	4b76      	ldr	r3, [pc, #472]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800558c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <SX1276OnDio1Irq+0x2a>
 8005594:	2b01      	cmp	r3, #1
 8005596:	d06d      	beq.n	8005674 <SX1276OnDio1Irq+0x104>
                break;
 8005598:	e08f      	b.n	80056ba <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 800559a:	f001 f931 	bl	8006800 <SX1276GetDio1PinState>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 8085 	beq.w	80056b0 <SX1276OnDio1Irq+0x140>
                TimerStop( &RxTimeoutSyncWord );
 80055a6:	4870      	ldr	r0, [pc, #448]	; (8005768 <SX1276OnDio1Irq+0x1f8>)
 80055a8:	f001 fac6 	bl	8006b38 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80055ac:	4b6d      	ldr	r3, [pc, #436]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80055ae:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d119      	bne.n	80055ea <SX1276OnDio1Irq+0x7a>
 80055b6:	4b6b      	ldr	r3, [pc, #428]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80055b8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d114      	bne.n	80055ea <SX1276OnDio1Irq+0x7a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80055c0:	4b68      	ldr	r3, [pc, #416]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80055c2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80055c6:	f083 0301 	eor.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d004      	beq.n	80055da <SX1276OnDio1Irq+0x6a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80055d0:	2101      	movs	r1, #1
 80055d2:	4866      	ldr	r0, [pc, #408]	; (800576c <SX1276OnDio1Irq+0x1fc>)
 80055d4:	f7ff fb5e 	bl	8004c94 <SX1276ReadFifo>
 80055d8:	e007      	b.n	80055ea <SX1276OnDio1Irq+0x7a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80055da:	2032      	movs	r0, #50	; 0x32
 80055dc:	f7ff fad0 	bl	8004b80 <SX1276Read>
 80055e0:	4603      	mov	r3, r0
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	4b5f      	ldr	r3, [pc, #380]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80055e6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80055ea:	4b5e      	ldr	r3, [pc, #376]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80055ec:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80055f0:	461a      	mov	r2, r3
 80055f2:	4b5c      	ldr	r3, [pc, #368]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80055f4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	4a5a      	ldr	r2, [pc, #360]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80055fc:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 8005600:	4293      	cmp	r3, r2
 8005602:	db1d      	blt.n	8005640 <SX1276OnDio1Irq+0xd0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8005604:	4b57      	ldr	r3, [pc, #348]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005606:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800560a:	461a      	mov	r2, r3
 800560c:	4b58      	ldr	r3, [pc, #352]	; (8005770 <SX1276OnDio1Irq+0x200>)
 800560e:	441a      	add	r2, r3
 8005610:	4b54      	ldr	r3, [pc, #336]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005612:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005616:	3b01      	subs	r3, #1
 8005618:	b2db      	uxtb	r3, r3
 800561a:	4619      	mov	r1, r3
 800561c:	4610      	mov	r0, r2
 800561e:	f7ff fb39 	bl	8004c94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8005622:	4b50      	ldr	r3, [pc, #320]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005624:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8005628:	4b4e      	ldr	r3, [pc, #312]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800562a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800562e:	b29b      	uxth	r3, r3
 8005630:	4413      	add	r3, r2
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	4b4a      	ldr	r3, [pc, #296]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800563a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 800563e:	e03c      	b.n	80056ba <SX1276OnDio1Irq+0x14a>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005640:	4b48      	ldr	r3, [pc, #288]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005642:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005646:	461a      	mov	r2, r3
 8005648:	4b49      	ldr	r3, [pc, #292]	; (8005770 <SX1276OnDio1Irq+0x200>)
 800564a:	18d0      	adds	r0, r2, r3
 800564c:	4b45      	ldr	r3, [pc, #276]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800564e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005652:	b2da      	uxtb	r2, r3
 8005654:	4b43      	ldr	r3, [pc, #268]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005656:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800565a:	b2db      	uxtb	r3, r3
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4619      	mov	r1, r3
 8005662:	f7ff fb17 	bl	8004c94 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005666:	4b3f      	ldr	r3, [pc, #252]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005668:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800566c:	4b3d      	ldr	r3, [pc, #244]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800566e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8005672:	e022      	b.n	80056ba <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 8005674:	f001 f8c4 	bl	8006800 <SX1276GetDio1PinState>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d01a      	beq.n	80056b4 <SX1276OnDio1Irq+0x144>
                TimerStop( &RxTimeoutTimer );
 800567e:	483d      	ldr	r0, [pc, #244]	; (8005774 <SX1276OnDio1Irq+0x204>)
 8005680:	f001 fa5a 	bl	8006b38 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8005684:	2180      	movs	r1, #128	; 0x80
 8005686:	2012      	movs	r0, #18
 8005688:	f7ff fa6a 	bl	8004b60 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800568c:	4b35      	ldr	r3, [pc, #212]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800568e:	2200      	movs	r2, #0
 8005690:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005694:	4b38      	ldr	r3, [pc, #224]	; (8005778 <SX1276OnDio1Irq+0x208>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00d      	beq.n	80056b8 <SX1276OnDio1Irq+0x148>
 800569c:	4b36      	ldr	r3, [pc, #216]	; (8005778 <SX1276OnDio1Irq+0x208>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d008      	beq.n	80056b8 <SX1276OnDio1Irq+0x148>
                    RadioEvents->RxTimeout( );
 80056a6:	4b34      	ldr	r3, [pc, #208]	; (8005778 <SX1276OnDio1Irq+0x208>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	4798      	blx	r3
                break;
 80056ae:	e003      	b.n	80056b8 <SX1276OnDio1Irq+0x148>
                    break;
 80056b0:	bf00      	nop
 80056b2:	e052      	b.n	800575a <SX1276OnDio1Irq+0x1ea>
                    break;
 80056b4:	bf00      	nop
 80056b6:	e050      	b.n	800575a <SX1276OnDio1Irq+0x1ea>
                break;
 80056b8:	bf00      	nop
            break;
 80056ba:	e04e      	b.n	800575a <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 80056bc:	4b29      	ldr	r3, [pc, #164]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80056be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <SX1276OnDio1Irq+0x15a>
 80056c6:	2b01      	cmp	r3, #1
                break;
 80056c8:	e046      	b.n	8005758 <SX1276OnDio1Irq+0x1e8>
                if( SX1276GetDio1PinState( ) == 1 )
 80056ca:	f001 f899 	bl	8006800 <SX1276GetDio1PinState>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d040      	beq.n	8005756 <SX1276OnDio1Irq+0x1e6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80056d4:	4b23      	ldr	r3, [pc, #140]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80056d6:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80056da:	461a      	mov	r2, r3
 80056dc:	4b21      	ldr	r3, [pc, #132]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80056de:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	4a1f      	ldr	r2, [pc, #124]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80056e6:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 80056ea:	4293      	cmp	r3, r2
 80056ec:	dd19      	ble.n	8005722 <SX1276OnDio1Irq+0x1b2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80056ee:	4b1d      	ldr	r3, [pc, #116]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80056f0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80056f4:	461a      	mov	r2, r3
 80056f6:	4b1e      	ldr	r3, [pc, #120]	; (8005770 <SX1276OnDio1Irq+0x200>)
 80056f8:	4413      	add	r3, r2
 80056fa:	4a1a      	ldr	r2, [pc, #104]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 80056fc:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8005700:	4611      	mov	r1, r2
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff fab6 	bl	8004c74 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005708:	4b16      	ldr	r3, [pc, #88]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800570a:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800570e:	4b15      	ldr	r3, [pc, #84]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005710:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005714:	b29b      	uxth	r3, r3
 8005716:	4413      	add	r3, r2
 8005718:	b29a      	uxth	r2, r3
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800571c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8005720:	e01a      	b.n	8005758 <SX1276OnDio1Irq+0x1e8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005724:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005728:	461a      	mov	r2, r3
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <SX1276OnDio1Irq+0x200>)
 800572c:	18d0      	adds	r0, r2, r3
 800572e:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005730:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005734:	b2da      	uxtb	r2, r3
 8005736:	4b0b      	ldr	r3, [pc, #44]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005738:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800573c:	b2db      	uxtb	r3, r3
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	b2db      	uxtb	r3, r3
 8005742:	4619      	mov	r1, r3
 8005744:	f7ff fa96 	bl	8004c74 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8005748:	4b06      	ldr	r3, [pc, #24]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 800574a:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800574e:	4b05      	ldr	r3, [pc, #20]	; (8005764 <SX1276OnDio1Irq+0x1f4>)
 8005750:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8005754:	e000      	b.n	8005758 <SX1276OnDio1Irq+0x1e8>
                    break;
 8005756:	bf00      	nop
            break;
 8005758:	bf00      	nop
    }
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200002ec 	.word	0x200002ec
 8005768:	200002d4 	.word	0x200002d4
 800576c:	20000366 	.word	0x20000366
 8005770:	20000048 	.word	0x20000048
 8005774:	20000394 	.word	0x20000394
 8005778:	20000044 	.word	0x20000044

0800577c <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void* context )
{
 800577c:	b590      	push	{r4, r7, lr}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8005784:	4b52      	ldr	r3, [pc, #328]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 8005786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800578a:	2b01      	cmp	r3, #1
 800578c:	d002      	beq.n	8005794 <SX1276OnDio2Irq+0x18>
 800578e:	2b02      	cmp	r3, #2
 8005790:	d06e      	beq.n	8005870 <SX1276OnDio2Irq+0xf4>
            default:
                break;
            }
            break;
        default:
            break;
 8005792:	e099      	b.n	80058c8 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 8005794:	4b4e      	ldr	r3, [pc, #312]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 8005796:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <SX1276OnDio2Irq+0x28>
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d043      	beq.n	800582a <SX1276OnDio2Irq+0xae>
                break;
 80057a2:	e064      	b.n	800586e <SX1276OnDio2Irq+0xf2>
                if( SX1276.DIO4.port == NULL )
 80057a4:	4b4a      	ldr	r3, [pc, #296]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 80057a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d103      	bne.n	80057b4 <SX1276OnDio2Irq+0x38>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 80057ac:	4b48      	ldr	r3, [pc, #288]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 80057b4:	4b46      	ldr	r3, [pc, #280]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 80057b6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d054      	beq.n	8005868 <SX1276OnDio2Irq+0xec>
 80057be:	4b44      	ldr	r3, [pc, #272]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 80057c0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d14f      	bne.n	8005868 <SX1276OnDio2Irq+0xec>
                    TimerStop( &RxTimeoutSyncWord );
 80057c8:	4842      	ldr	r0, [pc, #264]	; (80058d4 <SX1276OnDio2Irq+0x158>)
 80057ca:	f001 f9b5 	bl	8006b38 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80057ce:	4b40      	ldr	r3, [pc, #256]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80057d6:	2011      	movs	r0, #17
 80057d8:	f7ff f9d2 	bl	8004b80 <SX1276Read>
 80057dc:	4603      	mov	r3, r0
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	425b      	negs	r3, r3
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	b25a      	sxtb	r2, r3
 80057e8:	4b39      	ldr	r3, [pc, #228]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 80057ea:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80057ee:	201b      	movs	r0, #27
 80057f0:	f7ff f9c6 	bl	8004b80 <SX1276Read>
 80057f4:	4603      	mov	r3, r0
 80057f6:	021c      	lsls	r4, r3, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80057f8:	201c      	movs	r0, #28
 80057fa:	f7ff f9c1 	bl	8004b80 <SX1276Read>
 80057fe:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005800:	4323      	orrs	r3, r4
 8005802:	4618      	mov	r0, r3
 8005804:	f7ff faaa 	bl	8004d5c <SX1276ConvertPllStepToFreqInHz>
 8005808:	4603      	mov	r3, r0
 800580a:	461a      	mov	r2, r3
 800580c:	4b30      	ldr	r3, [pc, #192]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 800580e:	675a      	str	r2, [r3, #116]	; 0x74
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8005810:	200c      	movs	r0, #12
 8005812:	f7ff f9b5 	bl	8004b80 <SX1276Read>
 8005816:	4603      	mov	r3, r0
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	b2db      	uxtb	r3, r3
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	b2da      	uxtb	r2, r3
 8005822:	4b2b      	ldr	r3, [pc, #172]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 8005824:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                break;
 8005828:	e01e      	b.n	8005868 <SX1276OnDio2Irq+0xec>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800582a:	4b29      	ldr	r3, [pc, #164]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 800582c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <SX1276OnDio2Irq+0xf0>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005834:	2102      	movs	r1, #2
 8005836:	2012      	movs	r0, #18
 8005838:	f7ff f992 	bl	8004b60 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800583c:	4b26      	ldr	r3, [pc, #152]	; (80058d8 <SX1276OnDio2Irq+0x15c>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d013      	beq.n	800586c <SX1276OnDio2Irq+0xf0>
 8005844:	4b24      	ldr	r3, [pc, #144]	; (80058d8 <SX1276OnDio2Irq+0x15c>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	695b      	ldr	r3, [r3, #20]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00e      	beq.n	800586c <SX1276OnDio2Irq+0xf0>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800584e:	4b22      	ldr	r3, [pc, #136]	; (80058d8 <SX1276OnDio2Irq+0x15c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	695c      	ldr	r4, [r3, #20]
 8005854:	201c      	movs	r0, #28
 8005856:	f7ff f993 	bl	8004b80 <SX1276Read>
 800585a:	4603      	mov	r3, r0
 800585c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005860:	b2db      	uxtb	r3, r3
 8005862:	4618      	mov	r0, r3
 8005864:	47a0      	blx	r4
                break;
 8005866:	e001      	b.n	800586c <SX1276OnDio2Irq+0xf0>
                break;
 8005868:	bf00      	nop
 800586a:	e02d      	b.n	80058c8 <SX1276OnDio2Irq+0x14c>
                break;
 800586c:	bf00      	nop
            break;
 800586e:	e02b      	b.n	80058c8 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 8005870:	4b17      	ldr	r3, [pc, #92]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 8005872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005876:	2b00      	cmp	r3, #0
 8005878:	d020      	beq.n	80058bc <SX1276OnDio2Irq+0x140>
 800587a:	2b01      	cmp	r3, #1
 800587c:	d120      	bne.n	80058c0 <SX1276OnDio2Irq+0x144>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800587e:	4b14      	ldr	r3, [pc, #80]	; (80058d0 <SX1276OnDio2Irq+0x154>)
 8005880:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01d      	beq.n	80058c4 <SX1276OnDio2Irq+0x148>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005888:	2102      	movs	r1, #2
 800588a:	2012      	movs	r0, #18
 800588c:	f7ff f968 	bl	8004b60 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005890:	4b11      	ldr	r3, [pc, #68]	; (80058d8 <SX1276OnDio2Irq+0x15c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d015      	beq.n	80058c4 <SX1276OnDio2Irq+0x148>
 8005898:	4b0f      	ldr	r3, [pc, #60]	; (80058d8 <SX1276OnDio2Irq+0x15c>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d010      	beq.n	80058c4 <SX1276OnDio2Irq+0x148>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80058a2:	4b0d      	ldr	r3, [pc, #52]	; (80058d8 <SX1276OnDio2Irq+0x15c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695c      	ldr	r4, [r3, #20]
 80058a8:	201c      	movs	r0, #28
 80058aa:	f7ff f969 	bl	8004b80 <SX1276Read>
 80058ae:	4603      	mov	r3, r0
 80058b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	4618      	mov	r0, r3
 80058b8:	47a0      	blx	r4
                break;
 80058ba:	e003      	b.n	80058c4 <SX1276OnDio2Irq+0x148>
                break;
 80058bc:	bf00      	nop
 80058be:	e002      	b.n	80058c6 <SX1276OnDio2Irq+0x14a>
                break;
 80058c0:	bf00      	nop
 80058c2:	e000      	b.n	80058c6 <SX1276OnDio2Irq+0x14a>
                break;
 80058c4:	bf00      	nop
            break;
 80058c6:	bf00      	nop
    }
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd90      	pop	{r4, r7, pc}
 80058d0:	200002ec 	.word	0x200002ec
 80058d4:	200002d4 	.word	0x200002d4
 80058d8:	20000044 	.word	0x20000044

080058dc <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void* context )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 80058e4:	4b1e      	ldr	r3, [pc, #120]	; (8005960 <SX1276OnDio3Irq+0x84>)
 80058e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d030      	beq.n	8005950 <SX1276OnDio3Irq+0x74>
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d000      	beq.n	80058f4 <SX1276OnDio3Irq+0x18>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 80058f2:	e030      	b.n	8005956 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80058f4:	2012      	movs	r0, #18
 80058f6:	f7ff f943 	bl	8004b80 <SX1276Read>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b01      	cmp	r3, #1
 8005902:	d112      	bne.n	800592a <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8005904:	2105      	movs	r1, #5
 8005906:	2012      	movs	r0, #18
 8005908:	f7ff f92a 	bl	8004b60 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800590c:	4b15      	ldr	r3, [pc, #84]	; (8005964 <SX1276OnDio3Irq+0x88>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d01f      	beq.n	8005954 <SX1276OnDio3Irq+0x78>
 8005914:	4b13      	ldr	r3, [pc, #76]	; (8005964 <SX1276OnDio3Irq+0x88>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d01a      	beq.n	8005954 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 800591e:	4b11      	ldr	r3, [pc, #68]	; (8005964 <SX1276OnDio3Irq+0x88>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	699b      	ldr	r3, [r3, #24]
 8005924:	2001      	movs	r0, #1
 8005926:	4798      	blx	r3
        break;
 8005928:	e014      	b.n	8005954 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800592a:	2104      	movs	r1, #4
 800592c:	2012      	movs	r0, #18
 800592e:	f7ff f917 	bl	8004b60 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005932:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <SX1276OnDio3Irq+0x88>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d00c      	beq.n	8005954 <SX1276OnDio3Irq+0x78>
 800593a:	4b0a      	ldr	r3, [pc, #40]	; (8005964 <SX1276OnDio3Irq+0x88>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	699b      	ldr	r3, [r3, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d007      	beq.n	8005954 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8005944:	4b07      	ldr	r3, [pc, #28]	; (8005964 <SX1276OnDio3Irq+0x88>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	699b      	ldr	r3, [r3, #24]
 800594a:	2000      	movs	r0, #0
 800594c:	4798      	blx	r3
        break;
 800594e:	e001      	b.n	8005954 <SX1276OnDio3Irq+0x78>
        break;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <SX1276OnDio3Irq+0x7a>
        break;
 8005954:	bf00      	nop
    }
}
 8005956:	bf00      	nop
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	200002ec 	.word	0x200002ec
 8005964:	20000044 	.word	0x20000044

08005968 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void* context )
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8005970:	4b0c      	ldr	r3, [pc, #48]	; (80059a4 <SX1276OnDio4Irq+0x3c>)
 8005972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005976:	2b00      	cmp	r3, #0
 8005978:	d002      	beq.n	8005980 <SX1276OnDio4Irq+0x18>
 800597a:	2b01      	cmp	r3, #1
 800597c:	d00a      	beq.n	8005994 <SX1276OnDio4Irq+0x2c>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800597e:	e00c      	b.n	800599a <SX1276OnDio4Irq+0x32>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005980:	4b08      	ldr	r3, [pc, #32]	; (80059a4 <SX1276OnDio4Irq+0x3c>)
 8005982:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <SX1276OnDio4Irq+0x30>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <SX1276OnDio4Irq+0x3c>)
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        break;
 8005992:	e001      	b.n	8005998 <SX1276OnDio4Irq+0x30>
        break;
 8005994:	bf00      	nop
 8005996:	e000      	b.n	800599a <SX1276OnDio4Irq+0x32>
        break;
 8005998:	bf00      	nop
    }
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	200002ec 	.word	0x200002ec

080059a8 <BoardCriticalSectionBegin>:

uint8_t Uart2TxBuffer[UART2_FIFO_TX_SIZE];
uint8_t Uart2RxBuffer[UART2_FIFO_RX_SIZE];

void BoardCriticalSectionBegin( uint32_t *mask )
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059b0:	f3ef 8310 	mrs	r3, PRIMASK
 80059b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80059b6:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80059bc:	b672      	cpsid	i
}
 80059be:	bf00      	nop
    __disable_irq( );
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	bf00      	nop
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bc80      	pop	{r7}
 80059e8:	4770      	bx	lr

080059ea <BoardInitPeriph>:

void BoardInitPeriph( void )
{
 80059ea:	b480      	push	{r7}
 80059ec:	af00      	add	r7, sp, #0

}
 80059ee:	bf00      	nop
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bc80      	pop	{r7}
 80059f4:	4770      	bx	lr
	...

080059f8 <BoardInitMcu>:

void BoardInitMcu( void )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
    if( McuInitialized == false )
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <BoardInitMcu+0x20>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f083 0301 	eor.w	r3, r3, #1
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <BoardInitMcu+0x1a>
    {
        RtcInit( );
 8005a0a:	f000 fabb 	bl	8005f84 <RtcInit>
        BoardUnusedIoInit( );
 8005a0e:	f000 f805 	bl	8005a1c <BoardUnusedIoInit>
//        LpmSetOffMode( LPM_APPLI_ID, LPM_DISABLE );

    }
}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000148 	.word	0x20000148

08005a1c <BoardUnusedIoInit>:
//    // Compute and return the temperature in degree celcius * 256
//    return ( int16_t ) COMPUTE_TEMPERATURE( tempRaw, BatteryVoltage );
//}

static void BoardUnusedIoInit( void )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
    HAL_DBGMCU_EnableDBGSleepMode( );
 8005a20:	f7fb f9de 	bl	8000de0 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode( );
 8005a24:	f7fb f9ea 	bl	8000dfc <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 8005a28:	f7fb f9f6 	bl	8000e18 <HAL_DBGMCU_EnableDBGStandbyMode>
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fb f9af 	bl	8000d9c <HAL_Delay>
}
 8005a3e:	bf00      	nop
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <init_rf>:
 */
extern Gpio_t Led1;
extern Gpio_t Led2;

void init_rf (void)
{
 8005a48:	b590      	push	{r4, r7, lr}
 8005a4a:	b08b      	sub	sp, #44	; 0x2c
 8005a4c:	af0a      	add	r7, sp, #40	; 0x28
  // Target board initialization
  BoardInitMcu( );
 8005a4e:	f7ff ffd3 	bl	80059f8 <BoardInitMcu>
  BoardInitPeriph( );
 8005a52:	f7ff ffca 	bl	80059ea <BoardInitPeriph>

  // Radio initialization
  RadioEvents.TxDone = OnTxDone;
 8005a56:	4b2c      	ldr	r3, [pc, #176]	; (8005b08 <init_rf+0xc0>)
 8005a58:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <init_rf+0xc4>)
 8005a5a:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8005a5c:	4b2a      	ldr	r3, [pc, #168]	; (8005b08 <init_rf+0xc0>)
 8005a5e:	4a2c      	ldr	r2, [pc, #176]	; (8005b10 <init_rf+0xc8>)
 8005a60:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <init_rf+0xc0>)
 8005a64:	4a2b      	ldr	r2, [pc, #172]	; (8005b14 <init_rf+0xcc>)
 8005a66:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8005a68:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <init_rf+0xc0>)
 8005a6a:	4a2b      	ldr	r2, [pc, #172]	; (8005b18 <init_rf+0xd0>)
 8005a6c:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8005a6e:	4b26      	ldr	r3, [pc, #152]	; (8005b08 <init_rf+0xc0>)
 8005a70:	4a2a      	ldr	r2, [pc, #168]	; (8005b1c <init_rf+0xd4>)
 8005a72:	611a      	str	r2, [r3, #16]

  Radio.Init( &RadioEvents );
 8005a74:	4b2a      	ldr	r3, [pc, #168]	; (8005b20 <init_rf+0xd8>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4823      	ldr	r0, [pc, #140]	; (8005b08 <init_rf+0xc0>)
 8005a7a:	4798      	blx	r3

  Radio.SetChannel( RF_FREQUENCY );
 8005a7c:	4b28      	ldr	r3, [pc, #160]	; (8005b20 <init_rf+0xd8>)
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	4828      	ldr	r0, [pc, #160]	; (8005b24 <init_rf+0xdc>)
 8005a82:	4798      	blx	r3

  Radio.SetMaxPayloadLength( MODEM_LORA, BUFFER_SIZE );

#elif defined( USE_MODEM_FSK )

  Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 8005a84:	4b26      	ldr	r3, [pc, #152]	; (8005b20 <init_rf+0xd8>)
 8005a86:	69dc      	ldr	r4, [r3, #28]
 8005a88:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005a8c:	9308      	str	r3, [sp, #32]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	9307      	str	r3, [sp, #28]
 8005a92:	2300      	movs	r3, #0
 8005a94:	9306      	str	r3, [sp, #24]
 8005a96:	2300      	movs	r3, #0
 8005a98:	9305      	str	r3, [sp, #20]
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	9304      	str	r3, [sp, #16]
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	9303      	str	r3, [sp, #12]
 8005aa2:	2305      	movs	r3, #5
 8005aa4:	9302      	str	r3, [sp, #8]
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8005ab6:	210e      	movs	r1, #14
 8005ab8:	2000      	movs	r0, #0
 8005aba:	47a0      	blx	r4
                                FSK_DATARATE, 0,
                                FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
                                true, 0, 0, 0, 3000 );

  Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 8005abc:	4b18      	ldr	r3, [pc, #96]	; (8005b20 <init_rf+0xd8>)
 8005abe:	699c      	ldr	r4, [r3, #24]
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	9308      	str	r3, [sp, #32]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	9307      	str	r3, [sp, #28]
 8005acc:	2300      	movs	r3, #0
 8005ace:	9306      	str	r3, [sp, #24]
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	9305      	str	r3, [sp, #20]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9304      	str	r3, [sp, #16]
 8005ad8:	2300      	movs	r3, #0
 8005ada:	9303      	str	r3, [sp, #12]
 8005adc:	2300      	movs	r3, #0
 8005ade:	9302      	str	r3, [sp, #8]
 8005ae0:	2305      	movs	r3, #5
 8005ae2:	9301      	str	r3, [sp, #4]
 8005ae4:	4b10      	ldr	r3, [pc, #64]	; (8005b28 <init_rf+0xe0>)
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005aee:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005af2:	2000      	movs	r0, #0
 8005af4:	47a0      	blx	r4
                                0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
                                0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, true,
                                0, 0,false, true );

  Radio.SetMaxPayloadLength( MODEM_FSK, BUFFER_SIZE );
 8005af6:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <init_rf+0xd8>)
 8005af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005afa:	2140      	movs	r1, #64	; 0x40
 8005afc:	2000      	movs	r0, #0
 8005afe:	4798      	blx	r3
#endif

}
 8005b00:	bf00      	nop
 8005b02:	3704      	adds	r7, #4
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd90      	pop	{r4, r7, pc}
 8005b08:	20000154 	.word	0x20000154
 8005b0c:	08005d89 	.word	0x08005d89
 8005b10:	08005dc1 	.word	0x08005dc1
 8005b14:	08005e45 	.word	0x08005e45
 8005b18:	08005e61 	.word	0x08005e61
 8005b1c:	08005e7d 	.word	0x08005e7d
 8005b20:	08006f54 	.word	0x08006f54
 8005b24:	1ad27480 	.word	0x1ad27480
 8005b28:	00014585 	.word	0x00014585

08005b2c <ping_pong_rf>:
}
#endif


void ping_pong_rf (void)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
//  RtcInit();
  bool isMaster = true;
 8005b32:	2301      	movs	r3, #1
 8005b34:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  init_rf( );
 8005b36:	f7ff ff87 	bl	8005a48 <init_rf>
    }
  }
#endif

#ifdef PER_TEST
  uint32_t aver_time = AverageTime(10, 50, 0); // замеряем время требуемое для передачи последовательности
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	2132      	movs	r1, #50	; 0x32
 8005b3e:	200a      	movs	r0, #10
 8005b40:	f000 f9fc 	bl	8005f3c <AverageTime>
 8005b44:	6038      	str	r0, [r7, #0]
#endif

  HAL_GPIO_WritePin(LED_EXT_GPIO_Port, LED_EXT_Pin, RESET);
 8005b46:	2200      	movs	r2, #0
 8005b48:	2108      	movs	r1, #8
 8005b4a:	4886      	ldr	r0, [pc, #536]	; (8005d64 <ping_pong_rf+0x238>)
 8005b4c:	f7fb fc39 	bl	80013c2 <HAL_GPIO_WritePin>
  Radio.Rx( RX_TIMEOUT_VALUE );
 8005b50:	4b85      	ldr	r3, [pc, #532]	; (8005d68 <ping_pong_rf+0x23c>)
 8005b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b58:	4798      	blx	r3

  while( 1 )
     {
         switch( State )
 8005b5a:	4b84      	ldr	r3, [pc, #528]	; (8005d6c <ping_pong_rf+0x240>)
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	f200 80f4 	bhi.w	8005d4e <ping_pong_rf+0x222>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <ping_pong_rf+0x40>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005b81 	.word	0x08005b81
 8005b70:	08005cd1 	.word	0x08005cd1
 8005b74:	08005cd1 	.word	0x08005cd1
 8005b78:	08005cb9 	.word	0x08005cb9
 8005b7c:	08005d3d 	.word	0x08005d3d
         {
         case RX:
             if( isMaster == true )
 8005b80:	79fb      	ldrb	r3, [r7, #7]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d054      	beq.n	8005c30 <ping_pong_rf+0x104>
             {
                 if( BufferSize > 0 )
 8005b86:	4b7a      	ldr	r3, [pc, #488]	; (8005d70 <ping_pong_rf+0x244>)
 8005b88:	881b      	ldrh	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8090 	beq.w	8005cb0 <ping_pong_rf+0x184>
                 {
                     if( strncmp( ( const char* )Buffer, ( const char* )PongMsg, 4 ) == 0 )
 8005b90:	2204      	movs	r2, #4
 8005b92:	4978      	ldr	r1, [pc, #480]	; (8005d74 <ping_pong_rf+0x248>)
 8005b94:	4878      	ldr	r0, [pc, #480]	; (8005d78 <ping_pong_rf+0x24c>)
 8005b96:	f001 f929 	bl	8006dec <strncmp>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d12c      	bne.n	8005bfa <ping_pong_rf+0xce>
                     {
                         // Indicates on a LED that the received frame is a PONG
                         GpioToggle( &Led1 );
 8005ba0:	4876      	ldr	r0, [pc, #472]	; (8005d7c <ping_pong_rf+0x250>)
 8005ba2:	f7fa fd38 	bl	8000616 <GpioToggle>

                         // Send the next PING frame
                         Buffer[0] = 'P';
 8005ba6:	4b74      	ldr	r3, [pc, #464]	; (8005d78 <ping_pong_rf+0x24c>)
 8005ba8:	2250      	movs	r2, #80	; 0x50
 8005baa:	701a      	strb	r2, [r3, #0]
                         Buffer[1] = 'I';
 8005bac:	4b72      	ldr	r3, [pc, #456]	; (8005d78 <ping_pong_rf+0x24c>)
 8005bae:	2249      	movs	r2, #73	; 0x49
 8005bb0:	705a      	strb	r2, [r3, #1]
                         Buffer[2] = 'N';
 8005bb2:	4b71      	ldr	r3, [pc, #452]	; (8005d78 <ping_pong_rf+0x24c>)
 8005bb4:	224e      	movs	r2, #78	; 0x4e
 8005bb6:	709a      	strb	r2, [r3, #2]
                         Buffer[3] = 'G';
 8005bb8:	4b6f      	ldr	r3, [pc, #444]	; (8005d78 <ping_pong_rf+0x24c>)
 8005bba:	2247      	movs	r2, #71	; 0x47
 8005bbc:	70da      	strb	r2, [r3, #3]
                         // We fill the buffer with numbers for the payload
                         for( i = 4; i < BufferSize; i++ )
 8005bbe:	2304      	movs	r3, #4
 8005bc0:	71bb      	strb	r3, [r7, #6]
 8005bc2:	e008      	b.n	8005bd6 <ping_pong_rf+0xaa>
                         {
                             Buffer[i] = i - 4;
 8005bc4:	79bb      	ldrb	r3, [r7, #6]
 8005bc6:	79ba      	ldrb	r2, [r7, #6]
 8005bc8:	3a04      	subs	r2, #4
 8005bca:	b2d1      	uxtb	r1, r2
 8005bcc:	4a6a      	ldr	r2, [pc, #424]	; (8005d78 <ping_pong_rf+0x24c>)
 8005bce:	54d1      	strb	r1, [r2, r3]
                         for( i = 4; i < BufferSize; i++ )
 8005bd0:	79bb      	ldrb	r3, [r7, #6]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	71bb      	strb	r3, [r7, #6]
 8005bd6:	79bb      	ldrb	r3, [r7, #6]
 8005bd8:	b29a      	uxth	r2, r3
 8005bda:	4b65      	ldr	r3, [pc, #404]	; (8005d70 <ping_pong_rf+0x244>)
 8005bdc:	881b      	ldrh	r3, [r3, #0]
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d3f0      	bcc.n	8005bc4 <ping_pong_rf+0x98>
                         }
                         DelayMs( 1 );
 8005be2:	2001      	movs	r0, #1
 8005be4:	f7ff ff24 	bl	8005a30 <DelayMs>
                         Radio.Send( Buffer, BufferSize );
 8005be8:	4b5f      	ldr	r3, [pc, #380]	; (8005d68 <ping_pong_rf+0x23c>)
 8005bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bec:	4a60      	ldr	r2, [pc, #384]	; (8005d70 <ping_pong_rf+0x244>)
 8005bee:	8812      	ldrh	r2, [r2, #0]
 8005bf0:	b2d2      	uxtb	r2, r2
 8005bf2:	4611      	mov	r1, r2
 8005bf4:	4860      	ldr	r0, [pc, #384]	; (8005d78 <ping_pong_rf+0x24c>)
 8005bf6:	4798      	blx	r3
 8005bf8:	e05a      	b.n	8005cb0 <ping_pong_rf+0x184>
                     }
                     else if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 8005bfa:	2204      	movs	r2, #4
 8005bfc:	4960      	ldr	r1, [pc, #384]	; (8005d80 <ping_pong_rf+0x254>)
 8005bfe:	485e      	ldr	r0, [pc, #376]	; (8005d78 <ping_pong_rf+0x24c>)
 8005c00:	f001 f8f4 	bl	8006dec <strncmp>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <ping_pong_rf+0xf4>
                     { // A master already exists then become a slave
                         isMaster = false;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	71fb      	strb	r3, [r7, #7]
                         GpioToggle( &Led2 ); // Set LED off
 8005c0e:	485d      	ldr	r0, [pc, #372]	; (8005d84 <ping_pong_rf+0x258>)
 8005c10:	f7fa fd01 	bl	8000616 <GpioToggle>
                         Radio.Rx( RX_TIMEOUT_VALUE );
 8005c14:	4b54      	ldr	r3, [pc, #336]	; (8005d68 <ping_pong_rf+0x23c>)
 8005c16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c1c:	4798      	blx	r3
 8005c1e:	e047      	b.n	8005cb0 <ping_pong_rf+0x184>
                     }
                     else // valid reception but neither a PING or a PONG message
                     {    // Set device as master ans start again
                         isMaster = true;
 8005c20:	2301      	movs	r3, #1
 8005c22:	71fb      	strb	r3, [r7, #7]
                         Radio.Rx( RX_TIMEOUT_VALUE );
 8005c24:	4b50      	ldr	r3, [pc, #320]	; (8005d68 <ping_pong_rf+0x23c>)
 8005c26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005c2c:	4798      	blx	r3
 8005c2e:	e03f      	b.n	8005cb0 <ping_pong_rf+0x184>
                     }
                 }
             }
             else
             {
                 if( BufferSize > 0 )
 8005c30:	4b4f      	ldr	r3, [pc, #316]	; (8005d70 <ping_pong_rf+0x244>)
 8005c32:	881b      	ldrh	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d03b      	beq.n	8005cb0 <ping_pong_rf+0x184>
                 {
                     if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 8005c38:	2204      	movs	r2, #4
 8005c3a:	4951      	ldr	r1, [pc, #324]	; (8005d80 <ping_pong_rf+0x254>)
 8005c3c:	484e      	ldr	r0, [pc, #312]	; (8005d78 <ping_pong_rf+0x24c>)
 8005c3e:	f001 f8d5 	bl	8006dec <strncmp>
 8005c42:	4603      	mov	r3, r0
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d12c      	bne.n	8005ca2 <ping_pong_rf+0x176>
                     {
                         // Indicates on a LED that the received frame is a PING
                         GpioToggle( &Led1 );
 8005c48:	484c      	ldr	r0, [pc, #304]	; (8005d7c <ping_pong_rf+0x250>)
 8005c4a:	f7fa fce4 	bl	8000616 <GpioToggle>

                         // Send the reply to the PONG string
                         Buffer[0] = 'P';
 8005c4e:	4b4a      	ldr	r3, [pc, #296]	; (8005d78 <ping_pong_rf+0x24c>)
 8005c50:	2250      	movs	r2, #80	; 0x50
 8005c52:	701a      	strb	r2, [r3, #0]
                         Buffer[1] = 'O';
 8005c54:	4b48      	ldr	r3, [pc, #288]	; (8005d78 <ping_pong_rf+0x24c>)
 8005c56:	224f      	movs	r2, #79	; 0x4f
 8005c58:	705a      	strb	r2, [r3, #1]
                         Buffer[2] = 'N';
 8005c5a:	4b47      	ldr	r3, [pc, #284]	; (8005d78 <ping_pong_rf+0x24c>)
 8005c5c:	224e      	movs	r2, #78	; 0x4e
 8005c5e:	709a      	strb	r2, [r3, #2]
                         Buffer[3] = 'G';
 8005c60:	4b45      	ldr	r3, [pc, #276]	; (8005d78 <ping_pong_rf+0x24c>)
 8005c62:	2247      	movs	r2, #71	; 0x47
 8005c64:	70da      	strb	r2, [r3, #3]
                         // We fill the buffer with numbers for the payload
                         for( i = 4; i < BufferSize; i++ )
 8005c66:	2304      	movs	r3, #4
 8005c68:	71bb      	strb	r3, [r7, #6]
 8005c6a:	e008      	b.n	8005c7e <ping_pong_rf+0x152>
                         {
                             Buffer[i] = i - 4;
 8005c6c:	79bb      	ldrb	r3, [r7, #6]
 8005c6e:	79ba      	ldrb	r2, [r7, #6]
 8005c70:	3a04      	subs	r2, #4
 8005c72:	b2d1      	uxtb	r1, r2
 8005c74:	4a40      	ldr	r2, [pc, #256]	; (8005d78 <ping_pong_rf+0x24c>)
 8005c76:	54d1      	strb	r1, [r2, r3]
                         for( i = 4; i < BufferSize; i++ )
 8005c78:	79bb      	ldrb	r3, [r7, #6]
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	71bb      	strb	r3, [r7, #6]
 8005c7e:	79bb      	ldrb	r3, [r7, #6]
 8005c80:	b29a      	uxth	r2, r3
 8005c82:	4b3b      	ldr	r3, [pc, #236]	; (8005d70 <ping_pong_rf+0x244>)
 8005c84:	881b      	ldrh	r3, [r3, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d3f0      	bcc.n	8005c6c <ping_pong_rf+0x140>
                         }
                         DelayMs( 1 );
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	f7ff fed0 	bl	8005a30 <DelayMs>
                         Radio.Send( Buffer, BufferSize );
 8005c90:	4b35      	ldr	r3, [pc, #212]	; (8005d68 <ping_pong_rf+0x23c>)
 8005c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c94:	4a36      	ldr	r2, [pc, #216]	; (8005d70 <ping_pong_rf+0x244>)
 8005c96:	8812      	ldrh	r2, [r2, #0]
 8005c98:	b2d2      	uxtb	r2, r2
 8005c9a:	4611      	mov	r1, r2
 8005c9c:	4836      	ldr	r0, [pc, #216]	; (8005d78 <ping_pong_rf+0x24c>)
 8005c9e:	4798      	blx	r3
 8005ca0:	e006      	b.n	8005cb0 <ping_pong_rf+0x184>
                     }
                     else // valid reception but not a PING as expected
                     {    // Set device as master and start again
                         isMaster = true;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	71fb      	strb	r3, [r7, #7]
                         Radio.Rx( RX_TIMEOUT_VALUE );
 8005ca6:	4b30      	ldr	r3, [pc, #192]	; (8005d68 <ping_pong_rf+0x23c>)
 8005ca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cae:	4798      	blx	r3
                     }
                 }
             }
             State = LOWPOWER;
 8005cb0:	4b2e      	ldr	r3, [pc, #184]	; (8005d6c <ping_pong_rf+0x240>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	701a      	strb	r2, [r3, #0]
             break;
 8005cb6:	e04b      	b.n	8005d50 <ping_pong_rf+0x224>
         case TX:
             // Indicates on a LED that we have sent a PING [Master]
             // Indicates on a LED that we have sent a PONG [Slave]
             GpioToggle( &Led2 );
 8005cb8:	4832      	ldr	r0, [pc, #200]	; (8005d84 <ping_pong_rf+0x258>)
 8005cba:	f7fa fcac 	bl	8000616 <GpioToggle>
             Radio.Rx( RX_TIMEOUT_VALUE );
 8005cbe:	4b2a      	ldr	r3, [pc, #168]	; (8005d68 <ping_pong_rf+0x23c>)
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cc6:	4798      	blx	r3
             State = LOWPOWER;
 8005cc8:	4b28      	ldr	r3, [pc, #160]	; (8005d6c <ping_pong_rf+0x240>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	701a      	strb	r2, [r3, #0]
             break;
 8005cce:	e03f      	b.n	8005d50 <ping_pong_rf+0x224>
         case RX_TIMEOUT:
         case RX_ERROR:
             if( isMaster == true )
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d029      	beq.n	8005d2a <ping_pong_rf+0x1fe>
             {
                 // Send the next PING frame
                 Buffer[0] = 'P';
 8005cd6:	4b28      	ldr	r3, [pc, #160]	; (8005d78 <ping_pong_rf+0x24c>)
 8005cd8:	2250      	movs	r2, #80	; 0x50
 8005cda:	701a      	strb	r2, [r3, #0]
                 Buffer[1] = 'I';
 8005cdc:	4b26      	ldr	r3, [pc, #152]	; (8005d78 <ping_pong_rf+0x24c>)
 8005cde:	2249      	movs	r2, #73	; 0x49
 8005ce0:	705a      	strb	r2, [r3, #1]
                 Buffer[2] = 'N';
 8005ce2:	4b25      	ldr	r3, [pc, #148]	; (8005d78 <ping_pong_rf+0x24c>)
 8005ce4:	224e      	movs	r2, #78	; 0x4e
 8005ce6:	709a      	strb	r2, [r3, #2]
                 Buffer[3] = 'G';
 8005ce8:	4b23      	ldr	r3, [pc, #140]	; (8005d78 <ping_pong_rf+0x24c>)
 8005cea:	2247      	movs	r2, #71	; 0x47
 8005cec:	70da      	strb	r2, [r3, #3]
                 for( i = 4; i < BufferSize; i++ )
 8005cee:	2304      	movs	r3, #4
 8005cf0:	71bb      	strb	r3, [r7, #6]
 8005cf2:	e008      	b.n	8005d06 <ping_pong_rf+0x1da>
                 {
                     Buffer[i] = i - 4;
 8005cf4:	79bb      	ldrb	r3, [r7, #6]
 8005cf6:	79ba      	ldrb	r2, [r7, #6]
 8005cf8:	3a04      	subs	r2, #4
 8005cfa:	b2d1      	uxtb	r1, r2
 8005cfc:	4a1e      	ldr	r2, [pc, #120]	; (8005d78 <ping_pong_rf+0x24c>)
 8005cfe:	54d1      	strb	r1, [r2, r3]
                 for( i = 4; i < BufferSize; i++ )
 8005d00:	79bb      	ldrb	r3, [r7, #6]
 8005d02:	3301      	adds	r3, #1
 8005d04:	71bb      	strb	r3, [r7, #6]
 8005d06:	79bb      	ldrb	r3, [r7, #6]
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	4b19      	ldr	r3, [pc, #100]	; (8005d70 <ping_pong_rf+0x244>)
 8005d0c:	881b      	ldrh	r3, [r3, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d3f0      	bcc.n	8005cf4 <ping_pong_rf+0x1c8>
                 }
                 DelayMs( 1 );
 8005d12:	2001      	movs	r0, #1
 8005d14:	f7ff fe8c 	bl	8005a30 <DelayMs>
                 Radio.Send( Buffer, BufferSize );
 8005d18:	4b13      	ldr	r3, [pc, #76]	; (8005d68 <ping_pong_rf+0x23c>)
 8005d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1c:	4a14      	ldr	r2, [pc, #80]	; (8005d70 <ping_pong_rf+0x244>)
 8005d1e:	8812      	ldrh	r2, [r2, #0]
 8005d20:	b2d2      	uxtb	r2, r2
 8005d22:	4611      	mov	r1, r2
 8005d24:	4814      	ldr	r0, [pc, #80]	; (8005d78 <ping_pong_rf+0x24c>)
 8005d26:	4798      	blx	r3
 8005d28:	e004      	b.n	8005d34 <ping_pong_rf+0x208>
             }
             else
             {
                 Radio.Rx( RX_TIMEOUT_VALUE );
 8005d2a:	4b0f      	ldr	r3, [pc, #60]	; (8005d68 <ping_pong_rf+0x23c>)
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d32:	4798      	blx	r3
             }
             State = LOWPOWER;
 8005d34:	4b0d      	ldr	r3, [pc, #52]	; (8005d6c <ping_pong_rf+0x240>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
             break;
 8005d3a:	e009      	b.n	8005d50 <ping_pong_rf+0x224>
         case TX_TIMEOUT:
             Radio.Rx( RX_TIMEOUT_VALUE );
 8005d3c:	4b0a      	ldr	r3, [pc, #40]	; (8005d68 <ping_pong_rf+0x23c>)
 8005d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d40:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005d44:	4798      	blx	r3
             State = LOWPOWER;
 8005d46:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <ping_pong_rf+0x240>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	701a      	strb	r2, [r3, #0]
             break;
 8005d4c:	e000      	b.n	8005d50 <ping_pong_rf+0x224>
         case LOWPOWER:
         default:
             // Set low power
             break;
 8005d4e:	bf00      	nop
         }

//         BoardLowPowerHandler( );
         // Process Radio IRQ
         if( Radio.IrqProcess != NULL )
 8005d50:	4b05      	ldr	r3, [pc, #20]	; (8005d68 <ping_pong_rf+0x23c>)
 8005d52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f43f af00 	beq.w	8005b5a <ping_pong_rf+0x2e>
         {
             Radio.IrqProcess( );
 8005d5a:	4b03      	ldr	r3, [pc, #12]	; (8005d68 <ping_pong_rf+0x23c>)
 8005d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d5e:	4798      	blx	r3
         switch( State )
 8005d60:	e6fb      	b.n	8005b5a <ping_pong_rf+0x2e>
 8005d62:	bf00      	nop
 8005d64:	40020800 	.word	0x40020800
 8005d68:	08006f54 	.word	0x08006f54
 8005d6c:	20000150 	.word	0x20000150
 8005d70:	20000024 	.word	0x20000024
 8005d74:	08006f34 	.word	0x08006f34
 8005d78:	20000bbc 	.word	0x20000bbc
 8005d7c:	200007b4 	.word	0x200007b4
 8005d80:	08006f2c 	.word	0x08006f2c
 8005d84:	200003ac 	.word	0x200003ac

08005d88 <OnTxDone>:
         }
     }
}

void OnTxDone( void )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8005d8c:	2108      	movs	r1, #8
 8005d8e:	4808      	ldr	r0, [pc, #32]	; (8005db0 <OnTxDone+0x28>)
 8005d90:	f7fb fb2f 	bl	80013f2 <HAL_GPIO_TogglePin>
    Radio.Sleep( );
 8005d94:	4b07      	ldr	r3, [pc, #28]	; (8005db4 <OnTxDone+0x2c>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	4798      	blx	r3
    State = TX;
 8005d9a:	4b07      	ldr	r3, [pc, #28]	; (8005db8 <OnTxDone+0x30>)
 8005d9c:	2204      	movs	r2, #4
 8005d9e:	701a      	strb	r2, [r3, #0]
#ifdef UART_TEST
    count++;
#endif
#ifdef PER_TEST
    count++;
 8005da0:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <OnTxDone+0x34>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	3301      	adds	r3, #1
 8005da6:	4a05      	ldr	r2, [pc, #20]	; (8005dbc <OnTxDone+0x34>)
 8005da8:	6013      	str	r3, [r2, #0]
#endif
}
 8005daa:	bf00      	nop
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40020800 	.word	0x40020800
 8005db4:	08006f54 	.word	0x08006f54
 8005db8:	20000150 	.word	0x20000150
 8005dbc:	2000014c 	.word	0x2000014c

08005dc0 <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	4608      	mov	r0, r1
 8005dca:	4611      	mov	r1, r2
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4603      	mov	r3, r0
 8005dd0:	817b      	strh	r3, [r7, #10]
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	813b      	strh	r3, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8005dda:	2108      	movs	r1, #8
 8005ddc:	4812      	ldr	r0, [pc, #72]	; (8005e28 <OnRxDone+0x68>)
 8005dde:	f7fb fb08 	bl	80013f2 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8005de2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005de6:	f7fa ffd9 	bl	8000d9c <HAL_Delay>
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8005dea:	2108      	movs	r1, #8
 8005dec:	480e      	ldr	r0, [pc, #56]	; (8005e28 <OnRxDone+0x68>)
 8005dee:	f7fb fb00 	bl	80013f2 <HAL_GPIO_TogglePin>
    Radio.Sleep( );
 8005df2:	4b0e      	ldr	r3, [pc, #56]	; (8005e2c <OnRxDone+0x6c>)
 8005df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005df6:	4798      	blx	r3
    BufferSize = size;
 8005df8:	4a0d      	ldr	r2, [pc, #52]	; (8005e30 <OnRxDone+0x70>)
 8005dfa:	897b      	ldrh	r3, [r7, #10]
 8005dfc:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 8005dfe:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <OnRxDone+0x70>)
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	461a      	mov	r2, r3
 8005e04:	68f9      	ldr	r1, [r7, #12]
 8005e06:	480b      	ldr	r0, [pc, #44]	; (8005e34 <OnRxDone+0x74>)
 8005e08:	f000 ffda 	bl	8006dc0 <memcpy>
    RssiValue = rssi;
 8005e0c:	893b      	ldrh	r3, [r7, #8]
 8005e0e:	b25a      	sxtb	r2, r3
 8005e10:	4b09      	ldr	r3, [pc, #36]	; (8005e38 <OnRxDone+0x78>)
 8005e12:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 8005e14:	4a09      	ldr	r2, [pc, #36]	; (8005e3c <OnRxDone+0x7c>)
 8005e16:	79fb      	ldrb	r3, [r7, #7]
 8005e18:	7013      	strb	r3, [r2, #0]
    State = RX;
 8005e1a:	4b09      	ldr	r3, [pc, #36]	; (8005e40 <OnRxDone+0x80>)
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	701a      	strb	r2, [r3, #0]
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40020800 	.word	0x40020800
 8005e2c:	08006f54 	.word	0x08006f54
 8005e30:	20000024 	.word	0x20000024
 8005e34:	20000bbc 	.word	0x20000bbc
 8005e38:	20000151 	.word	0x20000151
 8005e3c:	20000152 	.word	0x20000152
 8005e40:	20000150 	.word	0x20000150

08005e44 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005e48:	4b03      	ldr	r3, [pc, #12]	; (8005e58 <OnTxTimeout+0x14>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	4798      	blx	r3
    State = TX_TIMEOUT;
 8005e4e:	4b03      	ldr	r3, [pc, #12]	; (8005e5c <OnTxTimeout+0x18>)
 8005e50:	2205      	movs	r2, #5
 8005e52:	701a      	strb	r2, [r3, #0]
}
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	08006f54 	.word	0x08006f54
 8005e5c:	20000150 	.word	0x20000150

08005e60 <OnRxTimeout>:

void OnRxTimeout( void )
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005e64:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <OnRxTimeout+0x14>)
 8005e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e68:	4798      	blx	r3
    State = RX_TIMEOUT;
 8005e6a:	4b03      	ldr	r3, [pc, #12]	; (8005e78 <OnRxTimeout+0x18>)
 8005e6c:	2202      	movs	r2, #2
 8005e6e:	701a      	strb	r2, [r3, #0]
}
 8005e70:	bf00      	nop
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	08006f54 	.word	0x08006f54
 8005e78:	20000150 	.word	0x20000150

08005e7c <OnRxError>:

void OnRxError( void )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005e80:	4b03      	ldr	r3, [pc, #12]	; (8005e90 <OnRxError+0x14>)
 8005e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e84:	4798      	blx	r3
    State = RX_ERROR;
 8005e86:	4b03      	ldr	r3, [pc, #12]	; (8005e94 <OnRxError+0x18>)
 8005e88:	2203      	movs	r2, #3
 8005e8a:	701a      	strb	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	bd80      	pop	{r7, pc}
 8005e90:	08006f54 	.word	0x08006f54
 8005e94:	20000150 	.word	0x20000150

08005e98 <Radio_TX>:


// Перед использованием этой функции необходимо вызвать Radio.Send()
// Сама функция Radio_TX должна крутиться в бесконечном цикле
void Radio_TX (uint8_t *pData, uint8_t size ) {
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
	  switch( State )
 8005ea4:	4b09      	ldr	r3, [pc, #36]	; (8005ecc <Radio_TX+0x34>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	2b04      	cmp	r3, #4
 8005eaa:	d109      	bne.n	8005ec0 <Radio_TX+0x28>
	  	{
		  case TX:
		  Radio.Send( pData, size );
 8005eac:	4b08      	ldr	r3, [pc, #32]	; (8005ed0 <Radio_TX+0x38>)
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	4798      	blx	r3
		  State = LOWPOWER;
 8005eb8:	4b04      	ldr	r3, [pc, #16]	; (8005ecc <Radio_TX+0x34>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	701a      	strb	r2, [r3, #0]
		  break;
 8005ebe:	e000      	b.n	8005ec2 <Radio_TX+0x2a>
		  case TX_TIMEOUT:
		  case RX:
		  case RX_ERROR:
		  case LOWPOWER:
		  default:
		  break;
 8005ec0:	bf00      	nop
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20000150 	.word	0x20000150
 8005ed0:	08006f54 	.word	0x08006f54

08005ed4 <PerMeasTime>:

#ifdef PER_TEST
// Просто отправляет числа от 1 до max_count_of_packets
// Время вернется в мс
uint32_t PerMeasTime ( int max_count_of_packets, uint8_t delay ) {
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	460b      	mov	r3, r1
 8005ede:	70fb      	strb	r3, [r7, #3]
	uint8_t data[] = {0, 0, 0, 0};
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60bb      	str	r3, [r7, #8]
	uint32_t curT = HAL_GetTick();
 8005ee4:	f7fa ff50 	bl	8000d88 <HAL_GetTick>
 8005ee8:	60f8      	str	r0, [r7, #12]
	State = TX;
 8005eea:	4b12      	ldr	r3, [pc, #72]	; (8005f34 <PerMeasTime+0x60>)
 8005eec:	2204      	movs	r2, #4
 8005eee:	701a      	strb	r2, [r3, #0]
	*( uint32_t* )data = count;
 8005ef0:	f107 0308 	add.w	r3, r7, #8
 8005ef4:	4a10      	ldr	r2, [pc, #64]	; (8005f38 <PerMeasTime+0x64>)
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	601a      	str	r2, [r3, #0]
	while( count < max_count_of_packets ) {
 8005efa:	e00a      	b.n	8005f12 <PerMeasTime+0x3e>
		Radio_TX( data, sizeof(data) );
 8005efc:	f107 0308 	add.w	r3, r7, #8
 8005f00:	2104      	movs	r1, #4
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff ffc8 	bl	8005e98 <Radio_TX>
		HAL_Delay(30 + delay);
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	331e      	adds	r3, #30
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7fa ff45 	bl	8000d9c <HAL_Delay>
	while( count < max_count_of_packets ) {
 8005f12:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <PerMeasTime+0x64>)
 8005f14:	681a      	ldr	r2, [r3, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d3ef      	bcc.n	8005efc <PerMeasTime+0x28>
	}
	count = 0;
 8005f1c:	4b06      	ldr	r3, [pc, #24]	; (8005f38 <PerMeasTime+0x64>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
	return ( HAL_GetTick() - curT );
 8005f22:	f7fa ff31 	bl	8000d88 <HAL_GetTick>
 8005f26:	4602      	mov	r2, r0
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1ad3      	subs	r3, r2, r3
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3710      	adds	r7, #16
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000150 	.word	0x20000150
 8005f38:	2000014c 	.word	0x2000014c

08005f3c <AverageTime>:

// Считает среднее время отправления max_count_of_packets пакетов
// Усредняет NumOfAver раз
uint32_t AverageTime ( uint8_t NumOfAver, int max_count_of_packets, uint8_t delayPerMeasTime ) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	4603      	mov	r3, r0
 8005f44:	6039      	str	r1, [r7, #0]
 8005f46:	71fb      	strb	r3, [r7, #7]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	71bb      	strb	r3, [r7, #6]
	uint32_t time;
	uint8_t i = 0;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	72fb      	strb	r3, [r7, #11]
	while (i < NumOfAver) {
 8005f50:	e00b      	b.n	8005f6a <AverageTime+0x2e>
		time += PerMeasTime(max_count_of_packets, delayPerMeasTime);
 8005f52:	79bb      	ldrb	r3, [r7, #6]
 8005f54:	4619      	mov	r1, r3
 8005f56:	6838      	ldr	r0, [r7, #0]
 8005f58:	f7ff ffbc 	bl	8005ed4 <PerMeasTime>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	4413      	add	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
		i++;
 8005f64:	7afb      	ldrb	r3, [r7, #11]
 8005f66:	3301      	adds	r3, #1
 8005f68:	72fb      	strb	r3, [r7, #11]
	while (i < NumOfAver) {
 8005f6a:	7afa      	ldrb	r2, [r7, #11]
 8005f6c:	79fb      	ldrb	r3, [r7, #7]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d3ef      	bcc.n	8005f52 <AverageTime+0x16>
	}
	return ( time / NumOfAver );
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <RtcInit>:
 * \retval calendarValue Time in ticks
 */
static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time );

void RtcInit( void )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b086      	sub	sp, #24
 8005f88:	af00      	add	r7, sp, #0
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;

    if( RtcInitialized == false )
 8005f8a:	4b2f      	ldr	r3, [pc, #188]	; (8006048 <RtcInit+0xc4>)
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	f083 0301 	eor.w	r3, r3, #1
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d053      	beq.n	8006040 <RtcInit+0xbc>
    {
        __HAL_RCC_RTC_ENABLE( );
 8005f98:	4b2c      	ldr	r3, [pc, #176]	; (800604c <RtcInit+0xc8>)
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance            = RTC;
 8005f9e:	4b2c      	ldr	r3, [pc, #176]	; (8006050 <RtcInit+0xcc>)
 8005fa0:	4a2c      	ldr	r2, [pc, #176]	; (8006054 <RtcInit+0xd0>)
 8005fa2:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8005fa4:	4b2a      	ldr	r3, [pc, #168]	; (8006050 <RtcInit+0xcc>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	605a      	str	r2, [r3, #4]
        RtcHandle.Init.AsynchPrediv   = PREDIV_A;  // RTC_ASYNCH_PREDIV;
 8005faa:	4b29      	ldr	r3, [pc, #164]	; (8006050 <RtcInit+0xcc>)
 8005fac:	221f      	movs	r2, #31
 8005fae:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 8005fb0:	4b27      	ldr	r3, [pc, #156]	; (8006050 <RtcInit+0xcc>)
 8005fb2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005fb6:	60da      	str	r2, [r3, #12]
        RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8005fb8:	4b25      	ldr	r3, [pc, #148]	; (8006050 <RtcInit+0xcc>)
 8005fba:	2200      	movs	r2, #0
 8005fbc:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005fbe:	4b24      	ldr	r3, [pc, #144]	; (8006050 <RtcInit+0xcc>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005fc4:	4b22      	ldr	r3, [pc, #136]	; (8006050 <RtcInit+0xcc>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 8005fca:	4821      	ldr	r0, [pc, #132]	; (8006050 <RtcInit+0xcc>)
 8005fcc:	f7fc f918 	bl	8002200 <HAL_RTC_Init>

        date.Year                     = 0;
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	75fb      	strb	r3, [r7, #23]
        date.Month                    = RTC_MONTH_JANUARY;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	757b      	strb	r3, [r7, #21]
        date.Date                     = 1;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	75bb      	strb	r3, [r7, #22]
        date.WeekDay                  = RTC_WEEKDAY_MONDAY;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	753b      	strb	r3, [r7, #20]
        HAL_RTC_SetDate( &RtcHandle, &date, RTC_FORMAT_BIN );
 8005fe0:	f107 0314 	add.w	r3, r7, #20
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4819      	ldr	r0, [pc, #100]	; (8006050 <RtcInit+0xcc>)
 8005fea:	f7fc fa95 	bl	8002518 <HAL_RTC_SetDate>

        /*at 0:0:0*/
        time.Hours                    = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	703b      	strb	r3, [r7, #0]
        time.Minutes                  = 0;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	707b      	strb	r3, [r7, #1]
        time.Seconds                  = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	70bb      	strb	r3, [r7, #2]
        time.SubSeconds               = 0;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	607b      	str	r3, [r7, #4]
        time.TimeFormat               = 0;
 8005ffe:	2300      	movs	r3, #0
 8006000:	70fb      	strb	r3, [r7, #3]
        time.StoreOperation           = RTC_STOREOPERATION_RESET;
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
        time.DayLightSaving           = RTC_DAYLIGHTSAVING_NONE;
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
        HAL_RTC_SetTime( &RtcHandle, &time, RTC_FORMAT_BIN );
 800600a:	463b      	mov	r3, r7
 800600c:	2200      	movs	r2, #0
 800600e:	4619      	mov	r1, r3
 8006010:	480f      	ldr	r0, [pc, #60]	; (8006050 <RtcInit+0xcc>)
 8006012:	f7fc f970 	bl	80022f6 <HAL_RTC_SetTime>

        // Enable Direct Read of the calendar registers (not through Shadow registers)
        HAL_RTCEx_EnableBypassShadow( &RtcHandle );
 8006016:	480e      	ldr	r0, [pc, #56]	; (8006050 <RtcInit+0xcc>)
 8006018:	f7fc fe05 	bl	8002c26 <HAL_RTCEx_EnableBypassShadow>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 1, 0 );
 800601c:	2200      	movs	r2, #0
 800601e:	2101      	movs	r1, #1
 8006020:	2029      	movs	r0, #41	; 0x29
 8006022:	f7fa ffbc 	bl	8000f9e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 8006026:	2029      	movs	r0, #41	; 0x29
 8006028:	f7fa ffd5 	bl	8000fd6 <HAL_NVIC_EnableIRQ>

        // Init alarm.
        HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 800602c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006030:	4807      	ldr	r0, [pc, #28]	; (8006050 <RtcInit+0xcc>)
 8006032:	f7fc fc95 	bl	8002960 <HAL_RTC_DeactivateAlarm>

        RtcSetTimerContext( );
 8006036:	f000 f80f 	bl	8006058 <RtcSetTimerContext>
        RtcInitialized = true;
 800603a:	4b03      	ldr	r3, [pc, #12]	; (8006048 <RtcInit+0xc4>)
 800603c:	2201      	movs	r2, #1
 800603e:	701a      	strb	r2, [r3, #0]
    }
}
 8006040:	bf00      	nop
 8006042:	3718      	adds	r7, #24
 8006044:	46bd      	mov	sp, r7
 8006046:	bd80      	pop	{r7, pc}
 8006048:	20000178 	.word	0x20000178
 800604c:	424706d8 	.word	0x424706d8
 8006050:	2000017c 	.word	0x2000017c
 8006054:	40002800 	.word	0x40002800

08006058 <RtcSetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcSetTimerContext( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 800605c:	4905      	ldr	r1, [pc, #20]	; (8006074 <RtcSetTimerContext+0x1c>)
 800605e:	4806      	ldr	r0, [pc, #24]	; (8006078 <RtcSetTimerContext+0x20>)
 8006060:	f000 f9a4 	bl	80063ac <RtcGetCalendarValue>
 8006064:	4602      	mov	r2, r0
 8006066:	460b      	mov	r3, r1
 8006068:	4b04      	ldr	r3, [pc, #16]	; (800607c <RtcSetTimerContext+0x24>)
 800606a:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
 800606c:	4b03      	ldr	r3, [pc, #12]	; (800607c <RtcSetTimerContext+0x24>)
 800606e:	681b      	ldr	r3, [r3, #0]
}
 8006070:	4618      	mov	r0, r3
 8006072:	bd80      	pop	{r7, pc}
 8006074:	200001a0 	.word	0x200001a0
 8006078:	200001b4 	.word	0x200001b4
 800607c:	2000019c 	.word	0x2000019c

08006080 <RtcGetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcGetTimerContext( void )
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
 8006084:	4b02      	ldr	r3, [pc, #8]	; (8006090 <RtcGetTimerContext+0x10>)
 8006086:	681b      	ldr	r3, [r3, #0]
}
 8006088:	4618      	mov	r0, r3
 800608a:	46bd      	mov	sp, r7
 800608c:	bc80      	pop	{r7}
 800608e:	4770      	bx	lr
 8006090:	2000019c 	.word	0x2000019c

08006094 <RtcGetMinimumTimeout>:
 * \brief returns the wake up time in ticks
 *
 * \retval wake up time in ticks
 */
uint32_t RtcGetMinimumTimeout( void )
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
 8006098:	2303      	movs	r3, #3
}
 800609a:	4618      	mov	r0, r3
 800609c:	46bd      	mov	sp, r7
 800609e:	bc80      	pop	{r7}
 80060a0:	4770      	bx	lr

080060a2 <RtcMs2Tick>:
 *
 * \param[IN] milliseconds Time in milliseconds
 * \retval returns time in timer ticks
 */
uint32_t RtcMs2Tick( uint32_t milliseconds )
{
 80060a2:	b580      	push	{r7, lr}
 80060a4:	b082      	sub	sp, #8
 80060a6:	af00      	add	r7, sp, #0
 80060a8:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	f04f 0000 	mov.w	r0, #0
 80060b6:	f04f 0100 	mov.w	r1, #0
 80060ba:	01d9      	lsls	r1, r3, #7
 80060bc:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 80060c0:	01d0      	lsls	r0, r2, #7
 80060c2:	f04f 027d 	mov.w	r2, #125	; 0x7d
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	f7fa f857 	bl	800017c <__aeabi_uldivmod>
 80060ce:	4602      	mov	r2, r0
 80060d0:	460b      	mov	r3, r1
 80060d2:	4613      	mov	r3, r2
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3708      	adds	r7, #8
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <RtcTick2Ms>:
 *
 * \param[IN] time in timer ticks
 * \retval returns time in milliseconds
 */
uint32_t RtcTick2Ms( uint32_t tick )
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> N_PREDIV_S;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	0a9b      	lsrs	r3, r3, #10
 80060e8:	60fb      	str	r3, [r7, #12]

    tick = tick & PREDIV_S;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80060f0:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80060f8:	fb02 f203 	mul.w	r2, r2, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	0a9b      	lsrs	r3, r3, #10
 8006108:	4413      	add	r3, r2
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <RtcSetAlarm>:
 * \note The alarm is set at now (read in this function) + timeout
 *
 * \param timeout Duration of the Timer ticks
 */
void RtcSetAlarm( uint32_t timeout )
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
    // We don't go in Low Power mode for timeout below MIN_ALARM_DELAY
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 800611c:	f000 f92e 	bl	800637c <RtcGetTimerElapsedTime>
    else
    {
//        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
    }

    RtcStartAlarm( timeout );
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f81f 	bl	8006164 <RtcStartAlarm>
}
 8006126:	bf00      	nop
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <RtcStopAlarm>:

void RtcStopAlarm( void )
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
    // Disable the Alarm A interrupt
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8006134:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006138:	4808      	ldr	r0, [pc, #32]	; (800615c <RtcStopAlarm+0x2c>)
 800613a:	f7fc fc11 	bl	8002960 <HAL_RTC_DeactivateAlarm>

    // Clear RTC Alarm Flag
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <RtcStopAlarm+0x2c>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	4b05      	ldr	r3, [pc, #20]	; (800615c <RtcStopAlarm+0x2c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800614e:	60da      	str	r2, [r3, #12]

    // Clear the EXTI's line Flag for RTC Alarm
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8006150:	4b03      	ldr	r3, [pc, #12]	; (8006160 <RtcStopAlarm+0x30>)
 8006152:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006156:	615a      	str	r2, [r3, #20]
}
 8006158:	bf00      	nop
 800615a:	bd80      	pop	{r7, pc}
 800615c:	2000017c 	.word	0x2000017c
 8006160:	40010400 	.word	0x40010400

08006164 <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
 8006164:	b5b0      	push	{r4, r5, r7, lr}
 8006166:	b08c      	sub	sp, #48	; 0x30
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
    uint16_t rtcAlarmSubSeconds = 0;
 800616c:	2300      	movs	r3, #0
 800616e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t rtcAlarmSeconds = 0;
 8006170:	2300      	movs	r3, #0
 8006172:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t rtcAlarmMinutes = 0;
 8006174:	2300      	movs	r3, #0
 8006176:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t rtcAlarmHours = 0;
 8006178:	2300      	movs	r3, #0
 800617a:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t rtcAlarmDays = 0;
 800617c:	2300      	movs	r3, #0
 800617e:	84fb      	strh	r3, [r7, #38]	; 0x26
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8006180:	4b6e      	ldr	r3, [pc, #440]	; (800633c <RtcStartAlarm+0x1d8>)
 8006182:	f107 0410 	add.w	r4, r7, #16
 8006186:	1d1d      	adds	r5, r3, #4
 8006188:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800618a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800618c:	682b      	ldr	r3, [r5, #0]
 800618e:	6023      	str	r3, [r4, #0]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8006190:	4b6a      	ldr	r3, [pc, #424]	; (800633c <RtcStartAlarm+0x1d8>)
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	60fb      	str	r3, [r7, #12]

    RtcStopAlarm( );
 8006196:	f7ff ffcb 	bl	8006130 <RtcStopAlarm>

    /*reverse counter */
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	b29b      	uxth	r3, r3
 800619e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80061a2:	3303      	adds	r3, #3
 80061a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80061b2:	4413      	add	r3, r2
 80061b4:	85fb      	strh	r3, [r7, #46]	; 0x2e
    // convert timeout  to seconds
    timeout >>= N_PREDIV_S;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	0a9b      	lsrs	r3, r3, #10
 80061ba:	607b      	str	r3, [r7, #4]

    // Convert microsecs to RTC format and add to 'Now'
    rtcAlarmDays =  date.Date;
 80061bc:	7bbb      	ldrb	r3, [r7, #14]
 80061be:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 80061c0:	e008      	b.n	80061d4 <RtcStartAlarm+0x70>
    {
        timeout -= TM_SECONDS_IN_1DAY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80061c8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80061cc:	607b      	str	r3, [r7, #4]
        rtcAlarmDays++;
 80061ce:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80061d0:	3301      	adds	r3, #1
 80061d2:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a5a      	ldr	r2, [pc, #360]	; (8006340 <RtcStartAlarm+0x1dc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d8f2      	bhi.n	80061c2 <RtcStartAlarm+0x5e>
    }

    // Calc hours
    rtcAlarmHours = time.Hours;
 80061dc:	7c3b      	ldrb	r3, [r7, #16]
 80061de:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 80061e0:	e006      	b.n	80061f0 <RtcStartAlarm+0x8c>
    {
        timeout -= TM_SECONDS_IN_1HOUR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80061e8:	607b      	str	r3, [r7, #4]
        rtcAlarmHours++;
 80061ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80061ec:	3301      	adds	r3, #1
 80061ee:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80061f6:	d2f4      	bcs.n	80061e2 <RtcStartAlarm+0x7e>
    }

    // Calc minutes
    rtcAlarmMinutes = time.Minutes;
 80061f8:	7c7b      	ldrb	r3, [r7, #17]
 80061fa:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 80061fc:	e005      	b.n	800620a <RtcStartAlarm+0xa6>
    {
        timeout -= TM_SECONDS_IN_1MINUTE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	3b3c      	subs	r3, #60	; 0x3c
 8006202:	607b      	str	r3, [r7, #4]
        rtcAlarmMinutes++;
 8006204:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006206:	3301      	adds	r3, #1
 8006208:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b3b      	cmp	r3, #59	; 0x3b
 800620e:	d8f6      	bhi.n	80061fe <RtcStartAlarm+0x9a>
    }

    // Calc seconds
    rtcAlarmSeconds =  time.Seconds + timeout;
 8006210:	7cbb      	ldrb	r3, [r7, #18]
 8006212:	b29a      	uxth	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	b29b      	uxth	r3, r3
 8006218:	4413      	add	r3, r2
 800621a:	85bb      	strh	r3, [r7, #44]	; 0x2c

    //***** Correct for modulo********
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 800621c:	e006      	b.n	800622c <RtcStartAlarm+0xc8>
    {
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 800621e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006220:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006224:	85fb      	strh	r3, [r7, #46]	; 0x2e
        rtcAlarmSeconds++;
 8006226:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006228:	3301      	adds	r3, #1
 800622a:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 800622c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800622e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006232:	d2f4      	bcs.n	800621e <RtcStartAlarm+0xba>
    }

    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8006234:	e005      	b.n	8006242 <RtcStartAlarm+0xde>
    { 
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 8006236:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006238:	3b3c      	subs	r3, #60	; 0x3c
 800623a:	85bb      	strh	r3, [r7, #44]	; 0x2c
        rtcAlarmMinutes++;
 800623c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800623e:	3301      	adds	r3, #1
 8006240:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8006242:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006244:	2b3b      	cmp	r3, #59	; 0x3b
 8006246:	d8f6      	bhi.n	8006236 <RtcStartAlarm+0xd2>
    }

    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8006248:	e005      	b.n	8006256 <RtcStartAlarm+0xf2>
    {
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 800624a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800624c:	3b3c      	subs	r3, #60	; 0x3c
 800624e:	857b      	strh	r3, [r7, #42]	; 0x2a
        rtcAlarmHours++;
 8006250:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006252:	3301      	adds	r3, #1
 8006254:	853b      	strh	r3, [r7, #40]	; 0x28
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8006256:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006258:	2b3b      	cmp	r3, #59	; 0x3b
 800625a:	d8f6      	bhi.n	800624a <RtcStartAlarm+0xe6>
    }

    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 800625c:	e005      	b.n	800626a <RtcStartAlarm+0x106>
    {
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 800625e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006260:	3b18      	subs	r3, #24
 8006262:	853b      	strh	r3, [r7, #40]	; 0x28
        rtcAlarmDays++;
 8006264:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006266:	3301      	adds	r3, #1
 8006268:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 800626a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800626c:	2b17      	cmp	r3, #23
 800626e:	d8f6      	bhi.n	800625e <RtcStartAlarm+0xfa>
    }

    if( date.Year % 4 == 0 ) 
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	f003 0303 	and.w	r3, r3, #3
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d113      	bne.n	80062a4 <RtcStartAlarm+0x140>
    {
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 800627c:	7b7b      	ldrb	r3, [r7, #13]
 800627e:	3b01      	subs	r3, #1
 8006280:	4a30      	ldr	r2, [pc, #192]	; (8006344 <RtcStartAlarm+0x1e0>)
 8006282:	5cd3      	ldrb	r3, [r2, r3]
 8006284:	b29b      	uxth	r3, r3
 8006286:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006288:	429a      	cmp	r2, r3
 800628a:	d91e      	bls.n	80062ca <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 800628c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800628e:	7b7a      	ldrb	r2, [r7, #13]
 8006290:	3a01      	subs	r2, #1
 8006292:	492c      	ldr	r1, [pc, #176]	; (8006344 <RtcStartAlarm+0x1e0>)
 8006294:	5c8a      	ldrb	r2, [r1, r2]
 8006296:	fb93 f1f2 	sdiv	r1, r3, r2
 800629a:	fb02 f201 	mul.w	r2, r2, r1
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80062a2:	e012      	b.n	80062ca <RtcStartAlarm+0x166>
        }
    }
    else
    {
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 80062a4:	7b7b      	ldrb	r3, [r7, #13]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	4a27      	ldr	r2, [pc, #156]	; (8006348 <RtcStartAlarm+0x1e4>)
 80062aa:	5cd3      	ldrb	r3, [r2, r3]
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d90a      	bls.n	80062ca <RtcStartAlarm+0x166>
        {   
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 80062b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062b6:	7b7a      	ldrb	r2, [r7, #13]
 80062b8:	3a01      	subs	r2, #1
 80062ba:	4923      	ldr	r1, [pc, #140]	; (8006348 <RtcStartAlarm+0x1e4>)
 80062bc:	5c8a      	ldrb	r2, [r1, r2]
 80062be:	fb93 f1f2 	sdiv	r1, r3, r2
 80062c2:	fb02 f201 	mul.w	r2, r2, r1
 80062c6:	1a9b      	subs	r3, r3, r2
 80062c8:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }

    /* Set RTC_AlarmStructure with calculated values*/
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 80062ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80062cc:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80062d0:	3303      	adds	r3, #3
 80062d2:	461a      	mov	r2, r3
 80062d4:	4b1d      	ldr	r3, [pc, #116]	; (800634c <RtcStartAlarm+0x1e8>)
 80062d6:	605a      	str	r2, [r3, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 80062d8:	4b1c      	ldr	r3, [pc, #112]	; (800634c <RtcStartAlarm+0x1e8>)
 80062da:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80062de:	619a      	str	r2, [r3, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 80062e0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062e2:	b2da      	uxtb	r2, r3
 80062e4:	4b19      	ldr	r3, [pc, #100]	; (800634c <RtcStartAlarm+0x1e8>)
 80062e6:	709a      	strb	r2, [r3, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 80062e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80062ea:	b2da      	uxtb	r2, r3
 80062ec:	4b17      	ldr	r3, [pc, #92]	; (800634c <RtcStartAlarm+0x1e8>)
 80062ee:	705a      	strb	r2, [r3, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 80062f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062f2:	b2da      	uxtb	r2, r3
 80062f4:	4b15      	ldr	r3, [pc, #84]	; (800634c <RtcStartAlarm+0x1e8>)
 80062f6:	701a      	strb	r2, [r3, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 80062f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	4b13      	ldr	r3, [pc, #76]	; (800634c <RtcStartAlarm+0x1e8>)
 80062fe:	f883 2020 	strb.w	r2, [r3, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8006302:	7cfa      	ldrb	r2, [r7, #19]
 8006304:	4b11      	ldr	r3, [pc, #68]	; (800634c <RtcStartAlarm+0x1e8>)
 8006306:	70da      	strb	r2, [r3, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 8006308:	4b10      	ldr	r3, [pc, #64]	; (800634c <RtcStartAlarm+0x1e8>)
 800630a:	2200      	movs	r2, #0
 800630c:	61da      	str	r2, [r3, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 800630e:	4b0f      	ldr	r3, [pc, #60]	; (800634c <RtcStartAlarm+0x1e8>)
 8006310:	2200      	movs	r2, #0
 8006312:	615a      	str	r2, [r3, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8006314:	4b0d      	ldr	r3, [pc, #52]	; (800634c <RtcStartAlarm+0x1e8>)
 8006316:	f44f 7280 	mov.w	r2, #256	; 0x100
 800631a:	625a      	str	r2, [r3, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800631c:	4b0b      	ldr	r3, [pc, #44]	; (800634c <RtcStartAlarm+0x1e8>)
 800631e:	2200      	movs	r2, #0
 8006320:	60da      	str	r2, [r3, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006322:	4b0a      	ldr	r3, [pc, #40]	; (800634c <RtcStartAlarm+0x1e8>)
 8006324:	2200      	movs	r2, #0
 8006326:	611a      	str	r2, [r3, #16]

    // Set RTC_Alarm
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 8006328:	2200      	movs	r2, #0
 800632a:	4908      	ldr	r1, [pc, #32]	; (800634c <RtcStartAlarm+0x1e8>)
 800632c:	4808      	ldr	r0, [pc, #32]	; (8006350 <RtcStartAlarm+0x1ec>)
 800632e:	f7fc f9df 	bl	80026f0 <HAL_RTC_SetAlarm_IT>
}
 8006332:	bf00      	nop
 8006334:	3730      	adds	r7, #48	; 0x30
 8006336:	46bd      	mov	sp, r7
 8006338:	bdb0      	pop	{r4, r5, r7, pc}
 800633a:	bf00      	nop
 800633c:	2000019c 	.word	0x2000019c
 8006340:	0001517f 	.word	0x0001517f
 8006344:	08006f48 	.word	0x08006f48
 8006348:	08006f3c 	.word	0x08006f3c
 800634c:	20000bfc 	.word	0x20000bfc
 8006350:	2000017c 	.word	0x2000017c

08006354 <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b088      	sub	sp, #32
 8006358:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 800635a:	f107 0208 	add.w	r2, r7, #8
 800635e:	1d3b      	adds	r3, r7, #4
 8006360:	4611      	mov	r1, r2
 8006362:	4618      	mov	r0, r3
 8006364:	f000 f822 	bl	80063ac <RtcGetCalendarValue>
 8006368:	4602      	mov	r2, r0
 800636a:	460b      	mov	r3, r1
 800636c:	4613      	mov	r3, r2
 800636e:	61fb      	str	r3, [r7, #28]

    return( calendarValue );
 8006370:	69fb      	ldr	r3, [r7, #28]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3720      	adds	r7, #32
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b088      	sub	sp, #32
 8006380:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8006382:	f107 0208 	add.w	r2, r7, #8
 8006386:	1d3b      	adds	r3, r7, #4
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f000 f80e 	bl	80063ac <RtcGetCalendarValue>
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	4613      	mov	r3, r2
 8006396:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 8006398:	4b03      	ldr	r3, [pc, #12]	; (80063a8 <RtcGetTimerElapsedTime+0x2c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	1ad3      	subs	r3, r2, r3
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3720      	adds	r7, #32
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	2000019c 	.word	0x2000019c

080063ac <RtcGetCalendarValue>:

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 80063ac:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80063b0:	b088      	sub	sp, #32
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
    uint64_t calendarValue = 0;
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	f04f 0300 	mov.w	r3, #0
 80063c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 80063c4:	4b3f      	ldr	r3, [pc, #252]	; (80064c4 <RtcGetCalendarValue+0x118>)
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	617b      	str	r3, [r7, #20]
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 80063ca:	2200      	movs	r2, #0
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	483e      	ldr	r0, [pc, #248]	; (80064c8 <RtcGetCalendarValue+0x11c>)
 80063d0:	f7fc f940 	bl	8002654 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 80063d4:	2200      	movs	r2, #0
 80063d6:	6839      	ldr	r1, [r7, #0]
 80063d8:	483b      	ldr	r0, [pc, #236]	; (80064c8 <RtcGetCalendarValue+0x11c>)
 80063da:	f7fc f840 	bl	800245e <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 80063de:	4b39      	ldr	r3, [pc, #228]	; (80064c4 <RtcGetCalendarValue+0x118>)
 80063e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d1ed      	bne.n	80063c4 <RtcGetCalendarValue+0x18>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	78db      	ldrb	r3, [r3, #3]
 80063ec:	461a      	mov	r2, r3
 80063ee:	f240 53b5 	movw	r3, #1461	; 0x5b5
 80063f2:	fb03 f302 	mul.w	r3, r3, r2
 80063f6:	3303      	adds	r3, #3
 80063f8:	089b      	lsrs	r3, r3, #2
 80063fa:	613b      	str	r3, [r7, #16]

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	78db      	ldrb	r3, [r3, #3]
 8006400:	f003 0303 	and.w	r3, r3, #3
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b00      	cmp	r3, #0
 8006408:	d101      	bne.n	800640e <RtcGetCalendarValue+0x62>
 800640a:	4b30      	ldr	r3, [pc, #192]	; (80064cc <RtcGetCalendarValue+0x120>)
 800640c:	e000      	b.n	8006410 <RtcGetCalendarValue+0x64>
 800640e:	4b30      	ldr	r3, [pc, #192]	; (80064d0 <RtcGetCalendarValue+0x124>)
 8006410:	60fb      	str	r3, [r7, #12]

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	785b      	ldrb	r3, [r3, #1]
 8006416:	1e5a      	subs	r2, r3, #1
 8006418:	4613      	mov	r3, r2
 800641a:	011b      	lsls	r3, r3, #4
 800641c:	1a9b      	subs	r3, r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4413      	add	r3, r2
 8006422:	3301      	adds	r3, #1
 8006424:	0fda      	lsrs	r2, r3, #31
 8006426:	4413      	add	r3, r2
 8006428:	105b      	asrs	r3, r3, #1
 800642a:	4619      	mov	r1, r3
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	785b      	ldrb	r3, [r3, #1]
 8006430:	3b01      	subs	r3, #1
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	1acb      	subs	r3, r1, r3
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4413      	add	r3, r2
 8006444:	613b      	str	r3, [r7, #16]

    seconds += ( date->Date -1 );
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	789b      	ldrb	r3, [r3, #2]
 800644a:	461a      	mov	r2, r3
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4413      	add	r3, r2
 8006450:	3b01      	subs	r3, #1
 8006452:	613b      	str	r3, [r7, #16]

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	4a1f      	ldr	r2, [pc, #124]	; (80064d4 <RtcGetCalendarValue+0x128>)
 8006458:	fb02 f303 	mul.w	r3, r2, r3
 800645c:	613b      	str	r3, [r7, #16]

    seconds += ( ( uint32_t )time->Seconds + 
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	789b      	ldrb	r3, [r3, #2]
 8006462:	4618      	mov	r0, r3
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	461a      	mov	r2, r3
 800646a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800646e:	fb03 f202 	mul.w	r2, r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	785b      	ldrb	r3, [r3, #1]
 8006476:	4619      	mov	r1, r3
 8006478:	460b      	mov	r3, r1
 800647a:	011b      	lsls	r3, r3, #4
 800647c:	1a5b      	subs	r3, r3, r1
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	4403      	add	r3, r0
    seconds += ( ( uint32_t )time->Seconds + 
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	613b      	str	r3, [r7, #16]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	461a      	mov	r2, r3
 800648e:	f04f 0300 	mov.w	r3, #0
 8006492:	0d95      	lsrs	r5, r2, #22
 8006494:	0294      	lsls	r4, r2, #10
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 800649e:	3303      	adds	r3, #3
 80064a0:	461a      	mov	r2, r3
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	eb14 0802 	adds.w	r8, r4, r2
 80064aa:	eb45 0903 	adc.w	r9, r5, r3
 80064ae:	e9c7 8906 	strd	r8, r9, [r7, #24]

    return( calendarValue );
 80064b2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80064b6:	4610      	mov	r0, r2
 80064b8:	4619      	mov	r1, r3
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80064c2:	bf00      	nop
 80064c4:	40002800 	.word	0x40002800
 80064c8:	2000017c 	.word	0x2000017c
 80064cc:	00445550 	.word	0x00445550
 80064d0:	0099aaa0 	.word	0x0099aaa0
 80064d4:	00015180 	.word	0x00015180

080064d8 <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
    TimerIrqHandler( );
 80064e0:	f000 faa8 	bl	8006a34 <TimerIrqHandler>
}
 80064e4:	bf00      	nop
 80064e6:	3708      	adds	r7, #8
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <SX1276IoInit>:
    NULL, // void ( *RxBoosted )( uint32_t timeout ) - SX126x Only
    NULL, // void ( *SetRxDutyCycle )( uint32_t rxTime, uint32_t sleepTime ) - SX126x Only
};

void SX1276IoInit( void )
{
 80064ec:	b480      	push	{r7}
 80064ee:	af00      	add	r7, sp, #0
  // DIO_0
  SX1276.DIO0.port = DIO_0_GPIO_Port;
 80064f0:	4b15      	ldr	r3, [pc, #84]	; (8006548 <SX1276IoInit+0x5c>)
 80064f2:	4a16      	ldr	r2, [pc, #88]	; (800654c <SX1276IoInit+0x60>)
 80064f4:	609a      	str	r2, [r3, #8]
  SX1276.DIO0.pin = DIO_0_Pin;
 80064f6:	4b14      	ldr	r3, [pc, #80]	; (8006548 <SX1276IoInit+0x5c>)
 80064f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064fc:	819a      	strh	r2, [r3, #12]
  // DIO_1
  SX1276.DIO1.port = DIO_1_GPIO_Port;
 80064fe:	4b12      	ldr	r3, [pc, #72]	; (8006548 <SX1276IoInit+0x5c>)
 8006500:	4a12      	ldr	r2, [pc, #72]	; (800654c <SX1276IoInit+0x60>)
 8006502:	611a      	str	r2, [r3, #16]
  SX1276.DIO1.pin = DIO_1_Pin;
 8006504:	4b10      	ldr	r3, [pc, #64]	; (8006548 <SX1276IoInit+0x5c>)
 8006506:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800650a:	829a      	strh	r2, [r3, #20]
  // DIO_2
  SX1276.DIO2.port = DIO_2_GPIO_Port;
 800650c:	4b0e      	ldr	r3, [pc, #56]	; (8006548 <SX1276IoInit+0x5c>)
 800650e:	4a10      	ldr	r2, [pc, #64]	; (8006550 <SX1276IoInit+0x64>)
 8006510:	619a      	str	r2, [r3, #24]
  SX1276.DIO2.pin = DIO_2_Pin;
 8006512:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <SX1276IoInit+0x5c>)
 8006514:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006518:	839a      	strh	r2, [r3, #28]
  // DIO_3
  SX1276.DIO3.port = DIO_3_GPIO_Port;
 800651a:	4b0b      	ldr	r3, [pc, #44]	; (8006548 <SX1276IoInit+0x5c>)
 800651c:	4a0c      	ldr	r2, [pc, #48]	; (8006550 <SX1276IoInit+0x64>)
 800651e:	621a      	str	r2, [r3, #32]
  SX1276.DIO3.pin = DIO_3_Pin;
 8006520:	4b09      	ldr	r3, [pc, #36]	; (8006548 <SX1276IoInit+0x5c>)
 8006522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006526:	849a      	strh	r2, [r3, #36]	; 0x24
  // DIO_4
  SX1276.DIO4.port = DIO_4_GPIO_Port;
 8006528:	4b07      	ldr	r3, [pc, #28]	; (8006548 <SX1276IoInit+0x5c>)
 800652a:	4a09      	ldr	r2, [pc, #36]	; (8006550 <SX1276IoInit+0x64>)
 800652c:	629a      	str	r2, [r3, #40]	; 0x28
  SX1276.DIO4.pin = DIO_4_Pin;
 800652e:	4b06      	ldr	r3, [pc, #24]	; (8006548 <SX1276IoInit+0x5c>)
 8006530:	2220      	movs	r2, #32
 8006532:	859a      	strh	r2, [r3, #44]	; 0x2c
  // DIO_5
  SX1276.DIO5.port = DIO_5_GPIO_Port;
 8006534:	4b04      	ldr	r3, [pc, #16]	; (8006548 <SX1276IoInit+0x5c>)
 8006536:	4a06      	ldr	r2, [pc, #24]	; (8006550 <SX1276IoInit+0x64>)
 8006538:	631a      	str	r2, [r3, #48]	; 0x30
  SX1276.DIO5.pin = DIO_5_Pin;
 800653a:	4b03      	ldr	r3, [pc, #12]	; (8006548 <SX1276IoInit+0x5c>)
 800653c:	2240      	movs	r2, #64	; 0x40
 800653e:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8006540:	bf00      	nop
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr
 8006548:	200002ec 	.word	0x200002ec
 800654c:	40020000 	.word	0x40020000
 8006550:	40020800 	.word	0x40020800

08006554 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8006554:	b480      	push	{r7}
 8006556:	b083      	sub	sp, #12
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  DioIrqCallbacks.dio0 = irqHandlers[0];
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a0d      	ldr	r2, [pc, #52]	; (8006598 <SX1276IoIrqInit+0x44>)
 8006562:	6013      	str	r3, [r2, #0]
  DioIrqCallbacks.dio1 = irqHandlers[1];
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <SX1276IoIrqInit+0x44>)
 800656a:	6053      	str	r3, [r2, #4]
  DioIrqCallbacks.dio2 = irqHandlers[2];
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	4a09      	ldr	r2, [pc, #36]	; (8006598 <SX1276IoIrqInit+0x44>)
 8006572:	6093      	str	r3, [r2, #8]
  DioIrqCallbacks.dio3 = irqHandlers[3];
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4a07      	ldr	r2, [pc, #28]	; (8006598 <SX1276IoIrqInit+0x44>)
 800657a:	60d3      	str	r3, [r2, #12]
  DioIrqCallbacks.dio4 = irqHandlers[4];
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	4a05      	ldr	r2, [pc, #20]	; (8006598 <SX1276IoIrqInit+0x44>)
 8006582:	6113      	str	r3, [r2, #16]
  DioIrqCallbacks.dio5 = irqHandlers[5];
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	4a03      	ldr	r2, [pc, #12]	; (8006598 <SX1276IoIrqInit+0x44>)
 800658a:	6153      	str	r3, [r2, #20]
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	bc80      	pop	{r7}
 8006594:	4770      	bx	lr
 8006596:	bf00      	nop
 8006598:	20000c24 	.word	0x20000c24

0800659c <SX1276SetBoardTcxo>:
{
    // No TCXO component available on this board design.
}

void SX1276SetBoardTcxo( uint8_t state )
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	4603      	mov	r3, r0
 80065a4:	71fb      	strb	r3, [r7, #7]
    // No TCXO component available on this board design.
}
 80065a6:	bf00      	nop
 80065a8:	370c      	adds	r7, #12
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bc80      	pop	{r7}
 80065ae:	4770      	bx	lr

080065b0 <SX1276GetBoardTcxoWakeupTime>:

uint32_t SX1276GetBoardTcxoWakeupTime( void )
{
 80065b0:	b480      	push	{r7}
 80065b2:	af00      	add	r7, sp, #0
    return BOARD_TCXO_WAKEUP_TIME;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bc80      	pop	{r7}
 80065bc:	4770      	bx	lr
	...

080065c0 <SX1276Reset>:

void SX1276Reset( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
    // Enables the TCXO if available on the board design
    SX1276SetBoardTcxo( true );
 80065c4:	2001      	movs	r0, #1
 80065c6:	f7ff ffe9 	bl	800659c <SX1276SetBoardTcxo>

    // Set RESET pin to 0
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, RESET);
 80065ca:	4b0c      	ldr	r3, [pc, #48]	; (80065fc <SX1276Reset+0x3c>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a0b      	ldr	r2, [pc, #44]	; (80065fc <SX1276Reset+0x3c>)
 80065d0:	8891      	ldrh	r1, [r2, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fa fef4 	bl	80013c2 <HAL_GPIO_WritePin>

    // Wait 1 ms
    DelayMs( 1 );
 80065da:	2001      	movs	r0, #1
 80065dc:	f7ff fa28 	bl	8005a30 <DelayMs>

    // Configure RESET as input
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, SET);
 80065e0:	4b06      	ldr	r3, [pc, #24]	; (80065fc <SX1276Reset+0x3c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a05      	ldr	r2, [pc, #20]	; (80065fc <SX1276Reset+0x3c>)
 80065e6:	8891      	ldrh	r1, [r2, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fa fee9 	bl	80013c2 <HAL_GPIO_WritePin>

    // Wait 6 ms
    DelayMs( 6 );
 80065f0:	2006      	movs	r0, #6
 80065f2:	f7ff fa1d 	bl	8005a30 <DelayMs>
}
 80065f6:	bf00      	nop
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	200002ec 	.word	0x200002ec

08006600 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 8006600:	b590      	push	{r4, r7, lr}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 800660a:	2300      	movs	r3, #0
 800660c:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1276Read( REG_PACONFIG );
 8006612:	2009      	movs	r0, #9
 8006614:	f7fe fab4 	bl	8004b80 <SX1276Read>
 8006618:	4603      	mov	r3, r0
 800661a:	73fb      	strb	r3, [r7, #15]
    paDac = SX1276Read( REG_PADAC );
 800661c:	204d      	movs	r0, #77	; 0x4d
 800661e:	f7fe faaf 	bl	8004b80 <SX1276Read>
 8006622:	4603      	mov	r3, r0
 8006624:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 8006626:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800662a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800662e:	b25c      	sxtb	r4, r3
 8006630:	4b4a      	ldr	r3, [pc, #296]	; (800675c <SX1276SetRfTxPower+0x15c>)
 8006632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006634:	4618      	mov	r0, r3
 8006636:	f000 f893 	bl	8006760 <SX1276GetPaSelect>
 800663a:	4603      	mov	r3, r0
 800663c:	b25b      	sxtb	r3, r3
 800663e:	4323      	orrs	r3, r4
 8006640:	b25b      	sxtb	r3, r3
 8006642:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8006644:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006648:	2b00      	cmp	r3, #0
 800664a:	da4e      	bge.n	80066ea <SX1276SetRfTxPower+0xea>
    {
        if( power > 17 )
 800664c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006650:	2b11      	cmp	r3, #17
 8006652:	dd04      	ble.n	800665e <SX1276SetRfTxPower+0x5e>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8006654:	7bbb      	ldrb	r3, [r7, #14]
 8006656:	f043 0307 	orr.w	r3, r3, #7
 800665a:	73bb      	strb	r3, [r7, #14]
 800665c:	e008      	b.n	8006670 <SX1276SetRfTxPower+0x70>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800665e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006662:	f023 0307 	bic.w	r3, r3, #7
 8006666:	b25b      	sxtb	r3, r3
 8006668:	f043 0304 	orr.w	r3, r3, #4
 800666c:	b25b      	sxtb	r3, r3
 800666e:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8006670:	7bbb      	ldrb	r3, [r7, #14]
 8006672:	f003 0307 	and.w	r3, r3, #7
 8006676:	2b07      	cmp	r3, #7
 8006678:	d11b      	bne.n	80066b2 <SX1276SetRfTxPower+0xb2>
        {
            if( power < 5 )
 800667a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667e:	2b04      	cmp	r3, #4
 8006680:	dc01      	bgt.n	8006686 <SX1276SetRfTxPower+0x86>
            {
                power = 5;
 8006682:	2305      	movs	r3, #5
 8006684:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 8006686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800668a:	2b14      	cmp	r3, #20
 800668c:	dd01      	ble.n	8006692 <SX1276SetRfTxPower+0x92>
            {
                power = 20;
 800668e:	2314      	movs	r3, #20
 8006690:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8006692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006696:	f023 030f 	bic.w	r3, r3, #15
 800669a:	b25a      	sxtb	r2, r3
 800669c:	79fb      	ldrb	r3, [r7, #7]
 800669e:	3b05      	subs	r3, #5
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	b25b      	sxtb	r3, r3
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	b25b      	sxtb	r3, r3
 80066aa:	4313      	orrs	r3, r2
 80066ac:	b25b      	sxtb	r3, r3
 80066ae:	73fb      	strb	r3, [r7, #15]
 80066b0:	e045      	b.n	800673e <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < 2 )
 80066b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	dc01      	bgt.n	80066be <SX1276SetRfTxPower+0xbe>
            {
                power = 2;
 80066ba:	2302      	movs	r3, #2
 80066bc:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 80066be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c2:	2b11      	cmp	r3, #17
 80066c4:	dd01      	ble.n	80066ca <SX1276SetRfTxPower+0xca>
            {
                power = 17;
 80066c6:	2311      	movs	r3, #17
 80066c8:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80066ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066ce:	f023 030f 	bic.w	r3, r3, #15
 80066d2:	b25a      	sxtb	r2, r3
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	3b02      	subs	r3, #2
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	b25b      	sxtb	r3, r3
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	b25b      	sxtb	r3, r3
 80066e2:	4313      	orrs	r3, r2
 80066e4:	b25b      	sxtb	r3, r3
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	e029      	b.n	800673e <SX1276SetRfTxPower+0x13e>
        }
    }
    else
    {
        if( power > 0 )
 80066ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	dd12      	ble.n	8006718 <SX1276SetRfTxPower+0x118>
        {
            if( power > 15 )
 80066f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f6:	2b0f      	cmp	r3, #15
 80066f8:	dd01      	ble.n	80066fe <SX1276SetRfTxPower+0xfe>
            {
                power = 15;
 80066fa:	230f      	movs	r3, #15
 80066fc:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 80066fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006702:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006706:	b25b      	sxtb	r3, r3
 8006708:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800670c:	b25a      	sxtb	r2, r3
 800670e:	79fb      	ldrb	r3, [r7, #7]
 8006710:	4313      	orrs	r3, r2
 8006712:	b25b      	sxtb	r3, r3
 8006714:	73fb      	strb	r3, [r7, #15]
 8006716:	e012      	b.n	800673e <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < -4 )
 8006718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800671c:	f113 0f04 	cmn.w	r3, #4
 8006720:	da01      	bge.n	8006726 <SX1276SetRfTxPower+0x126>
            {
                power = -4;
 8006722:	23fc      	movs	r3, #252	; 0xfc
 8006724:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8006726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800672a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800672e:	b25a      	sxtb	r2, r3
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	3304      	adds	r3, #4
 8006734:	b2db      	uxtb	r3, r3
 8006736:	b25b      	sxtb	r3, r3
 8006738:	4313      	orrs	r3, r2
 800673a:	b25b      	sxtb	r3, r3
 800673c:	73fb      	strb	r3, [r7, #15]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	4619      	mov	r1, r3
 8006742:	2009      	movs	r0, #9
 8006744:	f7fe fa0c 	bl	8004b60 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8006748:	7bbb      	ldrb	r3, [r7, #14]
 800674a:	4619      	mov	r1, r3
 800674c:	204d      	movs	r0, #77	; 0x4d
 800674e:	f7fe fa07 	bl	8004b60 <SX1276Write>
}
 8006752:	bf00      	nop
 8006754:	3714      	adds	r7, #20
 8006756:	46bd      	mov	sp, r7
 8006758:	bd90      	pop	{r4, r7, pc}
 800675a:	bf00      	nop
 800675c:	200002ec 	.word	0x200002ec

08006760 <SX1276GetPaSelect>:

static uint8_t SX1276GetPaSelect( uint32_t channel )
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
    if( channel > RF_MID_BAND_THRESH )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a05      	ldr	r2, [pc, #20]	; (8006780 <SX1276GetPaSelect+0x20>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d901      	bls.n	8006774 <SX1276GetPaSelect+0x14>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8006770:	2380      	movs	r3, #128	; 0x80
 8006772:	e000      	b.n	8006776 <SX1276GetPaSelect+0x16>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8006774:	2300      	movs	r3, #0
    }
}
 8006776:	4618      	mov	r0, r3
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	bc80      	pop	{r7}
 800677e:	4770      	bx	lr
 8006780:	1f4add40 	.word	0x1f4add40

08006784 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 800678e:	4b0b      	ldr	r3, [pc, #44]	; (80067bc <SX1276SetAntSwLowPower+0x38>)
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	79fa      	ldrb	r2, [r7, #7]
 8006794:	429a      	cmp	r2, r3
 8006796:	d00d      	beq.n	80067b4 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 8006798:	4a08      	ldr	r2, [pc, #32]	; (80067bc <SX1276SetAntSwLowPower+0x38>)
 800679a:	79fb      	ldrb	r3, [r7, #7]
 800679c:	7013      	strb	r3, [r2, #0]

        if( status == false )
 800679e:	79fb      	ldrb	r3, [r7, #7]
 80067a0:	f083 0301 	eor.w	r3, r3, #1
 80067a4:	b2db      	uxtb	r3, r3
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 80067aa:	f000 f809 	bl	80067c0 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 80067ae:	e001      	b.n	80067b4 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 80067b0:	f000 f80c 	bl	80067cc <SX1276AntSwDeInit>
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	200001b8 	.word	0x200001b8

080067c0 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 80067c0:	b480      	push	{r7}
 80067c2:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 80067c4:	bf00      	nop
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bc80      	pop	{r7}
 80067ca:	4770      	bx	lr

080067cc <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 80067cc:	b480      	push	{r7}
 80067ce:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 80067d0:	bf00      	nop
 80067d2:	46bd      	mov	sp, r7
 80067d4:	bc80      	pop	{r7}
 80067d6:	4770      	bx	lr

080067d8 <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 80067d8:	b480      	push	{r7}
 80067da:	b083      	sub	sp, #12
 80067dc:	af00      	add	r7, sp, #0
 80067de:	4603      	mov	r3, r0
 80067e0:	71fb      	strb	r3, [r7, #7]
}
 80067e2:	bf00      	nop
 80067e4:	370c      	adds	r7, #12
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 80067f4:	2301      	movs	r3, #1
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	370c      	adds	r7, #12
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bc80      	pop	{r7}
 80067fe:	4770      	bx	lr

08006800 <SX1276GetDio1PinState>:

uint32_t SX1276GetDio1PinState( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	af00      	add	r7, sp, #0
    return GpioRead( &SX1276.DIO1 );
 8006804:	4802      	ldr	r0, [pc, #8]	; (8006810 <SX1276GetDio1PinState+0x10>)
 8006806:	f7f9 fef5 	bl	80005f4 <GpioRead>
 800680a:	4603      	mov	r3, r0
}
 800680c:	4618      	mov	r0, r3
 800680e:	bd80      	pop	{r7, pc}
 8006810:	200002fc 	.word	0x200002fc

08006814 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	4603      	mov	r3, r0
 800681c:	80fb      	strh	r3, [r7, #6]
  void (*fptr)(void *context) = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	60fb      	str	r3, [r7, #12]
  switch(GPIO_Pin)
 8006822:	88fb      	ldrh	r3, [r7, #6]
 8006824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006828:	d037      	beq.n	800689a <HAL_GPIO_EXTI_Callback+0x86>
 800682a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800682e:	dc36      	bgt.n	800689e <HAL_GPIO_EXTI_Callback+0x8a>
 8006830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006834:	d019      	beq.n	800686a <HAL_GPIO_EXTI_Callback+0x56>
 8006836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800683a:	dc30      	bgt.n	800689e <HAL_GPIO_EXTI_Callback+0x8a>
 800683c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006840:	d017      	beq.n	8006872 <HAL_GPIO_EXTI_Callback+0x5e>
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006846:	dc2a      	bgt.n	800689e <HAL_GPIO_EXTI_Callback+0x8a>
 8006848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800684c:	d015      	beq.n	800687a <HAL_GPIO_EXTI_Callback+0x66>
 800684e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006852:	dc24      	bgt.n	800689e <HAL_GPIO_EXTI_Callback+0x8a>
 8006854:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006858:	d013      	beq.n	8006882 <HAL_GPIO_EXTI_Callback+0x6e>
 800685a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800685e:	dc1e      	bgt.n	800689e <HAL_GPIO_EXTI_Callback+0x8a>
 8006860:	2b20      	cmp	r3, #32
 8006862:	d012      	beq.n	800688a <HAL_GPIO_EXTI_Callback+0x76>
 8006864:	2b40      	cmp	r3, #64	; 0x40
 8006866:	d014      	beq.n	8006892 <HAL_GPIO_EXTI_Callback+0x7e>
      fptr = DioIrq[5];
      break;
    case GPIO_PIN_13:
      break;
    default:
      break;
 8006868:	e019      	b.n	800689e <HAL_GPIO_EXTI_Callback+0x8a>
      fptr = DioIrq[0];
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60fb      	str	r3, [r7, #12]
      break;
 8006870:	e016      	b.n	80068a0 <HAL_GPIO_EXTI_Callback+0x8c>
      fptr = DioIrq[1];
 8006872:	4b10      	ldr	r3, [pc, #64]	; (80068b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	60fb      	str	r3, [r7, #12]
      break;
 8006878:	e012      	b.n	80068a0 <HAL_GPIO_EXTI_Callback+0x8c>
      fptr = DioIrq[2];
 800687a:	4b0e      	ldr	r3, [pc, #56]	; (80068b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	60fb      	str	r3, [r7, #12]
      break;
 8006880:	e00e      	b.n	80068a0 <HAL_GPIO_EXTI_Callback+0x8c>
      fptr = DioIrq[3];
 8006882:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8006884:	68db      	ldr	r3, [r3, #12]
 8006886:	60fb      	str	r3, [r7, #12]
      break;
 8006888:	e00a      	b.n	80068a0 <HAL_GPIO_EXTI_Callback+0x8c>
      fptr = DioIrq[4];
 800688a:	4b0a      	ldr	r3, [pc, #40]	; (80068b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	60fb      	str	r3, [r7, #12]
      break;
 8006890:	e006      	b.n	80068a0 <HAL_GPIO_EXTI_Callback+0x8c>
      fptr = DioIrq[5];
 8006892:	4b08      	ldr	r3, [pc, #32]	; (80068b4 <HAL_GPIO_EXTI_Callback+0xa0>)
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	60fb      	str	r3, [r7, #12]
      break;
 8006898:	e002      	b.n	80068a0 <HAL_GPIO_EXTI_Callback+0x8c>
      break;
 800689a:	bf00      	nop
 800689c:	e000      	b.n	80068a0 <HAL_GPIO_EXTI_Callback+0x8c>
      break;
 800689e:	bf00      	nop
}
  if(fptr != 0)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d002      	beq.n	80068ac <HAL_GPIO_EXTI_Callback+0x98>
    fptr(NULL);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2000      	movs	r0, #0
 80068aa:	4798      	blx	r3
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	2000000c 	.word	0x2000000c

080068b8 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2200      	movs	r2, #0
 80068cc:	605a      	str	r2, [r3, #4]
    obj->IsStarted = false;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2200      	movs	r2, #0
 80068d2:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	725a      	strb	r2, [r3, #9]
    obj->Callback = callback;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	60da      	str	r2, [r3, #12]
    obj->Context = NULL;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	615a      	str	r2, [r3, #20]
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bc80      	pop	{r7}
 80068f4:	4770      	bx	lr
	...

080068f8 <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b084      	sub	sp, #16
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
 8006904:	f107 0308 	add.w	r3, r7, #8
 8006908:	4618      	mov	r0, r3
 800690a:	f7ff f84d 	bl	80059a8 <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d005      	beq.n	8006920 <TimerStart+0x28>
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f000 f989 	bl	8006c2c <TimerExists>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d005      	beq.n	800692c <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
 8006920:	f107 0308 	add.w	r3, r7, #8
 8006924:	4618      	mov	r0, r3
 8006926:	f7ff f850 	bl	80059ca <BoardCriticalSectionEnd>
 800692a:	e02f      	b.n	800698c <TimerStart+0x94>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685a      	ldr	r2, [r3, #4]
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	601a      	str	r2, [r3, #0]
    obj->IsStarted = true;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2201      	movs	r2, #1
 8006938:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	725a      	strb	r2, [r3, #9]

    if( TimerListHead == NULL )
 8006940:	4b14      	ldr	r3, [pc, #80]	; (8006994 <TimerStart+0x9c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d105      	bne.n	8006954 <TimerStart+0x5c>
    {
        RtcSetTimerContext( );
 8006948:	f7ff fb86 	bl	8006058 <RtcSetTimerContext>
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f000 f853 	bl	80069f8 <TimerInsertNewHeadTimer>
 8006952:	e016      	b.n	8006982 <TimerStart+0x8a>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
 8006954:	f7ff fd12 	bl	800637c <RtcGetTimerElapsedTime>
 8006958:	60f8      	str	r0, [r7, #12]
        obj->Timestamp += elapsedTime;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	441a      	add	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	601a      	str	r2, [r3, #0]

        if( obj->Timestamp < TimerListHead->Timestamp )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <TimerStart+0x9c>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	429a      	cmp	r2, r3
 8006972:	d203      	bcs.n	800697c <TimerStart+0x84>
        {
            TimerInsertNewHeadTimer( obj );
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f83f 	bl	80069f8 <TimerInsertNewHeadTimer>
 800697a:	e002      	b.n	8006982 <TimerStart+0x8a>
        }
        else
        {
            TimerInsertTimer( obj );
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f80b 	bl	8006998 <TimerInsertTimer>
        }
    }
    CRITICAL_SECTION_END( );
 8006982:	f107 0308 	add.w	r3, r7, #8
 8006986:	4618      	mov	r0, r3
 8006988:	f7ff f81f 	bl	80059ca <BoardCriticalSectionEnd>
}
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	200001bc 	.word	0x200001bc

08006998 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 80069a0:	4b14      	ldr	r3, [pc, #80]	; (80069f4 <TimerInsertTimer+0x5c>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
 80069a6:	4b13      	ldr	r3, [pc, #76]	; (80069f4 <TimerInsertTimer+0x5c>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
 80069ae:	e012      	b.n	80069d6 <TimerInsertTimer+0x3e>
    {
        if( obj->Timestamp > next->Timestamp )
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681a      	ldr	r2, [r3, #0]
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d905      	bls.n	80069c8 <TimerInsertTimer+0x30>
        {
            cur = next;
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	60fb      	str	r3, [r7, #12]
            next = next->Next;
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	e006      	b.n	80069d6 <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	615a      	str	r2, [r3, #20]
            obj->Next = next;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	68ba      	ldr	r2, [r7, #8]
 80069d2:	615a      	str	r2, [r3, #20]
            return;
 80069d4:	e009      	b.n	80069ea <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1e8      	bne.n	80069b0 <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	615a      	str	r2, [r3, #20]
    obj->Next = NULL;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	615a      	str	r2, [r3, #20]
}
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	200001bc 	.word	0x200001bc

080069f8 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8006a00:	4b0b      	ldr	r3, [pc, #44]	; (8006a30 <TimerInsertNewHeadTimer+0x38>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d002      	beq.n	8006a12 <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsNext2Expire = false;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	725a      	strb	r2, [r3, #9]
    }

    obj->Next = cur;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	615a      	str	r2, [r3, #20]
    TimerListHead = obj;
 8006a18:	4a05      	ldr	r2, [pc, #20]	; (8006a30 <TimerInsertNewHeadTimer+0x38>)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <TimerInsertNewHeadTimer+0x38>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f000 f968 	bl	8006cf8 <TimerSetTimeout>
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	200001bc 	.word	0x200001bc

08006a34 <TimerIrqHandler>:
{
    return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8006a34:	b590      	push	{r4, r7, lr}
 8006a36:	b087      	sub	sp, #28
 8006a38:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
 8006a3a:	f7ff fb21 	bl	8006080 <RtcGetTimerContext>
 8006a3e:	6138      	str	r0, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
 8006a40:	f7ff fb0a 	bl	8006058 <RtcSetTimerContext>
 8006a44:	60f8      	str	r0, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
 8006a4e:	4b39      	ldr	r3, [pc, #228]	; (8006b34 <TimerIrqHandler+0x100>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01c      	beq.n	8006a90 <TimerIrqHandler+0x5c>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8006a56:	4b37      	ldr	r3, [pc, #220]	; (8006b34 <TimerIrqHandler+0x100>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e014      	b.n	8006a88 <TimerIrqHandler+0x54>
        {
            next = cur->Next;
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68ba      	ldr	r2, [r7, #8]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d206      	bcs.n	8006a7c <TimerIrqHandler+0x48>
            {
                next->Timestamp -= deltaContext;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681a      	ldr	r2, [r3, #0]
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	1ad2      	subs	r2, r2, r3
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	601a      	str	r2, [r3, #0]
 8006a7a:	e002      	b.n	8006a82 <TimerIrqHandler+0x4e>
            }
            else
            {
                next->Timestamp = 0;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	695b      	ldr	r3, [r3, #20]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e6      	bne.n	8006a5e <TimerIrqHandler+0x2a>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
 8006a90:	4b28      	ldr	r3, [pc, #160]	; (8006b34 <TimerIrqHandler+0x100>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d02c      	beq.n	8006af2 <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 8006a98:	4b26      	ldr	r3, [pc, #152]	; (8006b34 <TimerIrqHandler+0x100>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 8006a9e:	4b25      	ldr	r3, [pc, #148]	; (8006b34 <TimerIrqHandler+0x100>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695b      	ldr	r3, [r3, #20]
 8006aa4:	4a23      	ldr	r2, [pc, #140]	; (8006b34 <TimerIrqHandler+0x100>)
 8006aa6:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d100      	bne.n	8006ab8 <TimerIrqHandler+0x84>
 8006ab6:	e7fe      	b.n	8006ab6 <TimerIrqHandler+0x82>
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	68db      	ldr	r3, [r3, #12]
 8006abc:	697a      	ldr	r2, [r7, #20]
 8006abe:	6912      	ldr	r2, [r2, #16]
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8006ac4:	e015      	b.n	8006af2 <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 8006ac6:	4b1b      	ldr	r3, [pc, #108]	; (8006b34 <TimerIrqHandler+0x100>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <TimerIrqHandler+0x100>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <TimerIrqHandler+0x100>)
 8006ad4:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d100      	bne.n	8006ae6 <TimerIrqHandler+0xb2>
 8006ae4:	e7fe      	b.n	8006ae4 <TimerIrqHandler+0xb0>
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	68db      	ldr	r3, [r3, #12]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	6912      	ldr	r2, [r2, #16]
 8006aee:	4610      	mov	r0, r2
 8006af0:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8006af2:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <TimerIrqHandler+0x100>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <TimerIrqHandler+0xd6>
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <TimerIrqHandler+0x100>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681c      	ldr	r4, [r3, #0]
 8006b00:	f7ff fc3c 	bl	800637c <RtcGetTimerElapsedTime>
 8006b04:	4603      	mov	r3, r0
 8006b06:	429c      	cmp	r4, r3
 8006b08:	d3dd      	bcc.n	8006ac6 <TimerIrqHandler+0x92>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8006b0a:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <TimerIrqHandler+0x100>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00c      	beq.n	8006b2c <TimerIrqHandler+0xf8>
 8006b12:	4b08      	ldr	r3, [pc, #32]	; (8006b34 <TimerIrqHandler+0x100>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	7a5b      	ldrb	r3, [r3, #9]
 8006b18:	f083 0301 	eor.w	r3, r3, #1
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d004      	beq.n	8006b2c <TimerIrqHandler+0xf8>
    {
        TimerSetTimeout( TimerListHead );
 8006b22:	4b04      	ldr	r3, [pc, #16]	; (8006b34 <TimerIrqHandler+0x100>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4618      	mov	r0, r3
 8006b28:	f000 f8e6 	bl	8006cf8 <TimerSetTimeout>
    }
}
 8006b2c:	bf00      	nop
 8006b2e:	371c      	adds	r7, #28
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd90      	pop	{r4, r7, pc}
 8006b34:	200001bc 	.word	0x200001bc

08006b38 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
 8006b40:	f107 030c 	add.w	r3, r7, #12
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fe ff2f 	bl	80059a8 <BoardCriticalSectionBegin>

    TimerEvent_t* prev = TimerListHead;
 8006b4a:	4b37      	ldr	r3, [pc, #220]	; (8006c28 <TimerStop+0xf0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
 8006b50:	4b35      	ldr	r3, [pc, #212]	; (8006c28 <TimerStop+0xf0>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8006b56:	4b34      	ldr	r3, [pc, #208]	; (8006c28 <TimerStop+0xf0>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d002      	beq.n	8006b64 <TimerStop+0x2c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d105      	bne.n	8006b70 <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
 8006b64:	f107 030c 	add.w	r3, r7, #12
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fe ff2e 	bl	80059ca <BoardCriticalSectionEnd>
 8006b6e:	e057      	b.n	8006c20 <TimerStop+0xe8>
        return;
    }

    obj->IsStarted = false;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2200      	movs	r2, #0
 8006b74:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == obj ) // Stop the Head
 8006b76:	4b2c      	ldr	r3, [pc, #176]	; (8006c28 <TimerStop+0xf0>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d147      	bne.n	8006c10 <TimerStop+0xd8>
    {
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8006b80:	4b29      	ldr	r3, [pc, #164]	; (8006c28 <TimerStop+0xf0>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	7a5b      	ldrb	r3, [r3, #9]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d019      	beq.n	8006bbe <TimerStop+0x86>
        {
            TimerListHead->IsNext2Expire = false;
 8006b8a:	4b27      	ldr	r3, [pc, #156]	; (8006c28 <TimerStop+0xf0>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8006b92:	4b25      	ldr	r3, [pc, #148]	; (8006c28 <TimerStop+0xf0>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	695b      	ldr	r3, [r3, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00a      	beq.n	8006bb2 <TimerStop+0x7a>
            {
                TimerListHead = TimerListHead->Next;
 8006b9c:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <TimerStop+0xf0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	4a21      	ldr	r2, [pc, #132]	; (8006c28 <TimerStop+0xf0>)
 8006ba4:	6013      	str	r3, [r2, #0]
                TimerSetTimeout( TimerListHead );
 8006ba6:	4b20      	ldr	r3, [pc, #128]	; (8006c28 <TimerStop+0xf0>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4618      	mov	r0, r3
 8006bac:	f000 f8a4 	bl	8006cf8 <TimerSetTimeout>
 8006bb0:	e031      	b.n	8006c16 <TimerStop+0xde>
            }
            else
            {
                RtcStopAlarm( );
 8006bb2:	f7ff fabd 	bl	8006130 <RtcStopAlarm>
                TimerListHead = NULL;
 8006bb6:	4b1c      	ldr	r3, [pc, #112]	; (8006c28 <TimerStop+0xf0>)
 8006bb8:	2200      	movs	r2, #0
 8006bba:	601a      	str	r2, [r3, #0]
 8006bbc:	e02b      	b.n	8006c16 <TimerStop+0xde>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <TimerStop+0xf0>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <TimerStop+0x9c>
            {
                TimerListHead = TimerListHead->Next;
 8006bc8:	4b17      	ldr	r3, [pc, #92]	; (8006c28 <TimerStop+0xf0>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	4a16      	ldr	r2, [pc, #88]	; (8006c28 <TimerStop+0xf0>)
 8006bd0:	6013      	str	r3, [r2, #0]
 8006bd2:	e020      	b.n	8006c16 <TimerStop+0xde>
            }
            else
            {
                TimerListHead = NULL;
 8006bd4:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <TimerStop+0xf0>)
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	601a      	str	r2, [r3, #0]
 8006bda:	e01c      	b.n	8006c16 <TimerStop+0xde>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
 8006bdc:	693a      	ldr	r2, [r7, #16]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d110      	bne.n	8006c06 <TimerStop+0xce>
            {
                if( cur->Next != NULL )
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d006      	beq.n	8006bfa <TimerStop+0xc2>
                {
                    cur = cur->Next;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	615a      	str	r2, [r3, #20]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8006bf8:	e00d      	b.n	8006c16 <TimerStop+0xde>
                    cur = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	615a      	str	r2, [r3, #20]
                break;
 8006c04:	e007      	b.n	8006c16 <TimerStop+0xde>
            }
            else
            {
                prev = cur;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e2      	bne.n	8006bdc <TimerStop+0xa4>
            }
        }
    }
    CRITICAL_SECTION_END( );
 8006c16:	f107 030c 	add.w	r3, r7, #12
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe fed5 	bl	80059ca <BoardCriticalSectionEnd>
}
 8006c20:	3718      	adds	r7, #24
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}
 8006c26:	bf00      	nop
 8006c28:	200001bc 	.word	0x200001bc

08006c2c <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8006c34:	4b0a      	ldr	r3, [pc, #40]	; (8006c60 <TimerExists+0x34>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 8006c3a:	e008      	b.n	8006c4e <TimerExists+0x22>
    {
        if( cur == obj )
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d101      	bne.n	8006c48 <TimerExists+0x1c>
        {
            return true;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e006      	b.n	8006c56 <TimerExists+0x2a>
        }
        cur = cur->Next;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f3      	bne.n	8006c3c <TimerExists+0x10>
    }
    return false;
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3714      	adds	r7, #20
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bc80      	pop	{r7}
 8006c5e:	4770      	bx	lr
 8006c60:	200001bc 	.word	0x200001bc

08006c64 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
 8006c72:	6838      	ldr	r0, [r7, #0]
 8006c74:	f7ff fa15 	bl	80060a2 <RtcMs2Tick>
 8006c78:	60f8      	str	r0, [r7, #12]

    TimerStop( obj );
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff ff5c 	bl	8006b38 <TimerStop>

    minValue = RtcGetMinimumTimeout( );
 8006c80:	f7ff fa08 	bl	8006094 <RtcGetMinimumTimeout>
 8006c84:	60b8      	str	r0, [r7, #8]

    if( ticks < minValue )
 8006c86:	68fa      	ldr	r2, [r7, #12]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d201      	bcs.n	8006c92 <TimerSetValue+0x2e>
    {
        ticks = minValue;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	605a      	str	r2, [r3, #4]
}
 8006c9e:	bf00      	nop
 8006ca0:	3710      	adds	r7, #16
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}

08006ca6 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 8006ca6:	b580      	push	{r7, lr}
 8006ca8:	b082      	sub	sp, #8
 8006caa:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
 8006cac:	f7ff fb52 	bl	8006354 <RtcGetTimerValue>
 8006cb0:	6078      	str	r0, [r7, #4]
    return  RtcTick2Ms( now );
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f7ff fa12 	bl	80060dc <RtcTick2Ms>
 8006cb8:	4603      	mov	r3, r0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
    if ( past == 0 )
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <TimerGetElapsedTime+0x12>
    {
        return 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	e00d      	b.n	8006cf0 <TimerGetElapsedTime+0x2e>
    }
    uint32_t nowInTicks = RtcGetTimerValue( );
 8006cd4:	f7ff fb3e 	bl	8006354 <RtcGetTimerValue>
 8006cd8:	60f8      	str	r0, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff f9e1 	bl	80060a2 <RtcMs2Tick>
 8006ce0:	60b8      	str	r0, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
 8006ce2:	68fa      	ldr	r2, [r7, #12]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff f9f7 	bl	80060dc <RtcTick2Ms>
 8006cee:	4603      	mov	r3, r0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3710      	adds	r7, #16
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8006cf8:	b590      	push	{r4, r7, lr}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
 8006d00:	f7ff f9c8 	bl	8006094 <RtcGetMinimumTimeout>
 8006d04:	4603      	mov	r3, r0
 8006d06:	60fb      	str	r3, [r7, #12]
    obj->IsNext2Expire = true;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	725a      	strb	r2, [r3, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681c      	ldr	r4, [r3, #0]
 8006d12:	f7ff fb33 	bl	800637c <RtcGetTimerElapsedTime>
 8006d16:	4602      	mov	r2, r0
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	d206      	bcs.n	8006d2e <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8006d20:	f7ff fb2c 	bl	800637c <RtcGetTimerElapsedTime>
 8006d24:	4602      	mov	r2, r0
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	441a      	add	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7ff f9ee 	bl	8006114 <RtcSetAlarm>
}
 8006d38:	bf00      	nop
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd90      	pop	{r4, r7, pc}

08006d40 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8006d4e:	e007      	b.n	8006d60 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8006d50:	68ba      	ldr	r2, [r7, #8]
 8006d52:	1c53      	adds	r3, r2, #1
 8006d54:	60bb      	str	r3, [r7, #8]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	1c59      	adds	r1, r3, #1
 8006d5a:	60f9      	str	r1, [r7, #12]
 8006d5c:	7812      	ldrb	r2, [r2, #0]
 8006d5e:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8006d60:	88fb      	ldrh	r3, [r7, #6]
 8006d62:	1e5a      	subs	r2, r3, #1
 8006d64:	80fa      	strh	r2, [r7, #6]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d1f2      	bne.n	8006d50 <memcpy1+0x10>
    }
}
 8006d6a:	bf00      	nop
 8006d6c:	bf00      	nop
 8006d6e:	3714      	adds	r7, #20
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bc80      	pop	{r7}
 8006d74:	4770      	bx	lr
	...

08006d78 <__libc_init_array>:
 8006d78:	b570      	push	{r4, r5, r6, lr}
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	4d0c      	ldr	r5, [pc, #48]	; (8006db0 <__libc_init_array+0x38>)
 8006d7e:	4c0d      	ldr	r4, [pc, #52]	; (8006db4 <__libc_init_array+0x3c>)
 8006d80:	1b64      	subs	r4, r4, r5
 8006d82:	10a4      	asrs	r4, r4, #2
 8006d84:	42a6      	cmp	r6, r4
 8006d86:	d109      	bne.n	8006d9c <__libc_init_array+0x24>
 8006d88:	f000 f842 	bl	8006e10 <_init>
 8006d8c:	2600      	movs	r6, #0
 8006d8e:	4d0a      	ldr	r5, [pc, #40]	; (8006db8 <__libc_init_array+0x40>)
 8006d90:	4c0a      	ldr	r4, [pc, #40]	; (8006dbc <__libc_init_array+0x44>)
 8006d92:	1b64      	subs	r4, r4, r5
 8006d94:	10a4      	asrs	r4, r4, #2
 8006d96:	42a6      	cmp	r6, r4
 8006d98:	d105      	bne.n	8006da6 <__libc_init_array+0x2e>
 8006d9a:	bd70      	pop	{r4, r5, r6, pc}
 8006d9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da0:	4798      	blx	r3
 8006da2:	3601      	adds	r6, #1
 8006da4:	e7ee      	b.n	8006d84 <__libc_init_array+0xc>
 8006da6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006daa:	4798      	blx	r3
 8006dac:	3601      	adds	r6, #1
 8006dae:	e7f2      	b.n	8006d96 <__libc_init_array+0x1e>
 8006db0:	08006fc8 	.word	0x08006fc8
 8006db4:	08006fc8 	.word	0x08006fc8
 8006db8:	08006fc8 	.word	0x08006fc8
 8006dbc:	08006fcc 	.word	0x08006fcc

08006dc0 <memcpy>:
 8006dc0:	440a      	add	r2, r1
 8006dc2:	4291      	cmp	r1, r2
 8006dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc8:	d100      	bne.n	8006dcc <memcpy+0xc>
 8006dca:	4770      	bx	lr
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd2:	4291      	cmp	r1, r2
 8006dd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd8:	d1f9      	bne.n	8006dce <memcpy+0xe>
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <memset>:
 8006ddc:	4603      	mov	r3, r0
 8006dde:	4402      	add	r2, r0
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d100      	bne.n	8006de6 <memset+0xa>
 8006de4:	4770      	bx	lr
 8006de6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dea:	e7f9      	b.n	8006de0 <memset+0x4>

08006dec <strncmp>:
 8006dec:	b510      	push	{r4, lr}
 8006dee:	b16a      	cbz	r2, 8006e0c <strncmp+0x20>
 8006df0:	3901      	subs	r1, #1
 8006df2:	1884      	adds	r4, r0, r2
 8006df4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006df8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d103      	bne.n	8006e08 <strncmp+0x1c>
 8006e00:	42a0      	cmp	r0, r4
 8006e02:	d001      	beq.n	8006e08 <strncmp+0x1c>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1f5      	bne.n	8006df4 <strncmp+0x8>
 8006e08:	1a98      	subs	r0, r3, r2
 8006e0a:	bd10      	pop	{r4, pc}
 8006e0c:	4610      	mov	r0, r2
 8006e0e:	e7fc      	b.n	8006e0a <strncmp+0x1e>

08006e10 <_init>:
 8006e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e12:	bf00      	nop
 8006e14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e16:	bc08      	pop	{r3}
 8006e18:	469e      	mov	lr, r3
 8006e1a:	4770      	bx	lr

08006e1c <_fini>:
 8006e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e1e:	bf00      	nop
 8006e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e22:	bc08      	pop	{r3}
 8006e24:	469e      	mov	lr, r3
 8006e26:	4770      	bx	lr
