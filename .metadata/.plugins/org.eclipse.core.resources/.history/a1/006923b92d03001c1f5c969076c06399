/*
 * rf-test.h
 *
 *  Created on: May 26, 2021
 *      Author: user
 */

#ifndef RF_TEST_H_
#define RF_TEST_H_


#endif /* RF_TEST_H_ */

#include <string.h>
#include "board.h"
#include "gpio.h"
#include "delay.h"
#include "timer.h"
#include "radio.h"
#include "sx1276.h"
#include "time.h"
#include <stdio.h>

#define REGION_EU433
#define USE_MODEM_FSK

#if defined( REGION_AS923 )

#define RF_FREQUENCY                                923000000 // Hz

#elif defined( REGION_AU915 )

#define RF_FREQUENCY                                915000000 // Hz

#elif defined( REGION_CN470 )

#define RF_FREQUENCY                                470000000 // Hz

#elif defined( REGION_CN779 )

#define RF_FREQUENCY                                779000000 // Hz

#elif defined( REGION_EU433 )

#define RF_FREQUENCY                                450000000 // Hz

#elif defined( REGION_EU868 )

#define RF_FREQUENCY                                860000000 // Hz

#elif defined( REGION_KR920 )

#define RF_FREQUENCY                                920000000 // Hz

#elif defined( REGION_IN865 )

#define RF_FREQUENCY                                865000000 // Hz

#elif defined( REGION_US915 )

#define RF_FREQUENCY                                915000000 // Hz

#elif defined( REGION_RU864 )

#define RF_FREQUENCY                                864000000 // Hz

#endif

#define TX_OUTPUT_POWER                             14        // dBm

#if defined( USE_MODEM_LORA )

#define LORA_BANDWIDTH                              0         // [0: 125 kHz,
                                                              //  1: 250 kHz,
                                                              //  2: 500 kHz,
                                                              //  3: Reserved]
#define LORA_SPREADING_FACTOR                       7         // [SF7..SF12]
#define LORA_CODINGRATE                             1         // [1: 4/5,
                                                              //  2: 4/6,
                                                              //  3: 4/7,
                                                              //  4: 4/8]
#define LORA_PREAMBLE_LENGTH                        8         // Same for Tx and Rx
#define LORA_SYMBOL_TIMEOUT                         5         // Symbols
#define LORA_FIX_LENGTH_PAYLOAD_ON                  false
#define LORA_IQ_INVERSION_ON                        false

#elif defined( USE_MODEM_FSK )

#define FSK_FDEV                                    25000     // Hz
#define FSK_DATARATE                                50000     // bps
#define FSK_BANDWIDTH                               50000     // Hz
#define FSK_AFC_BANDWIDTH                           83333     // Hz
#define FSK_PREAMBLE_LENGTH                         5         // Same for Tx and Rx
#define FSK_FIX_LENGTH_PAYLOAD_ON                   false

#endif

void ping_pong_rf (void);
void Radio_TX ( uint8_t *pData, uint8_t size );

typedef enum {
	BER			,
	PER			,
	PING_PONG	,
}Mode_t;

//struct InputParametrs_s {
//	*struct BER_s pBER;
//	*struct PER_s pPER;
//};

void Measurements (Mode_t mode);

#define BER_TEST

#ifdef PER_TEST
uint32_t AverageTime ( uint8_t NumOfAver, int max_count_of_packets );

// измеряет время передачи max_count_of_packets пакетов
uint32_t PerMeasTime ( int max_count_of_packets );

uint32_t count = 0;

// меняется при нажатии синей кнопки
bool ButtonIsNotPushed;

// Число отправляемых пакетов
#define NUMBER_OF_PACKETS_SENT 				20

// Число усреднений для расчёта среднего времени
#define NUMBER_OF_AVERAGING					20

extern UART_HandleTypeDef huart2;
#endif

#ifdef BER_TEST

typedef enum {
	BARKER_2 = 2,
	BARKER_3,
	BARKER_4,
	BARKER_5,
	BARKER_7  = 7,
	BARKER_11 = 11,
	BARKER_13 = 13,
}BarkerLen_t;

typedef struct
{
	BarkerLen_t  SequenceSize;
    uint16_t Sequence;
}BarkerSeq_t;

// В этой инициализации радиоканала будет отключён подсчёт контрольной суммы
void InitRfBer( void );

// Отправка сообщения с кодом Баркера
void BerTestRun( BarkerLen_t len );

//
uint16_t SearchSeq( BarkerLen_t len );

#endif

struct BER_s {
	BarkerLen_t len;
};

struct PER_s {
	uint16_t NumberOfAverage;
	uint16_t NumberOfPacketSent;

};

void OnTxDone( void );

/*!
 * \brief Function to be executed on Radio Rx Done event
 */
void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr );

/*!
 * \brief Function executed on Radio Tx Timeout event
 */
void OnTxTimeout( void );

/*!
 * \brief Function executed on Radio Rx Timeout event
 */
void OnRxTimeout( void );

/*!
 * \brief Function executed on Radio Rx Error event
 */
void OnRxError( void );

typedef enum
{
    LOWPOWER,
    RX,
    RX_TIMEOUT,
    RX_ERROR,
    TX,
    TX_TIMEOUT,
}States_t;

#define RX_TIMEOUT_VALUE                            1000
#define BUFFER_SIZE                                 64 // Define the payload size here
