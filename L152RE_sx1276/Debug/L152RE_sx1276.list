
L152RE_sx1276.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069bc  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08006af8  08006af8  00016af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c80  08006c80  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  08006c80  08006c80  00016c80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c88  08006c88  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c88  08006c88  00016c88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08006c90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000408  20000028  08006cb8  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000430  08006cb8  00020430  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019974  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003cd5  00000000  00000000  000399c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  0003d6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003eab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af75  00000000  00000000  0003fd20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017379  00000000  00000000  0005ac95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d86b  00000000  00000000  0007200e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010f879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  0010f8cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000028 	.word	0x20000028
 8000158:	00000000 	.word	0x00000000
 800015c:	08006ae0 	.word	0x08006ae0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000002c 	.word	0x2000002c
 8000178:	08006ae0 	.word	0x08006ae0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b4c      	ldr	r3, [pc, #304]	; (80005bc <MX_GPIO_Init+0x148>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a4b      	ldr	r2, [pc, #300]	; (80005bc <MX_GPIO_Init+0x148>)
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b49      	ldr	r3, [pc, #292]	; (80005bc <MX_GPIO_Init+0x148>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a2:	4b46      	ldr	r3, [pc, #280]	; (80005bc <MX_GPIO_Init+0x148>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a45      	ldr	r2, [pc, #276]	; (80005bc <MX_GPIO_Init+0x148>)
 80004a8:	f043 0320 	orr.w	r3, r3, #32
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b43      	ldr	r3, [pc, #268]	; (80005bc <MX_GPIO_Init+0x148>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 0320 	and.w	r3, r3, #32
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b40      	ldr	r3, [pc, #256]	; (80005bc <MX_GPIO_Init+0x148>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a3f      	ldr	r2, [pc, #252]	; (80005bc <MX_GPIO_Init+0x148>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <MX_GPIO_Init+0x148>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <MX_GPIO_Init+0x148>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a39      	ldr	r2, [pc, #228]	; (80005bc <MX_GPIO_Init+0x148>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b37      	ldr	r3, [pc, #220]	; (80005bc <MX_GPIO_Init+0x148>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX1276_RST_Pin|LED_EXT_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2109      	movs	r1, #9
 80004ee:	4834      	ldr	r0, [pc, #208]	; (80005c0 <MX_GPIO_Init+0x14c>)
 80004f0:	f000 ff57 	bl	80013a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	4832      	ldr	r0, [pc, #200]	; (80005c4 <MX_GPIO_Init+0x150>)
 80004fa:	f000 ff52 	bl	80013a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000504:	4830      	ldr	r0, [pc, #192]	; (80005c8 <MX_GPIO_Init+0x154>)
 8000506:	f000 ff4c 	bl	80013a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = B1_Pin|DIO_4_Pin|DIO_5_Pin|DIO_3_Pin
 800050a:	f242 3360 	movw	r3, #9056	; 0x2360
 800050e:	617b      	str	r3, [r7, #20]
                          |DIO_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000510:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <MX_GPIO_Init+0x158>)
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	4828      	ldr	r0, [pc, #160]	; (80005c0 <MX_GPIO_Init+0x14c>)
 8000520:	f000 fd98 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SX1276_RST_Pin|LED_EXT_Pin;
 8000524:	2309      	movs	r3, #9
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	4821      	ldr	r0, [pc, #132]	; (80005c0 <MX_GPIO_Init+0x14c>)
 800053c:	f000 fd8a 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000540:	2320      	movs	r3, #32
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x150>)
 8000558:	f000 fd7c 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4814      	ldr	r0, [pc, #80]	; (80005c8 <MX_GPIO_Init+0x154>)
 8000576:	f000 fd6d 	bl	8001054 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO_1_Pin|DIO_0_Pin;
 800057a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_GPIO_Init+0x158>)
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_GPIO_Init+0x150>)
 8000590:	f000 fd60 	bl	8001054 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2105      	movs	r1, #5
 8000598:	2017      	movs	r0, #23
 800059a:	f000 fcf0 	bl	8000f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800059e:	2017      	movs	r0, #23
 80005a0:	f000 fd09 	bl	8000fb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2105      	movs	r1, #5
 80005a8:	2028      	movs	r0, #40	; 0x28
 80005aa:	f000 fce8 	bl	8000f7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ae:	2028      	movs	r0, #40	; 0x28
 80005b0:	f000 fd01 	bl	8000fb6 <HAL_NVIC_EnableIRQ>

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020800 	.word	0x40020800
 80005c4:	40020000 	.word	0x40020000
 80005c8:	40020400 	.word	0x40020400
 80005cc:	10110000 	.word	0x10110000

080005d0 <GpioWrite>:

/* USER CODE BEGIN 2 */
void GpioWrite( Gpio_t *obj, uint32_t value ) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(obj->port, obj->pin, (GPIO_PinState) value);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	889b      	ldrh	r3, [r3, #4]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	4619      	mov	r1, r3
 80005e8:	f000 fedb 	bl	80013a2 <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <GpioRead>:

uint32_t GpioRead( Gpio_t *obj ) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin( obj->port, obj->pin);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	889b      	ldrh	r3, [r3, #4]
 8000604:	4619      	mov	r1, r3
 8000606:	4610      	mov	r0, r2
 8000608:	f000 feb4 	bl	8001374 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800061a:	f000 fb7a 	bl	8000d12 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061e:	f000 f80b 	bl	8000638 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000622:	f7ff ff27 	bl	8000474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000626:	f000 fad9 	bl	8000bdc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800062a:	f000 f927 	bl	800087c <MX_SPI2_Init>
  MX_RTC_Init();
 800062e:	f000 f87d 	bl	800072c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  ping_pong_rf();
 8000632:	f005 fa6b 	bl	8005b0c <ping_pong_rf>
//  continuos_wave();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1);
 8000636:	e7fe      	b.n	8000636 <main+0x20>

08000638 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b096      	sub	sp, #88	; 0x58
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000642:	2234      	movs	r2, #52	; 0x34
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f006 fa42 	bl	8006ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000666:	4b25      	ldr	r3, [pc, #148]	; (80006fc <SystemClock_Config+0xc4>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800066e:	4a23      	ldr	r2, [pc, #140]	; (80006fc <SystemClock_Config+0xc4>)
 8000670:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000674:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8000676:	2306      	movs	r3, #6
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067a:	2301      	movs	r3, #1
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000682:	2310      	movs	r3, #16
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000686:	2302      	movs	r3, #2
 8000688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068a:	2300      	movs	r3, #0
 800068c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800068e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000692:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000694:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000698:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800069a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fec8 	bl	8001434 <HAL_RCC_OscConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006aa:	f000 f838 	bl	800071e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ae:	230f      	movs	r3, #15
 80006b0:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b2:	2303      	movs	r3, #3
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c2:	f107 0310 	add.w	r3, r7, #16
 80006c6:	2101      	movs	r1, #1
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 f9e3 	bl	8001a94 <HAL_RCC_ClockConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80006d4:	f000 f823 	bl	800071e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80006d8:	2301      	movs	r3, #1
 80006da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80006dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006e0:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fc99 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80006f0:	f000 f815 	bl	800071e <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3758      	adds	r7, #88	; 0x58
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40007000 	.word	0x40007000

08000700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000710:	d101      	bne.n	8000716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000712:	f000 fb17 	bl	8000d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}

0800071e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000722:	bf00      	nop
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
	...

0800072c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b090      	sub	sp, #64	; 0x40
 8000730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
 800073e:	60da      	str	r2, [r3, #12]
 8000740:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000746:	463b      	mov	r3, r7
 8000748:	2228      	movs	r2, #40	; 0x28
 800074a:	2100      	movs	r1, #0
 800074c:	4618      	mov	r0, r3
 800074e:	f006 f9bf 	bl	8006ad0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000752:	4b3a      	ldr	r3, [pc, #232]	; (800083c <MX_RTC_Init+0x110>)
 8000754:	4a3a      	ldr	r2, [pc, #232]	; (8000840 <MX_RTC_Init+0x114>)
 8000756:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000758:	4b38      	ldr	r3, [pc, #224]	; (800083c <MX_RTC_Init+0x110>)
 800075a:	2200      	movs	r2, #0
 800075c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800075e:	4b37      	ldr	r3, [pc, #220]	; (800083c <MX_RTC_Init+0x110>)
 8000760:	227f      	movs	r2, #127	; 0x7f
 8000762:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000764:	4b35      	ldr	r3, [pc, #212]	; (800083c <MX_RTC_Init+0x110>)
 8000766:	22ff      	movs	r2, #255	; 0xff
 8000768:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800076a:	4b34      	ldr	r3, [pc, #208]	; (800083c <MX_RTC_Init+0x110>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000770:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_RTC_Init+0x110>)
 8000772:	2200      	movs	r2, #0
 8000774:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000776:	4b31      	ldr	r3, [pc, #196]	; (800083c <MX_RTC_Init+0x110>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800077c:	482f      	ldr	r0, [pc, #188]	; (800083c <MX_RTC_Init+0x110>)
 800077e:	f001 fd2f 	bl	80021e0 <HAL_RTC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000788:	f7ff ffc9 	bl	800071e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800078c:	2300      	movs	r3, #0
 800078e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8000792:	2300      	movs	r3, #0
 8000794:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000798:	2300      	movs	r3, #0
 800079a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800079e:	2300      	movs	r3, #0
 80007a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007a2:	2300      	movs	r3, #0
 80007a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	4823      	ldr	r0, [pc, #140]	; (800083c <MX_RTC_Init+0x110>)
 80007b0:	f001 fd91 	bl	80022d6 <HAL_RTC_SetTime>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80007ba:	f7ff ffb0 	bl	800071e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007be:	2301      	movs	r3, #1
 80007c0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 80007c4:	2301      	movs	r3, #1
 80007c6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 80007ca:	2301      	movs	r3, #1
 80007cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007da:	2201      	movs	r2, #1
 80007dc:	4619      	mov	r1, r3
 80007de:	4817      	ldr	r0, [pc, #92]	; (800083c <MX_RTC_Init+0x110>)
 80007e0:	f001 fe8a 	bl	80024f8 <HAL_RTC_SetDate>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80007ea:	f7ff ff98 	bl	800071e <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007fe:	2300      	movs	r3, #0
 8000800:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000802:	2300      	movs	r3, #0
 8000804:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800080a:	2300      	movs	r3, #0
 800080c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000812:	2301      	movs	r3, #1
 8000814:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000818:	f44f 7380 	mov.w	r3, #256	; 0x100
 800081c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800081e:	463b      	mov	r3, r7
 8000820:	2201      	movs	r2, #1
 8000822:	4619      	mov	r1, r3
 8000824:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_RTC_Init+0x110>)
 8000826:	f001 ff53 	bl	80026d0 <HAL_RTC_SetAlarm_IT>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000830:	f7ff ff75 	bl	800071e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	3740      	adds	r7, #64	; 0x40
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200001c4 	.word	0x200001c4
 8000840:	40002800 	.word	0x40002800

08000844 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_RTC_MspInit+0x30>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d10a      	bne.n	800086c <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_RTC_MspInit+0x34>)
 8000858:	2201      	movs	r2, #1
 800085a:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2105      	movs	r1, #5
 8000860:	2029      	movs	r0, #41	; 0x29
 8000862:	f000 fb8c 	bl	8000f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8000866:	2029      	movs	r0, #41	; 0x29
 8000868:	f000 fba5 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800086c:	bf00      	nop
 800086e:	3708      	adds	r7, #8
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40002800 	.word	0x40002800
 8000878:	424706d8 	.word	0x424706d8

0800087c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000880:	4b17      	ldr	r3, [pc, #92]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000882:	4a18      	ldr	r2, [pc, #96]	; (80008e4 <MX_SPI2_Init+0x68>)
 8000884:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000886:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000888:	f44f 7282 	mov.w	r2, #260	; 0x104
 800088c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_SPI2_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_SPI2_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008a0:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008a6:	4b0e      	ldr	r3, [pc, #56]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008b0:	2218      	movs	r2, #24
 80008b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008bc:	2200      	movs	r2, #0
 80008be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008c8:	220a      	movs	r2, #10
 80008ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_SPI2_Init+0x64>)
 80008ce:	f002 f9d3 	bl	8002c78 <HAL_SPI_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008d8:	f7ff ff21 	bl	800071e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	200001e4 	.word	0x200001e4
 80008e4:	40003800 	.word	0x40003800

080008e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a17      	ldr	r2, [pc, #92]	; (8000964 <HAL_SPI_MspInit+0x7c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d128      	bne.n	800095c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800090a:	4b17      	ldr	r3, [pc, #92]	; (8000968 <HAL_SPI_MspInit+0x80>)
 800090c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800090e:	4a16      	ldr	r2, [pc, #88]	; (8000968 <HAL_SPI_MspInit+0x80>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6253      	str	r3, [r2, #36]	; 0x24
 8000916:	4b14      	ldr	r3, [pc, #80]	; (8000968 <HAL_SPI_MspInit+0x80>)
 8000918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <HAL_SPI_MspInit+0x80>)
 8000924:	69db      	ldr	r3, [r3, #28]
 8000926:	4a10      	ldr	r2, [pc, #64]	; (8000968 <HAL_SPI_MspInit+0x80>)
 8000928:	f043 0302 	orr.w	r3, r3, #2
 800092c:	61d3      	str	r3, [r2, #28]
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <HAL_SPI_MspInit+0x80>)
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 0302 	and.w	r3, r3, #2
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800093a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800093e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000940:	2302      	movs	r3, #2
 8000942:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000948:	2303      	movs	r3, #3
 800094a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094c:	2305      	movs	r3, #5
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4619      	mov	r1, r3
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <HAL_SPI_MspInit+0x84>)
 8000958:	f000 fb7c 	bl	8001054 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800095c:	bf00      	nop
 800095e:	3728      	adds	r7, #40	; 0x28
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40003800 	.word	0x40003800
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400

08000970 <SpiInOut>:
}

/* USER CODE BEGIN 1 */

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( hspi2.Instance ) == NULL )
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	2b00      	cmp	r3, #0
    {
        assert_param( LMN_STATUS_ERROR );
    }

    __HAL_SPI_ENABLE( &hspi2 );
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <SpiInOut+0x78>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <SpiInOut+0x78>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000992:	601a      	str	r2, [r3, #0]

    CRITICAL_SECTION_BEGIN( );
 8000994:	f107 0308 	add.w	r3, r7, #8
 8000998:	4618      	mov	r0, r3
 800099a:	f004 fff5 	bl	8005988 <BoardCriticalSectionBegin>

    while( __HAL_SPI_GET_FLAG( &hspi2, SPI_FLAG_TXE ) == RESET );
 800099e:	bf00      	nop
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <SpiInOut+0x78>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d1f8      	bne.n	80009a0 <SpiInOut+0x30>
    hspi2.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 80009ae:	887a      	ldrh	r2, [r7, #2]
 80009b0:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <SpiInOut+0x78>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	b2d2      	uxtb	r2, r2
 80009b6:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &hspi2, SPI_FLAG_RXNE ) == RESET );
 80009b8:	bf00      	nop
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <SpiInOut+0x78>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	f003 0301 	and.w	r3, r3, #1
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d1f8      	bne.n	80009ba <SpiInOut+0x4a>
    rxData = ( uint16_t ) hspi2.Instance->DR;
 80009c8:	4b07      	ldr	r3, [pc, #28]	; (80009e8 <SpiInOut+0x78>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	68db      	ldr	r3, [r3, #12]
 80009ce:	73fb      	strb	r3, [r7, #15]

    CRITICAL_SECTION_END( );
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4618      	mov	r0, r3
 80009d6:	f004 ffe8 	bl	80059aa <BoardCriticalSectionEnd>

    return( rxData );
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	b29b      	uxth	r3, r3
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3710      	adds	r7, #16
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	200001e4 	.word	0x200001e4

080009ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <HAL_MspInit+0x58>)
 80009f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f6:	4a13      	ldr	r2, [pc, #76]	; (8000a44 <HAL_MspInit+0x58>)
 80009f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009fc:	6253      	str	r3, [r2, #36]	; 0x24
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_MspInit+0x58>)
 8000a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <HAL_MspInit+0x58>)
 8000a0c:	6a1b      	ldr	r3, [r3, #32]
 8000a0e:	4a0d      	ldr	r2, [pc, #52]	; (8000a44 <HAL_MspInit+0x58>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6213      	str	r3, [r2, #32]
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <HAL_MspInit+0x58>)
 8000a18:	6a1b      	ldr	r3, [r3, #32]
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <HAL_MspInit+0x58>)
 8000a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a26:	4a07      	ldr	r2, [pc, #28]	; (8000a44 <HAL_MspInit+0x58>)
 8000a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a2c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <HAL_MspInit+0x58>)
 8000a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40023800 	.word	0x40023800

08000a48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b08c      	sub	sp, #48	; 0x30
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	201c      	movs	r0, #28
 8000a5e:	f000 fa8e 	bl	8000f7e <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a62:	201c      	movs	r0, #28
 8000a64:	f000 faa7 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000a68:	4b1f      	ldr	r3, [pc, #124]	; (8000ae8 <HAL_InitTick+0xa0>)
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a6c:	4a1e      	ldr	r2, [pc, #120]	; (8000ae8 <HAL_InitTick+0xa0>)
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	6253      	str	r3, [r2, #36]	; 0x24
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <HAL_InitTick+0xa0>)
 8000a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a78:	f003 0301 	and.w	r3, r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
 8000a7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a80:	f107 0210 	add.w	r2, r7, #16
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f001 fa36 	bl	8001efc <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a90:	f001 fa0c 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 8000a94:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a98:	4a14      	ldr	r2, [pc, #80]	; (8000aec <HAL_InitTick+0xa4>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9b      	lsrs	r3, r3, #18
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0xa8>)
 8000aa6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aaa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_InitTick+0xa8>)
 8000aae:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab2:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <HAL_InitTick+0xa8>)
 8000ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ab8:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_InitTick+0xa8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ac0:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <HAL_InitTick+0xa8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000ac6:	480a      	ldr	r0, [pc, #40]	; (8000af0 <HAL_InitTick+0xa8>)
 8000ac8:	f002 f95f 	bl	8002d8a <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d104      	bne.n	8000adc <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000ad2:	4807      	ldr	r0, [pc, #28]	; (8000af0 <HAL_InitTick+0xa8>)
 8000ad4:	f002 f9a2 	bl	8002e1c <HAL_TIM_Base_Start_IT>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	e000      	b.n	8000ade <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3730      	adds	r7, #48	; 0x30
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800
 8000aec:	431bde83 	.word	0x431bde83
 8000af0:	2000023c 	.word	0x2000023c

08000af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000af8:	e7fe      	b.n	8000af8 <NMI_Handler+0x4>

08000afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000afa:	b480      	push	{r7}
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afe:	e7fe      	b.n	8000afe <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <MemManage_Handler+0x4>

08000b06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <BusFault_Handler+0x4>

08000b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <UsageFault_Handler+0x4>

08000b12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr

08000b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bc80      	pop	{r7}
 8000b28:	4770      	bx	lr

08000b2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bc80      	pop	{r7}
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b46:	2020      	movs	r0, #32
 8000b48:	f000 fc5c 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b4c:	2040      	movs	r0, #64	; 0x40
 8000b4e:	f000 fc59 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000b52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000b56:	f000 fc55 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000b5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b5e:	f000 fc51 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	bd80      	pop	{r7, pc}
	...

08000b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <TIM2_IRQHandler+0x10>)
 8000b6e:	f002 f9a7 	bl	8002ec0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2000023c 	.word	0x2000023c

08000b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <USART2_IRQHandler+0x10>)
 8000b82:	f002 fb5b 	bl	800323c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000027c 	.word	0x2000027c

08000b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000b94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000b98:	f000 fc34 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000b9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000ba0:	f000 fc30 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ba4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ba8:	f000 fc2c 	bl	8001404 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&RtcHandle);
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <RTC_Alarm_IRQHandler+0x10>)
 8000bb6:	f001 ff4f 	bl	8002a58 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
#endif
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000180 	.word	0x20000180

08000bc4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <SystemInit+0x14>)
 8000bca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bce:	609a      	str	r2, [r3, #8]
#endif
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bc80      	pop	{r7}
 8000bd6:	4770      	bx	lr
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000be2:	4a12      	ldr	r2, [pc, #72]	; (8000c2c <MX_USART2_UART_Init+0x50>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000be6:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000be8:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000bec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_USART2_UART_Init+0x4c>)
 8000c14:	f002 fac4 	bl	80031a0 <HAL_UART_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c1e:	f7ff fd7e 	bl	800071e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000027c 	.word	0x2000027c
 8000c2c:	40004400 	.word	0x40004400

08000c30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a1b      	ldr	r2, [pc, #108]	; (8000cbc <HAL_UART_MspInit+0x8c>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12f      	bne.n	8000cb2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <HAL_UART_MspInit+0x90>)
 8000c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c56:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <HAL_UART_MspInit+0x90>)
 8000c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c5c:	6253      	str	r3, [r2, #36]	; 0x24
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <HAL_UART_MspInit+0x90>)
 8000c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c66:	613b      	str	r3, [r7, #16]
 8000c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_UART_MspInit+0x90>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <HAL_UART_MspInit+0x90>)
 8000c70:	f043 0301 	orr.w	r3, r3, #1
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_UART_MspInit+0x90>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c82:	230c      	movs	r3, #12
 8000c84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c92:	2307      	movs	r3, #7
 8000c94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c96:	f107 0314 	add.w	r3, r7, #20
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4809      	ldr	r0, [pc, #36]	; (8000cc4 <HAL_UART_MspInit+0x94>)
 8000c9e:	f000 f9d9 	bl	8001054 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2105      	movs	r1, #5
 8000ca6:	2026      	movs	r0, #38	; 0x26
 8000ca8:	f000 f969 	bl	8000f7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cac:	2026      	movs	r0, #38	; 0x26
 8000cae:	f000 f982 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40004400 	.word	0x40004400
 8000cc0:	40023800 	.word	0x40023800
 8000cc4:	40020000 	.word	0x40020000

08000cc8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000cc8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000cca:	e003      	b.n	8000cd4 <LoopCopyDataInit>

08000ccc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ccc:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000cce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000cd0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000cd2:	3104      	adds	r1, #4

08000cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000cd4:	480a      	ldr	r0, [pc, #40]	; (8000d00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000cd8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000cda:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000cdc:	d3f6      	bcc.n	8000ccc <CopyDataInit>
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ce0:	e002      	b.n	8000ce8 <LoopFillZerobss>

08000ce2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ce4:	f842 3b04 	str.w	r3, [r2], #4

08000ce8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ce8:	4b08      	ldr	r3, [pc, #32]	; (8000d0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000cea:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000cec:	d3f9      	bcc.n	8000ce2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cee:	f7ff ff69 	bl	8000bc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f005 febb 	bl	8006a6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cf6:	f7ff fc8e 	bl	8000616 <main>
  bx lr
 8000cfa:	4770      	bx	lr
  ldr r3, =_sidata
 8000cfc:	08006c90 	.word	0x08006c90
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000d04:	20000028 	.word	0x20000028
  ldr r2, =_sbss
 8000d08:	20000028 	.word	0x20000028
  ldr r3, = _ebss
 8000d0c:	20000430 	.word	0x20000430

08000d10 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_IRQHandler>

08000d12 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b082      	sub	sp, #8
 8000d16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f923 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d22:	2000      	movs	r0, #0
 8000d24:	f7ff fe90 	bl	8000a48 <HAL_InitTick>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d002      	beq.n	8000d34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	71fb      	strb	r3, [r7, #7]
 8000d32:	e001      	b.n	8000d38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d34:	f7ff fe5a 	bl	80009ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d38:	79fb      	ldrb	r3, [r7, #7]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <HAL_IncTick+0x1c>)
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a03      	ldr	r2, [pc, #12]	; (8000d60 <HAL_IncTick+0x1c>)
 8000d54:	6013      	str	r3, [r2, #0]
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	200002bc 	.word	0x200002bc
 8000d64:	20000008 	.word	0x20000008

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <HAL_GetTick+0x10>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr
 8000d78:	200002bc 	.word	0x200002bc

08000d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b084      	sub	sp, #16
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d84:	f7ff fff0 	bl	8000d68 <HAL_GetTick>
 8000d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d94:	d004      	beq.n	8000da0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_Delay+0x40>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000da0:	bf00      	nop
 8000da2:	f7ff ffe1 	bl	8000d68 <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d8f7      	bhi.n	8000da2 <HAL_Delay+0x26>
  {
  }
}
 8000db2:	bf00      	nop
 8000db4:	bf00      	nop
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20000008 	.word	0x20000008

08000dc0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000dc4:	4b04      	ldr	r3, [pc, #16]	; (8000dd8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000dca:	f043 0301 	orr.w	r3, r3, #1
 8000dce:	6053      	str	r3, [r2, #4]
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bc80      	pop	{r7}
 8000dd6:	4770      	bx	lr
 8000dd8:	e0042000 	.word	0xe0042000

08000ddc <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000de0:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	4a03      	ldr	r2, [pc, #12]	; (8000df4 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	6053      	str	r3, [r2, #4]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	e0042000 	.word	0xe0042000

08000df8 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000e02:	f043 0304 	orr.w	r3, r3, #4
 8000e06:	6053      	str	r3, [r2, #4]
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bc80      	pop	{r7}
 8000e0e:	4770      	bx	lr
 8000e10:	e0042000 	.word	0xe0042000

08000e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e30:	4013      	ands	r3, r2
 8000e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e46:	4a04      	ldr	r2, [pc, #16]	; (8000e58 <__NVIC_SetPriorityGrouping+0x44>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	60d3      	str	r3, [r2, #12]
}
 8000e4c:	bf00      	nop
 8000e4e:	3714      	adds	r7, #20
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bc80      	pop	{r7}
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e60:	4b04      	ldr	r3, [pc, #16]	; (8000e74 <__NVIC_GetPriorityGrouping+0x18>)
 8000e62:	68db      	ldr	r3, [r3, #12]
 8000e64:	0a1b      	lsrs	r3, r3, #8
 8000e66:	f003 0307 	and.w	r3, r3, #7
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	db0b      	blt.n	8000ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	f003 021f 	and.w	r2, r3, #31
 8000e90:	4906      	ldr	r1, [pc, #24]	; (8000eac <__NVIC_EnableIRQ+0x34>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	095b      	lsrs	r3, r3, #5
 8000e98:	2001      	movs	r0, #1
 8000e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	e000e100 	.word	0xe000e100

08000eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	6039      	str	r1, [r7, #0]
 8000eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	db0a      	blt.n	8000eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	490c      	ldr	r1, [pc, #48]	; (8000efc <__NVIC_SetPriority+0x4c>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	0112      	lsls	r2, r2, #4
 8000ed0:	b2d2      	uxtb	r2, r2
 8000ed2:	440b      	add	r3, r1
 8000ed4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ed8:	e00a      	b.n	8000ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	4908      	ldr	r1, [pc, #32]	; (8000f00 <__NVIC_SetPriority+0x50>)
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	3b04      	subs	r3, #4
 8000ee8:	0112      	lsls	r2, r2, #4
 8000eea:	b2d2      	uxtb	r2, r2
 8000eec:	440b      	add	r3, r1
 8000eee:	761a      	strb	r2, [r3, #24]
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bc80      	pop	{r7}
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000e100 	.word	0xe000e100
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b089      	sub	sp, #36	; 0x24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	f003 0307 	and.w	r3, r3, #7
 8000f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f1c3 0307 	rsb	r3, r3, #7
 8000f1e:	2b04      	cmp	r3, #4
 8000f20:	bf28      	it	cs
 8000f22:	2304      	movcs	r3, #4
 8000f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	3304      	adds	r3, #4
 8000f2a:	2b06      	cmp	r3, #6
 8000f2c:	d902      	bls.n	8000f34 <NVIC_EncodePriority+0x30>
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3b03      	subs	r3, #3
 8000f32:	e000      	b.n	8000f36 <NVIC_EncodePriority+0x32>
 8000f34:	2300      	movs	r3, #0
 8000f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	f04f 32ff 	mov.w	r2, #4294967295
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43da      	mvns	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	401a      	ands	r2, r3
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	fa01 f303 	lsl.w	r3, r1, r3
 8000f56:	43d9      	mvns	r1, r3
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	4313      	orrs	r3, r2
         );
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3724      	adds	r7, #36	; 0x24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff4f 	bl	8000e14 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f90:	f7ff ff64 	bl	8000e5c <__NVIC_GetPriorityGrouping>
 8000f94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	68b9      	ldr	r1, [r7, #8]
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff ffb2 	bl	8000f04 <NVIC_EncodePriority>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fa6:	4611      	mov	r1, r2
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff ff81 	bl	8000eb0 <__NVIC_SetPriority>
}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff ff57 	bl	8000e78 <__NVIC_EnableIRQ>
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b084      	sub	sp, #16
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d005      	beq.n	8000ff6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2204      	movs	r2, #4
 8000fee:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	73fb      	strb	r3, [r7, #15]
 8000ff4:	e029      	b.n	800104a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020e 	bic.w	r2, r2, #14
 8001004:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f022 0201 	bic.w	r2, r2, #1
 8001014:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 021c 	and.w	r2, r3, #28
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001022:	2101      	movs	r1, #1
 8001024:	fa01 f202 	lsl.w	r2, r1, r2
 8001028:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	4798      	blx	r3
    }
  }
  return status;
 800104a:	7bfb      	ldrb	r3, [r7, #15]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001054:	b480      	push	{r7}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
 800105c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800105e:	2300      	movs	r3, #0
 8001060:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800106a:	e160      	b.n	800132e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	2101      	movs	r1, #1
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	fa01 f303 	lsl.w	r3, r1, r3
 8001078:	4013      	ands	r3, r2
 800107a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 8152 	beq.w	8001328 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d00b      	beq.n	80010a4 <HAL_GPIO_Init+0x50>
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	2b02      	cmp	r3, #2
 8001092:	d007      	beq.n	80010a4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001098:	2b11      	cmp	r3, #17
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b12      	cmp	r3, #18
 80010a2:	d130      	bne.n	8001106 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68da      	ldr	r2, [r3, #12]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80010da:	2201      	movs	r2, #1
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43db      	mvns	r3, r3
 80010e4:	693a      	ldr	r2, [r7, #16]
 80010e6:	4013      	ands	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	091b      	lsrs	r3, r3, #4
 80010f0:	f003 0201 	and.w	r2, r3, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	68db      	ldr	r3, [r3, #12]
 800110a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	2203      	movs	r2, #3
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	43db      	mvns	r3, r3
 8001118:	693a      	ldr	r2, [r7, #16]
 800111a:	4013      	ands	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	689a      	ldr	r2, [r3, #8]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	693a      	ldr	r2, [r7, #16]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b02      	cmp	r3, #2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0xf2>
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b12      	cmp	r3, #18
 8001144:	d123      	bne.n	800118e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	08da      	lsrs	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3208      	adds	r2, #8
 800114e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001152:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	220f      	movs	r2, #15
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	691a      	ldr	r2, [r3, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	08da      	lsrs	r2, r3, #3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3208      	adds	r2, #8
 8001188:	6939      	ldr	r1, [r7, #16]
 800118a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 0203 	and.w	r2, r3, #3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 80ac 	beq.w	8001328 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d0:	4b5e      	ldr	r3, [pc, #376]	; (800134c <HAL_GPIO_Init+0x2f8>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	4a5d      	ldr	r2, [pc, #372]	; (800134c <HAL_GPIO_Init+0x2f8>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	6213      	str	r3, [r2, #32]
 80011dc:	4b5b      	ldr	r3, [pc, #364]	; (800134c <HAL_GPIO_Init+0x2f8>)
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80011e8:	4a59      	ldr	r2, [pc, #356]	; (8001350 <HAL_GPIO_Init+0x2fc>)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	3302      	adds	r3, #2
 80011f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	220f      	movs	r2, #15
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a51      	ldr	r2, [pc, #324]	; (8001354 <HAL_GPIO_Init+0x300>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d025      	beq.n	8001260 <HAL_GPIO_Init+0x20c>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a50      	ldr	r2, [pc, #320]	; (8001358 <HAL_GPIO_Init+0x304>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d01f      	beq.n	800125c <HAL_GPIO_Init+0x208>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4f      	ldr	r2, [pc, #316]	; (800135c <HAL_GPIO_Init+0x308>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d019      	beq.n	8001258 <HAL_GPIO_Init+0x204>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a4e      	ldr	r2, [pc, #312]	; (8001360 <HAL_GPIO_Init+0x30c>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d013      	beq.n	8001254 <HAL_GPIO_Init+0x200>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a4d      	ldr	r2, [pc, #308]	; (8001364 <HAL_GPIO_Init+0x310>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d00d      	beq.n	8001250 <HAL_GPIO_Init+0x1fc>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a4c      	ldr	r2, [pc, #304]	; (8001368 <HAL_GPIO_Init+0x314>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d007      	beq.n	800124c <HAL_GPIO_Init+0x1f8>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a4b      	ldr	r2, [pc, #300]	; (800136c <HAL_GPIO_Init+0x318>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d101      	bne.n	8001248 <HAL_GPIO_Init+0x1f4>
 8001244:	2306      	movs	r3, #6
 8001246:	e00c      	b.n	8001262 <HAL_GPIO_Init+0x20e>
 8001248:	2307      	movs	r3, #7
 800124a:	e00a      	b.n	8001262 <HAL_GPIO_Init+0x20e>
 800124c:	2305      	movs	r3, #5
 800124e:	e008      	b.n	8001262 <HAL_GPIO_Init+0x20e>
 8001250:	2304      	movs	r3, #4
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x20e>
 8001254:	2303      	movs	r3, #3
 8001256:	e004      	b.n	8001262 <HAL_GPIO_Init+0x20e>
 8001258:	2302      	movs	r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x20e>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_GPIO_Init+0x20e>
 8001260:	2300      	movs	r3, #0
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	4093      	lsls	r3, r2
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4313      	orrs	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001272:	4937      	ldr	r1, [pc, #220]	; (8001350 <HAL_GPIO_Init+0x2fc>)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001280:	4b3b      	ldr	r3, [pc, #236]	; (8001370 <HAL_GPIO_Init+0x31c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012a4:	4a32      	ldr	r2, [pc, #200]	; (8001370 <HAL_GPIO_Init+0x31c>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012aa:	4b31      	ldr	r3, [pc, #196]	; (8001370 <HAL_GPIO_Init+0x31c>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ce:	4a28      	ldr	r2, [pc, #160]	; (8001370 <HAL_GPIO_Init+0x31c>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <HAL_GPIO_Init+0x31c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012f8:	4a1d      	ldr	r2, [pc, #116]	; (8001370 <HAL_GPIO_Init+0x31c>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <HAL_GPIO_Init+0x31c>)
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43db      	mvns	r3, r3
 8001308:	693a      	ldr	r2, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_GPIO_Init+0x31c>)
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	3301      	adds	r3, #1
 800132c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	fa22 f303 	lsr.w	r3, r2, r3
 8001338:	2b00      	cmp	r3, #0
 800133a:	f47f ae97 	bne.w	800106c <HAL_GPIO_Init+0x18>
  }
}
 800133e:	bf00      	nop
 8001340:	bf00      	nop
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	bc80      	pop	{r7}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40010000 	.word	0x40010000
 8001354:	40020000 	.word	0x40020000
 8001358:	40020400 	.word	0x40020400
 800135c:	40020800 	.word	0x40020800
 8001360:	40020c00 	.word	0x40020c00
 8001364:	40021000 	.word	0x40021000
 8001368:	40021400 	.word	0x40021400
 800136c:	40021800 	.word	0x40021800
 8001370:	40010400 	.word	0x40010400

08001374 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	691a      	ldr	r2, [r3, #16]
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	d002      	beq.n	8001392 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800138c:	2301      	movs	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	e001      	b.n	8001396 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001392:	2300      	movs	r3, #0
 8001394:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr

080013a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a2:	b480      	push	{r7}
 80013a4:	b083      	sub	sp, #12
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	6078      	str	r0, [r7, #4]
 80013aa:	460b      	mov	r3, r1
 80013ac:	807b      	strh	r3, [r7, #2]
 80013ae:	4613      	mov	r3, r2
 80013b0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013b2:	787b      	ldrb	r3, [r7, #1]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013b8:	887a      	ldrh	r2, [r7, #2]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 80013be:	e003      	b.n	80013c8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80013c0:	887b      	ldrh	r3, [r7, #2]
 80013c2:	041a      	lsls	r2, r3, #16
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	619a      	str	r2, [r3, #24]
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bc80      	pop	{r7}
 80013d0:	4770      	bx	lr

080013d2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b085      	sub	sp, #20
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	460b      	mov	r3, r1
 80013dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e4:	887a      	ldrh	r2, [r7, #2]
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4013      	ands	r3, r2
 80013ea:	041a      	lsls	r2, r3, #16
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	43d9      	mvns	r1, r3
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	400b      	ands	r3, r1
 80013f4:	431a      	orrs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	619a      	str	r2, [r3, #24]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc80      	pop	{r7}
 8001402:	4770      	bx	lr

08001404 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	695a      	ldr	r2, [r3, #20]
 8001412:	88fb      	ldrh	r3, [r7, #6]
 8001414:	4013      	ands	r3, r2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d006      	beq.n	8001428 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800141a:	4a05      	ldr	r2, [pc, #20]	; (8001430 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001420:	88fb      	ldrh	r3, [r7, #6]
 8001422:	4618      	mov	r0, r3
 8001424:	f005 f878 	bl	8006518 <HAL_GPIO_EXTI_Callback>
  }
}
 8001428:	bf00      	nop
 800142a:	3708      	adds	r7, #8
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40010400 	.word	0x40010400

08001434 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e31d      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001446:	4b94      	ldr	r3, [pc, #592]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001450:	4b91      	ldr	r3, [pc, #580]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001458:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d07b      	beq.n	800155e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	2b08      	cmp	r3, #8
 800146a:	d006      	beq.n	800147a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	2b0c      	cmp	r3, #12
 8001470:	d10f      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001478:	d10b      	bne.n	8001492 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800147a:	4b87      	ldr	r3, [pc, #540]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d06a      	beq.n	800155c <HAL_RCC_OscConfig+0x128>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d166      	bne.n	800155c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e2f7      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d106      	bne.n	80014a8 <HAL_RCC_OscConfig+0x74>
 800149a:	4b7f      	ldr	r3, [pc, #508]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a7e      	ldr	r2, [pc, #504]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e02d      	b.n	8001504 <HAL_RCC_OscConfig+0xd0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d10c      	bne.n	80014ca <HAL_RCC_OscConfig+0x96>
 80014b0:	4b79      	ldr	r3, [pc, #484]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a78      	ldr	r2, [pc, #480]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]
 80014bc:	4b76      	ldr	r3, [pc, #472]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a75      	ldr	r2, [pc, #468]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0xd0>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0xb8>
 80014d2:	4b71      	ldr	r3, [pc, #452]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a70      	ldr	r2, [pc, #448]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b6e      	ldr	r3, [pc, #440]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6d      	ldr	r2, [pc, #436]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0xd0>
 80014ec:	4b6a      	ldr	r3, [pc, #424]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a69      	ldr	r2, [pc, #420]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b67      	ldr	r3, [pc, #412]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a66      	ldr	r2, [pc, #408]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d013      	beq.n	8001534 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fc2c 	bl	8000d68 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fc28 	bl	8000d68 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e2ad      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001526:	4b5c      	ldr	r3, [pc, #368]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0xe0>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fc18 	bl	8000d68 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fc14 	bl	8000d68 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e299      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800154e:	4b52      	ldr	r3, [pc, #328]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x108>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d05a      	beq.n	8001620 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	2b04      	cmp	r3, #4
 800156e:	d005      	beq.n	800157c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	2b0c      	cmp	r3, #12
 8001574:	d119      	bne.n	80015aa <HAL_RCC_OscConfig+0x176>
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d116      	bne.n	80015aa <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800157c:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d005      	beq.n	8001594 <HAL_RCC_OscConfig+0x160>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d001      	beq.n	8001594 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	e276      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	4b40      	ldr	r3, [pc, #256]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	021b      	lsls	r3, r3, #8
 80015a2:	493d      	ldr	r1, [pc, #244]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015a8:	e03a      	b.n	8001620 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d020      	beq.n	80015f4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b2:	4b3a      	ldr	r3, [pc, #232]	; (800169c <HAL_RCC_OscConfig+0x268>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fbd6 	bl	8000d68 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015c0:	f7ff fbd2 	bl	8000d68 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e257      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d2:	4b31      	ldr	r3, [pc, #196]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015de:	4b2e      	ldr	r3, [pc, #184]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	492a      	ldr	r1, [pc, #168]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	604b      	str	r3, [r1, #4]
 80015f2:	e015      	b.n	8001620 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015f4:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_RCC_OscConfig+0x268>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fa:	f7ff fbb5 	bl	8000d68 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001602:	f7ff fbb1 	bl	8000d68 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e236      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001614:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d1f0      	bne.n	8001602 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 80b8 	beq.w	800179e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d170      	bne.n	8001716 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800163c:	2b00      	cmp	r3, #0
 800163e:	d005      	beq.n	800164c <HAL_RCC_OscConfig+0x218>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	699b      	ldr	r3, [r3, #24]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d101      	bne.n	800164c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e21a      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a1a      	ldr	r2, [r3, #32]
 8001650:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001658:	429a      	cmp	r2, r3
 800165a:	d921      	bls.n	80016a0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a1b      	ldr	r3, [r3, #32]
 8001660:	4618      	mov	r0, r3
 8001662:	f000 fc7b 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e208      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001670:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1b      	ldr	r3, [r3, #32]
 800167c:	4906      	ldr	r1, [pc, #24]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001682:	4b05      	ldr	r3, [pc, #20]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
 800168e:	061b      	lsls	r3, r3, #24
 8001690:	4901      	ldr	r1, [pc, #4]	; (8001698 <HAL_RCC_OscConfig+0x264>)
 8001692:	4313      	orrs	r3, r2
 8001694:	604b      	str	r3, [r1, #4]
 8001696:	e020      	b.n	80016da <HAL_RCC_OscConfig+0x2a6>
 8001698:	40023800 	.word	0x40023800
 800169c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a0:	4ba4      	ldr	r3, [pc, #656]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	49a1      	ldr	r1, [pc, #644]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80016ae:	4313      	orrs	r3, r2
 80016b0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b2:	4ba0      	ldr	r3, [pc, #640]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	061b      	lsls	r3, r3, #24
 80016c0:	499c      	ldr	r1, [pc, #624]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f000 fc46 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	e1d3      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
 80016de:	0b5b      	lsrs	r3, r3, #13
 80016e0:	3301      	adds	r3, #1
 80016e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016ea:	4a92      	ldr	r2, [pc, #584]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80016ec:	6892      	ldr	r2, [r2, #8]
 80016ee:	0912      	lsrs	r2, r2, #4
 80016f0:	f002 020f 	and.w	r2, r2, #15
 80016f4:	4990      	ldr	r1, [pc, #576]	; (8001938 <HAL_RCC_OscConfig+0x504>)
 80016f6:	5c8a      	ldrb	r2, [r1, r2]
 80016f8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016fa:	4a90      	ldr	r2, [pc, #576]	; (800193c <HAL_RCC_OscConfig+0x508>)
 80016fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016fe:	4b90      	ldr	r3, [pc, #576]	; (8001940 <HAL_RCC_OscConfig+0x50c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f9a0 	bl	8000a48 <HAL_InitTick>
 8001708:	4603      	mov	r3, r0
 800170a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d045      	beq.n	800179e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001712:	7bfb      	ldrb	r3, [r7, #15]
 8001714:	e1b5      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d029      	beq.n	8001772 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800171e:	4b89      	ldr	r3, [pc, #548]	; (8001944 <HAL_RCC_OscConfig+0x510>)
 8001720:	2201      	movs	r2, #1
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fb20 	bl	8000d68 <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172c:	f7ff fb1c 	bl	8000d68 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e1a1      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800173e:	4b7d      	ldr	r3, [pc, #500]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174a:	4b7a      	ldr	r3, [pc, #488]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
 8001756:	4977      	ldr	r1, [pc, #476]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175c:	4b75      	ldr	r3, [pc, #468]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	061b      	lsls	r3, r3, #24
 800176a:	4972      	ldr	r1, [pc, #456]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 800176c:	4313      	orrs	r3, r2
 800176e:	604b      	str	r3, [r1, #4]
 8001770:	e015      	b.n	800179e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001772:	4b74      	ldr	r3, [pc, #464]	; (8001944 <HAL_RCC_OscConfig+0x510>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001778:	f7ff faf6 	bl	8000d68 <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001780:	f7ff faf2 	bl	8000d68 <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e177      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001792:	4b68      	ldr	r3, [pc, #416]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f0      	bne.n	8001780 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0308 	and.w	r3, r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d030      	beq.n	800180c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d016      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017b2:	4b65      	ldr	r3, [pc, #404]	; (8001948 <HAL_RCC_OscConfig+0x514>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b8:	f7ff fad6 	bl	8000d68 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017c0:	f7ff fad2 	bl	8000d68 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b02      	cmp	r3, #2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e157      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017d2:	4b58      	ldr	r3, [pc, #352]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80017d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d0f0      	beq.n	80017c0 <HAL_RCC_OscConfig+0x38c>
 80017de:	e015      	b.n	800180c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_OscConfig+0x514>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fabf 	bl	8000d68 <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017ec:	e008      	b.n	8001800 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ee:	f7ff fabb 	bl	8000d68 <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	d901      	bls.n	8001800 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80017fc:	2303      	movs	r3, #3
 80017fe:	e140      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001800:	4b4c      	ldr	r3, [pc, #304]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 8001802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001804:	f003 0302 	and.w	r3, r3, #2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1f0      	bne.n	80017ee <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	f000 80b5 	beq.w	8001984 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800181a:	2300      	movs	r3, #0
 800181c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181e:	4b45      	ldr	r3, [pc, #276]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800182a:	4b42      	ldr	r3, [pc, #264]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 800182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800182e:	4a41      	ldr	r2, [pc, #260]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6253      	str	r3, [r2, #36]	; 0x24
 8001836:	4b3f      	ldr	r3, [pc, #252]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 8001838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b41      	ldr	r3, [pc, #260]	; (800194c <HAL_RCC_OscConfig+0x518>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <HAL_RCC_OscConfig+0x518>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a3d      	ldr	r2, [pc, #244]	; (800194c <HAL_RCC_OscConfig+0x518>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff fa83 	bl	8000d68 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff fa7f 	bl	8000d68 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b64      	cmp	r3, #100	; 0x64
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e104      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_RCC_OscConfig+0x518>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x466>
 800188c:	4b29      	ldr	r3, [pc, #164]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	4a28      	ldr	r2, [pc, #160]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 8001892:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001896:	6353      	str	r3, [r2, #52]	; 0x34
 8001898:	e02d      	b.n	80018f6 <HAL_RCC_OscConfig+0x4c2>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x488>
 80018a2:	4b24      	ldr	r3, [pc, #144]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a6:	4a23      	ldr	r2, [pc, #140]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ac:	6353      	str	r3, [r2, #52]	; 0x34
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b2:	4a20      	ldr	r2, [pc, #128]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018b8:	6353      	str	r3, [r2, #52]	; 0x34
 80018ba:	e01c      	b.n	80018f6 <HAL_RCC_OscConfig+0x4c2>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d10c      	bne.n	80018de <HAL_RCC_OscConfig+0x4aa>
 80018c4:	4b1b      	ldr	r3, [pc, #108]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c8:	4a1a      	ldr	r2, [pc, #104]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018ce:	6353      	str	r3, [r2, #52]	; 0x34
 80018d0:	4b18      	ldr	r3, [pc, #96]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d4:	4a17      	ldr	r2, [pc, #92]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018da:	6353      	str	r3, [r2, #52]	; 0x34
 80018dc:	e00b      	b.n	80018f6 <HAL_RCC_OscConfig+0x4c2>
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e2:	4a14      	ldr	r2, [pc, #80]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018e8:	6353      	str	r3, [r2, #52]	; 0x34
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ee:	4a11      	ldr	r2, [pc, #68]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 80018f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018f4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d015      	beq.n	800192a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018fe:	f7ff fa33 	bl	8000d68 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001904:	e00a      	b.n	800191c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001906:	f7ff fa2f 	bl	8000d68 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	f241 3288 	movw	r2, #5000	; 0x1388
 8001914:	4293      	cmp	r3, r2
 8001916:	d901      	bls.n	800191c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001918:	2303      	movs	r3, #3
 800191a:	e0b2      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <HAL_RCC_OscConfig+0x500>)
 800191e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001920:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001924:	2b00      	cmp	r3, #0
 8001926:	d0ee      	beq.n	8001906 <HAL_RCC_OscConfig+0x4d2>
 8001928:	e023      	b.n	8001972 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff fa1d 	bl	8000d68 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001930:	e019      	b.n	8001966 <HAL_RCC_OscConfig+0x532>
 8001932:	bf00      	nop
 8001934:	40023800 	.word	0x40023800
 8001938:	08006b04 	.word	0x08006b04
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004
 8001944:	42470020 	.word	0x42470020
 8001948:	42470680 	.word	0x42470680
 800194c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001950:	f7ff fa0a 	bl	8000d68 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	f241 3288 	movw	r2, #5000	; 0x1388
 800195e:	4293      	cmp	r3, r2
 8001960:	d901      	bls.n	8001966 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001962:	2303      	movs	r3, #3
 8001964:	e08d      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001966:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <HAL_RCC_OscConfig+0x658>)
 8001968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ee      	bne.n	8001950 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001972:	7ffb      	ldrb	r3, [r7, #31]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d105      	bne.n	8001984 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001978:	4b44      	ldr	r3, [pc, #272]	; (8001a8c <HAL_RCC_OscConfig+0x658>)
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	4a43      	ldr	r2, [pc, #268]	; (8001a8c <HAL_RCC_OscConfig+0x658>)
 800197e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001982:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	2b00      	cmp	r3, #0
 800198a:	d079      	beq.n	8001a80 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	2b0c      	cmp	r3, #12
 8001990:	d056      	beq.n	8001a40 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	2b02      	cmp	r3, #2
 8001998:	d13b      	bne.n	8001a12 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_OscConfig+0x65c>)
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a0:	f7ff f9e2 	bl	8000d68 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a8:	f7ff f9de 	bl	8000d68 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e063      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <HAL_RCC_OscConfig+0x658>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019c6:	4b31      	ldr	r3, [pc, #196]	; (8001a8c <HAL_RCC_OscConfig+0x658>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	4319      	orrs	r1, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019dc:	430b      	orrs	r3, r1
 80019de:	492b      	ldr	r1, [pc, #172]	; (8001a8c <HAL_RCC_OscConfig+0x658>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_RCC_OscConfig+0x65c>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff f9bd 	bl	8000d68 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019f0:	e008      	b.n	8001a04 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f2:	f7ff f9b9 	bl	8000d68 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e03e      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_RCC_OscConfig+0x658>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f0      	beq.n	80019f2 <HAL_RCC_OscConfig+0x5be>
 8001a10:	e036      	b.n	8001a80 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_RCC_OscConfig+0x65c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a18:	f7ff f9a6 	bl	8000d68 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a20:	f7ff f9a2 	bl	8000d68 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e027      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <HAL_RCC_OscConfig+0x658>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x5ec>
 8001a3e:	e01f      	b.n	8001a80 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d101      	bne.n	8001a4c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	e01a      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a4c:	4b0f      	ldr	r3, [pc, #60]	; (8001a8c <HAL_RCC_OscConfig+0x658>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d10d      	bne.n	8001a7c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d106      	bne.n	8001a7c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d001      	beq.n	8001a80 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e000      	b.n	8001a82 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3720      	adds	r7, #32
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	42470060 	.word	0x42470060

08001a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e11a      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001aa8:	4b8f      	ldr	r3, [pc, #572]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0301 	and.w	r3, r3, #1
 8001ab0:	683a      	ldr	r2, [r7, #0]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d919      	bls.n	8001aea <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d105      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x34>
 8001abc:	4b8a      	ldr	r3, [pc, #552]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a89      	ldr	r2, [pc, #548]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001ac2:	f043 0304 	orr.w	r3, r3, #4
 8001ac6:	6013      	str	r3, [r2, #0]
 8001ac8:	4b87      	ldr	r3, [pc, #540]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f023 0201 	bic.w	r2, r3, #1
 8001ad0:	4985      	ldr	r1, [pc, #532]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad8:	4b83      	ldr	r3, [pc, #524]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e0f9      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d008      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af6:	4b7d      	ldr	r3, [pc, #500]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	497a      	ldr	r1, [pc, #488]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001b04:	4313      	orrs	r3, r2
 8001b06:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0301 	and.w	r3, r3, #1
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 808e 	beq.w	8001c32 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b1e:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d121      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e0d7      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b36:	4b6d      	ldr	r3, [pc, #436]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d115      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e0cb      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d107      	bne.n	8001b5e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d109      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0bf      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0b7      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b6e:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001b70:	689b      	ldr	r3, [r3, #8]
 8001b72:	f023 0203 	bic.w	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	495c      	ldr	r1, [pc, #368]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b80:	f7ff f8f2 	bl	8000d68 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d112      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b8e:	e00a      	b.n	8001ba6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff f8ea 	bl	8000d68 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e09b      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ba6:	4b51      	ldr	r3, [pc, #324]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d1ee      	bne.n	8001b90 <HAL_RCC_ClockConfig+0xfc>
 8001bb2:	e03e      	b.n	8001c32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b03      	cmp	r3, #3
 8001bba:	d112      	bne.n	8001be2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bbc:	e00a      	b.n	8001bd4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bbe:	f7ff f8d3 	bl	8000d68 <HAL_GetTick>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1ad3      	subs	r3, r2, r3
 8001bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e084      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bd4:	4b45      	ldr	r3, [pc, #276]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b0c      	cmp	r3, #12
 8001bde:	d1ee      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x12a>
 8001be0:	e027      	b.n	8001c32 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d11d      	bne.n	8001c26 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bea:	e00a      	b.n	8001c02 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bec:	f7ff f8bc 	bl	8000d68 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e06d      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c02:	4b3a      	ldr	r3, [pc, #232]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 030c 	and.w	r3, r3, #12
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	d1ee      	bne.n	8001bec <HAL_RCC_ClockConfig+0x158>
 8001c0e:	e010      	b.n	8001c32 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff f8aa 	bl	8000d68 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e05b      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001c26:	4b31      	ldr	r3, [pc, #196]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1ee      	bne.n	8001c10 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	683a      	ldr	r2, [r7, #0]
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d219      	bcs.n	8001c74 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d105      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x1be>
 8001c46:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a27      	ldr	r2, [pc, #156]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001c4c:	f043 0304 	orr.w	r3, r3, #4
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 0201 	bic.w	r2, r3, #1
 8001c5a:	4923      	ldr	r1, [pc, #140]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c62:	4b21      	ldr	r3, [pc, #132]	; (8001ce8 <HAL_RCC_ClockConfig+0x254>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d001      	beq.n	8001c74 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e034      	b.n	8001cde <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d008      	beq.n	8001c92 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c80:	4b1a      	ldr	r3, [pc, #104]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4917      	ldr	r1, [pc, #92]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d009      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c9e:	4b13      	ldr	r3, [pc, #76]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	691b      	ldr	r3, [r3, #16]
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	490f      	ldr	r1, [pc, #60]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cb2:	f000 f823 	bl	8001cfc <HAL_RCC_GetSysClockFreq>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <HAL_RCC_ClockConfig+0x258>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	091b      	lsrs	r3, r3, #4
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	490b      	ldr	r1, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x25c>)
 8001cc4:	5ccb      	ldrb	r3, [r1, r3]
 8001cc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x260>)
 8001ccc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <HAL_RCC_ClockConfig+0x264>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7fe feb8 	bl	8000a48 <HAL_InitTick>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	72fb      	strb	r3, [r7, #11]

  return status;
 8001cdc:	7afb      	ldrb	r3, [r7, #11]
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40023c00 	.word	0x40023c00
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	08006b04 	.word	0x08006b04
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000004 	.word	0x20000004

08001cfc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cfc:	b5b0      	push	{r4, r5, r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d02:	4b61      	ldr	r3, [pc, #388]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d00d      	beq.n	8001d2e <HAL_RCC_GetSysClockFreq+0x32>
 8001d12:	2b0c      	cmp	r3, #12
 8001d14:	f200 80a4 	bhi.w	8001e60 <HAL_RCC_GetSysClockFreq+0x164>
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d002      	beq.n	8001d22 <HAL_RCC_GetSysClockFreq+0x26>
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d003      	beq.n	8001d28 <HAL_RCC_GetSysClockFreq+0x2c>
 8001d20:	e09e      	b.n	8001e60 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d22:	4b5a      	ldr	r3, [pc, #360]	; (8001e8c <HAL_RCC_GetSysClockFreq+0x190>)
 8001d24:	613b      	str	r3, [r7, #16]
      break;
 8001d26:	e0a9      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <HAL_RCC_GetSysClockFreq+0x194>)
 8001d2a:	613b      	str	r3, [r7, #16]
      break;
 8001d2c:	e0a6      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	0c9b      	lsrs	r3, r3, #18
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	4a57      	ldr	r2, [pc, #348]	; (8001e94 <HAL_RCC_GetSysClockFreq+0x198>)
 8001d38:	5cd3      	ldrb	r3, [r2, r3]
 8001d3a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	0d9b      	lsrs	r3, r3, #22
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	3301      	adds	r3, #1
 8001d46:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d48:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d041      	beq.n	8001dd8 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	461c      	mov	r4, r3
 8001d58:	f04f 0500 	mov.w	r5, #0
 8001d5c:	4620      	mov	r0, r4
 8001d5e:	4629      	mov	r1, r5
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	f04f 0300 	mov.w	r3, #0
 8001d68:	014b      	lsls	r3, r1, #5
 8001d6a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001d6e:	0142      	lsls	r2, r0, #5
 8001d70:	4610      	mov	r0, r2
 8001d72:	4619      	mov	r1, r3
 8001d74:	1b00      	subs	r0, r0, r4
 8001d76:	eb61 0105 	sbc.w	r1, r1, r5
 8001d7a:	f04f 0200 	mov.w	r2, #0
 8001d7e:	f04f 0300 	mov.w	r3, #0
 8001d82:	018b      	lsls	r3, r1, #6
 8001d84:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001d88:	0182      	lsls	r2, r0, #6
 8001d8a:	1a12      	subs	r2, r2, r0
 8001d8c:	eb63 0301 	sbc.w	r3, r3, r1
 8001d90:	f04f 0000 	mov.w	r0, #0
 8001d94:	f04f 0100 	mov.w	r1, #0
 8001d98:	00d9      	lsls	r1, r3, #3
 8001d9a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d9e:	00d0      	lsls	r0, r2, #3
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	1912      	adds	r2, r2, r4
 8001da6:	eb45 0303 	adc.w	r3, r5, r3
 8001daa:	f04f 0000 	mov.w	r0, #0
 8001dae:	f04f 0100 	mov.w	r1, #0
 8001db2:	0259      	lsls	r1, r3, #9
 8001db4:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001db8:	0250      	lsls	r0, r2, #9
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f7fe f9d7 	bl	800017c <__aeabi_uldivmod>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
 8001dd6:	e040      	b.n	8001e5a <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	461c      	mov	r4, r3
 8001ddc:	f04f 0500 	mov.w	r5, #0
 8001de0:	4620      	mov	r0, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	014b      	lsls	r3, r1, #5
 8001dee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001df2:	0142      	lsls	r2, r0, #5
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	1b00      	subs	r0, r0, r4
 8001dfa:	eb61 0105 	sbc.w	r1, r1, r5
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	018b      	lsls	r3, r1, #6
 8001e08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e0c:	0182      	lsls	r2, r0, #6
 8001e0e:	1a12      	subs	r2, r2, r0
 8001e10:	eb63 0301 	sbc.w	r3, r3, r1
 8001e14:	f04f 0000 	mov.w	r0, #0
 8001e18:	f04f 0100 	mov.w	r1, #0
 8001e1c:	00d9      	lsls	r1, r3, #3
 8001e1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e22:	00d0      	lsls	r0, r2, #3
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	1912      	adds	r2, r2, r4
 8001e2a:	eb45 0303 	adc.w	r3, r5, r3
 8001e2e:	f04f 0000 	mov.w	r0, #0
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	0299      	lsls	r1, r3, #10
 8001e38:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001e3c:	0290      	lsls	r0, r2, #10
 8001e3e:	4602      	mov	r2, r0
 8001e40:	460b      	mov	r3, r1
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	f7fe f995 	bl	800017c <__aeabi_uldivmod>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4613      	mov	r3, r2
 8001e58:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	613b      	str	r3, [r7, #16]
      break;
 8001e5e:	e00d      	b.n	8001e7c <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	0b5b      	lsrs	r3, r3, #13
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	613b      	str	r3, [r7, #16]
      break;
 8001e7a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e7c:	693b      	ldr	r3, [r7, #16]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bdb0      	pop	{r4, r5, r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	00f42400 	.word	0x00f42400
 8001e90:	007a1200 	.word	0x007a1200
 8001e94:	08006af8 	.word	0x08006af8

08001e98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e9c:	4b02      	ldr	r3, [pc, #8]	; (8001ea8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr
 8001ea8:	20000000 	.word	0x20000000

08001eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001eb0:	f7ff fff2 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	0a1b      	lsrs	r3, r3, #8
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	4903      	ldr	r1, [pc, #12]	; (8001ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ec2:	5ccb      	ldrb	r3, [r1, r3]
 8001ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	08006b14 	.word	0x08006b14

08001ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ed8:	f7ff ffde 	bl	8001e98 <HAL_RCC_GetHCLKFreq>
 8001edc:	4602      	mov	r2, r0
 8001ede:	4b05      	ldr	r3, [pc, #20]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	0adb      	lsrs	r3, r3, #11
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	4903      	ldr	r1, [pc, #12]	; (8001ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eea:	5ccb      	ldrb	r3, [r1, r3]
 8001eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40023800 	.word	0x40023800
 8001ef8:	08006b14 	.word	0x08006b14

08001efc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	220f      	movs	r2, #15
 8001f0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <HAL_RCC_GetClockConfig+0x58>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <HAL_RCC_GetClockConfig+0x58>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <HAL_RCC_GetClockConfig+0x58>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001f30:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <HAL_RCC_GetClockConfig+0x58>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	08db      	lsrs	r3, r3, #3
 8001f36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <HAL_RCC_GetClockConfig+0x5c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0201 	and.w	r2, r3, #1
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	601a      	str	r2, [r3, #0]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40023c00 	.word	0x40023c00

08001f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b087      	sub	sp, #28
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d12c      	bne.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d005      	beq.n	8001f8c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001f80:	4b24      	ldr	r3, [pc, #144]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001f88:	617b      	str	r3, [r7, #20]
 8001f8a:	e016      	b.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f8c:	4b20      	ldr	r3, [pc, #128]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	4a1f      	ldr	r2, [pc, #124]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f96:	6253      	str	r3, [r2, #36]	; 0x24
 8001f98:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001fac:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fae:	4b18      	ldr	r3, [pc, #96]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	4a17      	ldr	r2, [pc, #92]	; (8002010 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001fc0:	d105      	bne.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001fc8:	d101      	bne.n	8001fce <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001fca:	2301      	movs	r3, #1
 8001fcc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001fd4:	4b10      	ldr	r3, [pc, #64]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a0f      	ldr	r2, [pc, #60]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6013      	str	r3, [r2, #0]
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f023 0201 	bic.w	r2, r3, #1
 8001fe8:	490b      	ldr	r1, [pc, #44]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff0:	4b09      	ldr	r3, [pc, #36]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	693a      	ldr	r2, [r7, #16]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d001      	beq.n	8002002 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	371c      	adds	r7, #28
 8002008:	46bd      	mov	sp, r7
 800200a:	bc80      	pop	{r7}
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40007000 	.word	0x40007000
 8002018:	40023c00 	.word	0x40023c00

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d106      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 80c6 	beq.w	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 800203e:	2300      	movs	r3, #0
 8002040:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002042:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10d      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	4a60      	ldr	r2, [pc, #384]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002058:	6253      	str	r3, [r2, #36]	; 0x24
 800205a:	4b5e      	ldr	r3, [pc, #376]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002066:	2301      	movs	r3, #1
 8002068:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800206a:	4b5b      	ldr	r3, [pc, #364]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d118      	bne.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002076:	4b58      	ldr	r3, [pc, #352]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a57      	ldr	r2, [pc, #348]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800207c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002080:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002082:	f7fe fe71 	bl	8000d68 <HAL_GetTick>
 8002086:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002088:	e008      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800208a:	f7fe fe6d 	bl	8000d68 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b64      	cmp	r3, #100	; 0x64
 8002096:	d901      	bls.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e097      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800209c:	4b4e      	ldr	r3, [pc, #312]	; (80021d8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0f0      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80020b0:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d106      	bne.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d00f      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80020da:	d108      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80020dc:	4b3d      	ldr	r3, [pc, #244]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80020e8:	d101      	bne.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e06e      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80020ee:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d041      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d005      	beq.n	8002118 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10c      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	429a      	cmp	r2, r3
 8002124:	d02d      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d027      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002132:	4b28      	ldr	r3, [pc, #160]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800213a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800213c:	4b27      	ldr	r3, [pc, #156]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800213e:	2201      	movs	r2, #1
 8002140:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002148:	4a22      	ldr	r2, [pc, #136]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d014      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7fe fe06 	bl	8000d68 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800215e:	e00a      	b.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002160:	f7fe fe02 	bl	8000d68 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e02a      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002176:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0ee      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800218a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800218e:	d10a      	bne.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002190:	4b10      	ldr	r3, [pc, #64]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
 80021a6:	4b0b      	ldr	r3, [pc, #44]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b2:	4908      	ldr	r1, [pc, #32]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021b8:	7dfb      	ldrb	r3, [r7, #23]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	4a04      	ldr	r2, [pc, #16]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021c8:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3718      	adds	r7, #24
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40023800 	.word	0x40023800
 80021d8:	40007000 	.word	0x40007000
 80021dc:	424706dc 	.word	0x424706dc

080021e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e06d      	b.n	80022ce <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7f5b      	ldrb	r3, [r3, #29]
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d105      	bne.n	8002208 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f7fe fb1e 	bl	8000844 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2202      	movs	r2, #2
 800220c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	22ca      	movs	r2, #202	; 0xca
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2253      	movs	r2, #83	; 0x53
 800221c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	f000 fc8d 	bl	8002b3e <RTC_EnterInitMode>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	22ff      	movs	r2, #255	; 0xff
 8002230:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2204      	movs	r2, #4
 8002236:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e048      	b.n	80022ce <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800224a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800224e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6899      	ldr	r1, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	431a      	orrs	r2, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68d2      	ldr	r2, [r2, #12]
 8002276:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	6919      	ldr	r1, [r3, #16]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	041a      	lsls	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68da      	ldr	r2, [r3, #12]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800229a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	699a      	ldr	r2, [r3, #24]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	22ff      	movs	r2, #255	; 0xff
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80022cc:	2300      	movs	r3, #0
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3708      	adds	r7, #8
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022d6:	b590      	push	{r4, r7, lr}
 80022d8:	b087      	sub	sp, #28
 80022da:	af00      	add	r7, sp, #0
 80022dc:	60f8      	str	r0, [r7, #12]
 80022de:	60b9      	str	r1, [r7, #8]
 80022e0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	7f1b      	ldrb	r3, [r3, #28]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_RTC_SetTime+0x18>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e0a3      	b.n	8002436 <HAL_RTC_SetTime+0x160>
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2201      	movs	r2, #1
 80022f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2202      	movs	r2, #2
 80022f8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d126      	bne.n	800234e <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800230a:	2b00      	cmp	r3, #0
 800230c:	d102      	bne.n	8002314 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fc3a 	bl	8002b92 <RTC_ByteToBcd2>
 800231e:	4603      	mov	r3, r0
 8002320:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	785b      	ldrb	r3, [r3, #1]
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fc33 	bl	8002b92 <RTC_ByteToBcd2>
 800232c:	4603      	mov	r3, r0
 800232e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002330:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	789b      	ldrb	r3, [r3, #2]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fc2b 	bl	8002b92 <RTC_ByteToBcd2>
 800233c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800233e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	78db      	ldrb	r3, [r3, #3]
 8002346:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	e018      	b.n	8002380 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	2200      	movs	r2, #0
 8002360:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	785b      	ldrb	r3, [r3, #1]
 800236c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800236e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8002370:	68ba      	ldr	r2, [r7, #8]
 8002372:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002374:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	78db      	ldrb	r3, [r3, #3]
 800237a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800237c:	4313      	orrs	r3, r2
 800237e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	22ca      	movs	r2, #202	; 0xca
 8002386:	625a      	str	r2, [r3, #36]	; 0x24
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2253      	movs	r2, #83	; 0x53
 800238e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 fbd4 	bl	8002b3e <RTC_EnterInitMode>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d00b      	beq.n	80023b4 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	22ff      	movs	r2, #255	; 0xff
 80023a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2204      	movs	r2, #4
 80023a8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e040      	b.n	8002436 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80023be:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80023c2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023d2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6899      	ldr	r1, [r3, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	68da      	ldr	r2, [r3, #12]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	430a      	orrs	r2, r1
 80023ea:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023fa:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023fc:	68f8      	ldr	r0, [r7, #12]
 80023fe:	f000 fb71 	bl	8002ae4 <HAL_RTC_WaitForSynchro>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	22ff      	movs	r2, #255	; 0xff
 800240e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2204      	movs	r2, #4
 8002414:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e00a      	b.n	8002436 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	22ff      	movs	r2, #255	; 0xff
 8002426:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2201      	movs	r2, #1
 800242c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2200      	movs	r2, #0
 8002432:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
  }
}
 8002436:	4618      	mov	r0, r3
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}

0800243e <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b086      	sub	sp, #24
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002450:	b29a      	uxth	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800246e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002472:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	0c1b      	lsrs	r3, r3, #16
 8002478:	b2db      	uxtb	r3, r3
 800247a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800247e:	b2da      	uxtb	r2, r3
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800248e:	b2da      	uxtb	r2, r3
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800249c:	b2da      	uxtb	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	0c1b      	lsrs	r3, r3, #16
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d11a      	bne.n	80024ee <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 fb87 	bl	8002bd0 <RTC_Bcd2ToByte>
 80024c2:	4603      	mov	r3, r0
 80024c4:	461a      	mov	r2, r3
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	785b      	ldrb	r3, [r3, #1]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fb7e 	bl	8002bd0 <RTC_Bcd2ToByte>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461a      	mov	r2, r3
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	789b      	ldrb	r3, [r3, #2]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fb75 	bl	8002bd0 <RTC_Bcd2ToByte>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461a      	mov	r2, r3
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3718      	adds	r7, #24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024f8:	b590      	push	{r4, r7, lr}
 80024fa:	b087      	sub	sp, #28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	60f8      	str	r0, [r7, #12]
 8002500:	60b9      	str	r1, [r7, #8]
 8002502:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	7f1b      	ldrb	r3, [r3, #28]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_RTC_SetDate+0x18>
 800250c:	2302      	movs	r3, #2
 800250e:	e08d      	b.n	800262c <HAL_RTC_SetDate+0x134>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2201      	movs	r2, #1
 8002514:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2202      	movs	r2, #2
 800251a:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10e      	bne.n	8002540 <HAL_RTC_SetDate+0x48>
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	785b      	ldrb	r3, [r3, #1]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	785b      	ldrb	r3, [r3, #1]
 8002532:	f023 0310 	bic.w	r3, r3, #16
 8002536:	b2db      	uxtb	r3, r3
 8002538:	330a      	adds	r3, #10
 800253a:	b2da      	uxtb	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d11c      	bne.n	8002580 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	78db      	ldrb	r3, [r3, #3]
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fb21 	bl	8002b92 <RTC_ByteToBcd2>
 8002550:	4603      	mov	r3, r0
 8002552:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	785b      	ldrb	r3, [r3, #1]
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fb1a 	bl	8002b92 <RTC_ByteToBcd2>
 800255e:	4603      	mov	r3, r0
 8002560:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002562:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fb12 	bl	8002b92 <RTC_ByteToBcd2>
 800256e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002570:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800257a:	4313      	orrs	r3, r2
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	e00e      	b.n	800259e <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	78db      	ldrb	r3, [r3, #3]
 8002584:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	785b      	ldrb	r3, [r3, #1]
 800258a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800258c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8002592:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	22ca      	movs	r2, #202	; 0xca
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2253      	movs	r2, #83	; 0x53
 80025ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80025ae:	68f8      	ldr	r0, [r7, #12]
 80025b0:	f000 fac5 	bl	8002b3e <RTC_EnterInitMode>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00b      	beq.n	80025d2 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	22ff      	movs	r2, #255	; 0xff
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2204      	movs	r2, #4
 80025c6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2200      	movs	r2, #0
 80025cc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e02c      	b.n	800262c <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025dc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80025e0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68da      	ldr	r2, [r3, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025f0:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fa76 	bl	8002ae4 <HAL_RTC_WaitForSynchro>
 80025f8:	4603      	mov	r3, r0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	22ff      	movs	r2, #255	; 0xff
 8002604:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2204      	movs	r2, #4
 800260a:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e00a      	b.n	800262c <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	22ff      	movs	r2, #255	; 0xff
 800261c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	2200      	movs	r2, #0
 8002628:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800262a:	2300      	movs	r3, #0
  }
}
 800262c:	4618      	mov	r0, r3
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}

08002634 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800264a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800264e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	0c1b      	lsrs	r3, r3, #16
 8002654:	b2da      	uxtb	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	b2db      	uxtb	r3, r3
 8002660:	f003 031f 	and.w	r3, r3, #31
 8002664:	b2da      	uxtb	r2, r3
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	b2db      	uxtb	r3, r3
 800266e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002672:	b2da      	uxtb	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	0b5b      	lsrs	r3, r3, #13
 800267c:	b2db      	uxtb	r3, r3
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	b2da      	uxtb	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d11a      	bne.n	80026c4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	78db      	ldrb	r3, [r3, #3]
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fa9c 	bl	8002bd0 <RTC_Bcd2ToByte>
 8002698:	4603      	mov	r3, r0
 800269a:	461a      	mov	r2, r3
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	785b      	ldrb	r3, [r3, #1]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fa93 	bl	8002bd0 <RTC_Bcd2ToByte>
 80026aa:	4603      	mov	r3, r0
 80026ac:	461a      	mov	r2, r3
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	789b      	ldrb	r3, [r3, #2]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 fa8a 	bl	8002bd0 <RTC_Bcd2ToByte>
 80026bc:	4603      	mov	r3, r0
 80026be:	461a      	mov	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80026c4:	2300      	movs	r3, #0
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
	...

080026d0 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80026d0:	b590      	push	{r4, r7, lr}
 80026d2:	b089      	sub	sp, #36	; 0x24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	7f1b      	ldrb	r3, [r3, #28]
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_RTC_SetAlarm_IT+0x24>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e11f      	b.n	8002934 <HAL_RTC_SetAlarm_IT+0x264>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2201      	movs	r2, #1
 80026f8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2202      	movs	r2, #2
 80026fe:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d137      	bne.n	8002776 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2200      	movs	r2, #0
 8002718:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fa37 	bl	8002b92 <RTC_ByteToBcd2>
 8002724:	4603      	mov	r3, r0
 8002726:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	785b      	ldrb	r3, [r3, #1]
 800272c:	4618      	mov	r0, r3
 800272e:	f000 fa30 	bl	8002b92 <RTC_ByteToBcd2>
 8002732:	4603      	mov	r3, r0
 8002734:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002736:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	789b      	ldrb	r3, [r3, #2]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fa28 	bl	8002b92 <RTC_ByteToBcd2>
 8002742:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002744:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	78db      	ldrb	r3, [r3, #3]
 800274c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800274e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fa1a 	bl	8002b92 <RTC_ByteToBcd2>
 800275e:	4603      	mov	r3, r0
 8002760:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002762:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800276a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8002770:	4313      	orrs	r3, r2
 8002772:	61fb      	str	r3, [r7, #28]
 8002774:	e023      	b.n	80027be <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d102      	bne.n	800278a <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2200      	movs	r2, #0
 8002788:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	785b      	ldrb	r3, [r3, #1]
 8002794:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002796:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002798:	68ba      	ldr	r2, [r7, #8]
 800279a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800279c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	78db      	ldrb	r3, [r3, #3]
 80027a2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80027a4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80027ac:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80027ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80027b4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80027ba:	4313      	orrs	r3, r2
 80027bc:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	4313      	orrs	r3, r2
 80027c8:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	22ca      	movs	r2, #202	; 0xca
 80027d0:	625a      	str	r2, [r3, #36]	; 0x24
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2253      	movs	r2, #83	; 0x53
 80027d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e2:	d148      	bne.n	8002876 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	689a      	ldr	r2, [r3, #8]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027f2:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002804:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002806:	f7fe faaf 	bl	8000d68 <HAL_GetTick>
 800280a:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800280c:	e013      	b.n	8002836 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800280e:	f7fe faab 	bl	8000d68 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800281c:	d90b      	bls.n	8002836 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	22ff      	movs	r2, #255	; 0xff
 8002824:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2203      	movs	r2, #3
 800282a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2200      	movs	r2, #0
 8002830:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e07e      	b.n	8002934 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0e4      	beq.n	800280e <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69fa      	ldr	r2, [r7, #28]
 800284a:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002862:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002872:	609a      	str	r2, [r3, #8]
 8002874:	e047      	b.n	8002906 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002884:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	b2da      	uxtb	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002896:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002898:	f7fe fa66 	bl	8000d68 <HAL_GetTick>
 800289c:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800289e:	e013      	b.n	80028c8 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80028a0:	f7fe fa62 	bl	8000d68 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ae:	d90b      	bls.n	80028c8 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	22ff      	movs	r2, #255	; 0xff
 80028b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2203      	movs	r2, #3
 80028bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e035      	b.n	8002934 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0e4      	beq.n	80028a0 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	69fa      	ldr	r2, [r7, #28]
 80028dc:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	697a      	ldr	r2, [r7, #20]
 80028e4:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f4:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002904:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002906:	4b0d      	ldr	r3, [pc, #52]	; (800293c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a0c      	ldr	r2, [pc, #48]	; (800293c <HAL_RTC_SetAlarm_IT+0x26c>)
 800290c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002910:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	4a09      	ldr	r2, [pc, #36]	; (800293c <HAL_RTC_SetAlarm_IT+0x26c>)
 8002918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800291c:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	22ff      	movs	r2, #255	; 0xff
 8002924:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3724      	adds	r7, #36	; 0x24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd90      	pop	{r4, r7, pc}
 800293c:	40010400 	.word	0x40010400

08002940 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	7f1b      	ldrb	r3, [r3, #28]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d101      	bne.n	8002956 <HAL_RTC_DeactivateAlarm+0x16>
 8002952:	2302      	movs	r3, #2
 8002954:	e07b      	b.n	8002a4e <HAL_RTC_DeactivateAlarm+0x10e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2202      	movs	r2, #2
 8002960:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	22ca      	movs	r2, #202	; 0xca
 8002968:	625a      	str	r2, [r3, #36]	; 0x24
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2253      	movs	r2, #83	; 0x53
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002978:	d12f      	bne.n	80029da <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002988:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002998:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 800299a:	f7fe f9e5 	bl	8000d68 <HAL_GetTick>
 800299e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80029a0:	e013      	b.n	80029ca <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80029a2:	f7fe f9e1 	bl	8000d68 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029b0:	d90b      	bls.n	80029ca <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	22ff      	movs	r2, #255	; 0xff
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e041      	b.n	8002a4e <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0e4      	beq.n	80029a2 <HAL_RTC_DeactivateAlarm+0x62>
 80029d8:	e02e      	b.n	8002a38 <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029e8:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80029f8:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 80029fa:	f7fe f9b5 	bl	8000d68 <HAL_GetTick>
 80029fe:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002a00:	e013      	b.n	8002a2a <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a02:	f7fe f9b1 	bl	8000d68 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a10:	d90b      	bls.n	8002a2a <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	22ff      	movs	r2, #255	; 0xff
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e011      	b.n	8002a4e <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0e4      	beq.n	8002a02 <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	22ff      	movs	r2, #255	; 0xff
 8002a3e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
	...

08002a58 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d012      	beq.n	8002a94 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00b      	beq.n	8002a94 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f003 fbad 	bl	80061dc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002a92:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d012      	beq.n	8002ac8 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00b      	beq.n	8002ac8 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f8d8 	bl	8002c66 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002ac6:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002ac8:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RTC_AlarmIRQHandler+0x88>)
 8002aca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ace:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	775a      	strb	r2, [r3, #29]
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40010400 	.word	0x40010400

08002ae4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d11c      	bne.n	8002b34 <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68da      	ldr	r2, [r3, #12]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002b08:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b0a:	f7fe f92d 	bl	8000d68 <HAL_GetTick>
 8002b0e:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b10:	e009      	b.n	8002b26 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b12:	f7fe f929 	bl	8000d68 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b20:	d901      	bls.n	8002b26 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e007      	b.n	8002b36 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0320 	and.w	r3, r3, #32
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ee      	beq.n	8002b12 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d119      	bne.n	8002b88 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b5e:	f7fe f903 	bl	8000d68 <HAL_GetTick>
 8002b62:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b64:	e009      	b.n	8002b7a <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002b66:	f7fe f8ff 	bl	8000d68 <HAL_GetTick>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b74:	d901      	bls.n	8002b7a <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e007      	b.n	8002b8a <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d0ee      	beq.n	8002b66 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b085      	sub	sp, #20
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	4603      	mov	r3, r0
 8002b9a:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002ba0:	79fb      	ldrb	r3, [r7, #7]
 8002ba2:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8002ba4:	e005      	b.n	8002bb2 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002bac:	7afb      	ldrb	r3, [r7, #11]
 8002bae:	3b0a      	subs	r3, #10
 8002bb0:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8002bb2:	7afb      	ldrb	r3, [r7, #11]
 8002bb4:	2b09      	cmp	r3, #9
 8002bb6:	d8f6      	bhi.n	8002ba6 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	b2da      	uxtb	r2, r3
 8002bc0:	7afb      	ldrb	r3, [r7, #11]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	b2db      	uxtb	r3, r3
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3714      	adds	r7, #20
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	461a      	mov	r2, r3
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	b2da      	uxtb	r2, r3
 8002bf0:	79fb      	ldrb	r3, [r7, #7]
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4413      	add	r3, r2
 8002bfa:	b2db      	uxtb	r3, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr

08002c06 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	7f1b      	ldrb	r3, [r3, #28]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d101      	bne.n	8002c1a <HAL_RTCEx_EnableBypassShadow+0x14>
 8002c16:	2302      	movs	r3, #2
 8002c18:	e020      	b.n	8002c5c <HAL_RTCEx_EnableBypassShadow+0x56>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	22ca      	movs	r2, #202	; 0xca
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2253      	movs	r2, #83	; 0x53
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0220 	orr.w	r2, r2, #32
 8002c44:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	22ff      	movs	r2, #255	; 0xff
 8002c4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bc80      	pop	{r7}
 8002c64:	4770      	bx	lr

08002c66 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002c66:	b480      	push	{r7}
 8002c68:	b083      	sub	sp, #12
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d101      	bne.n	8002c8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e07b      	b.n	8002d82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d108      	bne.n	8002ca4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c9a:	d009      	beq.n	8002cb0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	61da      	str	r2, [r3, #28]
 8002ca2:	e005      	b.n	8002cb0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fd fe0c 	bl	80008e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ce6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	f003 0301 	and.w	r3, r3, #1
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69db      	ldr	r3, [r3, #28]
 8002d26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d34:	ea42 0103 	orr.w	r1, r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d3c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	0c1b      	lsrs	r3, r3, #16
 8002d4e:	f003 0104 	and.w	r1, r3, #4
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	f003 0210 	and.w	r2, r3, #16
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e031      	b.n	8002e00 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d106      	bne.n	8002db6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f000 f829 	bl	8002e08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4610      	mov	r0, r2
 8002dca:	f000 f979 	bl	80030c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bc80      	pop	{r7}
 8002e18:	4770      	bx	lr
	...

08002e1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d001      	beq.n	8002e34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e03a      	b.n	8002eaa <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e54:	d00e      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x58>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a16      	ldr	r2, [pc, #88]	; (8002eb4 <HAL_TIM_Base_Start_IT+0x98>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d009      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x58>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a14      	ldr	r2, [pc, #80]	; (8002eb8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d004      	beq.n	8002e74 <HAL_TIM_Base_Start_IT+0x58>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a13      	ldr	r2, [pc, #76]	; (8002ebc <HAL_TIM_Base_Start_IT+0xa0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d111      	bne.n	8002e98 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b06      	cmp	r3, #6
 8002e84:	d010      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f042 0201 	orr.w	r2, r2, #1
 8002e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e96:	e007      	b.n	8002ea8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0201 	orr.w	r2, r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bc80      	pop	{r7}
 8002eb2:	4770      	bx	lr
 8002eb4:	40000400 	.word	0x40000400
 8002eb8:	40000800 	.word	0x40000800
 8002ebc:	40010800 	.word	0x40010800

08002ec0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d122      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b02      	cmp	r3, #2
 8002ee2:	d11b      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f06f 0202 	mvn.w	r2, #2
 8002eec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	699b      	ldr	r3, [r3, #24]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 f8c1 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002f08:	e005      	b.n	8002f16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8b4 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f8c3 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	691b      	ldr	r3, [r3, #16]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b04      	cmp	r3, #4
 8002f28:	d122      	bne.n	8002f70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b04      	cmp	r3, #4
 8002f36:	d11b      	bne.n	8002f70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f06f 0204 	mvn.w	r2, #4
 8002f40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2202      	movs	r2, #2
 8002f46:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	699b      	ldr	r3, [r3, #24]
 8002f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 f897 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002f5c:	e005      	b.n	8002f6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f88a 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f899 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b08      	cmp	r3, #8
 8002f7c:	d122      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	f003 0308 	and.w	r3, r3, #8
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d11b      	bne.n	8002fc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f06f 0208 	mvn.w	r2, #8
 8002f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2204      	movs	r2, #4
 8002f9a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f86d 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8002fb0:	e005      	b.n	8002fbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f860 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f86f 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	f003 0310 	and.w	r3, r3, #16
 8002fce:	2b10      	cmp	r3, #16
 8002fd0:	d122      	bne.n	8003018 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b10      	cmp	r3, #16
 8002fde:	d11b      	bne.n	8003018 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f06f 0210 	mvn.w	r2, #16
 8002fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2208      	movs	r2, #8
 8002fee:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	69db      	ldr	r3, [r3, #28]
 8002ff6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 f843 	bl	800308a <HAL_TIM_IC_CaptureCallback>
 8003004:	e005      	b.n	8003012 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f836 	bl	8003078 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f845 	bl	800309c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	691b      	ldr	r3, [r3, #16]
 800301e:	f003 0301 	and.w	r3, r3, #1
 8003022:	2b01      	cmp	r3, #1
 8003024:	d10e      	bne.n	8003044 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	f003 0301 	and.w	r3, r3, #1
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f06f 0201 	mvn.w	r2, #1
 800303c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f7fd fb5e 	bl	8000700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304e:	2b40      	cmp	r3, #64	; 0x40
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800305c:	2b40      	cmp	r3, #64	; 0x40
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f81f 	bl	80030ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003070:	bf00      	nop
 8003072:	3708      	adds	r7, #8
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003080:	bf00      	nop
 8003082:	370c      	adds	r7, #12
 8003084:	46bd      	mov	sp, r7
 8003086:	bc80      	pop	{r7}
 8003088:	4770      	bx	lr

0800308a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800308a:	b480      	push	{r7}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003092:	bf00      	nop
 8003094:	370c      	adds	r7, #12
 8003096:	46bd      	mov	sp, r7
 8003098:	bc80      	pop	{r7}
 800309a:	4770      	bx	lr

0800309c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bc80      	pop	{r7}
 80030ac:	4770      	bx	lr

080030ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030ae:	b480      	push	{r7}
 80030b0:	b083      	sub	sp, #12
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b085      	sub	sp, #20
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
 80030c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030d6:	d00f      	beq.n	80030f8 <TIM_Base_SetConfig+0x38>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a2b      	ldr	r2, [pc, #172]	; (8003188 <TIM_Base_SetConfig+0xc8>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00b      	beq.n	80030f8 <TIM_Base_SetConfig+0x38>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a2a      	ldr	r2, [pc, #168]	; (800318c <TIM_Base_SetConfig+0xcc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d007      	beq.n	80030f8 <TIM_Base_SetConfig+0x38>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a29      	ldr	r2, [pc, #164]	; (8003190 <TIM_Base_SetConfig+0xd0>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d003      	beq.n	80030f8 <TIM_Base_SetConfig+0x38>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a28      	ldr	r2, [pc, #160]	; (8003194 <TIM_Base_SetConfig+0xd4>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d108      	bne.n	800310a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	68fa      	ldr	r2, [r7, #12]
 8003106:	4313      	orrs	r3, r2
 8003108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003110:	d017      	beq.n	8003142 <TIM_Base_SetConfig+0x82>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1c      	ldr	r2, [pc, #112]	; (8003188 <TIM_Base_SetConfig+0xc8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <TIM_Base_SetConfig+0x82>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1b      	ldr	r2, [pc, #108]	; (800318c <TIM_Base_SetConfig+0xcc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d00f      	beq.n	8003142 <TIM_Base_SetConfig+0x82>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <TIM_Base_SetConfig+0xd0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00b      	beq.n	8003142 <TIM_Base_SetConfig+0x82>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a19      	ldr	r2, [pc, #100]	; (8003194 <TIM_Base_SetConfig+0xd4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <TIM_Base_SetConfig+0x82>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a18      	ldr	r2, [pc, #96]	; (8003198 <TIM_Base_SetConfig+0xd8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d003      	beq.n	8003142 <TIM_Base_SetConfig+0x82>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a17      	ldr	r2, [pc, #92]	; (800319c <TIM_Base_SetConfig+0xdc>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d108      	bne.n	8003154 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003148:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	4313      	orrs	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	615a      	str	r2, [r3, #20]
}
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	bc80      	pop	{r7}
 8003186:	4770      	bx	lr
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40000c00 	.word	0x40000c00
 8003194:	40010800 	.word	0x40010800
 8003198:	40010c00 	.word	0x40010c00
 800319c:	40011000 	.word	0x40011000

080031a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e03f      	b.n	8003232 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d106      	bne.n	80031cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f7fd fd32 	bl	8000c30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	; 0x24
 80031d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68da      	ldr	r2, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fa63 	bl	80036b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	691a      	ldr	r2, [r3, #16]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003208:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68da      	ldr	r2, [r3, #12]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003218:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2220      	movs	r2, #32
 800322c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	695b      	ldr	r3, [r3, #20]
 800325a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800325c:	2300      	movs	r3, #0
 800325e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003260:	2300      	movs	r3, #0
 8003262:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10d      	bne.n	800328e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_UART_IRQHandler+0x52>
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f991 	bl	80035ae <UART_Receive_IT>
      return;
 800328c:	e0d0      	b.n	8003430 <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	f000 80b0 	beq.w	80033f6 <HAL_UART_IRQHandler+0x1ba>
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <HAL_UART_IRQHandler+0x70>
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f000 80a5 	beq.w	80033f6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00a      	beq.n	80032cc <HAL_UART_IRQHandler+0x90>
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c4:	f043 0201 	orr.w	r2, r3, #1
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0304 	and.w	r3, r3, #4
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <HAL_UART_IRQHandler+0xb0>
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e4:	f043 0202 	orr.w	r2, r3, #2
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00a      	beq.n	800330c <HAL_UART_IRQHandler+0xd0>
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00f      	beq.n	8003336 <HAL_UART_IRQHandler+0xfa>
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	f003 0320 	and.w	r3, r3, #32
 800331c:	2b00      	cmp	r3, #0
 800331e:	d104      	bne.n	800332a <HAL_UART_IRQHandler+0xee>
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f003 0301 	and.w	r3, r3, #1
 8003326:	2b00      	cmp	r3, #0
 8003328:	d005      	beq.n	8003336 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	f043 0208 	orr.w	r2, r3, #8
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800333a:	2b00      	cmp	r3, #0
 800333c:	d077      	beq.n	800342e <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d007      	beq.n	8003358 <HAL_UART_IRQHandler+0x11c>
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f003 0320 	and.w	r3, r3, #32
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f92b 	bl	80035ae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003362:	2b40      	cmp	r3, #64	; 0x40
 8003364:	bf0c      	ite	eq
 8003366:	2301      	moveq	r3, #1
 8003368:	2300      	movne	r3, #0
 800336a:	b2db      	uxtb	r3, r3
 800336c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	f003 0308 	and.w	r3, r3, #8
 8003376:	2b00      	cmp	r3, #0
 8003378:	d102      	bne.n	8003380 <HAL_UART_IRQHandler+0x144>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d031      	beq.n	80033e4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 f876 	bl	8003472 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	d123      	bne.n	80033dc <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695a      	ldr	r2, [r3, #20]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033a2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b0:	4a21      	ldr	r2, [pc, #132]	; (8003438 <HAL_UART_IRQHandler+0x1fc>)
 80033b2:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd fe0a 	bl	8000fd2 <HAL_DMA_Abort_IT>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d016      	beq.n	80033f2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033ce:	4610      	mov	r0, r2
 80033d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d2:	e00e      	b.n	80033f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 f843 	bl	8003460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033da:	e00a      	b.n	80033f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f000 f83f 	bl	8003460 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e2:	e006      	b.n	80033f2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f83b 	bl	8003460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80033f0:	e01d      	b.n	800342e <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f2:	bf00      	nop
    return;
 80033f4:	e01b      	b.n	800342e <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d008      	beq.n	8003412 <HAL_UART_IRQHandler+0x1d6>
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003406:	2b00      	cmp	r3, #0
 8003408:	d003      	beq.n	8003412 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f862 	bl	80034d4 <UART_Transmit_IT>
    return;
 8003410:	e00e      	b.n	8003430 <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003418:	2b00      	cmp	r3, #0
 800341a:	d009      	beq.n	8003430 <HAL_UART_IRQHandler+0x1f4>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8a9 	bl	800357e <UART_EndTransmit_IT>
    return;
 800342c:	e000      	b.n	8003430 <HAL_UART_IRQHandler+0x1f4>
    return;
 800342e:	bf00      	nop
  }
}
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	080034ad 	.word	0x080034ad

0800343c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	bc80      	pop	{r7}
 800344c:	4770      	bx	lr

0800344e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003456:	bf00      	nop
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003460:	b480      	push	{r7}
 8003462:	b083      	sub	sp, #12
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003468:	bf00      	nop
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr

08003472 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68da      	ldr	r2, [r3, #12]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003488:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f022 0201 	bic.w	r2, r2, #1
 8003498:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f7ff ffca 	bl	8003460 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034cc:	bf00      	nop
 80034ce:	3710      	adds	r7, #16
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b21      	cmp	r3, #33	; 0x21
 80034e6:	d144      	bne.n	8003572 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034f0:	d11a      	bne.n	8003528 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	461a      	mov	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003506:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d105      	bne.n	800351c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	1c9a      	adds	r2, r3, #2
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	621a      	str	r2, [r3, #32]
 800351a:	e00e      	b.n	800353a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a1b      	ldr	r3, [r3, #32]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	621a      	str	r2, [r3, #32]
 8003526:	e008      	b.n	800353a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a1b      	ldr	r3, [r3, #32]
 800352c:	1c59      	adds	r1, r3, #1
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6211      	str	r1, [r2, #32]
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800353e:	b29b      	uxth	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	b29b      	uxth	r3, r3
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	4619      	mov	r1, r3
 8003548:	84d1      	strh	r1, [r2, #38]	; 0x26
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10f      	bne.n	800356e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68da      	ldr	r2, [r3, #12]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800355c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68da      	ldr	r2, [r3, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800356c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800356e:	2300      	movs	r3, #0
 8003570:	e000      	b.n	8003574 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
  }
}
 8003574:	4618      	mov	r0, r3
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	bc80      	pop	{r7}
 800357c:	4770      	bx	lr

0800357e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68da      	ldr	r2, [r3, #12]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003594:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f7ff ff4c 	bl	800343c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b084      	sub	sp, #16
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b22      	cmp	r3, #34	; 0x22
 80035c0:	d171      	bne.n	80036a6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035ca:	d123      	bne.n	8003614 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10e      	bne.n	80035f8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f0:	1c9a      	adds	r2, r3, #2
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
 80035f6:	e029      	b.n	800364c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	b29b      	uxth	r3, r3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	629a      	str	r2, [r3, #40]	; 0x28
 8003612:	e01b      	b.n	800364c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d10a      	bne.n	8003632 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6858      	ldr	r0, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	1c59      	adds	r1, r3, #1
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	6291      	str	r1, [r2, #40]	; 0x28
 800362c:	b2c2      	uxtb	r2, r0
 800362e:	701a      	strb	r2, [r3, #0]
 8003630:	e00c      	b.n	800364c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	b2da      	uxtb	r2, r3
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363e:	1c58      	adds	r0, r3, #1
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	6288      	str	r0, [r1, #40]	; 0x28
 8003644:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003648:	b2d2      	uxtb	r2, r2
 800364a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29b      	uxth	r3, r3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4619      	mov	r1, r3
 800365a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800365c:	2b00      	cmp	r3, #0
 800365e:	d120      	bne.n	80036a2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0220 	bic.w	r2, r2, #32
 800366e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800367e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0201 	bic.w	r2, r2, #1
 800368e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff fed8 	bl	800344e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	e002      	b.n	80036a8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80036a2:	2300      	movs	r3, #0
 80036a4:	e000      	b.n	80036a8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80036a6:	2302      	movs	r3, #2
  }
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68da      	ldr	r2, [r3, #12]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	430a      	orrs	r2, r1
 80036cc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	431a      	orrs	r2, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	431a      	orrs	r2, r3
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80036f0:	f023 030c 	bic.w	r3, r3, #12
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	6812      	ldr	r2, [r2, #0]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	430b      	orrs	r3, r1
 80036fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	695b      	ldr	r3, [r3, #20]
 8003704:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a55      	ldr	r2, [pc, #340]	; (8003870 <UART_SetConfig+0x1c0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d103      	bne.n	8003726 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800371e:	f7fe fbd9 	bl	8001ed4 <HAL_RCC_GetPCLK2Freq>
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	e002      	b.n	800372c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003726:	f7fe fbc1 	bl	8001eac <HAL_RCC_GetPCLK1Freq>
 800372a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	69db      	ldr	r3, [r3, #28]
 8003730:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003734:	d14c      	bne.n	80037d0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009a      	lsls	r2, r3, #2
 8003740:	441a      	add	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	4a49      	ldr	r2, [pc, #292]	; (8003874 <UART_SetConfig+0x1c4>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	0119      	lsls	r1, r3, #4
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	4613      	mov	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	4413      	add	r3, r2
 800375e:	009a      	lsls	r2, r3, #2
 8003760:	441a      	add	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	fbb2 f2f3 	udiv	r2, r2, r3
 800376c:	4b41      	ldr	r3, [pc, #260]	; (8003874 <UART_SetConfig+0x1c4>)
 800376e:	fba3 0302 	umull	r0, r3, r3, r2
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2064      	movs	r0, #100	; 0x64
 8003776:	fb00 f303 	mul.w	r3, r0, r3
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	3332      	adds	r3, #50	; 0x32
 8003780:	4a3c      	ldr	r2, [pc, #240]	; (8003874 <UART_SetConfig+0x1c4>)
 8003782:	fba2 2303 	umull	r2, r3, r2, r3
 8003786:	095b      	lsrs	r3, r3, #5
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800378e:	4419      	add	r1, r3
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4613      	mov	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4413      	add	r3, r2
 8003798:	009a      	lsls	r2, r3, #2
 800379a:	441a      	add	r2, r3
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80037a6:	4b33      	ldr	r3, [pc, #204]	; (8003874 <UART_SetConfig+0x1c4>)
 80037a8:	fba3 0302 	umull	r0, r3, r3, r2
 80037ac:	095b      	lsrs	r3, r3, #5
 80037ae:	2064      	movs	r0, #100	; 0x64
 80037b0:	fb00 f303 	mul.w	r3, r0, r3
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	3332      	adds	r3, #50	; 0x32
 80037ba:	4a2e      	ldr	r2, [pc, #184]	; (8003874 <UART_SetConfig+0x1c4>)
 80037bc:	fba2 2303 	umull	r2, r3, r2, r3
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	f003 0207 	and.w	r2, r3, #7
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	440a      	add	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037ce:	e04a      	b.n	8003866 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	009a      	lsls	r2, r3, #2
 80037da:	441a      	add	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e6:	4a23      	ldr	r2, [pc, #140]	; (8003874 <UART_SetConfig+0x1c4>)
 80037e8:	fba2 2303 	umull	r2, r3, r2, r3
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	0119      	lsls	r1, r3, #4
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	009a      	lsls	r2, r3, #2
 80037fa:	441a      	add	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	fbb2 f2f3 	udiv	r2, r2, r3
 8003806:	4b1b      	ldr	r3, [pc, #108]	; (8003874 <UART_SetConfig+0x1c4>)
 8003808:	fba3 0302 	umull	r0, r3, r3, r2
 800380c:	095b      	lsrs	r3, r3, #5
 800380e:	2064      	movs	r0, #100	; 0x64
 8003810:	fb00 f303 	mul.w	r3, r0, r3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	011b      	lsls	r3, r3, #4
 8003818:	3332      	adds	r3, #50	; 0x32
 800381a:	4a16      	ldr	r2, [pc, #88]	; (8003874 <UART_SetConfig+0x1c4>)
 800381c:	fba2 2303 	umull	r2, r3, r2, r3
 8003820:	095b      	lsrs	r3, r3, #5
 8003822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003826:	4419      	add	r1, r3
 8003828:	68fa      	ldr	r2, [r7, #12]
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009a      	lsls	r2, r3, #2
 8003832:	441a      	add	r2, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	fbb2 f2f3 	udiv	r2, r2, r3
 800383e:	4b0d      	ldr	r3, [pc, #52]	; (8003874 <UART_SetConfig+0x1c4>)
 8003840:	fba3 0302 	umull	r0, r3, r3, r2
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	2064      	movs	r0, #100	; 0x64
 8003848:	fb00 f303 	mul.w	r3, r0, r3
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	011b      	lsls	r3, r3, #4
 8003850:	3332      	adds	r3, #50	; 0x32
 8003852:	4a08      	ldr	r2, [pc, #32]	; (8003874 <UART_SetConfig+0x1c4>)
 8003854:	fba2 2303 	umull	r2, r3, r2, r3
 8003858:	095b      	lsrs	r3, r3, #5
 800385a:	f003 020f 	and.w	r2, r3, #15
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	440a      	add	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40013800 	.word	0x40013800
 8003874:	51eb851f 	.word	0x51eb851f

08003878 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  // my
    SX1276.Reset.port = SX1276_RST_GPIO_Port;
 8003880:	4b2f      	ldr	r3, [pc, #188]	; (8003940 <SX1276Init+0xc8>)
 8003882:	4a30      	ldr	r2, [pc, #192]	; (8003944 <SX1276Init+0xcc>)
 8003884:	601a      	str	r2, [r3, #0]
    SX1276.Reset.pin = SX1276_RST_Pin;
 8003886:	4b2e      	ldr	r3, [pc, #184]	; (8003940 <SX1276Init+0xc8>)
 8003888:	2201      	movs	r2, #1
 800388a:	809a      	strh	r2, [r3, #4]

    SX1276.Spi.Nss.port = SPI2_NSS_GPIO_Port;
 800388c:	4b2c      	ldr	r3, [pc, #176]	; (8003940 <SX1276Init+0xc8>)
 800388e:	4a2e      	ldr	r2, [pc, #184]	; (8003948 <SX1276Init+0xd0>)
 8003890:	63da      	str	r2, [r3, #60]	; 0x3c
    SX1276.Spi.Nss.pin  = SPI2_NSS_Pin;
 8003892:	4b2b      	ldr	r3, [pc, #172]	; (8003940 <SX1276Init+0xc8>)
 8003894:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    SX1276.Spi.SpiId = SPI_2;
 800389c:	4b28      	ldr	r3, [pc, #160]	; (8003940 <SX1276Init+0xc8>)
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    uint8_t i;

    RadioEvents = events;
 80038a4:	4a29      	ldr	r2, [pc, #164]	; (800394c <SX1276Init+0xd4>)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 80038aa:	4929      	ldr	r1, [pc, #164]	; (8003950 <SX1276Init+0xd8>)
 80038ac:	4829      	ldr	r0, [pc, #164]	; (8003954 <SX1276Init+0xdc>)
 80038ae:	f002 fe7d 	bl	80065ac <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 80038b2:	4927      	ldr	r1, [pc, #156]	; (8003950 <SX1276Init+0xd8>)
 80038b4:	4828      	ldr	r0, [pc, #160]	; (8003958 <SX1276Init+0xe0>)
 80038b6:	f002 fe79 	bl	80065ac <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 80038ba:	4925      	ldr	r1, [pc, #148]	; (8003950 <SX1276Init+0xd8>)
 80038bc:	4827      	ldr	r0, [pc, #156]	; (800395c <SX1276Init+0xe4>)
 80038be:	f002 fe75 	bl	80065ac <TimerInit>

    SX1276Reset( );
 80038c2:	f002 fcff 	bl	80062c4 <SX1276Reset>

    RxChainCalibration( );
 80038c6:	f000 f8fb 	bl	8003ac0 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80038ca:	2000      	movs	r0, #0
 80038cc:	f001 f8b4 	bl	8004a38 <SX1276SetOpMode>

    SX1276IoInit();
 80038d0:	f002 fc8e 	bl	80061f0 <SX1276IoInit>

    SX1276IoIrqInit( DioIrq );
 80038d4:	4822      	ldr	r0, [pc, #136]	; (8003960 <SX1276Init+0xe8>)
 80038d6:	f002 fcbf 	bl	8006258 <SX1276IoIrqInit>


    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80038da:	2300      	movs	r3, #0
 80038dc:	73fb      	strb	r3, [r7, #15]
 80038de:	e020      	b.n	8003922 <SX1276Init+0xaa>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	4920      	ldr	r1, [pc, #128]	; (8003964 <SX1276Init+0xec>)
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	440b      	add	r3, r1
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f001 f8ce 	bl	8004a90 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	491b      	ldr	r1, [pc, #108]	; (8003964 <SX1276Init+0xec>)
 80038f8:	4613      	mov	r3, r2
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	4413      	add	r3, r2
 80038fe:	440b      	add	r3, r1
 8003900:	3301      	adds	r3, #1
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	7bfa      	ldrb	r2, [r7, #15]
 8003908:	4916      	ldr	r1, [pc, #88]	; (8003964 <SX1276Init+0xec>)
 800390a:	4613      	mov	r3, r2
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4413      	add	r3, r2
 8003910:	440b      	add	r3, r1
 8003912:	3302      	adds	r3, #2
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	4619      	mov	r1, r3
 8003918:	f001 f912 	bl	8004b40 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	3301      	adds	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	7bfb      	ldrb	r3, [r7, #15]
 8003924:	2b0f      	cmp	r3, #15
 8003926:	d9db      	bls.n	80038e0 <SX1276Init+0x68>
    }

    SX1276SetModem( MODEM_FSK );
 8003928:	2000      	movs	r0, #0
 800392a:	f001 f8b1 	bl	8004a90 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 800392e:	4b04      	ldr	r3, [pc, #16]	; (8003940 <SX1276Init+0xc8>)
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8003936:	bf00      	nop
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	200002f0 	.word	0x200002f0
 8003944:	40020800 	.word	0x40020800
 8003948:	40020400 	.word	0x40020400
 800394c:	20000044 	.word	0x20000044
 8003950:	08004fc9 	.word	0x08004fc9
 8003954:	200002c0 	.word	0x200002c0
 8003958:	20000398 	.word	0x20000398
 800395c:	200002d8 	.word	0x200002d8
 8003960:	2000000c 	.word	0x2000000c
 8003964:	08006b1c 	.word	0x08006b1c

08003968 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <SX1276GetStatus+0x14>)
 800396e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 8003972:	4618      	mov	r0, r3
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	200002f0 	.word	0x200002f0

08003980 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f001 f9f5 	bl	8004d78 <SX1276ConvertFreqInHzToPllStep>
 800398e:	60f8      	str	r0, [r7, #12]

    SX1276.Settings.Channel = freq;
 8003990:	4a0d      	ldr	r2, [pc, #52]	; (80039c8 <SX1276SetChannel+0x48>)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6493      	str	r3, [r2, #72]	; 0x48

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	b2db      	uxtb	r3, r3
 800399c:	4619      	mov	r1, r3
 800399e:	2006      	movs	r0, #6
 80039a0:	f001 f8ce 	bl	8004b40 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	0a1b      	lsrs	r3, r3, #8
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	4619      	mov	r1, r3
 80039ac:	2007      	movs	r0, #7
 80039ae:	f001 f8c7 	bl	8004b40 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	4619      	mov	r1, r3
 80039b8:	2008      	movs	r0, #8
 80039ba:	f001 f8c1 	bl	8004b40 <SX1276Write>
}
 80039be:	bf00      	nop
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	200002f0 	.word	0x200002f0

080039cc <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b086      	sub	sp, #24
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	603b      	str	r3, [r7, #0]
 80039d8:	4613      	mov	r3, r2
 80039da:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 80039dc:	2301      	movs	r3, #1
 80039de:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80039e0:	2300      	movs	r3, #0
 80039e2:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80039e4:	2300      	movs	r3, #0
 80039e6:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 80039e8:	f000 fd34 	bl	8004454 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 80039ec:	2000      	movs	r0, #0
 80039ee:	f001 f84f 	bl	8004a90 <SX1276SetModem>

    SX1276SetChannel( freq );
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7ff ffc4 	bl	8003980 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 80039f8:	68b8      	ldr	r0, [r7, #8]
 80039fa:	f001 f9e3 	bl	8004dc4 <GetFskBandwidthRegValue>
 80039fe:	4603      	mov	r3, r0
 8003a00:	4619      	mov	r1, r3
 8003a02:	2012      	movs	r0, #18
 8003a04:	f001 f89c 	bl	8004b40 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8003a08:	68b8      	ldr	r0, [r7, #8]
 8003a0a:	f001 f9db 	bl	8004dc4 <GetFskBandwidthRegValue>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4619      	mov	r1, r3
 8003a12:	2013      	movs	r0, #19
 8003a14:	f001 f894 	bl	8004b40 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003a18:	2005      	movs	r0, #5
 8003a1a:	f001 f80d 	bl	8004a38 <SX1276SetOpMode>

    DelayMs( 1 );
 8003a1e:	2001      	movs	r0, #1
 8003a20:	f001 fff6 	bl	8005a10 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8003a24:	f002 ffb9 	bl	800699a <TimerGetCurrentTime>
 8003a28:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003a2a:	e00d      	b.n	8003a48 <SX1276IsChannelFree+0x7c>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f000 ffc5 	bl	80049bc <SX1276ReadRssi>
 8003a32:	4603      	mov	r3, r0
 8003a34:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8003a36:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	dd02      	ble.n	8003a48 <SX1276IsChannelFree+0x7c>
        {
            status = false;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]
            break;
 8003a46:	e006      	b.n	8003a56 <SX1276IsChannelFree+0x8a>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003a48:	6938      	ldr	r0, [r7, #16]
 8003a4a:	f002 ffb4 	bl	80069b6 <TimerGetElapsedTime>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d8ea      	bhi.n	8003a2c <SX1276IsChannelFree+0x60>
        }
    }
    SX1276SetSleep( );
 8003a56:	f000 fcfd 	bl	8004454 <SX1276SetSleep>
    return status;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8003a6e:	2001      	movs	r0, #1
 8003a70:	f001 f80e 	bl	8004a90 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003a74:	21ff      	movs	r1, #255	; 0xff
 8003a76:	2011      	movs	r0, #17
 8003a78:	f001 f862 	bl	8004b40 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003a7c:	2005      	movs	r0, #5
 8003a7e:	f000 ffdb 	bl	8004a38 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8003a82:	2300      	movs	r3, #0
 8003a84:	71fb      	strb	r3, [r7, #7]
 8003a86:	e011      	b.n	8003aac <SX1276Random+0x48>
    {
        DelayMs( 1 );
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f001 ffc1 	bl	8005a10 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8003a8e:	202c      	movs	r0, #44	; 0x2c
 8003a90:	f001 f866 	bl	8004b60 <SX1276Read>
 8003a94:	4603      	mov	r3, r0
 8003a96:	f003 0201 	and.w	r2, r3, #1
 8003a9a:	79fb      	ldrb	r3, [r7, #7]
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	71fb      	strb	r3, [r7, #7]
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	2b1f      	cmp	r3, #31
 8003ab0:	d9ea      	bls.n	8003a88 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 8003ab2:	f000 fccf 	bl	8004454 <SX1276SetSleep>

    return rnd;
 8003ab6:	683b      	ldr	r3, [r7, #0]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3708      	adds	r7, #8
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8003ac0:	b590      	push	{r4, r7, lr}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8003ac6:	2009      	movs	r0, #9
 8003ac8:	f001 f84a 	bl	8004b60 <SX1276Read>
 8003acc:	4603      	mov	r3, r0
 8003ace:	71fb      	strb	r3, [r7, #7]

    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003ad0:	2006      	movs	r0, #6
 8003ad2:	f001 f845 	bl	8004b60 <SX1276Read>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	041c      	lsls	r4, r3, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8003ada:	2007      	movs	r0, #7
 8003adc:	f001 f840 	bl	8004b60 <SX1276Read>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	021b      	lsls	r3, r3, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003ae4:	431c      	orrs	r4, r3
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8003ae6:	2008      	movs	r0, #8
 8003ae8:	f001 f83a 	bl	8004b60 <SX1276Read>
 8003aec:	4603      	mov	r3, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003aee:	4323      	orrs	r3, r4
 8003af0:	4618      	mov	r0, r3
 8003af2:	f001 f923 	bl	8004d3c <SX1276ConvertPllStepToFreqInHz>
 8003af6:	6038      	str	r0, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8003af8:	2100      	movs	r1, #0
 8003afa:	2009      	movs	r0, #9
 8003afc:	f001 f820 	bl	8004b40 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8003b00:	203b      	movs	r0, #59	; 0x3b
 8003b02:	f001 f82d 	bl	8004b60 <SX1276Read>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	203b      	movs	r0, #59	; 0x3b
 8003b12:	f001 f815 	bl	8004b40 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003b16:	bf00      	nop
 8003b18:	203b      	movs	r0, #59	; 0x3b
 8003b1a:	f001 f821 	bl	8004b60 <SX1276Read>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f003 0320 	and.w	r3, r3, #32
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	d0f7      	beq.n	8003b18 <RxChainCalibration+0x58>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8003b28:	4811      	ldr	r0, [pc, #68]	; (8003b70 <RxChainCalibration+0xb0>)
 8003b2a:	f7ff ff29 	bl	8003980 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8003b2e:	203b      	movs	r0, #59	; 0x3b
 8003b30:	f001 f816 	bl	8004b60 <SX1276Read>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	203b      	movs	r0, #59	; 0x3b
 8003b40:	f000 fffe 	bl	8004b40 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003b44:	bf00      	nop
 8003b46:	203b      	movs	r0, #59	; 0x3b
 8003b48:	f001 f80a 	bl	8004b60 <SX1276Read>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b20      	cmp	r3, #32
 8003b54:	d0f7      	beq.n	8003b46 <RxChainCalibration+0x86>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	2009      	movs	r0, #9
 8003b5c:	f000 fff0 	bl	8004b40 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8003b60:	6838      	ldr	r0, [r7, #0]
 8003b62:	f7ff ff0d 	bl	8003980 <SX1276SetChannel>
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd90      	pop	{r4, r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	33bca100 	.word	0x33bca100

08003b74 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b086      	sub	sp, #24
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	4603      	mov	r3, r0
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	4613      	mov	r3, r2
 8003b86:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	f000 ff80 	bl	8004a90 <SX1276SetModem>

    switch( modem )
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <SX1276SetRxConfig+0x2a>
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	f000 8099 	beq.w	8003cce <SX1276SetRxConfig+0x15a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8003b9c:	e1c3      	b.n	8003f26 <SX1276SetRxConfig+0x3b2>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003b9e:	4a78      	ldr	r2, [pc, #480]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8003ba4:	4a76      	ldr	r2, [pc, #472]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8003baa:	4a75      	ldr	r2, [pc, #468]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	6593      	str	r3, [r2, #88]	; 0x58
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003bb0:	4a73      	ldr	r2, [pc, #460]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003bb2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003bb6:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8003bba:	4a71      	ldr	r2, [pc, #452]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003bbc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003bc0:	f882 3063 	strb.w	r3, [r2, #99]	; 0x63
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003bc4:	4a6e      	ldr	r2, [pc, #440]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003bc6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003bca:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003bce:	4a6c      	ldr	r2, [pc, #432]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003bd0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003bd4:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8003bd8:	4a69      	ldr	r2, [pc, #420]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003bda:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003bde:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003be2:	4a67      	ldr	r2, [pc, #412]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003be6:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8003bea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003bec:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003bf0:	fb02 f203 	mul.w	r2, r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfa:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003bfc:	66d3      	str	r3, [r2, #108]	; 0x6c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8003bfe:	4a61      	ldr	r2, [pc, #388]	; (8003d84 <SX1276SetRxConfig+0x210>)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	617b      	str	r3, [r7, #20]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	4619      	mov	r1, r3
 8003c10:	2002      	movs	r0, #2
 8003c12:	f000 ff95 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	2003      	movs	r0, #3
 8003c1e:	f000 ff8f 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8003c22:	68b8      	ldr	r0, [r7, #8]
 8003c24:	f001 f8ce 	bl	8004dc4 <GetFskBandwidthRegValue>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	2012      	movs	r0, #18
 8003c2e:	f000 ff87 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8003c32:	6a38      	ldr	r0, [r7, #32]
 8003c34:	f001 f8c6 	bl	8004dc4 <GetFskBandwidthRegValue>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	2013      	movs	r0, #19
 8003c3e:	f000 ff7f 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c44:	0a1b      	lsrs	r3, r3, #8
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	2025      	movs	r0, #37	; 0x25
 8003c4e:	f000 ff77 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003c52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	4619      	mov	r1, r3
 8003c58:	2026      	movs	r0, #38	; 0x26
 8003c5a:	f000 ff71 	bl	8004b40 <SX1276Write>
            if( fixLen == 1 )
 8003c5e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <SX1276SetRxConfig+0x100>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8003c66:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	2032      	movs	r0, #50	; 0x32
 8003c6e:	f000 ff67 	bl	8004b40 <SX1276Write>
 8003c72:	e003      	b.n	8003c7c <SX1276SetRxConfig+0x108>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8003c74:	21ff      	movs	r1, #255	; 0xff
 8003c76:	2032      	movs	r0, #50	; 0x32
 8003c78:	f000 ff62 	bl	8004b40 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8003c7c:	2030      	movs	r0, #48	; 0x30
 8003c7e:	f000 ff6f 	bl	8004b60 <SX1276Read>
 8003c82:	4603      	mov	r3, r0
 8003c84:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8003c86:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003c8a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003c8c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003c90:	2a00      	cmp	r2, #0
 8003c92:	d001      	beq.n	8003c98 <SX1276SetRxConfig+0x124>
 8003c94:	2200      	movs	r2, #0
 8003c96:	e001      	b.n	8003c9c <SX1276SetRxConfig+0x128>
 8003c98:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8003ca0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003ca4:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003ca6:	b25b      	sxtb	r3, r3
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	4619      	mov	r1, r3
 8003cb0:	2030      	movs	r0, #48	; 0x30
 8003cb2:	f000 ff45 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003cb6:	2031      	movs	r0, #49	; 0x31
 8003cb8:	f000 ff52 	bl	8004b60 <SX1276Read>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	2031      	movs	r0, #49	; 0x31
 8003cc8:	f000 ff3a 	bl	8004b40 <SX1276Write>
        break;
 8003ccc:	e12b      	b.n	8003f26 <SX1276SetRxConfig+0x3b2>
            if( bandwidth > 2 )
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d900      	bls.n	8003cd6 <SX1276SetRxConfig+0x162>
                while( 1 );
 8003cd4:	e7fe      	b.n	8003cd4 <SX1276SetRxConfig+0x160>
            bandwidth += 7;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	3307      	adds	r3, #7
 8003cda:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8003ce4:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8003cec:	4a24      	ldr	r2, [pc, #144]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003cee:	7bbb      	ldrb	r3, [r7, #14]
 8003cf0:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003cf4:	4a22      	ldr	r2, [pc, #136]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cf8:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003cfc:	4a20      	ldr	r2, [pc, #128]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003cfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003d02:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8003d06:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003d08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003d0c:	f882 3091 	strb.w	r3, [r2, #145]	; 0x91
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003d10:	4a1b      	ldr	r2, [pc, #108]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003d12:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d16:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8003d1a:	4a19      	ldr	r2, [pc, #100]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003d1c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003d20:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003d24:	4a16      	ldr	r2, [pc, #88]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003d26:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003d2a:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8003d2e:	4a14      	ldr	r2, [pc, #80]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003d30:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003d34:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003d38:	4a11      	ldr	r2, [pc, #68]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003d3a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003d3e:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
            if( datarate > 12 )
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	d902      	bls.n	8003d4e <SX1276SetRxConfig+0x1da>
                datarate = 12;
 8003d48:	230c      	movs	r3, #12
 8003d4a:	607b      	str	r3, [r7, #4]
 8003d4c:	e004      	b.n	8003d58 <SX1276SetRxConfig+0x1e4>
            else if( datarate < 6 )
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b05      	cmp	r3, #5
 8003d52:	d801      	bhi.n	8003d58 <SX1276SetRxConfig+0x1e4>
                datarate = 6;
 8003d54:	2306      	movs	r3, #6
 8003d56:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2b07      	cmp	r3, #7
 8003d5c:	d105      	bne.n	8003d6a <SX1276SetRxConfig+0x1f6>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b0b      	cmp	r3, #11
 8003d62:	d008      	beq.n	8003d76 <SX1276SetRxConfig+0x202>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2b0c      	cmp	r3, #12
 8003d68:	d005      	beq.n	8003d76 <SX1276SetRxConfig+0x202>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d10b      	bne.n	8003d88 <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2b0c      	cmp	r3, #12
 8003d74:	d108      	bne.n	8003d88 <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003d76:	4b02      	ldr	r3, [pc, #8]	; (8003d80 <SX1276SetRxConfig+0x20c>)
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8003d7e:	e007      	b.n	8003d90 <SX1276SetRxConfig+0x21c>
 8003d80:	200002f0 	.word	0x200002f0
 8003d84:	01e84800 	.word	0x01e84800
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8003d88:	4b69      	ldr	r3, [pc, #420]	; (8003f30 <SX1276SetRxConfig+0x3bc>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8003d90:	201d      	movs	r0, #29
 8003d92:	f000 fee5 	bl	8004b60 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	7bbb      	ldrb	r3, [r7, #14]
 8003da0:	005b      	lsls	r3, r3, #1
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	4313      	orrs	r3, r2
 8003da6:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003da8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8003dac:	4313      	orrs	r3, r2
 8003dae:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8003db0:	4619      	mov	r1, r3
 8003db2:	201d      	movs	r0, #29
 8003db4:	f000 fec4 	bl	8004b40 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8003db8:	201e      	movs	r0, #30
 8003dba:	f000 fed1 	bl	8004b60 <SX1276Read>
 8003dbe:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8003dd2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8003dde:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003de0:	0a1b      	lsrs	r3, r3, #8
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	f003 0303 	and.w	r3, r3, #3
 8003dea:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8003dec:	4313      	orrs	r3, r2
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	4619      	mov	r1, r3
 8003df2:	201e      	movs	r0, #30
 8003df4:	f000 fea4 	bl	8004b40 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8003df8:	2026      	movs	r0, #38	; 0x26
 8003dfa:	f000 feb1 	bl	8004b60 <SX1276Read>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	b25b      	sxtb	r3, r3
 8003e02:	f023 0308 	bic.w	r3, r3, #8
 8003e06:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8003e08:	4b49      	ldr	r3, [pc, #292]	; (8003f30 <SX1276SetRxConfig+0x3bc>)
 8003e0a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003e0e:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8003e10:	b25b      	sxtb	r3, r3
 8003e12:	4313      	orrs	r3, r2
 8003e14:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4619      	mov	r1, r3
 8003e1a:	2026      	movs	r0, #38	; 0x26
 8003e1c:	f000 fe90 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 8003e20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	4619      	mov	r1, r3
 8003e26:	201f      	movs	r0, #31
 8003e28:	f000 fe8a 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003e2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	4619      	mov	r1, r3
 8003e36:	2020      	movs	r0, #32
 8003e38:	f000 fe82 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003e3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	4619      	mov	r1, r3
 8003e42:	2021      	movs	r0, #33	; 0x21
 8003e44:	f000 fe7c 	bl	8004b40 <SX1276Write>
            if( fixLen == 1 )
 8003e48:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 8003e50:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003e54:	4619      	mov	r1, r3
 8003e56:	2022      	movs	r0, #34	; 0x22
 8003e58:	f000 fe72 	bl	8004b40 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8003e5c:	4b34      	ldr	r3, [pc, #208]	; (8003f30 <SX1276SetRxConfig+0x3bc>)
 8003e5e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d011      	beq.n	8003e8a <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8003e66:	2044      	movs	r0, #68	; 0x44
 8003e68:	f000 fe7a 	bl	8004b60 <SX1276Read>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	4619      	mov	r1, r3
 8003e76:	2044      	movs	r0, #68	; 0x44
 8003e78:	f000 fe62 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 8003e7c:	4b2c      	ldr	r3, [pc, #176]	; (8003f30 <SX1276SetRxConfig+0x3bc>)
 8003e7e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8003e82:	4619      	mov	r1, r3
 8003e84:	2024      	movs	r0, #36	; 0x24
 8003e86:	f000 fe5b 	bl	8004b40 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	2b09      	cmp	r3, #9
 8003e8e:	d10d      	bne.n	8003eac <SX1276SetRxConfig+0x338>
 8003e90:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <SX1276SetRxConfig+0x3bc>)
 8003e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e94:	4a27      	ldr	r2, [pc, #156]	; (8003f34 <SX1276SetRxConfig+0x3c0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d908      	bls.n	8003eac <SX1276SetRxConfig+0x338>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8003e9a:	2102      	movs	r1, #2
 8003e9c:	2036      	movs	r0, #54	; 0x36
 8003e9e:	f000 fe4f 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8003ea2:	2164      	movs	r1, #100	; 0x64
 8003ea4:	203a      	movs	r0, #58	; 0x3a
 8003ea6:	f000 fe4b 	bl	8004b40 <SX1276Write>
 8003eaa:	e00f      	b.n	8003ecc <SX1276SetRxConfig+0x358>
            else if( bandwidth == 9 )
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2b09      	cmp	r3, #9
 8003eb0:	d108      	bne.n	8003ec4 <SX1276SetRxConfig+0x350>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8003eb2:	2102      	movs	r1, #2
 8003eb4:	2036      	movs	r0, #54	; 0x36
 8003eb6:	f000 fe43 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 8003eba:	217f      	movs	r1, #127	; 0x7f
 8003ebc:	203a      	movs	r0, #58	; 0x3a
 8003ebe:	f000 fe3f 	bl	8004b40 <SX1276Write>
 8003ec2:	e003      	b.n	8003ecc <SX1276SetRxConfig+0x358>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8003ec4:	2103      	movs	r1, #3
 8003ec6:	2036      	movs	r0, #54	; 0x36
 8003ec8:	f000 fe3a 	bl	8004b40 <SX1276Write>
            if( datarate == 6 )
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d114      	bne.n	8003efc <SX1276SetRxConfig+0x388>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003ed2:	2031      	movs	r0, #49	; 0x31
 8003ed4:	f000 fe44 	bl	8004b60 <SX1276Read>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	b25b      	sxtb	r3, r3
 8003edc:	f023 0307 	bic.w	r3, r3, #7
 8003ee0:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003ee2:	f043 0305 	orr.w	r3, r3, #5
 8003ee6:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	4619      	mov	r1, r3
 8003eec:	2031      	movs	r0, #49	; 0x31
 8003eee:	f000 fe27 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003ef2:	210c      	movs	r1, #12
 8003ef4:	2037      	movs	r0, #55	; 0x37
 8003ef6:	f000 fe23 	bl	8004b40 <SX1276Write>
        break;
 8003efa:	e013      	b.n	8003f24 <SX1276SetRxConfig+0x3b0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8003efc:	2031      	movs	r0, #49	; 0x31
 8003efe:	f000 fe2f 	bl	8004b60 <SX1276Read>
 8003f02:	4603      	mov	r3, r0
 8003f04:	b25b      	sxtb	r3, r3
 8003f06:	f023 0307 	bic.w	r3, r3, #7
 8003f0a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8003f0c:	f043 0303 	orr.w	r3, r3, #3
 8003f10:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	4619      	mov	r1, r3
 8003f16:	2031      	movs	r0, #49	; 0x31
 8003f18:	f000 fe12 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8003f1c:	210a      	movs	r1, #10
 8003f1e:	2037      	movs	r0, #55	; 0x37
 8003f20:	f000 fe0e 	bl	8004b40 <SX1276Write>
        break;
 8003f24:	bf00      	nop
}
 8003f26:	bf00      	nop
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	200002f0 	.word	0x200002f0
 8003f34:	1f4add40 	.word	0x1f4add40

08003f38 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b086      	sub	sp, #24
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60ba      	str	r2, [r7, #8]
 8003f40:	607b      	str	r3, [r7, #4]
 8003f42:	4603      	mov	r3, r0
 8003f44:	73fb      	strb	r3, [r7, #15]
 8003f46:	460b      	mov	r3, r1
 8003f48:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8003f4a:	7bfb      	ldrb	r3, [r7, #15]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fd9f 	bl	8004a90 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 8003f52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f002 f9d4 	bl	8006304 <SX1276SetRfTxPower>

    switch( modem )
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <SX1276SetTxConfig+0x30>
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d07d      	beq.n	8004062 <SX1276SetTxConfig+0x12a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8003f66:	e16a      	b.n	800423e <SX1276SetTxConfig+0x306>
            SX1276.Settings.Fsk.Power = power;
 8003f68:	4ab7      	ldr	r2, [pc, #732]	; (8004248 <SX1276SetTxConfig+0x310>)
 8003f6a:	7bbb      	ldrb	r3, [r7, #14]
 8003f6c:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            SX1276.Settings.Fsk.Fdev = fdev;
 8003f70:	4ab5      	ldr	r2, [pc, #724]	; (8004248 <SX1276SetTxConfig+0x310>)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	6513      	str	r3, [r2, #80]	; 0x50
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003f76:	4ab4      	ldr	r2, [pc, #720]	; (8004248 <SX1276SetTxConfig+0x310>)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8003f7c:	4ab2      	ldr	r2, [pc, #712]	; (8004248 <SX1276SetTxConfig+0x310>)
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003f82:	4ab1      	ldr	r2, [pc, #708]	; (8004248 <SX1276SetTxConfig+0x310>)
 8003f84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003f86:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003f8a:	4aaf      	ldr	r2, [pc, #700]	; (8004248 <SX1276SetTxConfig+0x310>)
 8003f8c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f90:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003f94:	4aac      	ldr	r2, [pc, #688]	; (8004248 <SX1276SetTxConfig+0x310>)
 8003f96:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f9a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003f9e:	4aaa      	ldr	r2, [pc, #680]	; (8004248 <SX1276SetTxConfig+0x310>)
 8003fa0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003fa4:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8003fa8:	4aa7      	ldr	r2, [pc, #668]	; (8004248 <SX1276SetTxConfig+0x310>)
 8003faa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fac:	6693      	str	r3, [r2, #104]	; 0x68
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 8003fae:	68b8      	ldr	r0, [r7, #8]
 8003fb0:	f000 fee2 	bl	8004d78 <SX1276ConvertFreqInHzToPllStep>
 8003fb4:	6178      	str	r0, [r7, #20]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	0a1b      	lsrs	r3, r3, #8
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	2004      	movs	r0, #4
 8003fc0:	f000 fdbe 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	4619      	mov	r1, r3
 8003fca:	2005      	movs	r0, #5
 8003fcc:	f000 fdb8 	bl	8004b40 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8003fd0:	4a9e      	ldr	r2, [pc, #632]	; (800424c <SX1276SetTxConfig+0x314>)
 8003fd2:	6a3b      	ldr	r3, [r7, #32]
 8003fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd8:	613b      	str	r3, [r7, #16]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	0a1b      	lsrs	r3, r3, #8
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	f000 fdac 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	4619      	mov	r1, r3
 8003fee:	2003      	movs	r0, #3
 8003ff0:	f000 fda6 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8003ff4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ff6:	0a1b      	lsrs	r3, r3, #8
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	2025      	movs	r0, #37	; 0x25
 8004000:	f000 fd9e 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8004004:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004006:	b2db      	uxtb	r3, r3
 8004008:	4619      	mov	r1, r3
 800400a:	2026      	movs	r0, #38	; 0x26
 800400c:	f000 fd98 	bl	8004b40 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004010:	2030      	movs	r0, #48	; 0x30
 8004012:	f000 fda5 	bl	8004b60 <SX1276Read>
 8004016:	4603      	mov	r3, r0
 8004018:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800401a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800401e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8004020:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8004024:	2a00      	cmp	r2, #0
 8004026:	d001      	beq.n	800402c <SX1276SetTxConfig+0xf4>
 8004028:	2200      	movs	r2, #0
 800402a:	e001      	b.n	8004030 <SX1276SetTxConfig+0xf8>
 800402c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8004030:	4313      	orrs	r3, r2
 8004032:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8004034:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004038:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800403a:	b25b      	sxtb	r3, r3
 800403c:	4313      	orrs	r3, r2
 800403e:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8004040:	b2db      	uxtb	r3, r3
 8004042:	4619      	mov	r1, r3
 8004044:	2030      	movs	r0, #48	; 0x30
 8004046:	f000 fd7b 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800404a:	2031      	movs	r0, #49	; 0x31
 800404c:	f000 fd88 	bl	8004b60 <SX1276Read>
 8004050:	4603      	mov	r3, r0
 8004052:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004056:	b2db      	uxtb	r3, r3
 8004058:	4619      	mov	r1, r3
 800405a:	2031      	movs	r0, #49	; 0x31
 800405c:	f000 fd70 	bl	8004b40 <SX1276Write>
        break;
 8004060:	e0ed      	b.n	800423e <SX1276SetTxConfig+0x306>
            SX1276.Settings.LoRa.Power = power;
 8004062:	4a79      	ldr	r2, [pc, #484]	; (8004248 <SX1276SetTxConfig+0x310>)
 8004064:	7bbb      	ldrb	r3, [r7, #14]
 8004066:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
            if( bandwidth > 2 )
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d900      	bls.n	8004072 <SX1276SetTxConfig+0x13a>
                while( 1 );
 8004070:	e7fe      	b.n	8004070 <SX1276SetTxConfig+0x138>
            bandwidth += 7;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3307      	adds	r3, #7
 8004076:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8004078:	4a73      	ldr	r2, [pc, #460]	; (8004248 <SX1276SetTxConfig+0x310>)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8004080:	4a71      	ldr	r2, [pc, #452]	; (8004248 <SX1276SetTxConfig+0x310>)
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8004088:	4a6f      	ldr	r2, [pc, #444]	; (8004248 <SX1276SetTxConfig+0x310>)
 800408a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800408e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8004092:	4a6d      	ldr	r2, [pc, #436]	; (8004248 <SX1276SetTxConfig+0x310>)
 8004094:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004096:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 800409a:	4a6b      	ldr	r2, [pc, #428]	; (8004248 <SX1276SetTxConfig+0x310>)
 800409c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040a0:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 80040a4:	4a68      	ldr	r2, [pc, #416]	; (8004248 <SX1276SetTxConfig+0x310>)
 80040a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80040aa:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 80040ae:	4a66      	ldr	r2, [pc, #408]	; (8004248 <SX1276SetTxConfig+0x310>)
 80040b0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80040b4:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.CrcOn = crcOn;
 80040b8:	4a63      	ldr	r2, [pc, #396]	; (8004248 <SX1276SetTxConfig+0x310>)
 80040ba:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040be:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 80040c2:	4a61      	ldr	r2, [pc, #388]	; (8004248 <SX1276SetTxConfig+0x310>)
 80040c4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80040c8:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.TxTimeout = timeout;
 80040cc:	4a5e      	ldr	r2, [pc, #376]	; (8004248 <SX1276SetTxConfig+0x310>)
 80040ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
            if( datarate > 12 )
 80040d4:	6a3b      	ldr	r3, [r7, #32]
 80040d6:	2b0c      	cmp	r3, #12
 80040d8:	d902      	bls.n	80040e0 <SX1276SetTxConfig+0x1a8>
                datarate = 12;
 80040da:	230c      	movs	r3, #12
 80040dc:	623b      	str	r3, [r7, #32]
 80040de:	e004      	b.n	80040ea <SX1276SetTxConfig+0x1b2>
            else if( datarate < 6 )
 80040e0:	6a3b      	ldr	r3, [r7, #32]
 80040e2:	2b05      	cmp	r3, #5
 80040e4:	d801      	bhi.n	80040ea <SX1276SetTxConfig+0x1b2>
                datarate = 6;
 80040e6:	2306      	movs	r3, #6
 80040e8:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b07      	cmp	r3, #7
 80040ee:	d105      	bne.n	80040fc <SX1276SetTxConfig+0x1c4>
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	2b0b      	cmp	r3, #11
 80040f4:	d008      	beq.n	8004108 <SX1276SetTxConfig+0x1d0>
 80040f6:	6a3b      	ldr	r3, [r7, #32]
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d005      	beq.n	8004108 <SX1276SetTxConfig+0x1d0>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b08      	cmp	r3, #8
 8004100:	d107      	bne.n	8004112 <SX1276SetTxConfig+0x1da>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	d104      	bne.n	8004112 <SX1276SetTxConfig+0x1da>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8004108:	4b4f      	ldr	r3, [pc, #316]	; (8004248 <SX1276SetTxConfig+0x310>)
 800410a:	2201      	movs	r2, #1
 800410c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8004110:	e003      	b.n	800411a <SX1276SetTxConfig+0x1e2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004112:	4b4d      	ldr	r3, [pc, #308]	; (8004248 <SX1276SetTxConfig+0x310>)
 8004114:	2200      	movs	r2, #0
 8004116:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800411a:	4b4b      	ldr	r3, [pc, #300]	; (8004248 <SX1276SetTxConfig+0x310>)
 800411c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004120:	2b00      	cmp	r3, #0
 8004122:	d011      	beq.n	8004148 <SX1276SetTxConfig+0x210>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8004124:	2044      	movs	r0, #68	; 0x44
 8004126:	f000 fd1b 	bl	8004b60 <SX1276Read>
 800412a:	4603      	mov	r3, r0
 800412c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004130:	b2db      	uxtb	r3, r3
 8004132:	4619      	mov	r1, r3
 8004134:	2044      	movs	r0, #68	; 0x44
 8004136:	f000 fd03 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800413a:	4b43      	ldr	r3, [pc, #268]	; (8004248 <SX1276SetTxConfig+0x310>)
 800413c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004140:	4619      	mov	r1, r3
 8004142:	2024      	movs	r0, #36	; 0x24
 8004144:	f000 fcfc 	bl	8004b40 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004148:	201d      	movs	r0, #29
 800414a:	f000 fd09 	bl	8004b60 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	b2da      	uxtb	r2, r3
 8004156:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	b2db      	uxtb	r3, r3
 800415e:	4313      	orrs	r3, r2
 8004160:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004162:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004166:	4313      	orrs	r3, r2
 8004168:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800416a:	4619      	mov	r1, r3
 800416c:	201d      	movs	r0, #29
 800416e:	f000 fce7 	bl	8004b40 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8004172:	201e      	movs	r0, #30
 8004174:	f000 fcf4 	bl	8004b60 <SX1276Read>
 8004178:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 800417a:	f003 030b 	and.w	r3, r3, #11
 800417e:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	b2db      	uxtb	r3, r3
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8004188:	4313      	orrs	r3, r2
 800418a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800418c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004194:	4313      	orrs	r3, r2
 8004196:	b2db      	uxtb	r3, r3
 8004198:	4619      	mov	r1, r3
 800419a:	201e      	movs	r0, #30
 800419c:	f000 fcd0 	bl	8004b40 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 80041a0:	2026      	movs	r0, #38	; 0x26
 80041a2:	f000 fcdd 	bl	8004b60 <SX1276Read>
 80041a6:	4603      	mov	r3, r0
 80041a8:	b25b      	sxtb	r3, r3
 80041aa:	f023 0308 	bic.w	r3, r3, #8
 80041ae:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <SX1276SetTxConfig+0x310>)
 80041b2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80041b6:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 80041b8:	b25b      	sxtb	r3, r3
 80041ba:	4313      	orrs	r3, r2
 80041bc:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	4619      	mov	r1, r3
 80041c2:	2026      	movs	r0, #38	; 0x26
 80041c4:	f000 fcbc 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80041c8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	4619      	mov	r1, r3
 80041d2:	2020      	movs	r0, #32
 80041d4:	f000 fcb4 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 80041d8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	4619      	mov	r1, r3
 80041de:	2021      	movs	r0, #33	; 0x21
 80041e0:	f000 fcae 	bl	8004b40 <SX1276Write>
            if( datarate == 6 )
 80041e4:	6a3b      	ldr	r3, [r7, #32]
 80041e6:	2b06      	cmp	r3, #6
 80041e8:	d114      	bne.n	8004214 <SX1276SetTxConfig+0x2dc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 80041ea:	2031      	movs	r0, #49	; 0x31
 80041ec:	f000 fcb8 	bl	8004b60 <SX1276Read>
 80041f0:	4603      	mov	r3, r0
 80041f2:	b25b      	sxtb	r3, r3
 80041f4:	f023 0307 	bic.w	r3, r3, #7
 80041f8:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 80041fa:	f043 0305 	orr.w	r3, r3, #5
 80041fe:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004200:	b2db      	uxtb	r3, r3
 8004202:	4619      	mov	r1, r3
 8004204:	2031      	movs	r0, #49	; 0x31
 8004206:	f000 fc9b 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800420a:	210c      	movs	r1, #12
 800420c:	2037      	movs	r0, #55	; 0x37
 800420e:	f000 fc97 	bl	8004b40 <SX1276Write>
        break;
 8004212:	e013      	b.n	800423c <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004214:	2031      	movs	r0, #49	; 0x31
 8004216:	f000 fca3 	bl	8004b60 <SX1276Read>
 800421a:	4603      	mov	r3, r0
 800421c:	b25b      	sxtb	r3, r3
 800421e:	f023 0307 	bic.w	r3, r3, #7
 8004222:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004224:	f043 0303 	orr.w	r3, r3, #3
 8004228:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800422a:	b2db      	uxtb	r3, r3
 800422c:	4619      	mov	r1, r3
 800422e:	2031      	movs	r0, #49	; 0x31
 8004230:	f000 fc86 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004234:	210a      	movs	r1, #10
 8004236:	2037      	movs	r0, #55	; 0x37
 8004238:	f000 fc82 	bl	8004b40 <SX1276Write>
        break;
 800423c:	bf00      	nop
}
 800423e:	bf00      	nop
 8004240:	3718      	adds	r7, #24
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200002f0 	.word	0x200002f0
 800424c:	01e84800 	.word	0x01e84800

08004250 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af04      	add	r7, sp, #16
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	461a      	mov	r2, r3
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]
 8004260:	4613      	mov	r3, r2
 8004262:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8004268:	2301      	movs	r3, #1
 800426a:	613b      	str	r3, [r7, #16]

    switch( modem )
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <SX1276GetTimeOnAir+0x28>
 8004272:	2b01      	cmp	r3, #1
 8004274:	d012      	beq.n	800429c <SX1276GetTimeOnAir+0x4c>
 8004276:	e02c      	b.n	80042d2 <SX1276GetTimeOnAir+0x82>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 8004278:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800427c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004280:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004284:	8c38      	ldrh	r0, [r7, #32]
 8004286:	f000 fdef 	bl	8004e68 <SX1276GetGfskTimeOnAirNumerator>
 800428a:	4603      	mov	r3, r0
 800428c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004290:	fb02 f303 	mul.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	613b      	str	r3, [r7, #16]
        }
        break;
 800429a:	e01a      	b.n	80042d2 <SX1276GetTimeOnAir+0x82>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800429c:	8c39      	ldrh	r1, [r7, #32]
 800429e:	7bba      	ldrb	r2, [r7, #14]
 80042a0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80042a4:	9302      	str	r3, [sp, #8]
 80042a6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	460b      	mov	r3, r1
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	68b8      	ldr	r0, [r7, #8]
 80042b8:	f000 fe05 	bl	8004ec6 <SX1276GetLoRaTimeOnAirNumerator>
 80042bc:	4603      	mov	r3, r0
 80042be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80042c2:	fb02 f303 	mul.w	r3, r2, r3
 80042c6:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 80042c8:	68b8      	ldr	r0, [r7, #8]
 80042ca:	f000 fda5 	bl	8004e18 <SX1276GetLoRaBandwidthInHz>
 80042ce:	6138      	str	r0, [r7, #16]
        }
        break;
 80042d0:	bf00      	nop
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 80042d2:	697a      	ldr	r2, [r7, #20]
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	4413      	add	r3, r2
 80042d8:	1e5a      	subs	r2, r3, #1
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3718      	adds	r7, #24
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	460b      	mov	r3, r1
 80042f2:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 80042f4:	2300      	movs	r3, #0
 80042f6:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 80042f8:	4b54      	ldr	r3, [pc, #336]	; (800444c <SX1276Send+0x164>)
 80042fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <SX1276Send+0x20>
 8004302:	2b01      	cmp	r3, #1
 8004304:	d049      	beq.n	800439a <SX1276Send+0xb2>
 8004306:	e099      	b.n	800443c <SX1276Send+0x154>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004308:	4b50      	ldr	r3, [pc, #320]	; (800444c <SX1276Send+0x164>)
 800430a:	2200      	movs	r2, #0
 800430c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = size;
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	b29a      	uxth	r2, r3
 8004314:	4b4d      	ldr	r3, [pc, #308]	; (800444c <SX1276Send+0x164>)
 8004316:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

            if( SX1276.Settings.Fsk.FixLen == false )
 800431a:	4b4c      	ldr	r3, [pc, #304]	; (800444c <SX1276Send+0x164>)
 800431c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004320:	f083 0301 	eor.w	r3, r3, #1
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d005      	beq.n	8004336 <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 800432a:	1cfb      	adds	r3, r7, #3
 800432c:	2101      	movs	r1, #1
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fc90 	bl	8004c54 <SX1276WriteFifo>
 8004334:	e004      	b.n	8004340 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 8004336:	78fb      	ldrb	r3, [r7, #3]
 8004338:	4619      	mov	r1, r3
 800433a:	2032      	movs	r0, #50	; 0x32
 800433c:	f000 fc00 	bl	8004b40 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8004340:	78fb      	ldrb	r3, [r7, #3]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d007      	beq.n	8004356 <SX1276Send+0x6e>
 8004346:	78fb      	ldrb	r3, [r7, #3]
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d804      	bhi.n	8004356 <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800434c:	78fa      	ldrb	r2, [r7, #3]
 800434e:	4b3f      	ldr	r3, [pc, #252]	; (800444c <SX1276Send+0x164>)
 8004350:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 8004354:	e00a      	b.n	800436c <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	b29b      	uxth	r3, r3
 800435a:	461a      	mov	r2, r3
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	483c      	ldr	r0, [pc, #240]	; (8004450 <SX1276Send+0x168>)
 8004360:	f002 fb68 	bl	8006a34 <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 8004364:	4b39      	ldr	r3, [pc, #228]	; (800444c <SX1276Send+0x164>)
 8004366:	2220      	movs	r2, #32
 8004368:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 800436c:	4b37      	ldr	r3, [pc, #220]	; (800444c <SX1276Send+0x164>)
 800436e:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f000 fc6d 	bl	8004c54 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800437a:	4b34      	ldr	r3, [pc, #208]	; (800444c <SX1276Send+0x164>)
 800437c:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8004380:	4b32      	ldr	r3, [pc, #200]	; (800444c <SX1276Send+0x164>)
 8004382:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8004386:	b29b      	uxth	r3, r3
 8004388:	4413      	add	r3, r2
 800438a:	b29a      	uxth	r2, r3
 800438c:	4b2f      	ldr	r3, [pc, #188]	; (800444c <SX1276Send+0x164>)
 800438e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8004392:	4b2e      	ldr	r3, [pc, #184]	; (800444c <SX1276Send+0x164>)
 8004394:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004396:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004398:	e050      	b.n	800443c <SX1276Send+0x154>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800439a:	4b2c      	ldr	r3, [pc, #176]	; (800444c <SX1276Send+0x164>)
 800439c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00f      	beq.n	80043c4 <SX1276Send+0xdc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 80043a4:	2033      	movs	r0, #51	; 0x33
 80043a6:	f000 fbdb 	bl	8004b60 <SX1276Read>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	2033      	movs	r0, #51	; 0x33
 80043b6:	f000 fbc3 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 80043ba:	2119      	movs	r1, #25
 80043bc:	203b      	movs	r0, #59	; 0x3b
 80043be:	f000 fbbf 	bl	8004b40 <SX1276Write>
 80043c2:	e013      	b.n	80043ec <SX1276Send+0x104>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 80043c4:	2033      	movs	r0, #51	; 0x33
 80043c6:	f000 fbcb 	bl	8004b60 <SX1276Read>
 80043ca:	4603      	mov	r3, r0
 80043cc:	b25b      	sxtb	r3, r3
 80043ce:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80043d2:	b25b      	sxtb	r3, r3
 80043d4:	f043 0301 	orr.w	r3, r3, #1
 80043d8:	b25b      	sxtb	r3, r3
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	4619      	mov	r1, r3
 80043de:	2033      	movs	r0, #51	; 0x33
 80043e0:	f000 fbae 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80043e4:	211d      	movs	r1, #29
 80043e6:	203b      	movs	r0, #59	; 0x3b
 80043e8:	f000 fbaa 	bl	8004b40 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 80043ec:	78fa      	ldrb	r2, [r7, #3]
 80043ee:	4b17      	ldr	r3, [pc, #92]	; (800444c <SX1276Send+0x164>)
 80043f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 80043f4:	78fb      	ldrb	r3, [r7, #3]
 80043f6:	4619      	mov	r1, r3
 80043f8:	2022      	movs	r0, #34	; 0x22
 80043fa:	f000 fba1 	bl	8004b40 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 80043fe:	2100      	movs	r1, #0
 8004400:	200e      	movs	r0, #14
 8004402:	f000 fb9d 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004406:	2100      	movs	r1, #0
 8004408:	200d      	movs	r0, #13
 800440a:	f000 fb99 	bl	8004b40 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800440e:	2001      	movs	r0, #1
 8004410:	f000 fba6 	bl	8004b60 <SX1276Read>
 8004414:	4603      	mov	r3, r0
 8004416:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <SX1276Send+0x140>
            {
                SX1276SetStby( );
 800441e:	f000 f839 	bl	8004494 <SX1276SetStby>
                DelayMs( 1 );
 8004422:	2001      	movs	r0, #1
 8004424:	f001 faf4 	bl	8005a10 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 8004428:	78fb      	ldrb	r3, [r7, #3]
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fc11 	bl	8004c54 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <SX1276Send+0x164>)
 8004434:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004438:	60fb      	str	r3, [r7, #12]
        }
        break;
 800443a:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f9cb 	bl	80047d8 <SX1276SetTx>
}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200002f0 	.word	0x200002f0
 8004450:	20000048 	.word	0x20000048

08004454 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8004458:	480a      	ldr	r0, [pc, #40]	; (8004484 <SX1276SetSleep+0x30>)
 800445a:	f002 f9e7 	bl	800682c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800445e:	480a      	ldr	r0, [pc, #40]	; (8004488 <SX1276SetSleep+0x34>)
 8004460:	f002 f9e4 	bl	800682c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8004464:	4809      	ldr	r0, [pc, #36]	; (800448c <SX1276SetSleep+0x38>)
 8004466:	f002 f9e1 	bl	800682c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800446a:	2000      	movs	r0, #0
 800446c:	f000 fae4 	bl	8004a38 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    SX1276SetBoardTcxo( false );
 8004470:	2000      	movs	r0, #0
 8004472:	f001 ff15 	bl	80062a0 <SX1276SetBoardTcxo>

    SX1276.Settings.State = RF_IDLE;
 8004476:	4b06      	ldr	r3, [pc, #24]	; (8004490 <SX1276SetSleep+0x3c>)
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 800447e:	bf00      	nop
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000398 	.word	0x20000398
 8004488:	200002c0 	.word	0x200002c0
 800448c:	200002d8 	.word	0x200002d8
 8004490:	200002f0 	.word	0x200002f0

08004494 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8004498:	4808      	ldr	r0, [pc, #32]	; (80044bc <SX1276SetStby+0x28>)
 800449a:	f002 f9c7 	bl	800682c <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800449e:	4808      	ldr	r0, [pc, #32]	; (80044c0 <SX1276SetStby+0x2c>)
 80044a0:	f002 f9c4 	bl	800682c <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80044a4:	4807      	ldr	r0, [pc, #28]	; (80044c4 <SX1276SetStby+0x30>)
 80044a6:	f002 f9c1 	bl	800682c <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 80044aa:	2001      	movs	r0, #1
 80044ac:	f000 fac4 	bl	8004a38 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 80044b0:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <SX1276SetStby+0x34>)
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80044b8:	bf00      	nop
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000398 	.word	0x20000398
 80044c0:	200002c0 	.word	0x200002c0
 80044c4:	200002d8 	.word	0x200002d8
 80044c8:	200002f0 	.word	0x200002f0

080044cc <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 80044d4:	2300      	movs	r3, #0
 80044d6:	73fb      	strb	r3, [r7, #15]
    TimerStop( &TxTimeoutTimer );
 80044d8:	48ba      	ldr	r0, [pc, #744]	; (80047c4 <SX1276SetRx+0x2f8>)
 80044da:	f002 f9a7 	bl	800682c <TimerStop>

    switch( SX1276.Settings.Modem )
 80044de:	4bba      	ldr	r3, [pc, #744]	; (80047c8 <SX1276SetRx+0x2fc>)
 80044e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <SX1276SetRx+0x22>
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d03e      	beq.n	800456a <SX1276SetRx+0x9e>
 80044ec:	e12f      	b.n	800474e <SX1276SetRx+0x282>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 80044ee:	4bb6      	ldr	r3, [pc, #728]	; (80047c8 <SX1276SetRx+0x2fc>)
 80044f0:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80044f4:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80044f6:	2040      	movs	r0, #64	; 0x40
 80044f8:	f000 fb32 	bl	8004b60 <SX1276Read>
 80044fc:	4603      	mov	r3, r0
 80044fe:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8004506:	f043 030c 	orr.w	r3, r3, #12
 800450a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800450c:	b2db      	uxtb	r3, r3
 800450e:	4619      	mov	r1, r3
 8004510:	2040      	movs	r0, #64	; 0x40
 8004512:	f000 fb15 	bl	8004b40 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004516:	2041      	movs	r0, #65	; 0x41
 8004518:	f000 fb22 	bl	8004b60 <SX1276Read>
 800451c:	4603      	mov	r3, r0
 800451e:	f063 033e 	orn	r3, r3, #62	; 0x3e
 8004522:	b2db      	uxtb	r3, r3
 8004524:	4619      	mov	r1, r3
 8004526:	2041      	movs	r0, #65	; 0x41
 8004528:	f000 fb0a 	bl	8004b40 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800452c:	2035      	movs	r0, #53	; 0x35
 800452e:	f000 fb17 	bl	8004b60 <SX1276Read>
 8004532:	4603      	mov	r3, r0
 8004534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004538:	b2da      	uxtb	r2, r3
 800453a:	4ba3      	ldr	r3, [pc, #652]	; (80047c8 <SX1276SetRx+0x2fc>)
 800453c:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 8004540:	211e      	movs	r1, #30
 8004542:	200d      	movs	r0, #13
 8004544:	f000 fafc 	bl	8004b40 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004548:	4b9f      	ldr	r3, [pc, #636]	; (80047c8 <SX1276SetRx+0x2fc>)
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004550:	4b9d      	ldr	r3, [pc, #628]	; (80047c8 <SX1276SetRx+0x2fc>)
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004558:	4b9b      	ldr	r3, [pc, #620]	; (80047c8 <SX1276SetRx+0x2fc>)
 800455a:	2200      	movs	r2, #0
 800455c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8004560:	4b99      	ldr	r3, [pc, #612]	; (80047c8 <SX1276SetRx+0x2fc>)
 8004562:	2200      	movs	r2, #0
 8004564:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
        }
        break;
 8004568:	e0f1      	b.n	800474e <SX1276SetRx+0x282>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800456a:	4b97      	ldr	r3, [pc, #604]	; (80047c8 <SX1276SetRx+0x2fc>)
 800456c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004570:	2b00      	cmp	r3, #0
 8004572:	d00f      	beq.n	8004594 <SX1276SetRx+0xc8>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 8004574:	2033      	movs	r0, #51	; 0x33
 8004576:	f000 faf3 	bl	8004b60 <SX1276Read>
 800457a:	4603      	mov	r3, r0
 800457c:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8004580:	b2db      	uxtb	r3, r3
 8004582:	4619      	mov	r1, r3
 8004584:	2033      	movs	r0, #51	; 0x33
 8004586:	f000 fadb 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800458a:	2119      	movs	r1, #25
 800458c:	203b      	movs	r0, #59	; 0x3b
 800458e:	f000 fad7 	bl	8004b40 <SX1276Write>
 8004592:	e013      	b.n	80045bc <SX1276SetRx+0xf0>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004594:	2033      	movs	r0, #51	; 0x33
 8004596:	f000 fae3 	bl	8004b60 <SX1276Read>
 800459a:	4603      	mov	r3, r0
 800459c:	b25b      	sxtb	r3, r3
 800459e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80045a2:	b25b      	sxtb	r3, r3
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	b25b      	sxtb	r3, r3
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	4619      	mov	r1, r3
 80045ae:	2033      	movs	r0, #51	; 0x33
 80045b0:	f000 fac6 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80045b4:	211d      	movs	r1, #29
 80045b6:	203b      	movs	r0, #59	; 0x3b
 80045b8:	f000 fac2 	bl	8004b40 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 80045bc:	4b82      	ldr	r3, [pc, #520]	; (80047c8 <SX1276SetRx+0x2fc>)
 80045be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045c2:	2b08      	cmp	r3, #8
 80045c4:	f200 8087 	bhi.w	80046d6 <SX1276SetRx+0x20a>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 80045c8:	2031      	movs	r0, #49	; 0x31
 80045ca:	f000 fac9 	bl	8004b60 <SX1276Read>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	4619      	mov	r1, r3
 80045d8:	2031      	movs	r0, #49	; 0x31
 80045da:	f000 fab1 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 80045de:	2100      	movs	r1, #0
 80045e0:	2030      	movs	r0, #48	; 0x30
 80045e2:	f000 faad 	bl	8004b40 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 80045e6:	4b78      	ldr	r3, [pc, #480]	; (80047c8 <SX1276SetRx+0x2fc>)
 80045e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d87d      	bhi.n	80046ec <SX1276SetRx+0x220>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <SX1276SetRx+0x12c>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	08004637 	.word	0x08004637
 8004600:	08004651 	.word	0x08004651
 8004604:	0800466b 	.word	0x0800466b
 8004608:	08004685 	.word	0x08004685
 800460c:	0800469f 	.word	0x0800469f
 8004610:	080046b9 	.word	0x080046b9
 8004614:	080046c3 	.word	0x080046c3
 8004618:	080046cd 	.word	0x080046cd
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800461c:	2148      	movs	r1, #72	; 0x48
 800461e:	202f      	movs	r0, #47	; 0x2f
 8004620:	f000 fa8e 	bl	8004b40 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 8004624:	4b68      	ldr	r3, [pc, #416]	; (80047c8 <SX1276SetRx+0x2fc>)
 8004626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004628:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 800462c:	3302      	adds	r3, #2
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff f9a6 	bl	8003980 <SX1276SetChannel>
                    break;
 8004634:	e05a      	b.n	80046ec <SX1276SetRx+0x220>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004636:	2144      	movs	r1, #68	; 0x44
 8004638:	202f      	movs	r0, #47	; 0x2f
 800463a:	f000 fa81 	bl	8004b40 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800463e:	4b62      	ldr	r3, [pc, #392]	; (80047c8 <SX1276SetRx+0x2fc>)
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 8004646:	3334      	adds	r3, #52	; 0x34
 8004648:	4618      	mov	r0, r3
 800464a:	f7ff f999 	bl	8003980 <SX1276SetChannel>
                    break;
 800464e:	e04d      	b.n	80046ec <SX1276SetRx+0x220>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004650:	2144      	movs	r1, #68	; 0x44
 8004652:	202f      	movs	r0, #47	; 0x2f
 8004654:	f000 fa74 	bl	8004b40 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 8004658:	4b5b      	ldr	r3, [pc, #364]	; (80047c8 <SX1276SetRx+0x2fc>)
 800465a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800465c:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 8004660:	3304      	adds	r3, #4
 8004662:	4618      	mov	r0, r3
 8004664:	f7ff f98c 	bl	8003980 <SX1276SetChannel>
                    break;
 8004668:	e040      	b.n	80046ec <SX1276SetRx+0x220>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800466a:	2144      	movs	r1, #68	; 0x44
 800466c:	202f      	movs	r0, #47	; 0x2f
 800466e:	f000 fa67 	bl	8004b40 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 8004672:	4b55      	ldr	r3, [pc, #340]	; (80047c8 <SX1276SetRx+0x2fc>)
 8004674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004676:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 800467a:	335e      	adds	r3, #94	; 0x5e
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff f97f 	bl	8003980 <SX1276SetChannel>
                    break;
 8004682:	e033      	b.n	80046ec <SX1276SetRx+0x220>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004684:	2144      	movs	r1, #68	; 0x44
 8004686:	202f      	movs	r0, #47	; 0x2f
 8004688:	f000 fa5a 	bl	8004b40 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800468c:	4b4e      	ldr	r3, [pc, #312]	; (80047c8 <SX1276SetRx+0x2fc>)
 800468e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004690:	f503 43f4 	add.w	r3, r3, #31232	; 0x7a00
 8004694:	3312      	adds	r3, #18
 8004696:	4618      	mov	r0, r3
 8004698:	f7ff f972 	bl	8003980 <SX1276SetChannel>
                    break;
 800469c:	e026      	b.n	80046ec <SX1276SetRx+0x220>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800469e:	2144      	movs	r1, #68	; 0x44
 80046a0:	202f      	movs	r0, #47	; 0x2f
 80046a2:	f000 fa4d 	bl	8004b40 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 80046a6:	4b48      	ldr	r3, [pc, #288]	; (80047c8 <SX1276SetRx+0x2fc>)
 80046a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046aa:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 80046ae:	33c6      	adds	r3, #198	; 0xc6
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7ff f965 	bl	8003980 <SX1276SetChannel>
                    break;
 80046b6:	e019      	b.n	80046ec <SX1276SetRx+0x220>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80046b8:	2140      	movs	r1, #64	; 0x40
 80046ba:	202f      	movs	r0, #47	; 0x2f
 80046bc:	f000 fa40 	bl	8004b40 <SX1276Write>
                    break;
 80046c0:	e014      	b.n	80046ec <SX1276SetRx+0x220>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80046c2:	2140      	movs	r1, #64	; 0x40
 80046c4:	202f      	movs	r0, #47	; 0x2f
 80046c6:	f000 fa3b 	bl	8004b40 <SX1276Write>
                    break;
 80046ca:	e00f      	b.n	80046ec <SX1276SetRx+0x220>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 80046cc:	2140      	movs	r1, #64	; 0x40
 80046ce:	202f      	movs	r0, #47	; 0x2f
 80046d0:	f000 fa36 	bl	8004b40 <SX1276Write>
                    break;
 80046d4:	e00a      	b.n	80046ec <SX1276SetRx+0x220>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 80046d6:	2031      	movs	r0, #49	; 0x31
 80046d8:	f000 fa42 	bl	8004b60 <SX1276Read>
 80046dc:	4603      	mov	r3, r0
 80046de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	4619      	mov	r1, r3
 80046e6:	2031      	movs	r0, #49	; 0x31
 80046e8:	f000 fa2a 	bl	8004b40 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 80046ec:	4b36      	ldr	r3, [pc, #216]	; (80047c8 <SX1276SetRx+0x2fc>)
 80046ee:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80046f2:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80046f4:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <SX1276SetRx+0x2fc>)
 80046f6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00f      	beq.n	800471e <SX1276SetRx+0x252>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80046fe:	211d      	movs	r1, #29
 8004700:	2011      	movs	r0, #17
 8004702:	f000 fa1d 	bl	8004b40 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8004706:	2040      	movs	r0, #64	; 0x40
 8004708:	f000 fa2a 	bl	8004b60 <SX1276Read>
 800470c:	4603      	mov	r3, r0
 800470e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004712:	b2db      	uxtb	r3, r3
 8004714:	4619      	mov	r1, r3
 8004716:	2040      	movs	r0, #64	; 0x40
 8004718:	f000 fa12 	bl	8004b40 <SX1276Write>
 800471c:	e00e      	b.n	800473c <SX1276SetRx+0x270>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800471e:	211f      	movs	r1, #31
 8004720:	2011      	movs	r0, #17
 8004722:	f000 fa0d 	bl	8004b40 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 8004726:	2040      	movs	r0, #64	; 0x40
 8004728:	f000 fa1a 	bl	8004b60 <SX1276Read>
 800472c:	4603      	mov	r3, r0
 800472e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004732:	b2db      	uxtb	r3, r3
 8004734:	4619      	mov	r1, r3
 8004736:	2040      	movs	r0, #64	; 0x40
 8004738:	f000 fa02 	bl	8004b40 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800473c:	2100      	movs	r1, #0
 800473e:	200f      	movs	r0, #15
 8004740:	f000 f9fe 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004744:	2100      	movs	r1, #0
 8004746:	200d      	movs	r0, #13
 8004748:	f000 f9fa 	bl	8004b40 <SX1276Write>
        }
        break;
 800474c:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800474e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004752:	2100      	movs	r1, #0
 8004754:	481d      	ldr	r0, [pc, #116]	; (80047cc <SX1276SetRx+0x300>)
 8004756:	f002 f9bb 	bl	8006ad0 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 800475a:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <SX1276SetRx+0x2fc>)
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if( timeout != 0 )
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d006      	beq.n	8004776 <SX1276SetRx+0x2aa>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8004768:	6879      	ldr	r1, [r7, #4]
 800476a:	4819      	ldr	r0, [pc, #100]	; (80047d0 <SX1276SetRx+0x304>)
 800476c:	f002 f8f4 	bl	8006958 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 8004770:	4817      	ldr	r0, [pc, #92]	; (80047d0 <SX1276SetRx+0x304>)
 8004772:	f001 ff3b 	bl	80065ec <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 8004776:	4b14      	ldr	r3, [pc, #80]	; (80047c8 <SX1276SetRx+0x2fc>)
 8004778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800477c:	2b00      	cmp	r3, #0
 800477e:	d112      	bne.n	80047a6 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER ); // ??
 8004780:	2005      	movs	r0, #5
 8004782:	f000 f959 	bl	8004a38 <SX1276SetOpMode>

        if( rxContinuous == false )
 8004786:	7bfb      	ldrb	r3, [r7, #15]
 8004788:	f083 0301 	eor.w	r3, r3, #1
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d013      	beq.n	80047ba <SX1276SetRx+0x2ee>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8004792:	4b0d      	ldr	r3, [pc, #52]	; (80047c8 <SX1276SetRx+0x2fc>)
 8004794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004796:	4619      	mov	r1, r3
 8004798:	480e      	ldr	r0, [pc, #56]	; (80047d4 <SX1276SetRx+0x308>)
 800479a:	f002 f8dd 	bl	8006958 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800479e:	480d      	ldr	r0, [pc, #52]	; (80047d4 <SX1276SetRx+0x308>)
 80047a0:	f001 ff24 	bl	80065ec <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 80047a4:	e009      	b.n	80047ba <SX1276SetRx+0x2ee>
        if( rxContinuous == true )
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <SX1276SetRx+0x2e8>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 80047ac:	2005      	movs	r0, #5
 80047ae:	f000 f943 	bl	8004a38 <SX1276SetOpMode>
}
 80047b2:	e002      	b.n	80047ba <SX1276SetRx+0x2ee>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 80047b4:	2006      	movs	r0, #6
 80047b6:	f000 f93f 	bl	8004a38 <SX1276SetOpMode>
}
 80047ba:	bf00      	nop
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	200002c0 	.word	0x200002c0
 80047c8:	200002f0 	.word	0x200002f0
 80047cc:	20000048 	.word	0x20000048
 80047d0:	20000398 	.word	0x20000398
 80047d4:	200002d8 	.word	0x200002d8

080047d8 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 80047e0:	4836      	ldr	r0, [pc, #216]	; (80048bc <SX1276SetTx+0xe4>)
 80047e2:	f002 f823 	bl	800682c <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4835      	ldr	r0, [pc, #212]	; (80048c0 <SX1276SetTx+0xe8>)
 80047ea:	f002 f8b5 	bl	8006958 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 80047ee:	4b35      	ldr	r3, [pc, #212]	; (80048c4 <SX1276SetTx+0xec>)
 80047f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <SX1276SetTx+0x26>
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d021      	beq.n	8004840 <SX1276SetTx+0x68>
 80047fc:	e04f      	b.n	800489e <SX1276SetTx+0xc6>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80047fe:	2040      	movs	r0, #64	; 0x40
 8004800:	f000 f9ae 	bl	8004b60 <SX1276Read>
 8004804:	4603      	mov	r3, r0
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	b2db      	uxtb	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	2040      	movs	r0, #64	; 0x40
 8004810:	f000 f996 	bl	8004b40 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004814:	2041      	movs	r0, #65	; 0x41
 8004816:	f000 f9a3 	bl	8004b60 <SX1276Read>
 800481a:	4603      	mov	r3, r0
 800481c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004820:	b2db      	uxtb	r3, r3
 8004822:	4619      	mov	r1, r3
 8004824:	2041      	movs	r0, #65	; 0x41
 8004826:	f000 f98b 	bl	8004b40 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800482a:	2035      	movs	r0, #53	; 0x35
 800482c:	f000 f998 	bl	8004b60 <SX1276Read>
 8004830:	4603      	mov	r3, r0
 8004832:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004836:	b2da      	uxtb	r2, r3
 8004838:	4b22      	ldr	r3, [pc, #136]	; (80048c4 <SX1276SetTx+0xec>)
 800483a:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        }
        break;
 800483e:	e02e      	b.n	800489e <SX1276SetTx+0xc6>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004840:	4b20      	ldr	r3, [pc, #128]	; (80048c4 <SX1276SetTx+0xec>)
 8004842:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004846:	2b00      	cmp	r3, #0
 8004848:	d014      	beq.n	8004874 <SX1276SetTx+0x9c>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800484a:	21f5      	movs	r1, #245	; 0xf5
 800484c:	2011      	movs	r0, #17
 800484e:	f000 f977 	bl	8004b40 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8004852:	2040      	movs	r0, #64	; 0x40
 8004854:	f000 f984 	bl	8004b60 <SX1276Read>
 8004858:	4603      	mov	r3, r0
 800485a:	b25b      	sxtb	r3, r3
 800485c:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004860:	b25b      	sxtb	r3, r3
 8004862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004866:	b25b      	sxtb	r3, r3
 8004868:	b2db      	uxtb	r3, r3
 800486a:	4619      	mov	r1, r3
 800486c:	2040      	movs	r0, #64	; 0x40
 800486e:	f000 f967 	bl	8004b40 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8004872:	e013      	b.n	800489c <SX1276SetTx+0xc4>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004874:	21f7      	movs	r1, #247	; 0xf7
 8004876:	2011      	movs	r0, #17
 8004878:	f000 f962 	bl	8004b40 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800487c:	2040      	movs	r0, #64	; 0x40
 800487e:	f000 f96f 	bl	8004b60 <SX1276Read>
 8004882:	4603      	mov	r3, r0
 8004884:	b25b      	sxtb	r3, r3
 8004886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800488a:	b25b      	sxtb	r3, r3
 800488c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004890:	b25b      	sxtb	r3, r3
 8004892:	b2db      	uxtb	r3, r3
 8004894:	4619      	mov	r1, r3
 8004896:	2040      	movs	r0, #64	; 0x40
 8004898:	f000 f952 	bl	8004b40 <SX1276Write>
        break;
 800489c:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <SX1276SetTx+0xec>)
 80048a0:	2202      	movs	r2, #2
 80048a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 80048a6:	4806      	ldr	r0, [pc, #24]	; (80048c0 <SX1276SetTx+0xe8>)
 80048a8:	f001 fea0 	bl	80065ec <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80048ac:	2003      	movs	r0, #3
 80048ae:	f000 f8c3 	bl	8004a38 <SX1276SetOpMode>
}
 80048b2:	bf00      	nop
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	20000398 	.word	0x20000398
 80048c0:	200002c0 	.word	0x200002c0
 80048c4:	200002f0 	.word	0x200002f0

080048c8 <SX1276StartCad>:

void SX1276StartCad( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 80048cc:	4b10      	ldr	r3, [pc, #64]	; (8004910 <SX1276StartCad+0x48>)
 80048ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d019      	beq.n	800490a <SX1276StartCad+0x42>
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d000      	beq.n	80048dc <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 80048da:	e017      	b.n	800490c <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80048dc:	21fa      	movs	r1, #250	; 0xfa
 80048de:	2011      	movs	r0, #17
 80048e0:	f000 f92e 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 80048e4:	2040      	movs	r0, #64	; 0x40
 80048e6:	f000 f93b 	bl	8004b60 <SX1276Read>
 80048ea:	4603      	mov	r3, r0
 80048ec:	f023 0303 	bic.w	r3, r3, #3
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	2040      	movs	r0, #64	; 0x40
 80048f6:	f000 f923 	bl	8004b40 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 80048fa:	4b05      	ldr	r3, [pc, #20]	; (8004910 <SX1276StartCad+0x48>)
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8004902:	2007      	movs	r0, #7
 8004904:	f000 f898 	bl	8004a38 <SX1276SetOpMode>
        break;
 8004908:	e000      	b.n	800490c <SX1276StartCad+0x44>
        break;
 800490a:	bf00      	nop
    }
}
 800490c:	bf00      	nop
 800490e:	bd80      	pop	{r7, pc}
 8004910:	200002f0 	.word	0x200002f0

08004914 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b08e      	sub	sp, #56	; 0x38
 8004918:	af0a      	add	r7, sp, #40	; 0x28
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	460b      	mov	r3, r1
 800491e:	70fb      	strb	r3, [r7, #3]
 8004920:	4613      	mov	r3, r2
 8004922:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8004924:	883b      	ldrh	r3, [r7, #0]
 8004926:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff f825 	bl	8003980 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8004936:	f997 1003 	ldrsb.w	r1, [r7, #3]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	9308      	str	r3, [sp, #32]
 800493e:	2300      	movs	r3, #0
 8004940:	9307      	str	r3, [sp, #28]
 8004942:	2300      	movs	r3, #0
 8004944:	9306      	str	r3, [sp, #24]
 8004946:	2300      	movs	r3, #0
 8004948:	9305      	str	r3, [sp, #20]
 800494a:	2300      	movs	r3, #0
 800494c:	9304      	str	r3, [sp, #16]
 800494e:	2300      	movs	r3, #0
 8004950:	9303      	str	r3, [sp, #12]
 8004952:	2305      	movs	r3, #5
 8004954:	9302      	str	r3, [sp, #8]
 8004956:	2300      	movs	r3, #0
 8004958:	9301      	str	r3, [sp, #4]
 800495a:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	2300      	movs	r3, #0
 8004962:	2200      	movs	r2, #0
 8004964:	2000      	movs	r0, #0
 8004966:	f7ff fae7 	bl	8003f38 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800496a:	2031      	movs	r0, #49	; 0x31
 800496c:	f000 f8f8 	bl	8004b60 <SX1276Read>
 8004970:	4603      	mov	r3, r0
 8004972:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004976:	b2db      	uxtb	r3, r3
 8004978:	4619      	mov	r1, r3
 800497a:	2031      	movs	r0, #49	; 0x31
 800497c:	f000 f8e0 	bl	8004b40 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8004980:	21f0      	movs	r1, #240	; 0xf0
 8004982:	2040      	movs	r0, #64	; 0x40
 8004984:	f000 f8dc 	bl	8004b40 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8004988:	21a0      	movs	r1, #160	; 0xa0
 800498a:	2041      	movs	r0, #65	; 0x41
 800498c:	f000 f8d8 	bl	8004b40 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8004990:	68f9      	ldr	r1, [r7, #12]
 8004992:	4808      	ldr	r0, [pc, #32]	; (80049b4 <SX1276SetTxContinuousWave+0xa0>)
 8004994:	f001 ffe0 	bl	8006958 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING; //??
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <SX1276SetTxContinuousWave+0xa4>)
 800499a:	2202      	movs	r2, #2
 800499c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 80049a0:	4804      	ldr	r0, [pc, #16]	; (80049b4 <SX1276SetTxContinuousWave+0xa0>)
 80049a2:	f001 fe23 	bl	80065ec <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 80049a6:	2003      	movs	r0, #3
 80049a8:	f000 f846 	bl	8004a38 <SX1276SetOpMode>
}
 80049ac:	bf00      	nop
 80049ae:	3710      	adds	r7, #16
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	200002c0 	.word	0x200002c0
 80049b8:	200002f0 	.word	0x200002f0

080049bc <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	4603      	mov	r3, r0
 80049c4:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 80049ca:	79fb      	ldrb	r3, [r7, #7]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d002      	beq.n	80049d6 <SX1276ReadRssi+0x1a>
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d00b      	beq.n	80049ec <SX1276ReadRssi+0x30>
 80049d4:	e021      	b.n	8004a1a <SX1276ReadRssi+0x5e>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80049d6:	2011      	movs	r0, #17
 80049d8:	f000 f8c2 	bl	8004b60 <SX1276Read>
 80049dc:	4603      	mov	r3, r0
 80049de:	085b      	lsrs	r3, r3, #1
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	425b      	negs	r3, r3
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	81fb      	strh	r3, [r7, #14]
        break;
 80049ea:	e01a      	b.n	8004a22 <SX1276ReadRssi+0x66>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80049ec:	4b10      	ldr	r3, [pc, #64]	; (8004a30 <SX1276ReadRssi+0x74>)
 80049ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f0:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <SX1276ReadRssi+0x78>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d908      	bls.n	8004a08 <SX1276ReadRssi+0x4c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 80049f6:	201b      	movs	r0, #27
 80049f8:	f000 f8b2 	bl	8004b60 <SX1276Read>
 80049fc:	4603      	mov	r3, r0
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b9d      	subs	r3, #157	; 0x9d
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8004a06:	e00c      	b.n	8004a22 <SX1276ReadRssi+0x66>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004a08:	201b      	movs	r0, #27
 8004a0a:	f000 f8a9 	bl	8004b60 <SX1276Read>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	b29b      	uxth	r3, r3
 8004a12:	3ba4      	subs	r3, #164	; 0xa4
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	81fb      	strh	r3, [r7, #14]
        break;
 8004a18:	e003      	b.n	8004a22 <SX1276ReadRssi+0x66>
    default:
        rssi = -1;
 8004a1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004a1e:	81fb      	strh	r3, [r7, #14]
        break;
 8004a20:	bf00      	nop
    }
    return rssi;
 8004a22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	200002f0 	.word	0x200002f0
 8004a34:	1f4add40 	.word	0x1f4add40

08004a38 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	4603      	mov	r3, r0
 8004a40:	71fb      	strb	r3, [r7, #7]
            SX1276DbgPinTxWrite( 0 );
            SX1276DbgPinRxWrite( 0 );
            break;
    }
#endif
    if( opMode == RF_OPMODE_SLEEP )
 8004a42:	79fb      	ldrb	r3, [r7, #7]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d103      	bne.n	8004a50 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 8004a48:	2001      	movs	r0, #1
 8004a4a:	f001 fd1d 	bl	8006488 <SX1276SetAntSwLowPower>
 8004a4e:	e009      	b.n	8004a64 <SX1276SetOpMode+0x2c>
    }
    else
    {
        // Enable TCXO if operating mode different from SLEEP.
        SX1276SetBoardTcxo( true );
 8004a50:	2001      	movs	r0, #1
 8004a52:	f001 fc25 	bl	80062a0 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8004a56:	2000      	movs	r0, #0
 8004a58:	f001 fd16 	bl	8006488 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 fd3c 	bl	80064dc <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004a64:	2001      	movs	r0, #1
 8004a66:	f000 f87b 	bl	8004b60 <SX1276Read>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	b25b      	sxtb	r3, r3
 8004a6e:	f023 0307 	bic.w	r3, r3, #7
 8004a72:	b25a      	sxtb	r2, r3
 8004a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	b25b      	sxtb	r3, r3
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	4619      	mov	r1, r3
 8004a80:	2001      	movs	r0, #1
 8004a82:	f000 f85d 	bl	8004b40 <SX1276Write>
}
 8004a86:	bf00      	nop
 8004a88:	3708      	adds	r7, #8
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
	...

08004a90 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	4603      	mov	r3, r0
 8004a98:	71fb      	strb	r3, [r7, #7]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004a9a:	2001      	movs	r0, #1
 8004a9c:	f000 f860 	bl	8004b60 <SX1276Read>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	b25b      	sxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da04      	bge.n	8004ab2 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8004aa8:	4b24      	ldr	r3, [pc, #144]	; (8004b3c <SX1276SetModem+0xac>)
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ab0:	e003      	b.n	8004aba <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8004ab2:	4b22      	ldr	r3, [pc, #136]	; (8004b3c <SX1276SetModem+0xac>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }

    if( SX1276.Settings.Modem == modem )
 8004aba:	4b20      	ldr	r3, [pc, #128]	; (8004b3c <SX1276SetModem+0xac>)
 8004abc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ac0:	79fa      	ldrb	r2, [r7, #7]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d036      	beq.n	8004b34 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8004ac6:	4a1d      	ldr	r2, [pc, #116]	; (8004b3c <SX1276SetModem+0xac>)
 8004ac8:	79fb      	ldrb	r3, [r7, #7]
 8004aca:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    switch( SX1276.Settings.Modem )
 8004ace:	4b1b      	ldr	r3, [pc, #108]	; (8004b3c <SX1276SetModem+0xac>)
 8004ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d016      	beq.n	8004b06 <SX1276SetModem+0x76>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004ad8:	2000      	movs	r0, #0
 8004ada:	f7ff ffad 	bl	8004a38 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004ade:	2001      	movs	r0, #1
 8004ae0:	f000 f83e 	bl	8004b60 <SX1276Read>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	4619      	mov	r1, r3
 8004aee:	2001      	movs	r0, #1
 8004af0:	f000 f826 	bl	8004b40 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004af4:	2100      	movs	r1, #0
 8004af6:	2040      	movs	r0, #64	; 0x40
 8004af8:	f000 f822 	bl	8004b40 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004afc:	2130      	movs	r1, #48	; 0x30
 8004afe:	2041      	movs	r0, #65	; 0x41
 8004b00:	f000 f81e 	bl	8004b40 <SX1276Write>
        break;
 8004b04:	e017      	b.n	8004b36 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004b06:	2000      	movs	r0, #0
 8004b08:	f7ff ff96 	bl	8004a38 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004b0c:	2001      	movs	r0, #1
 8004b0e:	f000 f827 	bl	8004b60 <SX1276Read>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	2001      	movs	r0, #1
 8004b1e:	f000 f80f 	bl	8004b40 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004b22:	2100      	movs	r1, #0
 8004b24:	2040      	movs	r0, #64	; 0x40
 8004b26:	f000 f80b 	bl	8004b40 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	2041      	movs	r0, #65	; 0x41
 8004b2e:	f000 f807 	bl	8004b40 <SX1276Write>
        break;
 8004b32:	e000      	b.n	8004b36 <SX1276SetModem+0xa6>
        return;
 8004b34:	bf00      	nop
    }
}
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	200002f0 	.word	0x200002f0

08004b40 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( addr, &data, 1 );
 8004b4c:	1cfb      	adds	r3, r7, #3
 8004b4e:	2201      	movs	r2, #1
 8004b50:	4619      	mov	r1, r3
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f814 	bl	8004b80 <SX1276WriteBuffer>
}
 8004b58:	bf00      	nop
 8004b5a:	3708      	adds	r7, #8
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8004b68:	f107 030f 	add.w	r3, r7, #15
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	4619      	mov	r1, r3
 8004b70:	6878      	ldr	r0, [r7, #4]
 8004b72:	f000 f839 	bl	8004be8 <SX1276ReadBuffer>
    return data;
 8004b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3710      	adds	r7, #16
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}

08004b80 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4813      	ldr	r0, [pc, #76]	; (8004be0 <SX1276WriteBuffer+0x60>)
 8004b92:	f7fb fd1d 	bl	80005d0 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4810      	ldr	r0, [pc, #64]	; (8004be4 <SX1276WriteBuffer+0x64>)
 8004ba4:	f7fb fee4 	bl	8000970 <SpiInOut>
    for( i = 0; i < size; i++ )
 8004ba8:	2300      	movs	r3, #0
 8004baa:	75fb      	strb	r3, [r7, #23]
 8004bac:	e00b      	b.n	8004bc6 <SX1276WriteBuffer+0x46>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 8004bae:	7dfb      	ldrb	r3, [r7, #23]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	4413      	add	r3, r2
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	4619      	mov	r1, r3
 8004bba:	480a      	ldr	r0, [pc, #40]	; (8004be4 <SX1276WriteBuffer+0x64>)
 8004bbc:	f7fb fed8 	bl	8000970 <SpiInOut>
    for( i = 0; i < size; i++ )
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
 8004bc6:	7dfa      	ldrb	r2, [r7, #23]
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d3ef      	bcc.n	8004bae <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8004bce:	2101      	movs	r1, #1
 8004bd0:	4803      	ldr	r0, [pc, #12]	; (8004be0 <SX1276WriteBuffer+0x60>)
 8004bd2:	f7fb fcfd 	bl	80005d0 <GpioWrite>
}
 8004bd6:	bf00      	nop
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	2000032c 	.word	0x2000032c
 8004be4:	20000328 	.word	0x20000328

08004be8 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	4814      	ldr	r0, [pc, #80]	; (8004c4c <SX1276ReadBuffer+0x64>)
 8004bfa:	f7fb fce9 	bl	80005d0 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4811      	ldr	r0, [pc, #68]	; (8004c50 <SX1276ReadBuffer+0x68>)
 8004c0c:	f7fb feb0 	bl	8000970 <SpiInOut>

    for( i = 0; i < size; i++ )
 8004c10:	2300      	movs	r3, #0
 8004c12:	75fb      	strb	r3, [r7, #23]
 8004c14:	e00d      	b.n	8004c32 <SX1276ReadBuffer+0x4a>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 8004c16:	2100      	movs	r1, #0
 8004c18:	480d      	ldr	r0, [pc, #52]	; (8004c50 <SX1276ReadBuffer+0x68>)
 8004c1a:	f7fb fea9 	bl	8000970 <SpiInOut>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	4619      	mov	r1, r3
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	4413      	add	r3, r2
 8004c28:	b2ca      	uxtb	r2, r1
 8004c2a:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	75fb      	strb	r3, [r7, #23]
 8004c32:	7dfa      	ldrb	r2, [r7, #23]
 8004c34:	79fb      	ldrb	r3, [r7, #7]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d3ed      	bcc.n	8004c16 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	4803      	ldr	r0, [pc, #12]	; (8004c4c <SX1276ReadBuffer+0x64>)
 8004c3e:	f7fb fcc7 	bl	80005d0 <GpioWrite>
}
 8004c42:	bf00      	nop
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	2000032c 	.word	0x2000032c
 8004c50:	20000328 	.word	0x20000328

08004c54 <SX1276WriteFifo>:

static void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	460b      	mov	r3, r1
 8004c5e:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8004c60:	78fb      	ldrb	r3, [r7, #3]
 8004c62:	461a      	mov	r2, r3
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	2000      	movs	r0, #0
 8004c68:	f7ff ff8a 	bl	8004b80 <SX1276WriteBuffer>
}
 8004c6c:	bf00      	nop
 8004c6e:	3708      	adds	r7, #8
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}

08004c74 <SX1276ReadFifo>:

static void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b082      	sub	sp, #8
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	461a      	mov	r2, r3
 8004c84:	6879      	ldr	r1, [r7, #4]
 8004c86:	2000      	movs	r0, #0
 8004c88:	f7ff ffae 	bl	8004be8 <SX1276ReadBuffer>
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	460a      	mov	r2, r1
 8004c9e:	71fb      	strb	r3, [r7, #7]
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 8004ca4:	79fb      	ldrb	r3, [r7, #7]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff fef2 	bl	8004a90 <SX1276SetModem>

    switch( modem )
 8004cac:	79fb      	ldrb	r3, [r7, #7]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <SX1276SetMaxPayloadLength+0x24>
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d00e      	beq.n	8004cd4 <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8004cb6:	e014      	b.n	8004ce2 <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 8004cb8:	4b0c      	ldr	r3, [pc, #48]	; (8004cec <SX1276SetMaxPayloadLength+0x58>)
 8004cba:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004cbe:	f083 0301 	eor.w	r3, r3, #1
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d00b      	beq.n	8004ce0 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004cc8:	79bb      	ldrb	r3, [r7, #6]
 8004cca:	4619      	mov	r1, r3
 8004ccc:	2032      	movs	r0, #50	; 0x32
 8004cce:	f7ff ff37 	bl	8004b40 <SX1276Write>
        break;
 8004cd2:	e005      	b.n	8004ce0 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004cd4:	79bb      	ldrb	r3, [r7, #6]
 8004cd6:	4619      	mov	r1, r3
 8004cd8:	2023      	movs	r0, #35	; 0x23
 8004cda:	f7ff ff31 	bl	8004b40 <SX1276Write>
        break;
 8004cde:	e000      	b.n	8004ce2 <SX1276SetMaxPayloadLength+0x4e>
        break;
 8004ce0:	bf00      	nop
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	200002f0 	.word	0x200002f0

08004cf0 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 8004cfa:	2001      	movs	r0, #1
 8004cfc:	f7ff fec8 	bl	8004a90 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004d00:	4a09      	ldr	r2, [pc, #36]	; (8004d28 <SX1276SetPublicNetwork+0x38>)
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
    if( enable == true )
 8004d08:	79fb      	ldrb	r3, [r7, #7]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004d0e:	2134      	movs	r1, #52	; 0x34
 8004d10:	2039      	movs	r0, #57	; 0x39
 8004d12:	f7ff ff15 	bl	8004b40 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8004d16:	e003      	b.n	8004d20 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004d18:	2112      	movs	r1, #18
 8004d1a:	2039      	movs	r0, #57	; 0x39
 8004d1c:	f7ff ff10 	bl	8004b40 <SX1276Write>
}
 8004d20:	bf00      	nop
 8004d22:	3708      	adds	r7, #8
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	200002f0 	.word	0x200002f0

08004d2c <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8004d30:	f001 fac0 	bl	80062b4 <SX1276GetBoardTcxoWakeupTime>
 8004d34:	4603      	mov	r3, r0
 8004d36:	3301      	adds	r3, #1
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <SX1276ConvertPllStepToFreqInHz>:

static uint32_t SX1276ConvertPllStepToFreqInHz( uint32_t pllSteps )
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
    uint32_t freqInHzInt;
    uint32_t freqInHzFrac;
    
    // freqInHz = pllSteps * ( SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	0a1b      	lsrs	r3, r3, #8
 8004d48:	60fb      	str	r3, [r7, #12]
    freqInHzFrac = pllSteps - ( freqInHzInt << SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	021b      	lsls	r3, r3, #8
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004d5a:	fb02 f203 	mul.w	r2, r2, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f643 5109 	movw	r1, #15625	; 0x3d09
 8004d64:	fb01 f303 	mul.w	r3, r1, r3
 8004d68:	3380      	adds	r3, #128	; 0x80
 8004d6a:	0a1b      	lsrs	r3, r3, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8004d6c:	4413      	add	r3, r2
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bc80      	pop	{r7}
 8004d76:	4770      	bx	lr

08004d78 <SX1276ConvertFreqInHzToPllStep>:

static uint32_t SX1276ConvertFreqInHzToPllStep( uint32_t freqInHz )
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a0f      	ldr	r2, [pc, #60]	; (8004dc0 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	0b1b      	lsrs	r3, r3, #12
 8004d8a:	60fb      	str	r3, [r7, #12]
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004d92:	fb02 f303 	mul.w	r3, r2, r3
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	021a      	lsls	r2, r3, #8
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	021b      	lsls	r3, r3, #8
 8004da4:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8004da8:	3304      	adds	r3, #4
 8004daa:	4905      	ldr	r1, [pc, #20]	; (8004dc0 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8004dac:	fba1 1303 	umull	r1, r3, r1, r3
 8004db0:	0b1b      	lsrs	r3, r3, #12
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8004db2:	4413      	add	r3, r2
             SX1276_PLL_STEP_SCALED );
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	431bde83 	.word	0x431bde83

08004dc4 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]
 8004dd0:	e017      	b.n	8004e02 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	4a0f      	ldr	r2, [pc, #60]	; (8004e14 <GetFskBandwidthRegValue+0x50>)
 8004dd6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d30d      	bcc.n	8004dfc <GetFskBandwidthRegValue+0x38>
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	3301      	adds	r3, #1
 8004de4:	4a0b      	ldr	r2, [pc, #44]	; (8004e14 <GetFskBandwidthRegValue+0x50>)
 8004de6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d205      	bcs.n	8004dfc <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	4a08      	ldr	r2, [pc, #32]	; (8004e14 <GetFskBandwidthRegValue+0x50>)
 8004df4:	00db      	lsls	r3, r3, #3
 8004df6:	4413      	add	r3, r2
 8004df8:	791b      	ldrb	r3, [r3, #4]
 8004dfa:	e006      	b.n	8004e0a <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 8004dfc:	7bfb      	ldrb	r3, [r7, #15]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	73fb      	strb	r3, [r7, #15]
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
 8004e04:	2b14      	cmp	r3, #20
 8004e06:	d9e4      	bls.n	8004dd2 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8004e08:	e7fe      	b.n	8004e08 <GetFskBandwidthRegValue+0x44>
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bc80      	pop	{r7}
 8004e12:	4770      	bx	lr
 8004e14:	08006b4c 	.word	0x08006b4c

08004e18 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 8004e20:	2300      	movs	r3, #0
 8004e22:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d00f      	beq.n	8004e4a <SX1276GetLoRaBandwidthInHz+0x32>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d80f      	bhi.n	8004e50 <SX1276GetLoRaBandwidthInHz+0x38>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d003      	beq.n	8004e3e <SX1276GetLoRaBandwidthInHz+0x26>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d003      	beq.n	8004e44 <SX1276GetLoRaBandwidthInHz+0x2c>
 8004e3c:	e008      	b.n	8004e50 <SX1276GetLoRaBandwidthInHz+0x38>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <SX1276GetLoRaBandwidthInHz+0x44>)
 8004e40:	60fb      	str	r3, [r7, #12]
        break;
 8004e42:	e005      	b.n	8004e50 <SX1276GetLoRaBandwidthInHz+0x38>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 8004e44:	4b06      	ldr	r3, [pc, #24]	; (8004e60 <SX1276GetLoRaBandwidthInHz+0x48>)
 8004e46:	60fb      	str	r3, [r7, #12]
        break;
 8004e48:	e002      	b.n	8004e50 <SX1276GetLoRaBandwidthInHz+0x38>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 8004e4a:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <SX1276GetLoRaBandwidthInHz+0x4c>)
 8004e4c:	60fb      	str	r3, [r7, #12]
        break;
 8004e4e:	bf00      	nop
    }

    return bandwidthInHz;
 8004e50:	68fb      	ldr	r3, [r7, #12]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3714      	adds	r7, #20
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	0001e848 	.word	0x0001e848
 8004e60:	0003d090 	.word	0x0003d090
 8004e64:	0007a120 	.word	0x0007a120

08004e68 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 8004e68:	b490      	push	{r4, r7}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	4611      	mov	r1, r2
 8004e74:	461a      	mov	r2, r3
 8004e76:	4623      	mov	r3, r4
 8004e78:	80fb      	strh	r3, [r7, #6]
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	717b      	strb	r3, [r7, #5]
 8004e7e:	460b      	mov	r3, r1
 8004e80:	713b      	strb	r3, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	70fb      	strb	r3, [r7, #3]
    const uint8_t syncWordLength = 3;
 8004e86:	2303      	movs	r3, #3
 8004e88:	73fb      	strb	r3, [r7, #15]

    return ( preambleLen << 3 ) +
 8004e8a:	88fb      	ldrh	r3, [r7, #6]
 8004e8c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8004e8e:	797a      	ldrb	r2, [r7, #5]
 8004e90:	f082 0201 	eor.w	r2, r2, #1
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	2a00      	cmp	r2, #0
 8004e98:	d001      	beq.n	8004e9e <SX1276GetGfskTimeOnAirNumerator+0x36>
 8004e9a:	2208      	movs	r2, #8
 8004e9c:	e000      	b.n	8004ea0 <SX1276GetGfskTimeOnAirNumerator+0x38>
 8004e9e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8004ea0:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 8004ea2:	7bfb      	ldrb	r3, [r7, #15]
 8004ea4:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8004ea6:	441a      	add	r2, r3
             ( ( payloadLen +
 8004ea8:	793b      	ldrb	r3, [r7, #4]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 8004eaa:	78f9      	ldrb	r1, [r7, #3]
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d001      	beq.n	8004eb4 <SX1276GetGfskTimeOnAirNumerator+0x4c>
 8004eb0:	2102      	movs	r1, #2
 8004eb2:	e000      	b.n	8004eb6 <SX1276GetGfskTimeOnAirNumerator+0x4e>
 8004eb4:	2100      	movs	r1, #0
               ( 0 ) + // Address filter size
 8004eb6:	440b      	add	r3, r1
               ) << 3 
 8004eb8:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 8004eba:	4413      	add	r3, r2
             );
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3710      	adds	r7, #16
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc90      	pop	{r4, r7}
 8004ec4:	4770      	bx	lr

08004ec6 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8004ec6:	b480      	push	{r7}
 8004ec8:	b08b      	sub	sp, #44	; 0x2c
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	4611      	mov	r1, r2
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	71fb      	strb	r3, [r7, #7]
 8004ed8:	4613      	mov	r3, r2
 8004eda:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8004edc:	79fb      	ldrb	r3, [r7, #7]
 8004ede:	3304      	adds	r3, #4
 8004ee0:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b05      	cmp	r3, #5
 8004eec:	d002      	beq.n	8004ef4 <SX1276GetLoRaTimeOnAirNumerator+0x2e>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	2b06      	cmp	r3, #6
 8004ef2:	d104      	bne.n	8004efe <SX1276GetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8004ef4:	88bb      	ldrh	r3, [r7, #4]
 8004ef6:	2b0b      	cmp	r3, #11
 8004ef8:	d801      	bhi.n	8004efe <SX1276GetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8004efa:	230c      	movs	r3, #12
 8004efc:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d105      	bne.n	8004f10 <SX1276GetLoRaTimeOnAirNumerator+0x4a>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	2b0b      	cmp	r3, #11
 8004f08:	d008      	beq.n	8004f1c <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	2b0c      	cmp	r3, #12
 8004f0e:	d005      	beq.n	8004f1c <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d105      	bne.n	8004f22 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	2b0c      	cmp	r3, #12
 8004f1a:	d102      	bne.n	8004f22 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004f22:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004f26:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 8004f28:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f2c:	2a00      	cmp	r2, #0
 8004f2e:	d001      	beq.n	8004f34 <SX1276GetLoRaTimeOnAirNumerator+0x6e>
 8004f30:	2210      	movs	r2, #16
 8004f32:	e000      	b.n	8004f36 <SX1276GetLoRaTimeOnAirNumerator+0x70>
 8004f34:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004f36:	4413      	add	r3, r2
 8004f38:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 8004f3e:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 8004f40:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8004f44:	2a00      	cmp	r2, #0
 8004f46:	d001      	beq.n	8004f4c <SX1276GetLoRaTimeOnAirNumerator+0x86>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	e000      	b.n	8004f4e <SX1276GetLoRaTimeOnAirNumerator+0x88>
 8004f4c:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 8004f4e:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8004f50:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b06      	cmp	r3, #6
 8004f56:	d803      	bhi.n	8004f60 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	623b      	str	r3, [r7, #32]
 8004f5e:	e00e      	b.n	8004f7e <SX1276GetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	3308      	adds	r3, #8
 8004f64:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8004f66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <SX1276GetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	3b02      	subs	r3, #2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	623b      	str	r3, [r7, #32]
 8004f76:	e002      	b.n	8004f7e <SX1276GetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	da01      	bge.n	8004f88 <SX1276GetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8004f84:	2300      	movs	r3, #0
 8004f86:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	6a3b      	ldr	r3, [r7, #32]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	1e5a      	subs	r2, r3, #1
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	fb02 f203 	mul.w	r2, r2, r3
 8004f9c:	88bb      	ldrh	r3, [r7, #4]
 8004f9e:	4413      	add	r3, r2
    int32_t intermediate =
 8004fa0:	330c      	adds	r3, #12
 8004fa2:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	2b06      	cmp	r3, #6
 8004fa8:	d802      	bhi.n	8004fb0 <SX1276GetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	3302      	adds	r3, #2
 8004fae:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	3b02      	subs	r3, #2
 8004fba:	fa02 f303 	lsl.w	r3, r2, r3
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	372c      	adds	r7, #44	; 0x2c
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bc80      	pop	{r7}
 8004fc6:	4770      	bx	lr

08004fc8 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8004fd0:	4b4d      	ldr	r3, [pc, #308]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 8004fd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d002      	beq.n	8004fe0 <SX1276OnTimeoutIrq+0x18>
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d043      	beq.n	8005066 <SX1276OnTimeoutIrq+0x9e>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 8004fde:	e08e      	b.n	80050fe <SX1276OnTimeoutIrq+0x136>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8004fe0:	4b49      	ldr	r3, [pc, #292]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 8004fe2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d12f      	bne.n	800504a <SX1276OnTimeoutIrq+0x82>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 8004fea:	4b47      	ldr	r3, [pc, #284]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8004ff2:	4b45      	ldr	r3, [pc, #276]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004ffa:	4b43      	ldr	r3, [pc, #268]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8005002:	4b41      	ldr	r3, [pc, #260]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 8005004:	2200      	movs	r2, #0
 8005006:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800500a:	210b      	movs	r1, #11
 800500c:	203e      	movs	r0, #62	; 0x3e
 800500e:	f7ff fd97 	bl	8004b40 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005012:	2110      	movs	r1, #16
 8005014:	203f      	movs	r0, #63	; 0x3f
 8005016:	f7ff fd93 	bl	8004b40 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800501a:	4b3b      	ldr	r3, [pc, #236]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 800501c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005020:	2b00      	cmp	r3, #0
 8005022:	d00b      	beq.n	800503c <SX1276OnTimeoutIrq+0x74>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8005024:	200d      	movs	r0, #13
 8005026:	f7ff fd9b 	bl	8004b60 <SX1276Read>
 800502a:	4603      	mov	r3, r0
 800502c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005030:	b2db      	uxtb	r3, r3
 8005032:	4619      	mov	r1, r3
 8005034:	200d      	movs	r0, #13
 8005036:	f7ff fd83 	bl	8004b40 <SX1276Write>
 800503a:	e006      	b.n	800504a <SX1276OnTimeoutIrq+0x82>
                SX1276.Settings.State = RF_IDLE;
 800503c:	4b32      	ldr	r3, [pc, #200]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                TimerStop( &RxTimeoutSyncWord );
 8005044:	4831      	ldr	r0, [pc, #196]	; (800510c <SX1276OnTimeoutIrq+0x144>)
 8005046:	f001 fbf1 	bl	800682c <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800504a:	4b31      	ldr	r3, [pc, #196]	; (8005110 <SX1276OnTimeoutIrq+0x148>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d052      	beq.n	80050f8 <SX1276OnTimeoutIrq+0x130>
 8005052:	4b2f      	ldr	r3, [pc, #188]	; (8005110 <SX1276OnTimeoutIrq+0x148>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d04d      	beq.n	80050f8 <SX1276OnTimeoutIrq+0x130>
            RadioEvents->RxTimeout( );
 800505c:	4b2c      	ldr	r3, [pc, #176]	; (8005110 <SX1276OnTimeoutIrq+0x148>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	4798      	blx	r3
        break;
 8005064:	e048      	b.n	80050f8 <SX1276OnTimeoutIrq+0x130>
        SX1276Reset( );
 8005066:	f001 f92d 	bl	80062c4 <SX1276Reset>
        RxChainCalibration( );
 800506a:	f7fe fd29 	bl	8003ac0 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800506e:	2000      	movs	r0, #0
 8005070:	f7ff fce2 	bl	8004a38 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005074:	2300      	movs	r3, #0
 8005076:	73fb      	strb	r3, [r7, #15]
 8005078:	e020      	b.n	80050bc <SX1276OnTimeoutIrq+0xf4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 800507a:	7bfa      	ldrb	r2, [r7, #15]
 800507c:	4925      	ldr	r1, [pc, #148]	; (8005114 <SX1276OnTimeoutIrq+0x14c>)
 800507e:	4613      	mov	r3, r2
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	4413      	add	r3, r2
 8005084:	440b      	add	r3, r1
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7ff fd01 	bl	8004a90 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800508e:	7bfa      	ldrb	r2, [r7, #15]
 8005090:	4920      	ldr	r1, [pc, #128]	; (8005114 <SX1276OnTimeoutIrq+0x14c>)
 8005092:	4613      	mov	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	440b      	add	r3, r1
 800509a:	3301      	adds	r3, #1
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	7bfa      	ldrb	r2, [r7, #15]
 80050a2:	491c      	ldr	r1, [pc, #112]	; (8005114 <SX1276OnTimeoutIrq+0x14c>)
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	440b      	add	r3, r1
 80050ac:	3302      	adds	r3, #2
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	4619      	mov	r1, r3
 80050b2:	f7ff fd45 	bl	8004b40 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	3301      	adds	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b0f      	cmp	r3, #15
 80050c0:	d9db      	bls.n	800507a <SX1276OnTimeoutIrq+0xb2>
        SX1276SetModem( MODEM_FSK );
 80050c2:	2000      	movs	r0, #0
 80050c4:	f7ff fce4 	bl	8004a90 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 80050c8:	4b0f      	ldr	r3, [pc, #60]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 80050ca:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80050ce:	4618      	mov	r0, r3
 80050d0:	f7ff fe0e 	bl	8004cf0 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 80050d4:	4b0c      	ldr	r3, [pc, #48]	; (8005108 <SX1276OnTimeoutIrq+0x140>)
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 80050dc:	4b0c      	ldr	r3, [pc, #48]	; (8005110 <SX1276OnTimeoutIrq+0x148>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00b      	beq.n	80050fc <SX1276OnTimeoutIrq+0x134>
 80050e4:	4b0a      	ldr	r3, [pc, #40]	; (8005110 <SX1276OnTimeoutIrq+0x148>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d006      	beq.n	80050fc <SX1276OnTimeoutIrq+0x134>
            RadioEvents->TxTimeout( );
 80050ee:	4b08      	ldr	r3, [pc, #32]	; (8005110 <SX1276OnTimeoutIrq+0x148>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4798      	blx	r3
        break;
 80050f6:	e001      	b.n	80050fc <SX1276OnTimeoutIrq+0x134>
        break;
 80050f8:	bf00      	nop
 80050fa:	e000      	b.n	80050fe <SX1276OnTimeoutIrq+0x136>
        break;
 80050fc:	bf00      	nop
    }
}
 80050fe:	bf00      	nop
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	200002f0 	.word	0x200002f0
 800510c:	200002d8 	.word	0x200002d8
 8005110:	20000044 	.word	0x20000044
 8005114:	08006b1c 	.word	0x08006b1c

08005118 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void* context )
{
 8005118:	b590      	push	{r4, r7, lr}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	737b      	strb	r3, [r7, #13]

    switch( SX1276.Settings.State )
 8005124:	4bae      	ldr	r3, [pc, #696]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800512a:	2b01      	cmp	r3, #1
 800512c:	d003      	beq.n	8005136 <SX1276OnDio0Irq+0x1e>
 800512e:	2b02      	cmp	r3, #2
 8005130:	f000 81de 	beq.w	80054f0 <SX1276OnDio0Irq+0x3d8>
                }
                break;
            }
            break;
        default:
            break;
 8005134:	e1fb      	b.n	800552e <SX1276OnDio0Irq+0x416>
            switch( SX1276.Settings.Modem )
 8005136:	4baa      	ldr	r3, [pc, #680]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005138:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <SX1276OnDio0Irq+0x30>
 8005140:	2b01      	cmp	r3, #1
 8005142:	f000 80ec 	beq.w	800531e <SX1276OnDio0Irq+0x206>
                break;
 8005146:	e1d2      	b.n	80054ee <SX1276OnDio0Irq+0x3d6>
                if( SX1276.Settings.Fsk.CrcOn == true )
 8005148:	4ba5      	ldr	r3, [pc, #660]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 800514a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800514e:	2b00      	cmp	r3, #0
 8005150:	d04e      	beq.n	80051f0 <SX1276OnDio0Irq+0xd8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 8005152:	203f      	movs	r0, #63	; 0x3f
 8005154:	f7ff fd04 	bl	8004b60 <SX1276Read>
 8005158:	4603      	mov	r3, r0
 800515a:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800515c:	7b7b      	ldrb	r3, [r7, #13]
 800515e:	b2db      	uxtb	r3, r3
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b02      	cmp	r3, #2
 8005166:	d043      	beq.n	80051f0 <SX1276OnDio0Irq+0xd8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8005168:	210b      	movs	r1, #11
 800516a:	203e      	movs	r0, #62	; 0x3e
 800516c:	f7ff fce8 	bl	8004b40 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005170:	2110      	movs	r1, #16
 8005172:	203f      	movs	r0, #63	; 0x3f
 8005174:	f7ff fce4 	bl	8004b40 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 8005178:	489a      	ldr	r0, [pc, #616]	; (80053e4 <SX1276OnDio0Irq+0x2cc>)
 800517a:	f001 fb57 	bl	800682c <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800517e:	4b98      	ldr	r3, [pc, #608]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005180:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005184:	f083 0301 	eor.w	r3, r3, #1
 8005188:	b2db      	uxtb	r3, r3
 800518a:	2b00      	cmp	r3, #0
 800518c:	d007      	beq.n	800519e <SX1276OnDio0Irq+0x86>
                            TimerStop( &RxTimeoutSyncWord );
 800518e:	4896      	ldr	r0, [pc, #600]	; (80053e8 <SX1276OnDio0Irq+0x2d0>)
 8005190:	f001 fb4c 	bl	800682c <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8005194:	4b92      	ldr	r3, [pc, #584]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800519c:	e00a      	b.n	80051b4 <SX1276OnDio0Irq+0x9c>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800519e:	200d      	movs	r0, #13
 80051a0:	f7ff fcde 	bl	8004b60 <SX1276Read>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	4619      	mov	r1, r3
 80051ae:	200d      	movs	r0, #13
 80051b0:	f7ff fcc6 	bl	8004b40 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80051b4:	4b8d      	ldr	r3, [pc, #564]	; (80053ec <SX1276OnDio0Irq+0x2d4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <SX1276OnDio0Irq+0xb6>
 80051bc:	4b8b      	ldr	r3, [pc, #556]	; (80053ec <SX1276OnDio0Irq+0x2d4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 80051c6:	4b89      	ldr	r3, [pc, #548]	; (80053ec <SX1276OnDio0Irq+0x2d4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80051ce:	4b84      	ldr	r3, [pc, #528]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80051d6:	4b82      	ldr	r3, [pc, #520]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80051de:	4b80      	ldr	r3, [pc, #512]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 80051e6:	4b7e      	ldr	r3, [pc, #504]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                        break;
 80051ee:	e17e      	b.n	80054ee <SX1276OnDio0Irq+0x3d6>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 80051f0:	4b7b      	ldr	r3, [pc, #492]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80051f2:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d133      	bne.n	8005262 <SX1276OnDio0Irq+0x14a>
 80051fa:	4b79      	ldr	r3, [pc, #484]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80051fc:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005200:	2b00      	cmp	r3, #0
 8005202:	d12e      	bne.n	8005262 <SX1276OnDio0Irq+0x14a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8005204:	4b76      	ldr	r3, [pc, #472]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005206:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800520a:	f083 0301 	eor.w	r3, r3, #1
 800520e:	b2db      	uxtb	r3, r3
 8005210:	2b00      	cmp	r3, #0
 8005212:	d004      	beq.n	800521e <SX1276OnDio0Irq+0x106>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8005214:	2101      	movs	r1, #1
 8005216:	4876      	ldr	r0, [pc, #472]	; (80053f0 <SX1276OnDio0Irq+0x2d8>)
 8005218:	f7ff fd2c 	bl	8004c74 <SX1276ReadFifo>
 800521c:	e007      	b.n	800522e <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800521e:	2032      	movs	r0, #50	; 0x32
 8005220:	f7ff fc9e 	bl	8004b60 <SX1276Read>
 8005224:	4603      	mov	r3, r0
 8005226:	b29a      	uxth	r2, r3
 8005228:	4b6d      	ldr	r3, [pc, #436]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 800522a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800522e:	4b6c      	ldr	r3, [pc, #432]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005230:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005234:	461a      	mov	r2, r3
 8005236:	4b6f      	ldr	r3, [pc, #444]	; (80053f4 <SX1276OnDio0Irq+0x2dc>)
 8005238:	18d0      	adds	r0, r2, r3
 800523a:	4b69      	ldr	r3, [pc, #420]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 800523c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005240:	b2da      	uxtb	r2, r3
 8005242:	4b67      	ldr	r3, [pc, #412]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005244:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005248:	b2db      	uxtb	r3, r3
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	f7ff fd10 	bl	8004c74 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005254:	4b62      	ldr	r3, [pc, #392]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005256:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800525a:	4b61      	ldr	r3, [pc, #388]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 800525c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 8005260:	e018      	b.n	8005294 <SX1276OnDio0Irq+0x17c>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005262:	4b5f      	ldr	r3, [pc, #380]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005264:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005268:	461a      	mov	r2, r3
 800526a:	4b62      	ldr	r3, [pc, #392]	; (80053f4 <SX1276OnDio0Irq+0x2dc>)
 800526c:	18d0      	adds	r0, r2, r3
 800526e:	4b5c      	ldr	r3, [pc, #368]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005270:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005274:	b2da      	uxtb	r2, r3
 8005276:	4b5a      	ldr	r3, [pc, #360]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005278:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800527c:	b2db      	uxtb	r3, r3
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	b2db      	uxtb	r3, r3
 8005282:	4619      	mov	r1, r3
 8005284:	f7ff fcf6 	bl	8004c74 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005288:	4b55      	ldr	r3, [pc, #340]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 800528a:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800528e:	4b54      	ldr	r3, [pc, #336]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005290:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                TimerStop( &RxTimeoutTimer );
 8005294:	4853      	ldr	r0, [pc, #332]	; (80053e4 <SX1276OnDio0Irq+0x2cc>)
 8005296:	f001 fac9 	bl	800682c <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800529a:	4b51      	ldr	r3, [pc, #324]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 800529c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80052a0:	f083 0301 	eor.w	r3, r3, #1
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d007      	beq.n	80052ba <SX1276OnDio0Irq+0x1a2>
                    SX1276.Settings.State = RF_IDLE;
 80052aa:	4b4d      	ldr	r3, [pc, #308]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutSyncWord );
 80052b2:	484d      	ldr	r0, [pc, #308]	; (80053e8 <SX1276OnDio0Irq+0x2d0>)
 80052b4:	f001 faba 	bl	800682c <TimerStop>
 80052b8:	e00a      	b.n	80052d0 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80052ba:	200d      	movs	r0, #13
 80052bc:	f7ff fc50 	bl	8004b60 <SX1276Read>
 80052c0:	4603      	mov	r3, r0
 80052c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	4619      	mov	r1, r3
 80052ca:	200d      	movs	r0, #13
 80052cc:	f7ff fc38 	bl	8004b40 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80052d0:	4b46      	ldr	r3, [pc, #280]	; (80053ec <SX1276OnDio0Irq+0x2d4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d011      	beq.n	80052fc <SX1276OnDio0Irq+0x1e4>
 80052d8:	4b44      	ldr	r3, [pc, #272]	; (80053ec <SX1276OnDio0Irq+0x2d4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00c      	beq.n	80052fc <SX1276OnDio0Irq+0x1e4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 80052e2:	4b42      	ldr	r3, [pc, #264]	; (80053ec <SX1276OnDio0Irq+0x2d4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689c      	ldr	r4, [r3, #8]
 80052e8:	4b3d      	ldr	r3, [pc, #244]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80052ea:	f8b3 107a 	ldrh.w	r1, [r3, #122]	; 0x7a
 80052ee:	4b3c      	ldr	r3, [pc, #240]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80052f0:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 80052f4:	b21a      	sxth	r2, r3
 80052f6:	2300      	movs	r3, #0
 80052f8:	483e      	ldr	r0, [pc, #248]	; (80053f4 <SX1276OnDio0Irq+0x2dc>)
 80052fa:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80052fc:	4b38      	ldr	r3, [pc, #224]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8005304:	4b36      	ldr	r3, [pc, #216]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800530c:	4b34      	ldr	r3, [pc, #208]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 800530e:	2200      	movs	r2, #0
 8005310:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8005314:	4b32      	ldr	r3, [pc, #200]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005316:	2200      	movs	r2, #0
 8005318:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                break;
 800531c:	e0e7      	b.n	80054ee <SX1276OnDio0Irq+0x3d6>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800531e:	2140      	movs	r1, #64	; 0x40
 8005320:	2012      	movs	r0, #18
 8005322:	f7ff fc0d 	bl	8004b40 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 8005326:	2012      	movs	r0, #18
 8005328:	f7ff fc1a 	bl	8004b60 <SX1276Read>
 800532c:	4603      	mov	r3, r0
 800532e:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8005330:	7b7b      	ldrb	r3, [r7, #13]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b20      	cmp	r3, #32
 800533a:	d122      	bne.n	8005382 <SX1276OnDio0Irq+0x26a>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800533c:	2120      	movs	r1, #32
 800533e:	2012      	movs	r0, #18
 8005340:	f7ff fbfe 	bl	8004b40 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 8005344:	4b26      	ldr	r3, [pc, #152]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005346:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800534a:	f083 0301 	eor.w	r3, r3, #1
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <SX1276OnDio0Irq+0x244>
                            SX1276.Settings.State = RF_IDLE;
 8005354:	4b22      	ldr	r3, [pc, #136]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                        TimerStop( &RxTimeoutTimer );
 800535c:	4821      	ldr	r0, [pc, #132]	; (80053e4 <SX1276OnDio0Irq+0x2cc>)
 800535e:	f001 fa65 	bl	800682c <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8005362:	4b22      	ldr	r3, [pc, #136]	; (80053ec <SX1276OnDio0Irq+0x2d4>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80be 	beq.w	80054e8 <SX1276OnDio0Irq+0x3d0>
 800536c:	4b1f      	ldr	r3, [pc, #124]	; (80053ec <SX1276OnDio0Irq+0x2d4>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	691b      	ldr	r3, [r3, #16]
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 80b8 	beq.w	80054e8 <SX1276OnDio0Irq+0x3d0>
                            RadioEvents->RxError( );
 8005378:	4b1c      	ldr	r3, [pc, #112]	; (80053ec <SX1276OnDio0Irq+0x2d4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	4798      	blx	r3
                        break;
 8005380:	e0b2      	b.n	80054e8 <SX1276OnDio0Irq+0x3d0>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8005382:	2019      	movs	r0, #25
 8005384:	f7ff fbec 	bl	8004b60 <SX1276Read>
 8005388:	4603      	mov	r3, r0
 800538a:	b25b      	sxtb	r3, r3
 800538c:	3302      	adds	r3, #2
 800538e:	109b      	asrs	r3, r3, #2
 8005390:	b25a      	sxtb	r2, r3
 8005392:	4b13      	ldr	r3, [pc, #76]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 8005394:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8005398:	201a      	movs	r0, #26
 800539a:	f7ff fbe1 	bl	8004b60 <SX1276Read>
 800539e:	4603      	mov	r3, r0
 80053a0:	81fb      	strh	r3, [r7, #14]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 80053a2:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80053a4:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	da3c      	bge.n	8005426 <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80053ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b0:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <SX1276OnDio0Irq+0x2e0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d922      	bls.n	80053fc <SX1276OnDio0Irq+0x2e4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80053b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80053ba:	111b      	asrs	r3, r3, #4
 80053bc:	b21b      	sxth	r3, r3
 80053be:	b29a      	uxth	r2, r3
 80053c0:	89fb      	ldrh	r3, [r7, #14]
 80053c2:	4413      	add	r3, r2
 80053c4:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 80053c6:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80053c8:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80053cc:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 80053ce:	4413      	add	r3, r2
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	3b9d      	subs	r3, #157	; 0x9d
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	b21a      	sxth	r2, r3
 80053d8:	4b01      	ldr	r3, [pc, #4]	; (80053e0 <SX1276OnDio0Irq+0x2c8>)
 80053da:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80053de:	e044      	b.n	800546a <SX1276OnDio0Irq+0x352>
 80053e0:	200002f0 	.word	0x200002f0
 80053e4:	20000398 	.word	0x20000398
 80053e8:	200002d8 	.word	0x200002d8
 80053ec:	20000044 	.word	0x20000044
 80053f0:	2000036a 	.word	0x2000036a
 80053f4:	20000048 	.word	0x20000048
 80053f8:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 80053fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005400:	111b      	asrs	r3, r3, #4
 8005402:	b21b      	sxth	r3, r3
 8005404:	b29a      	uxth	r2, r3
 8005406:	89fb      	ldrh	r3, [r7, #14]
 8005408:	4413      	add	r3, r2
 800540a:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800540c:	4b4a      	ldr	r3, [pc, #296]	; (8005538 <SX1276OnDio0Irq+0x420>)
 800540e:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8005412:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8005414:	4413      	add	r3, r2
 8005416:	b29b      	uxth	r3, r3
 8005418:	3ba4      	subs	r3, #164	; 0xa4
 800541a:	b29b      	uxth	r3, r3
 800541c:	b21a      	sxth	r2, r3
 800541e:	4b46      	ldr	r3, [pc, #280]	; (8005538 <SX1276OnDio0Irq+0x420>)
 8005420:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 8005424:	e021      	b.n	800546a <SX1276OnDio0Irq+0x352>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8005426:	4b44      	ldr	r3, [pc, #272]	; (8005538 <SX1276OnDio0Irq+0x420>)
 8005428:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800542a:	4a44      	ldr	r2, [pc, #272]	; (800553c <SX1276OnDio0Irq+0x424>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d90e      	bls.n	800544e <SX1276OnDio0Irq+0x336>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 8005430:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005434:	111b      	asrs	r3, r3, #4
 8005436:	b21b      	sxth	r3, r3
 8005438:	b29a      	uxth	r2, r3
 800543a:	89fb      	ldrh	r3, [r7, #14]
 800543c:	4413      	add	r3, r2
 800543e:	b29b      	uxth	r3, r3
 8005440:	3b9d      	subs	r3, #157	; 0x9d
 8005442:	b29b      	uxth	r3, r3
 8005444:	b21a      	sxth	r2, r3
 8005446:	4b3c      	ldr	r3, [pc, #240]	; (8005538 <SX1276OnDio0Irq+0x420>)
 8005448:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800544c:	e00d      	b.n	800546a <SX1276OnDio0Irq+0x352>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800544e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005452:	111b      	asrs	r3, r3, #4
 8005454:	b21b      	sxth	r3, r3
 8005456:	b29a      	uxth	r2, r3
 8005458:	89fb      	ldrh	r3, [r7, #14]
 800545a:	4413      	add	r3, r2
 800545c:	b29b      	uxth	r3, r3
 800545e:	3ba4      	subs	r3, #164	; 0xa4
 8005460:	b29b      	uxth	r3, r3
 8005462:	b21a      	sxth	r2, r3
 8005464:	4b34      	ldr	r3, [pc, #208]	; (8005538 <SX1276OnDio0Irq+0x420>)
 8005466:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800546a:	2013      	movs	r0, #19
 800546c:	f7ff fb78 	bl	8004b60 <SX1276Read>
 8005470:	4603      	mov	r3, r0
 8005472:	461a      	mov	r2, r3
 8005474:	4b30      	ldr	r3, [pc, #192]	; (8005538 <SX1276OnDio0Irq+0x420>)
 8005476:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800547a:	2010      	movs	r0, #16
 800547c:	f7ff fb70 	bl	8004b60 <SX1276Read>
 8005480:	4603      	mov	r3, r0
 8005482:	4619      	mov	r1, r3
 8005484:	200d      	movs	r0, #13
 8005486:	f7ff fb5b 	bl	8004b40 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800548a:	4b2b      	ldr	r3, [pc, #172]	; (8005538 <SX1276OnDio0Irq+0x420>)
 800548c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8005490:	4619      	mov	r1, r3
 8005492:	482b      	ldr	r0, [pc, #172]	; (8005540 <SX1276OnDio0Irq+0x428>)
 8005494:	f7ff fbee 	bl	8004c74 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8005498:	4b27      	ldr	r3, [pc, #156]	; (8005538 <SX1276OnDio0Irq+0x420>)
 800549a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800549e:	f083 0301 	eor.w	r3, r3, #1
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <SX1276OnDio0Irq+0x398>
                        SX1276.Settings.State = RF_IDLE;
 80054a8:	4b23      	ldr	r3, [pc, #140]	; (8005538 <SX1276OnDio0Irq+0x420>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutTimer );
 80054b0:	4824      	ldr	r0, [pc, #144]	; (8005544 <SX1276OnDio0Irq+0x42c>)
 80054b2:	f001 f9bb 	bl	800682c <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 80054b6:	4b24      	ldr	r3, [pc, #144]	; (8005548 <SX1276OnDio0Irq+0x430>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <SX1276OnDio0Irq+0x3d4>
 80054be:	4b22      	ldr	r3, [pc, #136]	; (8005548 <SX1276OnDio0Irq+0x430>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d011      	beq.n	80054ec <SX1276OnDio0Irq+0x3d4>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 80054c8:	4b1f      	ldr	r3, [pc, #124]	; (8005548 <SX1276OnDio0Irq+0x430>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	689c      	ldr	r4, [r3, #8]
 80054ce:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <SX1276OnDio0Irq+0x420>)
 80054d0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 80054d4:	b299      	uxth	r1, r3
 80054d6:	4b18      	ldr	r3, [pc, #96]	; (8005538 <SX1276OnDio0Irq+0x420>)
 80054d8:	f9b3 20a2 	ldrsh.w	r2, [r3, #162]	; 0xa2
 80054dc:	4b16      	ldr	r3, [pc, #88]	; (8005538 <SX1276OnDio0Irq+0x420>)
 80054de:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 80054e2:	4817      	ldr	r0, [pc, #92]	; (8005540 <SX1276OnDio0Irq+0x428>)
 80054e4:	47a0      	blx	r4
                break;
 80054e6:	e001      	b.n	80054ec <SX1276OnDio0Irq+0x3d4>
                        break;
 80054e8:	bf00      	nop
 80054ea:	e020      	b.n	800552e <SX1276OnDio0Irq+0x416>
                break;
 80054ec:	bf00      	nop
            break;
 80054ee:	e01e      	b.n	800552e <SX1276OnDio0Irq+0x416>
            TimerStop( &TxTimeoutTimer );
 80054f0:	4816      	ldr	r0, [pc, #88]	; (800554c <SX1276OnDio0Irq+0x434>)
 80054f2:	f001 f99b 	bl	800682c <TimerStop>
            switch( SX1276.Settings.Modem )
 80054f6:	4b10      	ldr	r3, [pc, #64]	; (8005538 <SX1276OnDio0Irq+0x420>)
 80054f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d103      	bne.n	8005508 <SX1276OnDio0Irq+0x3f0>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8005500:	2108      	movs	r1, #8
 8005502:	2012      	movs	r0, #18
 8005504:	f7ff fb1c 	bl	8004b40 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <SX1276OnDio0Irq+0x420>)
 800550a:	2200      	movs	r2, #0
 800550c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005510:	4b0d      	ldr	r3, [pc, #52]	; (8005548 <SX1276OnDio0Irq+0x430>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d008      	beq.n	800552a <SX1276OnDio0Irq+0x412>
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <SX1276OnDio0Irq+0x430>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <SX1276OnDio0Irq+0x412>
                    RadioEvents->TxDone( );
 8005522:	4b09      	ldr	r3, [pc, #36]	; (8005548 <SX1276OnDio0Irq+0x430>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4798      	blx	r3
                break;
 800552a:	bf00      	nop
            break;
 800552c:	bf00      	nop
    }
}
 800552e:	bf00      	nop
 8005530:	3714      	adds	r7, #20
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}
 8005536:	bf00      	nop
 8005538:	200002f0 	.word	0x200002f0
 800553c:	1f4add40 	.word	0x1f4add40
 8005540:	20000048 	.word	0x20000048
 8005544:	20000398 	.word	0x20000398
 8005548:	20000044 	.word	0x20000044
 800554c:	200002c0 	.word	0x200002c0

08005550 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void* context )
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b082      	sub	sp, #8
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8005558:	4b7a      	ldr	r3, [pc, #488]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800555a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800555e:	2b01      	cmp	r3, #1
 8005560:	d003      	beq.n	800556a <SX1276OnDio1Irq+0x1a>
 8005562:	2b02      	cmp	r3, #2
 8005564:	f000 809a 	beq.w	800569c <SX1276OnDio1Irq+0x14c>
            default:
                break;
            }
            break;
        default:
            break;
 8005568:	e0e7      	b.n	800573a <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 800556a:	4b76      	ldr	r3, [pc, #472]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800556c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <SX1276OnDio1Irq+0x2a>
 8005574:	2b01      	cmp	r3, #1
 8005576:	d06d      	beq.n	8005654 <SX1276OnDio1Irq+0x104>
                break;
 8005578:	e08f      	b.n	800569a <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 800557a:	f000 ffc3 	bl	8006504 <SX1276GetDio1PinState>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	f000 8085 	beq.w	8005690 <SX1276OnDio1Irq+0x140>
                TimerStop( &RxTimeoutSyncWord );
 8005586:	4870      	ldr	r0, [pc, #448]	; (8005748 <SX1276OnDio1Irq+0x1f8>)
 8005588:	f001 f950 	bl	800682c <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800558c:	4b6d      	ldr	r3, [pc, #436]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800558e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005592:	2b00      	cmp	r3, #0
 8005594:	d119      	bne.n	80055ca <SX1276OnDio1Irq+0x7a>
 8005596:	4b6b      	ldr	r3, [pc, #428]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 8005598:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800559c:	2b00      	cmp	r3, #0
 800559e:	d114      	bne.n	80055ca <SX1276OnDio1Irq+0x7a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 80055a0:	4b68      	ldr	r3, [pc, #416]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80055a2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80055a6:	f083 0301 	eor.w	r3, r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d004      	beq.n	80055ba <SX1276OnDio1Irq+0x6a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 80055b0:	2101      	movs	r1, #1
 80055b2:	4866      	ldr	r0, [pc, #408]	; (800574c <SX1276OnDio1Irq+0x1fc>)
 80055b4:	f7ff fb5e 	bl	8004c74 <SX1276ReadFifo>
 80055b8:	e007      	b.n	80055ca <SX1276OnDio1Irq+0x7a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 80055ba:	2032      	movs	r0, #50	; 0x32
 80055bc:	f7ff fad0 	bl	8004b60 <SX1276Read>
 80055c0:	4603      	mov	r3, r0
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	4b5f      	ldr	r3, [pc, #380]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80055c6:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 80055ca:	4b5e      	ldr	r3, [pc, #376]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80055cc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80055d0:	461a      	mov	r2, r3
 80055d2:	4b5c      	ldr	r3, [pc, #368]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80055d4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80055d8:	1ad3      	subs	r3, r2, r3
 80055da:	4a5a      	ldr	r2, [pc, #360]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80055dc:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 80055e0:	4293      	cmp	r3, r2
 80055e2:	db1d      	blt.n	8005620 <SX1276OnDio1Irq+0xd0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 80055e4:	4b57      	ldr	r3, [pc, #348]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80055e6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80055ea:	461a      	mov	r2, r3
 80055ec:	4b58      	ldr	r3, [pc, #352]	; (8005750 <SX1276OnDio1Irq+0x200>)
 80055ee:	441a      	add	r2, r3
 80055f0:	4b54      	ldr	r3, [pc, #336]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80055f2:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f7ff fb39 	bl	8004c74 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8005602:	4b50      	ldr	r3, [pc, #320]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 8005604:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8005608:	4b4e      	ldr	r3, [pc, #312]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800560a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800560e:	b29b      	uxth	r3, r3
 8005610:	4413      	add	r3, r2
 8005612:	b29b      	uxth	r3, r3
 8005614:	3b01      	subs	r3, #1
 8005616:	b29a      	uxth	r2, r3
 8005618:	4b4a      	ldr	r3, [pc, #296]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800561a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 800561e:	e03c      	b.n	800569a <SX1276OnDio1Irq+0x14a>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005620:	4b48      	ldr	r3, [pc, #288]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 8005622:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005626:	461a      	mov	r2, r3
 8005628:	4b49      	ldr	r3, [pc, #292]	; (8005750 <SX1276OnDio1Irq+0x200>)
 800562a:	18d0      	adds	r0, r2, r3
 800562c:	4b45      	ldr	r3, [pc, #276]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800562e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005632:	b2da      	uxtb	r2, r3
 8005634:	4b43      	ldr	r3, [pc, #268]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 8005636:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800563a:	b2db      	uxtb	r3, r3
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	b2db      	uxtb	r3, r3
 8005640:	4619      	mov	r1, r3
 8005642:	f7ff fb17 	bl	8004c74 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005646:	4b3f      	ldr	r3, [pc, #252]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 8005648:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800564c:	4b3d      	ldr	r3, [pc, #244]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800564e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8005652:	e022      	b.n	800569a <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 8005654:	f000 ff56 	bl	8006504 <SX1276GetDio1PinState>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d01a      	beq.n	8005694 <SX1276OnDio1Irq+0x144>
                TimerStop( &RxTimeoutTimer );
 800565e:	483d      	ldr	r0, [pc, #244]	; (8005754 <SX1276OnDio1Irq+0x204>)
 8005660:	f001 f8e4 	bl	800682c <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8005664:	2180      	movs	r1, #128	; 0x80
 8005666:	2012      	movs	r0, #18
 8005668:	f7ff fa6a 	bl	8004b40 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800566c:	4b35      	ldr	r3, [pc, #212]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800566e:	2200      	movs	r2, #0
 8005670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005674:	4b38      	ldr	r3, [pc, #224]	; (8005758 <SX1276OnDio1Irq+0x208>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d00d      	beq.n	8005698 <SX1276OnDio1Irq+0x148>
 800567c:	4b36      	ldr	r3, [pc, #216]	; (8005758 <SX1276OnDio1Irq+0x208>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d008      	beq.n	8005698 <SX1276OnDio1Irq+0x148>
                    RadioEvents->RxTimeout( );
 8005686:	4b34      	ldr	r3, [pc, #208]	; (8005758 <SX1276OnDio1Irq+0x208>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4798      	blx	r3
                break;
 800568e:	e003      	b.n	8005698 <SX1276OnDio1Irq+0x148>
                    break;
 8005690:	bf00      	nop
 8005692:	e052      	b.n	800573a <SX1276OnDio1Irq+0x1ea>
                    break;
 8005694:	bf00      	nop
 8005696:	e050      	b.n	800573a <SX1276OnDio1Irq+0x1ea>
                break;
 8005698:	bf00      	nop
            break;
 800569a:	e04e      	b.n	800573a <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 800569c:	4b29      	ldr	r3, [pc, #164]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800569e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <SX1276OnDio1Irq+0x15a>
 80056a6:	2b01      	cmp	r3, #1
                break;
 80056a8:	e046      	b.n	8005738 <SX1276OnDio1Irq+0x1e8>
                if( SX1276GetDio1PinState( ) == 1 )
 80056aa:	f000 ff2b 	bl	8006504 <SX1276GetDio1PinState>
 80056ae:	4603      	mov	r3, r0
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d040      	beq.n	8005736 <SX1276OnDio1Irq+0x1e6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 80056b4:	4b23      	ldr	r3, [pc, #140]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80056b6:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80056ba:	461a      	mov	r2, r3
 80056bc:	4b21      	ldr	r3, [pc, #132]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80056be:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	4a1f      	ldr	r2, [pc, #124]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80056c6:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 80056ca:	4293      	cmp	r3, r2
 80056cc:	dd19      	ble.n	8005702 <SX1276OnDio1Irq+0x1b2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 80056ce:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80056d0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80056d4:	461a      	mov	r2, r3
 80056d6:	4b1e      	ldr	r3, [pc, #120]	; (8005750 <SX1276OnDio1Irq+0x200>)
 80056d8:	4413      	add	r3, r2
 80056da:	4a1a      	ldr	r2, [pc, #104]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80056dc:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 80056e0:	4611      	mov	r1, r2
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff fab6 	bl	8004c54 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80056e8:	4b16      	ldr	r3, [pc, #88]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80056ea:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80056f0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	4413      	add	r3, r2
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	4b12      	ldr	r3, [pc, #72]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 80056fc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8005700:	e01a      	b.n	8005738 <SX1276OnDio1Irq+0x1e8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005702:	4b10      	ldr	r3, [pc, #64]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 8005704:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005708:	461a      	mov	r2, r3
 800570a:	4b11      	ldr	r3, [pc, #68]	; (8005750 <SX1276OnDio1Irq+0x200>)
 800570c:	18d0      	adds	r0, r2, r3
 800570e:	4b0d      	ldr	r3, [pc, #52]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 8005710:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005714:	b2da      	uxtb	r2, r3
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 8005718:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800571c:	b2db      	uxtb	r3, r3
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4619      	mov	r1, r3
 8005724:	f7ff fa96 	bl	8004c54 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 800572a:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800572e:	4b05      	ldr	r3, [pc, #20]	; (8005744 <SX1276OnDio1Irq+0x1f4>)
 8005730:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8005734:	e000      	b.n	8005738 <SX1276OnDio1Irq+0x1e8>
                    break;
 8005736:	bf00      	nop
            break;
 8005738:	bf00      	nop
    }
}
 800573a:	bf00      	nop
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	200002f0 	.word	0x200002f0
 8005748:	200002d8 	.word	0x200002d8
 800574c:	2000036a 	.word	0x2000036a
 8005750:	20000048 	.word	0x20000048
 8005754:	20000398 	.word	0x20000398
 8005758:	20000044 	.word	0x20000044

0800575c <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void* context )
{
 800575c:	b590      	push	{r4, r7, lr}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8005764:	4b52      	ldr	r3, [pc, #328]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 8005766:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800576a:	2b01      	cmp	r3, #1
 800576c:	d002      	beq.n	8005774 <SX1276OnDio2Irq+0x18>
 800576e:	2b02      	cmp	r3, #2
 8005770:	d06e      	beq.n	8005850 <SX1276OnDio2Irq+0xf4>
            default:
                break;
            }
            break;
        default:
            break;
 8005772:	e099      	b.n	80058a8 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 8005774:	4b4e      	ldr	r3, [pc, #312]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 8005776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <SX1276OnDio2Irq+0x28>
 800577e:	2b01      	cmp	r3, #1
 8005780:	d043      	beq.n	800580a <SX1276OnDio2Irq+0xae>
                break;
 8005782:	e064      	b.n	800584e <SX1276OnDio2Irq+0xf2>
                if( SX1276.DIO4.port == NULL )
 8005784:	4b4a      	ldr	r3, [pc, #296]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 8005786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005788:	2b00      	cmp	r3, #0
 800578a:	d103      	bne.n	8005794 <SX1276OnDio2Irq+0x38>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800578c:	4b48      	ldr	r3, [pc, #288]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 800578e:	2201      	movs	r2, #1
 8005790:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005794:	4b46      	ldr	r3, [pc, #280]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 8005796:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800579a:	2b00      	cmp	r3, #0
 800579c:	d054      	beq.n	8005848 <SX1276OnDio2Irq+0xec>
 800579e:	4b44      	ldr	r3, [pc, #272]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 80057a0:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d14f      	bne.n	8005848 <SX1276OnDio2Irq+0xec>
                    TimerStop( &RxTimeoutSyncWord );
 80057a8:	4842      	ldr	r0, [pc, #264]	; (80058b4 <SX1276OnDio2Irq+0x158>)
 80057aa:	f001 f83f 	bl	800682c <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 80057ae:	4b40      	ldr	r3, [pc, #256]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 80057b0:	2201      	movs	r2, #1
 80057b2:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 80057b6:	2011      	movs	r0, #17
 80057b8:	f7ff f9d2 	bl	8004b60 <SX1276Read>
 80057bc:	4603      	mov	r3, r0
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	b2db      	uxtb	r3, r3
 80057c2:	425b      	negs	r3, r3
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	b25a      	sxtb	r2, r3
 80057c8:	4b39      	ldr	r3, [pc, #228]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 80057ca:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80057ce:	201b      	movs	r0, #27
 80057d0:	f7ff f9c6 	bl	8004b60 <SX1276Read>
 80057d4:	4603      	mov	r3, r0
 80057d6:	021c      	lsls	r4, r3, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 80057d8:	201c      	movs	r0, #28
 80057da:	f7ff f9c1 	bl	8004b60 <SX1276Read>
 80057de:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 80057e0:	4323      	orrs	r3, r4
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff faaa 	bl	8004d3c <SX1276ConvertPllStepToFreqInHz>
 80057e8:	4603      	mov	r3, r0
 80057ea:	461a      	mov	r2, r3
 80057ec:	4b30      	ldr	r3, [pc, #192]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 80057ee:	675a      	str	r2, [r3, #116]	; 0x74
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 80057f0:	200c      	movs	r0, #12
 80057f2:	f7ff f9b5 	bl	8004b60 <SX1276Read>
 80057f6:	4603      	mov	r3, r0
 80057f8:	095b      	lsrs	r3, r3, #5
 80057fa:	b2db      	uxtb	r3, r3
 80057fc:	f003 0307 	and.w	r3, r3, #7
 8005800:	b2da      	uxtb	r2, r3
 8005802:	4b2b      	ldr	r3, [pc, #172]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 8005804:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                break;
 8005808:	e01e      	b.n	8005848 <SX1276OnDio2Irq+0xec>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800580a:	4b29      	ldr	r3, [pc, #164]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 800580c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005810:	2b00      	cmp	r3, #0
 8005812:	d01b      	beq.n	800584c <SX1276OnDio2Irq+0xf0>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005814:	2102      	movs	r1, #2
 8005816:	2012      	movs	r0, #18
 8005818:	f7ff f992 	bl	8004b40 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800581c:	4b26      	ldr	r3, [pc, #152]	; (80058b8 <SX1276OnDio2Irq+0x15c>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d013      	beq.n	800584c <SX1276OnDio2Irq+0xf0>
 8005824:	4b24      	ldr	r3, [pc, #144]	; (80058b8 <SX1276OnDio2Irq+0x15c>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00e      	beq.n	800584c <SX1276OnDio2Irq+0xf0>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800582e:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <SX1276OnDio2Irq+0x15c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	695c      	ldr	r4, [r3, #20]
 8005834:	201c      	movs	r0, #28
 8005836:	f7ff f993 	bl	8004b60 <SX1276Read>
 800583a:	4603      	mov	r3, r0
 800583c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005840:	b2db      	uxtb	r3, r3
 8005842:	4618      	mov	r0, r3
 8005844:	47a0      	blx	r4
                break;
 8005846:	e001      	b.n	800584c <SX1276OnDio2Irq+0xf0>
                break;
 8005848:	bf00      	nop
 800584a:	e02d      	b.n	80058a8 <SX1276OnDio2Irq+0x14c>
                break;
 800584c:	bf00      	nop
            break;
 800584e:	e02b      	b.n	80058a8 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 8005850:	4b17      	ldr	r3, [pc, #92]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 8005852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005856:	2b00      	cmp	r3, #0
 8005858:	d020      	beq.n	800589c <SX1276OnDio2Irq+0x140>
 800585a:	2b01      	cmp	r3, #1
 800585c:	d120      	bne.n	80058a0 <SX1276OnDio2Irq+0x144>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800585e:	4b14      	ldr	r3, [pc, #80]	; (80058b0 <SX1276OnDio2Irq+0x154>)
 8005860:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005864:	2b00      	cmp	r3, #0
 8005866:	d01d      	beq.n	80058a4 <SX1276OnDio2Irq+0x148>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005868:	2102      	movs	r1, #2
 800586a:	2012      	movs	r0, #18
 800586c:	f7ff f968 	bl	8004b40 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005870:	4b11      	ldr	r3, [pc, #68]	; (80058b8 <SX1276OnDio2Irq+0x15c>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d015      	beq.n	80058a4 <SX1276OnDio2Irq+0x148>
 8005878:	4b0f      	ldr	r3, [pc, #60]	; (80058b8 <SX1276OnDio2Irq+0x15c>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	695b      	ldr	r3, [r3, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d010      	beq.n	80058a4 <SX1276OnDio2Irq+0x148>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005882:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <SX1276OnDio2Irq+0x15c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695c      	ldr	r4, [r3, #20]
 8005888:	201c      	movs	r0, #28
 800588a:	f7ff f969 	bl	8004b60 <SX1276Read>
 800588e:	4603      	mov	r3, r0
 8005890:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005894:	b2db      	uxtb	r3, r3
 8005896:	4618      	mov	r0, r3
 8005898:	47a0      	blx	r4
                break;
 800589a:	e003      	b.n	80058a4 <SX1276OnDio2Irq+0x148>
                break;
 800589c:	bf00      	nop
 800589e:	e002      	b.n	80058a6 <SX1276OnDio2Irq+0x14a>
                break;
 80058a0:	bf00      	nop
 80058a2:	e000      	b.n	80058a6 <SX1276OnDio2Irq+0x14a>
                break;
 80058a4:	bf00      	nop
            break;
 80058a6:	bf00      	nop
    }
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd90      	pop	{r4, r7, pc}
 80058b0:	200002f0 	.word	0x200002f0
 80058b4:	200002d8 	.word	0x200002d8
 80058b8:	20000044 	.word	0x20000044

080058bc <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void* context )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 80058c4:	4b1e      	ldr	r3, [pc, #120]	; (8005940 <SX1276OnDio3Irq+0x84>)
 80058c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d030      	beq.n	8005930 <SX1276OnDio3Irq+0x74>
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d000      	beq.n	80058d4 <SX1276OnDio3Irq+0x18>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 80058d2:	e030      	b.n	8005936 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 80058d4:	2012      	movs	r0, #18
 80058d6:	f7ff f943 	bl	8004b60 <SX1276Read>
 80058da:	4603      	mov	r3, r0
 80058dc:	f003 0301 	and.w	r3, r3, #1
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d112      	bne.n	800590a <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 80058e4:	2105      	movs	r1, #5
 80058e6:	2012      	movs	r0, #18
 80058e8:	f7ff f92a 	bl	8004b40 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80058ec:	4b15      	ldr	r3, [pc, #84]	; (8005944 <SX1276OnDio3Irq+0x88>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01f      	beq.n	8005934 <SX1276OnDio3Irq+0x78>
 80058f4:	4b13      	ldr	r3, [pc, #76]	; (8005944 <SX1276OnDio3Irq+0x88>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d01a      	beq.n	8005934 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 80058fe:	4b11      	ldr	r3, [pc, #68]	; (8005944 <SX1276OnDio3Irq+0x88>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	699b      	ldr	r3, [r3, #24]
 8005904:	2001      	movs	r0, #1
 8005906:	4798      	blx	r3
        break;
 8005908:	e014      	b.n	8005934 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800590a:	2104      	movs	r1, #4
 800590c:	2012      	movs	r0, #18
 800590e:	f7ff f917 	bl	8004b40 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005912:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <SX1276OnDio3Irq+0x88>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00c      	beq.n	8005934 <SX1276OnDio3Irq+0x78>
 800591a:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <SX1276OnDio3Irq+0x88>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d007      	beq.n	8005934 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <SX1276OnDio3Irq+0x88>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	2000      	movs	r0, #0
 800592c:	4798      	blx	r3
        break;
 800592e:	e001      	b.n	8005934 <SX1276OnDio3Irq+0x78>
        break;
 8005930:	bf00      	nop
 8005932:	e000      	b.n	8005936 <SX1276OnDio3Irq+0x7a>
        break;
 8005934:	bf00      	nop
    }
}
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	200002f0 	.word	0x200002f0
 8005944:	20000044 	.word	0x20000044

08005948 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void* context )
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8005950:	4b0c      	ldr	r3, [pc, #48]	; (8005984 <SX1276OnDio4Irq+0x3c>)
 8005952:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005956:	2b00      	cmp	r3, #0
 8005958:	d002      	beq.n	8005960 <SX1276OnDio4Irq+0x18>
 800595a:	2b01      	cmp	r3, #1
 800595c:	d00a      	beq.n	8005974 <SX1276OnDio4Irq+0x2c>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 800595e:	e00c      	b.n	800597a <SX1276OnDio4Irq+0x32>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005960:	4b08      	ldr	r3, [pc, #32]	; (8005984 <SX1276OnDio4Irq+0x3c>)
 8005962:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <SX1276OnDio4Irq+0x30>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800596a:	4b06      	ldr	r3, [pc, #24]	; (8005984 <SX1276OnDio4Irq+0x3c>)
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        break;
 8005972:	e001      	b.n	8005978 <SX1276OnDio4Irq+0x30>
        break;
 8005974:	bf00      	nop
 8005976:	e000      	b.n	800597a <SX1276OnDio4Irq+0x32>
        break;
 8005978:	bf00      	nop
    }
}
 800597a:	bf00      	nop
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	bc80      	pop	{r7}
 8005982:	4770      	bx	lr
 8005984:	200002f0 	.word	0x200002f0

08005988 <BoardCriticalSectionBegin>:

uint8_t Uart2TxBuffer[UART2_FIFO_TX_SIZE];
uint8_t Uart2RxBuffer[UART2_FIFO_RX_SIZE];

void BoardCriticalSectionBegin( uint32_t *mask )
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005990:	f3ef 8310 	mrs	r3, PRIMASK
 8005994:	60fb      	str	r3, [r7, #12]
  return(result);
 8005996:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800599c:	b672      	cpsid	i
}
 800599e:	bf00      	nop
    __disable_irq( );
}
 80059a0:	bf00      	nop
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bc80      	pop	{r7}
 80059a8:	4770      	bx	lr

080059aa <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
 80059aa:	b480      	push	{r7}
 80059ac:	b085      	sub	sp, #20
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f383 8810 	msr	PRIMASK, r3
}
 80059be:	bf00      	nop
}
 80059c0:	bf00      	nop
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bc80      	pop	{r7}
 80059c8:	4770      	bx	lr

080059ca <BoardInitPeriph>:

void BoardInitPeriph( void )
{
 80059ca:	b480      	push	{r7}
 80059cc:	af00      	add	r7, sp, #0

}
 80059ce:	bf00      	nop
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bc80      	pop	{r7}
 80059d4:	4770      	bx	lr
	...

080059d8 <BoardInitMcu>:

void BoardInitMcu( void )
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
    if( McuInitialized == false )
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <BoardInitMcu+0x20>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	f083 0301 	eor.w	r3, r3, #1
 80059e4:	b2db      	uxtb	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <BoardInitMcu+0x1a>
    {
        RtcInit( );
 80059ea:	f000 f94d 	bl	8005c88 <RtcInit>
        BoardUnusedIoInit( );
 80059ee:	f000 f805 	bl	80059fc <BoardUnusedIoInit>
//        LpmSetOffMode( LPM_APPLI_ID, LPM_DISABLE );

    }
}
 80059f2:	bf00      	nop
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000148 	.word	0x20000148

080059fc <BoardUnusedIoInit>:
//    // Compute and return the temperature in degree celcius * 256
//    return ( int16_t ) COMPUTE_TEMPERATURE( tempRaw, BatteryVoltage );
//}

static void BoardUnusedIoInit( void )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
    HAL_DBGMCU_EnableDBGSleepMode( );
 8005a00:	f7fb f9de 	bl	8000dc0 <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode( );
 8005a04:	f7fb f9ea 	bl	8000ddc <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 8005a08:	f7fb f9f6 	bl	8000df8 <HAL_DBGMCU_EnableDBGStandbyMode>
}
 8005a0c:	bf00      	nop
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7fb f9af 	bl	8000d7c <HAL_Delay>
}
 8005a1e:	bf00      	nop
 8005a20:	3708      	adds	r7, #8
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
	...

08005a28 <init_rf>:
 */
extern Gpio_t Led1;
extern Gpio_t Led2;

void init_rf (void)
{
 8005a28:	b590      	push	{r4, r7, lr}
 8005a2a:	b08b      	sub	sp, #44	; 0x2c
 8005a2c:	af0a      	add	r7, sp, #40	; 0x28
  // Target board initialization
  BoardInitMcu( );
 8005a2e:	f7ff ffd3 	bl	80059d8 <BoardInitMcu>
  BoardInitPeriph( );
 8005a32:	f7ff ffca 	bl	80059ca <BoardInitPeriph>

  // Radio initialization
  RadioEvents.TxDone = OnTxDone;
 8005a36:	4b2c      	ldr	r3, [pc, #176]	; (8005ae8 <init_rf+0xc0>)
 8005a38:	4a2c      	ldr	r2, [pc, #176]	; (8005aec <init_rf+0xc4>)
 8005a3a:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8005a3c:	4b2a      	ldr	r3, [pc, #168]	; (8005ae8 <init_rf+0xc0>)
 8005a3e:	4a2c      	ldr	r2, [pc, #176]	; (8005af0 <init_rf+0xc8>)
 8005a40:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8005a42:	4b29      	ldr	r3, [pc, #164]	; (8005ae8 <init_rf+0xc0>)
 8005a44:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <init_rf+0xcc>)
 8005a46:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8005a48:	4b27      	ldr	r3, [pc, #156]	; (8005ae8 <init_rf+0xc0>)
 8005a4a:	4a2b      	ldr	r2, [pc, #172]	; (8005af8 <init_rf+0xd0>)
 8005a4c:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8005a4e:	4b26      	ldr	r3, [pc, #152]	; (8005ae8 <init_rf+0xc0>)
 8005a50:	4a2a      	ldr	r2, [pc, #168]	; (8005afc <init_rf+0xd4>)
 8005a52:	611a      	str	r2, [r3, #16]

  Radio.Init( &RadioEvents );
 8005a54:	4b2a      	ldr	r3, [pc, #168]	; (8005b00 <init_rf+0xd8>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4823      	ldr	r0, [pc, #140]	; (8005ae8 <init_rf+0xc0>)
 8005a5a:	4798      	blx	r3

  Radio.SetChannel( RF_FREQUENCY );
 8005a5c:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <init_rf+0xd8>)
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	4828      	ldr	r0, [pc, #160]	; (8005b04 <init_rf+0xdc>)
 8005a62:	4798      	blx	r3

  Radio.SetMaxPayloadLength( MODEM_LORA, BUFFER_SIZE );

#elif defined( USE_MODEM_FSK )

  Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 8005a64:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <init_rf+0xd8>)
 8005a66:	69dc      	ldr	r4, [r3, #28]
 8005a68:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005a6c:	9308      	str	r3, [sp, #32]
 8005a6e:	2300      	movs	r3, #0
 8005a70:	9307      	str	r3, [sp, #28]
 8005a72:	2300      	movs	r3, #0
 8005a74:	9306      	str	r3, [sp, #24]
 8005a76:	2300      	movs	r3, #0
 8005a78:	9305      	str	r3, [sp, #20]
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	2300      	movs	r3, #0
 8005a80:	9303      	str	r3, [sp, #12]
 8005a82:	2305      	movs	r3, #5
 8005a84:	9302      	str	r3, [sp, #8]
 8005a86:	2300      	movs	r3, #0
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	2300      	movs	r3, #0
 8005a92:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8005a96:	210e      	movs	r1, #14
 8005a98:	2000      	movs	r0, #0
 8005a9a:	47a0      	blx	r4
                                FSK_DATARATE, 0,
                                FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
                                true, 0, 0, 0, 3000 );

  Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 8005a9c:	4b18      	ldr	r3, [pc, #96]	; (8005b00 <init_rf+0xd8>)
 8005a9e:	699c      	ldr	r4, [r3, #24]
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	9308      	str	r3, [sp, #32]
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	9307      	str	r3, [sp, #28]
 8005aac:	2300      	movs	r3, #0
 8005aae:	9306      	str	r3, [sp, #24]
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	9305      	str	r3, [sp, #20]
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	9304      	str	r3, [sp, #16]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	2300      	movs	r3, #0
 8005abe:	9302      	str	r3, [sp, #8]
 8005ac0:	2305      	movs	r3, #5
 8005ac2:	9301      	str	r3, [sp, #4]
 8005ac4:	4b10      	ldr	r3, [pc, #64]	; (8005b08 <init_rf+0xe0>)
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005ace:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005ad2:	2000      	movs	r0, #0
 8005ad4:	47a0      	blx	r4
                                0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
                                0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, true,
                                0, 0,false, true );

  Radio.SetMaxPayloadLength( MODEM_FSK, BUFFER_SIZE );
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <init_rf+0xd8>)
 8005ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ada:	2140      	movs	r1, #64	; 0x40
 8005adc:	2000      	movs	r0, #0
 8005ade:	4798      	blx	r3
#endif

}
 8005ae0:	bf00      	nop
 8005ae2:	3704      	adds	r7, #4
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd90      	pop	{r4, r7, pc}
 8005ae8:	20000158 	.word	0x20000158
 8005aec:	08005b79 	.word	0x08005b79
 8005af0:	08005bb1 	.word	0x08005bb1
 8005af4:	08005c35 	.word	0x08005c35
 8005af8:	08005c51 	.word	0x08005c51
 8005afc:	08005c6d 	.word	0x08005c6d
 8005b00:	08006c14 	.word	0x08006c14
 8005b04:	1ad27480 	.word	0x1ad27480
 8005b08:	00014585 	.word	0x00014585

08005b0c <ping_pong_rf>:
}
#endif


void ping_pong_rf (void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
//  RtcInit();
  bool isMaster = true;
 8005b12:	2301      	movs	r3, #1
 8005b14:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  init_rf( );
 8005b16:	f7ff ff87 	bl	8005a28 <init_rf>

    }
#endif

#ifdef UART_TEST
  State = TX;
 8005b1a:	4b12      	ldr	r3, [pc, #72]	; (8005b64 <ping_pong_rf+0x58>)
 8005b1c:	2204      	movs	r2, #4
 8005b1e:	701a      	strb	r2, [r3, #0]
  while(1){
      while(IsSend){
 8005b20:	e014      	b.n	8005b4c <ping_pong_rf+0x40>
	  switch( State )
 8005b22:	4b10      	ldr	r3, [pc, #64]	; (8005b64 <ping_pong_rf+0x58>)
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d10f      	bne.n	8005b4a <ping_pong_rf+0x3e>
	  	{
		  case TX:
		  *(uint32_t*)data_UART = count;
 8005b2a:	4a0f      	ldr	r2, [pc, #60]	; (8005b68 <ping_pong_rf+0x5c>)
 8005b2c:	4b0f      	ldr	r3, [pc, #60]	; (8005b6c <ping_pong_rf+0x60>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	6013      	str	r3, [r2, #0]
		  HAL_Delay(50);
 8005b32:	2032      	movs	r0, #50	; 0x32
 8005b34:	f7fb f922 	bl	8000d7c <HAL_Delay>
		  Radio.Send( data_UART, sizeof(data_UART) );
 8005b38:	4b0d      	ldr	r3, [pc, #52]	; (8005b70 <ping_pong_rf+0x64>)
 8005b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b3c:	2104      	movs	r1, #4
 8005b3e:	480a      	ldr	r0, [pc, #40]	; (8005b68 <ping_pong_rf+0x5c>)
 8005b40:	4798      	blx	r3
		  State = LOWPOWER;
 8005b42:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <ping_pong_rf+0x58>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	701a      	strb	r2, [r3, #0]
		  break;
 8005b48:	e000      	b.n	8005b4c <ping_pong_rf+0x40>
		  case TX_TIMEOUT:
		  case RX:
		  case RX_ERROR:
		  case LOWPOWER:
		  default:
		  break;
 8005b4a:	bf00      	nop
      while(IsSend){
 8005b4c:	4b09      	ldr	r3, [pc, #36]	; (8005b74 <ping_pong_rf+0x68>)
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e6      	bne.n	8005b22 <ping_pong_rf+0x16>
	 }
      }
      if ( count == MAX_COUNT_OF_PACKETS ) {
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <ping_pong_rf+0x60>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b64      	cmp	r3, #100	; 0x64
 8005b5a:	d1f7      	bne.n	8005b4c <ping_pong_rf+0x40>
	  count = 0;
 8005b5c:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <ping_pong_rf+0x60>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]
      while(IsSend){
 8005b62:	e7f3      	b.n	8005b4c <ping_pong_rf+0x40>
 8005b64:	20000154 	.word	0x20000154
 8005b68:	2000014c 	.word	0x2000014c
 8005b6c:	20000150 	.word	0x20000150
 8005b70:	08006c14 	.word	0x08006c14
 8005b74:	20000024 	.word	0x20000024

08005b78 <OnTxDone>:
         }
     }
}

void OnTxDone( void )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8005b7c:	2108      	movs	r1, #8
 8005b7e:	4808      	ldr	r0, [pc, #32]	; (8005ba0 <OnTxDone+0x28>)
 8005b80:	f7fb fc27 	bl	80013d2 <HAL_GPIO_TogglePin>
    Radio.Sleep( );
 8005b84:	4b07      	ldr	r3, [pc, #28]	; (8005ba4 <OnTxDone+0x2c>)
 8005b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b88:	4798      	blx	r3
    State = TX;
 8005b8a:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <OnTxDone+0x30>)
 8005b8c:	2204      	movs	r2, #4
 8005b8e:	701a      	strb	r2, [r3, #0]
    count++;
 8005b90:	4b06      	ldr	r3, [pc, #24]	; (8005bac <OnTxDone+0x34>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3301      	adds	r3, #1
 8005b96:	4a05      	ldr	r2, [pc, #20]	; (8005bac <OnTxDone+0x34>)
 8005b98:	6013      	str	r3, [r2, #0]
}
 8005b9a:	bf00      	nop
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40020800 	.word	0x40020800
 8005ba4:	08006c14 	.word	0x08006c14
 8005ba8:	20000154 	.word	0x20000154
 8005bac:	20000150 	.word	0x20000150

08005bb0 <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	60f8      	str	r0, [r7, #12]
 8005bb8:	4608      	mov	r0, r1
 8005bba:	4611      	mov	r1, r2
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	817b      	strh	r3, [r7, #10]
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	813b      	strh	r3, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8005bca:	2108      	movs	r1, #8
 8005bcc:	4812      	ldr	r0, [pc, #72]	; (8005c18 <OnRxDone+0x68>)
 8005bce:	f7fb fc00 	bl	80013d2 <HAL_GPIO_TogglePin>
    HAL_Delay(1000);
 8005bd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005bd6:	f7fb f8d1 	bl	8000d7c <HAL_Delay>
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8005bda:	2108      	movs	r1, #8
 8005bdc:	480e      	ldr	r0, [pc, #56]	; (8005c18 <OnRxDone+0x68>)
 8005bde:	f7fb fbf8 	bl	80013d2 <HAL_GPIO_TogglePin>
    Radio.Sleep( );
 8005be2:	4b0e      	ldr	r3, [pc, #56]	; (8005c1c <OnRxDone+0x6c>)
 8005be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be6:	4798      	blx	r3
    BufferSize = size;
 8005be8:	4a0d      	ldr	r2, [pc, #52]	; (8005c20 <OnRxDone+0x70>)
 8005bea:	897b      	ldrh	r3, [r7, #10]
 8005bec:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 8005bee:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <OnRxDone+0x70>)
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	68f9      	ldr	r1, [r7, #12]
 8005bf6:	480b      	ldr	r0, [pc, #44]	; (8005c24 <OnRxDone+0x74>)
 8005bf8:	f000 ff5c 	bl	8006ab4 <memcpy>
    RssiValue = rssi;
 8005bfc:	893b      	ldrh	r3, [r7, #8]
 8005bfe:	b25a      	sxtb	r2, r3
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <OnRxDone+0x78>)
 8005c02:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 8005c04:	4a09      	ldr	r2, [pc, #36]	; (8005c2c <OnRxDone+0x7c>)
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	7013      	strb	r3, [r2, #0]
    State = RX;
 8005c0a:	4b09      	ldr	r3, [pc, #36]	; (8005c30 <OnRxDone+0x80>)
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	701a      	strb	r2, [r3, #0]
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40020800 	.word	0x40020800
 8005c1c:	08006c14 	.word	0x08006c14
 8005c20:	20000026 	.word	0x20000026
 8005c24:	200003b0 	.word	0x200003b0
 8005c28:	20000155 	.word	0x20000155
 8005c2c:	20000156 	.word	0x20000156
 8005c30:	20000154 	.word	0x20000154

08005c34 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005c38:	4b03      	ldr	r3, [pc, #12]	; (8005c48 <OnTxTimeout+0x14>)
 8005c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c3c:	4798      	blx	r3
    State = TX_TIMEOUT;
 8005c3e:	4b03      	ldr	r3, [pc, #12]	; (8005c4c <OnTxTimeout+0x18>)
 8005c40:	2205      	movs	r2, #5
 8005c42:	701a      	strb	r2, [r3, #0]
}
 8005c44:	bf00      	nop
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	08006c14 	.word	0x08006c14
 8005c4c:	20000154 	.word	0x20000154

08005c50 <OnRxTimeout>:

void OnRxTimeout( void )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <OnRxTimeout+0x14>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c58:	4798      	blx	r3
    State = RX_TIMEOUT;
 8005c5a:	4b03      	ldr	r3, [pc, #12]	; (8005c68 <OnRxTimeout+0x18>)
 8005c5c:	2202      	movs	r2, #2
 8005c5e:	701a      	strb	r2, [r3, #0]
}
 8005c60:	bf00      	nop
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	08006c14 	.word	0x08006c14
 8005c68:	20000154 	.word	0x20000154

08005c6c <OnRxError>:

void OnRxError( void )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8005c70:	4b03      	ldr	r3, [pc, #12]	; (8005c80 <OnRxError+0x14>)
 8005c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c74:	4798      	blx	r3
    State = RX_ERROR;
 8005c76:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <OnRxError+0x18>)
 8005c78:	2203      	movs	r2, #3
 8005c7a:	701a      	strb	r2, [r3, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	08006c14 	.word	0x08006c14
 8005c84:	20000154 	.word	0x20000154

08005c88 <RtcInit>:
 * \retval calendarValue Time in ticks
 */
static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time );

void RtcInit( void )
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;

    if( RtcInitialized == false )
 8005c8e:	4b2f      	ldr	r3, [pc, #188]	; (8005d4c <RtcInit+0xc4>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	f083 0301 	eor.w	r3, r3, #1
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d053      	beq.n	8005d44 <RtcInit+0xbc>
    {
        __HAL_RCC_RTC_ENABLE( );
 8005c9c:	4b2c      	ldr	r3, [pc, #176]	; (8005d50 <RtcInit+0xc8>)
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance            = RTC;
 8005ca2:	4b2c      	ldr	r3, [pc, #176]	; (8005d54 <RtcInit+0xcc>)
 8005ca4:	4a2c      	ldr	r2, [pc, #176]	; (8005d58 <RtcInit+0xd0>)
 8005ca6:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8005ca8:	4b2a      	ldr	r3, [pc, #168]	; (8005d54 <RtcInit+0xcc>)
 8005caa:	2200      	movs	r2, #0
 8005cac:	605a      	str	r2, [r3, #4]
        RtcHandle.Init.AsynchPrediv   = PREDIV_A;  // RTC_ASYNCH_PREDIV;
 8005cae:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <RtcInit+0xcc>)
 8005cb0:	221f      	movs	r2, #31
 8005cb2:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 8005cb4:	4b27      	ldr	r3, [pc, #156]	; (8005d54 <RtcInit+0xcc>)
 8005cb6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005cba:	60da      	str	r2, [r3, #12]
        RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 8005cbc:	4b25      	ldr	r3, [pc, #148]	; (8005d54 <RtcInit+0xcc>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005cc2:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <RtcInit+0xcc>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005cc8:	4b22      	ldr	r3, [pc, #136]	; (8005d54 <RtcInit+0xcc>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 8005cce:	4821      	ldr	r0, [pc, #132]	; (8005d54 <RtcInit+0xcc>)
 8005cd0:	f7fc fa86 	bl	80021e0 <HAL_RTC_Init>

        date.Year                     = 0;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	75fb      	strb	r3, [r7, #23]
        date.Month                    = RTC_MONTH_JANUARY;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	757b      	strb	r3, [r7, #21]
        date.Date                     = 1;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	75bb      	strb	r3, [r7, #22]
        date.WeekDay                  = RTC_WEEKDAY_MONDAY;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	753b      	strb	r3, [r7, #20]
        HAL_RTC_SetDate( &RtcHandle, &date, RTC_FORMAT_BIN );
 8005ce4:	f107 0314 	add.w	r3, r7, #20
 8005ce8:	2200      	movs	r2, #0
 8005cea:	4619      	mov	r1, r3
 8005cec:	4819      	ldr	r0, [pc, #100]	; (8005d54 <RtcInit+0xcc>)
 8005cee:	f7fc fc03 	bl	80024f8 <HAL_RTC_SetDate>

        /*at 0:0:0*/
        time.Hours                    = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	703b      	strb	r3, [r7, #0]
        time.Minutes                  = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	707b      	strb	r3, [r7, #1]
        time.Seconds                  = 0;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	70bb      	strb	r3, [r7, #2]
        time.SubSeconds               = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]
        time.TimeFormat               = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	70fb      	strb	r3, [r7, #3]
        time.StoreOperation           = RTC_STOREOPERATION_RESET;
 8005d06:	2300      	movs	r3, #0
 8005d08:	613b      	str	r3, [r7, #16]
        time.DayLightSaving           = RTC_DAYLIGHTSAVING_NONE;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	60fb      	str	r3, [r7, #12]
        HAL_RTC_SetTime( &RtcHandle, &time, RTC_FORMAT_BIN );
 8005d0e:	463b      	mov	r3, r7
 8005d10:	2200      	movs	r2, #0
 8005d12:	4619      	mov	r1, r3
 8005d14:	480f      	ldr	r0, [pc, #60]	; (8005d54 <RtcInit+0xcc>)
 8005d16:	f7fc fade 	bl	80022d6 <HAL_RTC_SetTime>

        // Enable Direct Read of the calendar registers (not through Shadow registers)
        HAL_RTCEx_EnableBypassShadow( &RtcHandle );
 8005d1a:	480e      	ldr	r0, [pc, #56]	; (8005d54 <RtcInit+0xcc>)
 8005d1c:	f7fc ff73 	bl	8002c06 <HAL_RTCEx_EnableBypassShadow>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 1, 0 );
 8005d20:	2200      	movs	r2, #0
 8005d22:	2101      	movs	r1, #1
 8005d24:	2029      	movs	r0, #41	; 0x29
 8005d26:	f7fb f92a 	bl	8000f7e <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 8005d2a:	2029      	movs	r0, #41	; 0x29
 8005d2c:	f7fb f943 	bl	8000fb6 <HAL_NVIC_EnableIRQ>

        // Init alarm.
        HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8005d30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d34:	4807      	ldr	r0, [pc, #28]	; (8005d54 <RtcInit+0xcc>)
 8005d36:	f7fc fe03 	bl	8002940 <HAL_RTC_DeactivateAlarm>

        RtcSetTimerContext( );
 8005d3a:	f000 f80f 	bl	8005d5c <RtcSetTimerContext>
        RtcInitialized = true;
 8005d3e:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <RtcInit+0xc4>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	701a      	strb	r2, [r3, #0]
    }
}
 8005d44:	bf00      	nop
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	2000017c 	.word	0x2000017c
 8005d50:	424706d8 	.word	0x424706d8
 8005d54:	20000180 	.word	0x20000180
 8005d58:	40002800 	.word	0x40002800

08005d5c <RtcSetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcSetTimerContext( void )
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8005d60:	4905      	ldr	r1, [pc, #20]	; (8005d78 <RtcSetTimerContext+0x1c>)
 8005d62:	4806      	ldr	r0, [pc, #24]	; (8005d7c <RtcSetTimerContext+0x20>)
 8005d64:	f000 f9a4 	bl	80060b0 <RtcGetCalendarValue>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <RtcSetTimerContext+0x24>)
 8005d6e:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
 8005d70:	4b03      	ldr	r3, [pc, #12]	; (8005d80 <RtcSetTimerContext+0x24>)
 8005d72:	681b      	ldr	r3, [r3, #0]
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	bd80      	pop	{r7, pc}
 8005d78:	200001a4 	.word	0x200001a4
 8005d7c:	200001b8 	.word	0x200001b8
 8005d80:	200001a0 	.word	0x200001a0

08005d84 <RtcGetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcGetTimerContext( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
 8005d88:	4b02      	ldr	r3, [pc, #8]	; (8005d94 <RtcGetTimerContext+0x10>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bc80      	pop	{r7}
 8005d92:	4770      	bx	lr
 8005d94:	200001a0 	.word	0x200001a0

08005d98 <RtcGetMinimumTimeout>:
 * \brief returns the wake up time in ticks
 *
 * \retval wake up time in ticks
 */
uint32_t RtcGetMinimumTimeout( void )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
 8005d9c:	2303      	movs	r3, #3
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bc80      	pop	{r7}
 8005da4:	4770      	bx	lr

08005da6 <RtcMs2Tick>:
 *
 * \param[IN] milliseconds Time in milliseconds
 * \retval returns time in timer ticks
 */
uint32_t RtcMs2Tick( uint32_t milliseconds )
{
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b082      	sub	sp, #8
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	461a      	mov	r2, r3
 8005db2:	f04f 0300 	mov.w	r3, #0
 8005db6:	f04f 0000 	mov.w	r0, #0
 8005dba:	f04f 0100 	mov.w	r1, #0
 8005dbe:	01d9      	lsls	r1, r3, #7
 8005dc0:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 8005dc4:	01d0      	lsls	r0, r2, #7
 8005dc6:	f04f 027d 	mov.w	r2, #125	; 0x7d
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	f7fa f9d5 	bl	800017c <__aeabi_uldivmod>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4613      	mov	r3, r2
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3708      	adds	r7, #8
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <RtcTick2Ms>:
 *
 * \param[IN] time in timer ticks
 * \retval returns time in milliseconds
 */
uint32_t RtcTick2Ms( uint32_t tick )
{
 8005de0:	b480      	push	{r7}
 8005de2:	b085      	sub	sp, #20
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> N_PREDIV_S;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	0a9b      	lsrs	r3, r3, #10
 8005dec:	60fb      	str	r3, [r7, #12]

    tick = tick & PREDIV_S;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df4:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005dfc:	fb02 f203 	mul.w	r2, r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	0a9b      	lsrs	r3, r3, #10
 8005e0c:	4413      	add	r3, r2
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3714      	adds	r7, #20
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bc80      	pop	{r7}
 8005e16:	4770      	bx	lr

08005e18 <RtcSetAlarm>:
 * \note The alarm is set at now (read in this function) + timeout
 *
 * \param timeout Duration of the Timer ticks
 */
void RtcSetAlarm( uint32_t timeout )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
    // We don't go in Low Power mode for timeout below MIN_ALARM_DELAY
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 8005e20:	f000 f92e 	bl	8006080 <RtcGetTimerElapsedTime>
    else
    {
//        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
    }

    RtcStartAlarm( timeout );
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 f81f 	bl	8005e68 <RtcStartAlarm>
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <RtcStopAlarm>:

void RtcStopAlarm( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
    // Disable the Alarm A interrupt
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8005e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e3c:	4808      	ldr	r0, [pc, #32]	; (8005e60 <RtcStopAlarm+0x2c>)
 8005e3e:	f7fc fd7f 	bl	8002940 <HAL_RTC_DeactivateAlarm>

    // Clear RTC Alarm Flag
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8005e42:	4b07      	ldr	r3, [pc, #28]	; (8005e60 <RtcStopAlarm+0x2c>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68db      	ldr	r3, [r3, #12]
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	4b05      	ldr	r3, [pc, #20]	; (8005e60 <RtcStopAlarm+0x2c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8005e52:	60da      	str	r2, [r3, #12]

    // Clear the EXTI's line Flag for RTC Alarm
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8005e54:	4b03      	ldr	r3, [pc, #12]	; (8005e64 <RtcStopAlarm+0x30>)
 8005e56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e5a:	615a      	str	r2, [r3, #20]
}
 8005e5c:	bf00      	nop
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	20000180 	.word	0x20000180
 8005e64:	40010400 	.word	0x40010400

08005e68 <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
 8005e68:	b5b0      	push	{r4, r5, r7, lr}
 8005e6a:	b08c      	sub	sp, #48	; 0x30
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
    uint16_t rtcAlarmSubSeconds = 0;
 8005e70:	2300      	movs	r3, #0
 8005e72:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t rtcAlarmSeconds = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t rtcAlarmMinutes = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t rtcAlarmHours = 0;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t rtcAlarmDays = 0;
 8005e80:	2300      	movs	r3, #0
 8005e82:	84fb      	strh	r3, [r7, #38]	; 0x26
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8005e84:	4b6e      	ldr	r3, [pc, #440]	; (8006040 <RtcStartAlarm+0x1d8>)
 8005e86:	f107 0410 	add.w	r4, r7, #16
 8005e8a:	1d1d      	adds	r5, r3, #4
 8005e8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005e8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005e90:	682b      	ldr	r3, [r5, #0]
 8005e92:	6023      	str	r3, [r4, #0]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8005e94:	4b6a      	ldr	r3, [pc, #424]	; (8006040 <RtcStartAlarm+0x1d8>)
 8005e96:	699b      	ldr	r3, [r3, #24]
 8005e98:	60fb      	str	r3, [r7, #12]

    RtcStopAlarm( );
 8005e9a:	f7ff ffcb 	bl	8005e34 <RtcStopAlarm>

    /*reverse counter */
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 8005e9e:	697b      	ldr	r3, [r7, #20]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005ea6:	3303      	adds	r3, #3
 8005ea8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	b29b      	uxth	r3, r3
 8005eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005eb6:	4413      	add	r3, r2
 8005eb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    // convert timeout  to seconds
    timeout >>= N_PREDIV_S;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	0a9b      	lsrs	r3, r3, #10
 8005ebe:	607b      	str	r3, [r7, #4]

    // Convert microsecs to RTC format and add to 'Now'
    rtcAlarmDays =  date.Date;
 8005ec0:	7bbb      	ldrb	r3, [r7, #14]
 8005ec2:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 8005ec4:	e008      	b.n	8005ed8 <RtcStartAlarm+0x70>
    {
        timeout -= TM_SECONDS_IN_1DAY;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8005ecc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8005ed0:	607b      	str	r3, [r7, #4]
        rtcAlarmDays++;
 8005ed2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a5a      	ldr	r2, [pc, #360]	; (8006044 <RtcStartAlarm+0x1dc>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d8f2      	bhi.n	8005ec6 <RtcStartAlarm+0x5e>
    }

    // Calc hours
    rtcAlarmHours = time.Hours;
 8005ee0:	7c3b      	ldrb	r3, [r7, #16]
 8005ee2:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8005ee4:	e006      	b.n	8005ef4 <RtcStartAlarm+0x8c>
    {
        timeout -= TM_SECONDS_IN_1HOUR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8005eec:	607b      	str	r3, [r7, #4]
        rtcAlarmHours++;
 8005eee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 8005efa:	d2f4      	bcs.n	8005ee6 <RtcStartAlarm+0x7e>
    }

    // Calc minutes
    rtcAlarmMinutes = time.Minutes;
 8005efc:	7c7b      	ldrb	r3, [r7, #17]
 8005efe:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8005f00:	e005      	b.n	8005f0e <RtcStartAlarm+0xa6>
    {
        timeout -= TM_SECONDS_IN_1MINUTE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3b3c      	subs	r3, #60	; 0x3c
 8005f06:	607b      	str	r3, [r7, #4]
        rtcAlarmMinutes++;
 8005f08:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b3b      	cmp	r3, #59	; 0x3b
 8005f12:	d8f6      	bhi.n	8005f02 <RtcStartAlarm+0x9a>
    }

    // Calc seconds
    rtcAlarmSeconds =  time.Seconds + timeout;
 8005f14:	7cbb      	ldrb	r3, [r7, #18]
 8005f16:	b29a      	uxth	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	b29b      	uxth	r3, r3
 8005f1c:	4413      	add	r3, r2
 8005f1e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    //***** Correct for modulo********
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8005f20:	e006      	b.n	8005f30 <RtcStartAlarm+0xc8>
    {
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 8005f22:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f24:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005f28:	85fb      	strh	r3, [r7, #46]	; 0x2e
        rtcAlarmSeconds++;
 8005f2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8005f30:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f36:	d2f4      	bcs.n	8005f22 <RtcStartAlarm+0xba>
    }

    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8005f38:	e005      	b.n	8005f46 <RtcStartAlarm+0xde>
    { 
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 8005f3a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f3c:	3b3c      	subs	r3, #60	; 0x3c
 8005f3e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        rtcAlarmMinutes++;
 8005f40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f42:	3301      	adds	r3, #1
 8005f44:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8005f46:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005f48:	2b3b      	cmp	r3, #59	; 0x3b
 8005f4a:	d8f6      	bhi.n	8005f3a <RtcStartAlarm+0xd2>
    }

    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8005f4c:	e005      	b.n	8005f5a <RtcStartAlarm+0xf2>
    {
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 8005f4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f50:	3b3c      	subs	r3, #60	; 0x3c
 8005f52:	857b      	strh	r3, [r7, #42]	; 0x2a
        rtcAlarmHours++;
 8005f54:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f56:	3301      	adds	r3, #1
 8005f58:	853b      	strh	r3, [r7, #40]	; 0x28
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 8005f5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005f5c:	2b3b      	cmp	r3, #59	; 0x3b
 8005f5e:	d8f6      	bhi.n	8005f4e <RtcStartAlarm+0xe6>
    }

    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8005f60:	e005      	b.n	8005f6e <RtcStartAlarm+0x106>
    {
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 8005f62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f64:	3b18      	subs	r3, #24
 8005f66:	853b      	strh	r3, [r7, #40]	; 0x28
        rtcAlarmDays++;
 8005f68:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8005f6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005f70:	2b17      	cmp	r3, #23
 8005f72:	d8f6      	bhi.n	8005f62 <RtcStartAlarm+0xfa>
    }

    if( date.Year % 4 == 0 ) 
 8005f74:	7bfb      	ldrb	r3, [r7, #15]
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d113      	bne.n	8005fa8 <RtcStartAlarm+0x140>
    {
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8005f80:	7b7b      	ldrb	r3, [r7, #13]
 8005f82:	3b01      	subs	r3, #1
 8005f84:	4a30      	ldr	r2, [pc, #192]	; (8006048 <RtcStartAlarm+0x1e0>)
 8005f86:	5cd3      	ldrb	r3, [r2, r3]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d91e      	bls.n	8005fce <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 8005f90:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005f92:	7b7a      	ldrb	r2, [r7, #13]
 8005f94:	3a01      	subs	r2, #1
 8005f96:	492c      	ldr	r1, [pc, #176]	; (8006048 <RtcStartAlarm+0x1e0>)
 8005f98:	5c8a      	ldrb	r2, [r1, r2]
 8005f9a:	fb93 f1f2 	sdiv	r1, r3, r2
 8005f9e:	fb02 f201 	mul.w	r2, r2, r1
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005fa6:	e012      	b.n	8005fce <RtcStartAlarm+0x166>
        }
    }
    else
    {
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8005fa8:	7b7b      	ldrb	r3, [r7, #13]
 8005faa:	3b01      	subs	r3, #1
 8005fac:	4a27      	ldr	r2, [pc, #156]	; (800604c <RtcStartAlarm+0x1e4>)
 8005fae:	5cd3      	ldrb	r3, [r2, r3]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d90a      	bls.n	8005fce <RtcStartAlarm+0x166>
        {   
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 8005fb8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005fba:	7b7a      	ldrb	r2, [r7, #13]
 8005fbc:	3a01      	subs	r2, #1
 8005fbe:	4923      	ldr	r1, [pc, #140]	; (800604c <RtcStartAlarm+0x1e4>)
 8005fc0:	5c8a      	ldrb	r2, [r1, r2]
 8005fc2:	fb93 f1f2 	sdiv	r1, r3, r2
 8005fc6:	fb02 f201 	mul.w	r2, r2, r1
 8005fca:	1a9b      	subs	r3, r3, r2
 8005fcc:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }

    /* Set RTC_AlarmStructure with calculated values*/
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 8005fce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005fd0:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8005fd4:	3303      	adds	r3, #3
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <RtcStartAlarm+0x1e8>)
 8005fda:	605a      	str	r2, [r3, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 8005fdc:	4b1c      	ldr	r3, [pc, #112]	; (8006050 <RtcStartAlarm+0x1e8>)
 8005fde:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8005fe2:	619a      	str	r2, [r3, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 8005fe4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	4b19      	ldr	r3, [pc, #100]	; (8006050 <RtcStartAlarm+0x1e8>)
 8005fea:	709a      	strb	r2, [r3, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 8005fec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	4b17      	ldr	r3, [pc, #92]	; (8006050 <RtcStartAlarm+0x1e8>)
 8005ff2:	705a      	strb	r2, [r3, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 8005ff4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005ff6:	b2da      	uxtb	r2, r3
 8005ff8:	4b15      	ldr	r3, [pc, #84]	; (8006050 <RtcStartAlarm+0x1e8>)
 8005ffa:	701a      	strb	r2, [r3, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 8005ffc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ffe:	b2da      	uxtb	r2, r3
 8006000:	4b13      	ldr	r3, [pc, #76]	; (8006050 <RtcStartAlarm+0x1e8>)
 8006002:	f883 2020 	strb.w	r2, [r3, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 8006006:	7cfa      	ldrb	r2, [r7, #19]
 8006008:	4b11      	ldr	r3, [pc, #68]	; (8006050 <RtcStartAlarm+0x1e8>)
 800600a:	70da      	strb	r2, [r3, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 800600c:	4b10      	ldr	r3, [pc, #64]	; (8006050 <RtcStartAlarm+0x1e8>)
 800600e:	2200      	movs	r2, #0
 8006010:	61da      	str	r2, [r3, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 8006012:	4b0f      	ldr	r3, [pc, #60]	; (8006050 <RtcStartAlarm+0x1e8>)
 8006014:	2200      	movs	r2, #0
 8006016:	615a      	str	r2, [r3, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8006018:	4b0d      	ldr	r3, [pc, #52]	; (8006050 <RtcStartAlarm+0x1e8>)
 800601a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800601e:	625a      	str	r2, [r3, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006020:	4b0b      	ldr	r3, [pc, #44]	; (8006050 <RtcStartAlarm+0x1e8>)
 8006022:	2200      	movs	r2, #0
 8006024:	60da      	str	r2, [r3, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006026:	4b0a      	ldr	r3, [pc, #40]	; (8006050 <RtcStartAlarm+0x1e8>)
 8006028:	2200      	movs	r2, #0
 800602a:	611a      	str	r2, [r3, #16]

    // Set RTC_Alarm
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 800602c:	2200      	movs	r2, #0
 800602e:	4908      	ldr	r1, [pc, #32]	; (8006050 <RtcStartAlarm+0x1e8>)
 8006030:	4808      	ldr	r0, [pc, #32]	; (8006054 <RtcStartAlarm+0x1ec>)
 8006032:	f7fc fb4d 	bl	80026d0 <HAL_RTC_SetAlarm_IT>
}
 8006036:	bf00      	nop
 8006038:	3730      	adds	r7, #48	; 0x30
 800603a:	46bd      	mov	sp, r7
 800603c:	bdb0      	pop	{r4, r5, r7, pc}
 800603e:	bf00      	nop
 8006040:	200001a0 	.word	0x200001a0
 8006044:	0001517f 	.word	0x0001517f
 8006048:	08006c08 	.word	0x08006c08
 800604c:	08006bfc 	.word	0x08006bfc
 8006050:	200003f0 	.word	0x200003f0
 8006054:	20000180 	.word	0x20000180

08006058 <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 800605e:	f107 0208 	add.w	r2, r7, #8
 8006062:	1d3b      	adds	r3, r7, #4
 8006064:	4611      	mov	r1, r2
 8006066:	4618      	mov	r0, r3
 8006068:	f000 f822 	bl	80060b0 <RtcGetCalendarValue>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4613      	mov	r3, r2
 8006072:	61fb      	str	r3, [r7, #28]

    return( calendarValue );
 8006074:	69fb      	ldr	r3, [r7, #28]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3720      	adds	r7, #32
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b088      	sub	sp, #32
 8006084:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8006086:	f107 0208 	add.w	r2, r7, #8
 800608a:	1d3b      	adds	r3, r7, #4
 800608c:	4611      	mov	r1, r2
 800608e:	4618      	mov	r0, r3
 8006090:	f000 f80e 	bl	80060b0 <RtcGetCalendarValue>
 8006094:	4602      	mov	r2, r0
 8006096:	460b      	mov	r3, r1
 8006098:	4613      	mov	r3, r2
 800609a:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 800609c:	4b03      	ldr	r3, [pc, #12]	; (80060ac <RtcGetTimerElapsedTime+0x2c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	1ad3      	subs	r3, r2, r3
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	200001a0 	.word	0x200001a0

080060b0 <RtcGetCalendarValue>:

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 80060b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80060b4:	b088      	sub	sp, #32
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
 80060ba:	6039      	str	r1, [r7, #0]
    uint64_t calendarValue = 0;
 80060bc:	f04f 0200 	mov.w	r2, #0
 80060c0:	f04f 0300 	mov.w	r3, #0
 80060c4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 80060c8:	4b3f      	ldr	r3, [pc, #252]	; (80061c8 <RtcGetCalendarValue+0x118>)
 80060ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060cc:	617b      	str	r3, [r7, #20]
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 80060ce:	2200      	movs	r2, #0
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	483e      	ldr	r0, [pc, #248]	; (80061cc <RtcGetCalendarValue+0x11c>)
 80060d4:	f7fc faae 	bl	8002634 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 80060d8:	2200      	movs	r2, #0
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	483b      	ldr	r0, [pc, #236]	; (80061cc <RtcGetCalendarValue+0x11c>)
 80060de:	f7fc f9ae 	bl	800243e <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 80060e2:	4b39      	ldr	r3, [pc, #228]	; (80061c8 <RtcGetCalendarValue+0x118>)
 80060e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d1ed      	bne.n	80060c8 <RtcGetCalendarValue+0x18>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	78db      	ldrb	r3, [r3, #3]
 80060f0:	461a      	mov	r2, r3
 80060f2:	f240 53b5 	movw	r3, #1461	; 0x5b5
 80060f6:	fb03 f302 	mul.w	r3, r3, r2
 80060fa:	3303      	adds	r3, #3
 80060fc:	089b      	lsrs	r3, r3, #2
 80060fe:	613b      	str	r3, [r7, #16]

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	78db      	ldrb	r3, [r3, #3]
 8006104:	f003 0303 	and.w	r3, r3, #3
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b00      	cmp	r3, #0
 800610c:	d101      	bne.n	8006112 <RtcGetCalendarValue+0x62>
 800610e:	4b30      	ldr	r3, [pc, #192]	; (80061d0 <RtcGetCalendarValue+0x120>)
 8006110:	e000      	b.n	8006114 <RtcGetCalendarValue+0x64>
 8006112:	4b30      	ldr	r3, [pc, #192]	; (80061d4 <RtcGetCalendarValue+0x124>)
 8006114:	60fb      	str	r3, [r7, #12]

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	785b      	ldrb	r3, [r3, #1]
 800611a:	1e5a      	subs	r2, r3, #1
 800611c:	4613      	mov	r3, r2
 800611e:	011b      	lsls	r3, r3, #4
 8006120:	1a9b      	subs	r3, r3, r2
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	4413      	add	r3, r2
 8006126:	3301      	adds	r3, #1
 8006128:	0fda      	lsrs	r2, r3, #31
 800612a:	4413      	add	r3, r2
 800612c:	105b      	asrs	r3, r3, #1
 800612e:	4619      	mov	r1, r3
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	785b      	ldrb	r3, [r3, #1]
 8006134:	3b01      	subs	r3, #1
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	fa22 f303 	lsr.w	r3, r2, r3
 800613e:	f003 0303 	and.w	r3, r3, #3
 8006142:	1acb      	subs	r3, r1, r3
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4413      	add	r3, r2
 8006148:	613b      	str	r3, [r7, #16]

    seconds += ( date->Date -1 );
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	789b      	ldrb	r3, [r3, #2]
 800614e:	461a      	mov	r2, r3
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4413      	add	r3, r2
 8006154:	3b01      	subs	r3, #1
 8006156:	613b      	str	r3, [r7, #16]

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4a1f      	ldr	r2, [pc, #124]	; (80061d8 <RtcGetCalendarValue+0x128>)
 800615c:	fb02 f303 	mul.w	r3, r2, r3
 8006160:	613b      	str	r3, [r7, #16]

    seconds += ( ( uint32_t )time->Seconds + 
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	789b      	ldrb	r3, [r3, #2]
 8006166:	4618      	mov	r0, r3
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006172:	fb03 f202 	mul.w	r2, r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	785b      	ldrb	r3, [r3, #1]
 800617a:	4619      	mov	r1, r3
 800617c:	460b      	mov	r3, r1
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	1a5b      	subs	r3, r3, r1
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	4413      	add	r3, r2
 8006186:	4403      	add	r3, r0
    seconds += ( ( uint32_t )time->Seconds + 
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	613b      	str	r3, [r7, #16]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 800618e:	693b      	ldr	r3, [r7, #16]
 8006190:	461a      	mov	r2, r3
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	0d95      	lsrs	r5, r2, #22
 8006198:	0294      	lsls	r4, r2, #10
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80061a2:	3303      	adds	r3, #3
 80061a4:	461a      	mov	r2, r3
 80061a6:	f04f 0300 	mov.w	r3, #0
 80061aa:	eb14 0802 	adds.w	r8, r4, r2
 80061ae:	eb45 0903 	adc.w	r9, r5, r3
 80061b2:	e9c7 8906 	strd	r8, r9, [r7, #24]

    return( calendarValue );
 80061b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80061ba:	4610      	mov	r0, r2
 80061bc:	4619      	mov	r1, r3
 80061be:	3720      	adds	r7, #32
 80061c0:	46bd      	mov	sp, r7
 80061c2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80061c6:	bf00      	nop
 80061c8:	40002800 	.word	0x40002800
 80061cc:	20000180 	.word	0x20000180
 80061d0:	00445550 	.word	0x00445550
 80061d4:	0099aaa0 	.word	0x0099aaa0
 80061d8:	00015180 	.word	0x00015180

080061dc <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
    TimerIrqHandler( );
 80061e4:	f000 faa0 	bl	8006728 <TimerIrqHandler>
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <SX1276IoInit>:
    NULL, // void ( *RxBoosted )( uint32_t timeout ) - SX126x Only
    NULL, // void ( *SetRxDutyCycle )( uint32_t rxTime, uint32_t sleepTime ) - SX126x Only
};

void SX1276IoInit( void )
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  // DIO_0
  SX1276.DIO0.port = DIO_0_GPIO_Port;
 80061f4:	4b15      	ldr	r3, [pc, #84]	; (800624c <SX1276IoInit+0x5c>)
 80061f6:	4a16      	ldr	r2, [pc, #88]	; (8006250 <SX1276IoInit+0x60>)
 80061f8:	609a      	str	r2, [r3, #8]
  SX1276.DIO0.pin = DIO_0_Pin;
 80061fa:	4b14      	ldr	r3, [pc, #80]	; (800624c <SX1276IoInit+0x5c>)
 80061fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006200:	819a      	strh	r2, [r3, #12]
  // DIO_1
  SX1276.DIO1.port = DIO_1_GPIO_Port;
 8006202:	4b12      	ldr	r3, [pc, #72]	; (800624c <SX1276IoInit+0x5c>)
 8006204:	4a12      	ldr	r2, [pc, #72]	; (8006250 <SX1276IoInit+0x60>)
 8006206:	611a      	str	r2, [r3, #16]
  SX1276.DIO1.pin = DIO_1_Pin;
 8006208:	4b10      	ldr	r3, [pc, #64]	; (800624c <SX1276IoInit+0x5c>)
 800620a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800620e:	829a      	strh	r2, [r3, #20]
  // DIO_2
  SX1276.DIO2.port = DIO_2_GPIO_Port;
 8006210:	4b0e      	ldr	r3, [pc, #56]	; (800624c <SX1276IoInit+0x5c>)
 8006212:	4a10      	ldr	r2, [pc, #64]	; (8006254 <SX1276IoInit+0x64>)
 8006214:	619a      	str	r2, [r3, #24]
  SX1276.DIO2.pin = DIO_2_Pin;
 8006216:	4b0d      	ldr	r3, [pc, #52]	; (800624c <SX1276IoInit+0x5c>)
 8006218:	f44f 7200 	mov.w	r2, #512	; 0x200
 800621c:	839a      	strh	r2, [r3, #28]
  // DIO_3
  SX1276.DIO3.port = DIO_3_GPIO_Port;
 800621e:	4b0b      	ldr	r3, [pc, #44]	; (800624c <SX1276IoInit+0x5c>)
 8006220:	4a0c      	ldr	r2, [pc, #48]	; (8006254 <SX1276IoInit+0x64>)
 8006222:	621a      	str	r2, [r3, #32]
  SX1276.DIO3.pin = DIO_3_Pin;
 8006224:	4b09      	ldr	r3, [pc, #36]	; (800624c <SX1276IoInit+0x5c>)
 8006226:	f44f 7280 	mov.w	r2, #256	; 0x100
 800622a:	849a      	strh	r2, [r3, #36]	; 0x24
  // DIO_4
  SX1276.DIO4.port = DIO_4_GPIO_Port;
 800622c:	4b07      	ldr	r3, [pc, #28]	; (800624c <SX1276IoInit+0x5c>)
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <SX1276IoInit+0x64>)
 8006230:	629a      	str	r2, [r3, #40]	; 0x28
  SX1276.DIO4.pin = DIO_4_Pin;
 8006232:	4b06      	ldr	r3, [pc, #24]	; (800624c <SX1276IoInit+0x5c>)
 8006234:	2220      	movs	r2, #32
 8006236:	859a      	strh	r2, [r3, #44]	; 0x2c
  // DIO_5
  SX1276.DIO5.port = DIO_5_GPIO_Port;
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <SX1276IoInit+0x5c>)
 800623a:	4a06      	ldr	r2, [pc, #24]	; (8006254 <SX1276IoInit+0x64>)
 800623c:	631a      	str	r2, [r3, #48]	; 0x30
  SX1276.DIO5.pin = DIO_5_Pin;
 800623e:	4b03      	ldr	r3, [pc, #12]	; (800624c <SX1276IoInit+0x5c>)
 8006240:	2240      	movs	r2, #64	; 0x40
 8006242:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8006244:	bf00      	nop
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr
 800624c:	200002f0 	.word	0x200002f0
 8006250:	40020000 	.word	0x40020000
 8006254:	40020800 	.word	0x40020800

08006258 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  DioIrqCallbacks.dio0 = irqHandlers[0];
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a0d      	ldr	r2, [pc, #52]	; (800629c <SX1276IoIrqInit+0x44>)
 8006266:	6013      	str	r3, [r2, #0]
  DioIrqCallbacks.dio1 = irqHandlers[1];
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	4a0b      	ldr	r2, [pc, #44]	; (800629c <SX1276IoIrqInit+0x44>)
 800626e:	6053      	str	r3, [r2, #4]
  DioIrqCallbacks.dio2 = irqHandlers[2];
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	4a09      	ldr	r2, [pc, #36]	; (800629c <SX1276IoIrqInit+0x44>)
 8006276:	6093      	str	r3, [r2, #8]
  DioIrqCallbacks.dio3 = irqHandlers[3];
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	4a07      	ldr	r2, [pc, #28]	; (800629c <SX1276IoIrqInit+0x44>)
 800627e:	60d3      	str	r3, [r2, #12]
  DioIrqCallbacks.dio4 = irqHandlers[4];
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	4a05      	ldr	r2, [pc, #20]	; (800629c <SX1276IoIrqInit+0x44>)
 8006286:	6113      	str	r3, [r2, #16]
  DioIrqCallbacks.dio5 = irqHandlers[5];
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	4a03      	ldr	r2, [pc, #12]	; (800629c <SX1276IoIrqInit+0x44>)
 800628e:	6153      	str	r3, [r2, #20]
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	bc80      	pop	{r7}
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	20000418 	.word	0x20000418

080062a0 <SX1276SetBoardTcxo>:
{
    // No TCXO component available on this board design.
}

void SX1276SetBoardTcxo( uint8_t state )
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	71fb      	strb	r3, [r7, #7]
    // No TCXO component available on this board design.
}
 80062aa:	bf00      	nop
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bc80      	pop	{r7}
 80062b2:	4770      	bx	lr

080062b4 <SX1276GetBoardTcxoWakeupTime>:

uint32_t SX1276GetBoardTcxoWakeupTime( void )
{
 80062b4:	b480      	push	{r7}
 80062b6:	af00      	add	r7, sp, #0
    return BOARD_TCXO_WAKEUP_TIME;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	bc80      	pop	{r7}
 80062c0:	4770      	bx	lr
	...

080062c4 <SX1276Reset>:

void SX1276Reset( void )
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	af00      	add	r7, sp, #0
    // Enables the TCXO if available on the board design
    SX1276SetBoardTcxo( true );
 80062c8:	2001      	movs	r0, #1
 80062ca:	f7ff ffe9 	bl	80062a0 <SX1276SetBoardTcxo>

    // Set RESET pin to 0
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, RESET);
 80062ce:	4b0c      	ldr	r3, [pc, #48]	; (8006300 <SX1276Reset+0x3c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a0b      	ldr	r2, [pc, #44]	; (8006300 <SX1276Reset+0x3c>)
 80062d4:	8891      	ldrh	r1, [r2, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fb f862 	bl	80013a2 <HAL_GPIO_WritePin>

    // Wait 1 ms
    DelayMs( 1 );
 80062de:	2001      	movs	r0, #1
 80062e0:	f7ff fb96 	bl	8005a10 <DelayMs>

    // Configure RESET as input
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, SET);
 80062e4:	4b06      	ldr	r3, [pc, #24]	; (8006300 <SX1276Reset+0x3c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a05      	ldr	r2, [pc, #20]	; (8006300 <SX1276Reset+0x3c>)
 80062ea:	8891      	ldrh	r1, [r2, #4]
 80062ec:	2201      	movs	r2, #1
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fb f857 	bl	80013a2 <HAL_GPIO_WritePin>

    // Wait 6 ms
    DelayMs( 6 );
 80062f4:	2006      	movs	r0, #6
 80062f6:	f7ff fb8b 	bl	8005a10 <DelayMs>
}
 80062fa:	bf00      	nop
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	200002f0 	.word	0x200002f0

08006304 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 8006304:	b590      	push	{r4, r7, lr}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 8006312:	2300      	movs	r3, #0
 8006314:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1276Read( REG_PACONFIG );
 8006316:	2009      	movs	r0, #9
 8006318:	f7fe fc22 	bl	8004b60 <SX1276Read>
 800631c:	4603      	mov	r3, r0
 800631e:	73fb      	strb	r3, [r7, #15]
    paDac = SX1276Read( REG_PADAC );
 8006320:	204d      	movs	r0, #77	; 0x4d
 8006322:	f7fe fc1d 	bl	8004b60 <SX1276Read>
 8006326:	4603      	mov	r3, r0
 8006328:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 800632a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800632e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006332:	b25c      	sxtb	r4, r3
 8006334:	4b4a      	ldr	r3, [pc, #296]	; (8006460 <SX1276SetRfTxPower+0x15c>)
 8006336:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006338:	4618      	mov	r0, r3
 800633a:	f000 f893 	bl	8006464 <SX1276GetPaSelect>
 800633e:	4603      	mov	r3, r0
 8006340:	b25b      	sxtb	r3, r3
 8006342:	4323      	orrs	r3, r4
 8006344:	b25b      	sxtb	r3, r3
 8006346:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8006348:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800634c:	2b00      	cmp	r3, #0
 800634e:	da4e      	bge.n	80063ee <SX1276SetRfTxPower+0xea>
    {
        if( power > 17 )
 8006350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006354:	2b11      	cmp	r3, #17
 8006356:	dd04      	ble.n	8006362 <SX1276SetRfTxPower+0x5e>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8006358:	7bbb      	ldrb	r3, [r7, #14]
 800635a:	f043 0307 	orr.w	r3, r3, #7
 800635e:	73bb      	strb	r3, [r7, #14]
 8006360:	e008      	b.n	8006374 <SX1276SetRfTxPower+0x70>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8006362:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006366:	f023 0307 	bic.w	r3, r3, #7
 800636a:	b25b      	sxtb	r3, r3
 800636c:	f043 0304 	orr.w	r3, r3, #4
 8006370:	b25b      	sxtb	r3, r3
 8006372:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8006374:	7bbb      	ldrb	r3, [r7, #14]
 8006376:	f003 0307 	and.w	r3, r3, #7
 800637a:	2b07      	cmp	r3, #7
 800637c:	d11b      	bne.n	80063b6 <SX1276SetRfTxPower+0xb2>
        {
            if( power < 5 )
 800637e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006382:	2b04      	cmp	r3, #4
 8006384:	dc01      	bgt.n	800638a <SX1276SetRfTxPower+0x86>
            {
                power = 5;
 8006386:	2305      	movs	r3, #5
 8006388:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 800638a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800638e:	2b14      	cmp	r3, #20
 8006390:	dd01      	ble.n	8006396 <SX1276SetRfTxPower+0x92>
            {
                power = 20;
 8006392:	2314      	movs	r3, #20
 8006394:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8006396:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800639a:	f023 030f 	bic.w	r3, r3, #15
 800639e:	b25a      	sxtb	r2, r3
 80063a0:	79fb      	ldrb	r3, [r7, #7]
 80063a2:	3b05      	subs	r3, #5
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	b25b      	sxtb	r3, r3
 80063a8:	f003 030f 	and.w	r3, r3, #15
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	4313      	orrs	r3, r2
 80063b0:	b25b      	sxtb	r3, r3
 80063b2:	73fb      	strb	r3, [r7, #15]
 80063b4:	e045      	b.n	8006442 <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < 2 )
 80063b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	dc01      	bgt.n	80063c2 <SX1276SetRfTxPower+0xbe>
            {
                power = 2;
 80063be:	2302      	movs	r3, #2
 80063c0:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 80063c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c6:	2b11      	cmp	r3, #17
 80063c8:	dd01      	ble.n	80063ce <SX1276SetRfTxPower+0xca>
            {
                power = 17;
 80063ca:	2311      	movs	r3, #17
 80063cc:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 80063ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80063d2:	f023 030f 	bic.w	r3, r3, #15
 80063d6:	b25a      	sxtb	r2, r3
 80063d8:	79fb      	ldrb	r3, [r7, #7]
 80063da:	3b02      	subs	r3, #2
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	b25b      	sxtb	r3, r3
 80063e0:	f003 030f 	and.w	r3, r3, #15
 80063e4:	b25b      	sxtb	r3, r3
 80063e6:	4313      	orrs	r3, r2
 80063e8:	b25b      	sxtb	r3, r3
 80063ea:	73fb      	strb	r3, [r7, #15]
 80063ec:	e029      	b.n	8006442 <SX1276SetRfTxPower+0x13e>
        }
    }
    else
    {
        if( power > 0 )
 80063ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	dd12      	ble.n	800641c <SX1276SetRfTxPower+0x118>
        {
            if( power > 15 )
 80063f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063fa:	2b0f      	cmp	r3, #15
 80063fc:	dd01      	ble.n	8006402 <SX1276SetRfTxPower+0xfe>
            {
                power = 15;
 80063fe:	230f      	movs	r3, #15
 8006400:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8006402:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006406:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800640a:	b25b      	sxtb	r3, r3
 800640c:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006410:	b25a      	sxtb	r2, r3
 8006412:	79fb      	ldrb	r3, [r7, #7]
 8006414:	4313      	orrs	r3, r2
 8006416:	b25b      	sxtb	r3, r3
 8006418:	73fb      	strb	r3, [r7, #15]
 800641a:	e012      	b.n	8006442 <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < -4 )
 800641c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006420:	f113 0f04 	cmn.w	r3, #4
 8006424:	da01      	bge.n	800642a <SX1276SetRfTxPower+0x126>
            {
                power = -4;
 8006426:	23fc      	movs	r3, #252	; 0xfc
 8006428:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800642a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800642e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006432:	b25a      	sxtb	r2, r3
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	3304      	adds	r3, #4
 8006438:	b2db      	uxtb	r3, r3
 800643a:	b25b      	sxtb	r3, r3
 800643c:	4313      	orrs	r3, r2
 800643e:	b25b      	sxtb	r3, r3
 8006440:	73fb      	strb	r3, [r7, #15]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8006442:	7bfb      	ldrb	r3, [r7, #15]
 8006444:	4619      	mov	r1, r3
 8006446:	2009      	movs	r0, #9
 8006448:	f7fe fb7a 	bl	8004b40 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	4619      	mov	r1, r3
 8006450:	204d      	movs	r0, #77	; 0x4d
 8006452:	f7fe fb75 	bl	8004b40 <SX1276Write>
}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	bd90      	pop	{r4, r7, pc}
 800645e:	bf00      	nop
 8006460:	200002f0 	.word	0x200002f0

08006464 <SX1276GetPaSelect>:

static uint8_t SX1276GetPaSelect( uint32_t channel )
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
    if( channel > RF_MID_BAND_THRESH )
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a05      	ldr	r2, [pc, #20]	; (8006484 <SX1276GetPaSelect+0x20>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d901      	bls.n	8006478 <SX1276GetPaSelect+0x14>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8006474:	2380      	movs	r3, #128	; 0x80
 8006476:	e000      	b.n	800647a <SX1276GetPaSelect+0x16>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8006478:	2300      	movs	r3, #0
    }
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr
 8006484:	1f4add40 	.word	0x1f4add40

08006488 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	4603      	mov	r3, r0
 8006490:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 8006492:	4b0b      	ldr	r3, [pc, #44]	; (80064c0 <SX1276SetAntSwLowPower+0x38>)
 8006494:	781b      	ldrb	r3, [r3, #0]
 8006496:	79fa      	ldrb	r2, [r7, #7]
 8006498:	429a      	cmp	r2, r3
 800649a:	d00d      	beq.n	80064b8 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 800649c:	4a08      	ldr	r2, [pc, #32]	; (80064c0 <SX1276SetAntSwLowPower+0x38>)
 800649e:	79fb      	ldrb	r3, [r7, #7]
 80064a0:	7013      	strb	r3, [r2, #0]

        if( status == false )
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	f083 0301 	eor.w	r3, r3, #1
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d002      	beq.n	80064b4 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 80064ae:	f000 f809 	bl	80064c4 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 80064b2:	e001      	b.n	80064b8 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 80064b4:	f000 f80c 	bl	80064d0 <SX1276AntSwDeInit>
}
 80064b8:	bf00      	nop
 80064ba:	3708      	adds	r7, #8
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	200001bc 	.word	0x200001bc

080064c4 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bc80      	pop	{r7}
 80064ce:	4770      	bx	lr

080064d0 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 80064d0:	b480      	push	{r7}
 80064d2:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 80064d4:	bf00      	nop
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 80064dc:	b480      	push	{r7}
 80064de:	b083      	sub	sp, #12
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4603      	mov	r3, r0
 80064e4:	71fb      	strb	r3, [r7, #7]
}
 80064e6:	bf00      	nop
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bc80      	pop	{r7}
 80064ee:	4770      	bx	lr

080064f0 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 80064f8:	2301      	movs	r3, #1
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	370c      	adds	r7, #12
 80064fe:	46bd      	mov	sp, r7
 8006500:	bc80      	pop	{r7}
 8006502:	4770      	bx	lr

08006504 <SX1276GetDio1PinState>:

uint32_t SX1276GetDio1PinState( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	af00      	add	r7, sp, #0
    return GpioRead( &SX1276.DIO1 );
 8006508:	4802      	ldr	r0, [pc, #8]	; (8006514 <SX1276GetDio1PinState+0x10>)
 800650a:	f7fa f873 	bl	80005f4 <GpioRead>
 800650e:	4603      	mov	r3, r0
}
 8006510:	4618      	mov	r0, r3
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000300 	.word	0x20000300

08006518 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	4603      	mov	r3, r0
 8006520:	80fb      	strh	r3, [r7, #6]
  void (*fptr)(void *context) = NULL;
 8006522:	2300      	movs	r3, #0
 8006524:	60fb      	str	r3, [r7, #12]
  switch(GPIO_Pin)
 8006526:	88fb      	ldrh	r3, [r7, #6]
 8006528:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800652c:	d019      	beq.n	8006562 <HAL_GPIO_EXTI_Callback+0x4a>
 800652e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006532:	dc2e      	bgt.n	8006592 <HAL_GPIO_EXTI_Callback+0x7a>
 8006534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006538:	d017      	beq.n	800656a <HAL_GPIO_EXTI_Callback+0x52>
 800653a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653e:	dc28      	bgt.n	8006592 <HAL_GPIO_EXTI_Callback+0x7a>
 8006540:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006544:	d015      	beq.n	8006572 <HAL_GPIO_EXTI_Callback+0x5a>
 8006546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800654a:	dc22      	bgt.n	8006592 <HAL_GPIO_EXTI_Callback+0x7a>
 800654c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006550:	d013      	beq.n	800657a <HAL_GPIO_EXTI_Callback+0x62>
 8006552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006556:	dc1c      	bgt.n	8006592 <HAL_GPIO_EXTI_Callback+0x7a>
 8006558:	2b20      	cmp	r3, #32
 800655a:	d012      	beq.n	8006582 <HAL_GPIO_EXTI_Callback+0x6a>
 800655c:	2b40      	cmp	r3, #64	; 0x40
 800655e:	d014      	beq.n	800658a <HAL_GPIO_EXTI_Callback+0x72>
      break;
    case DIO_5_Pin:
      fptr = DioIrq[5];
      break;
    default:
      break;
 8006560:	e017      	b.n	8006592 <HAL_GPIO_EXTI_Callback+0x7a>
      fptr = DioIrq[0];
 8006562:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <HAL_GPIO_EXTI_Callback+0x90>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	60fb      	str	r3, [r7, #12]
      break;
 8006568:	e014      	b.n	8006594 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[1];
 800656a:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <HAL_GPIO_EXTI_Callback+0x90>)
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	60fb      	str	r3, [r7, #12]
      break;
 8006570:	e010      	b.n	8006594 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[2];
 8006572:	4b0d      	ldr	r3, [pc, #52]	; (80065a8 <HAL_GPIO_EXTI_Callback+0x90>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	60fb      	str	r3, [r7, #12]
      break;
 8006578:	e00c      	b.n	8006594 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[3];
 800657a:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_GPIO_EXTI_Callback+0x90>)
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	60fb      	str	r3, [r7, #12]
      break;
 8006580:	e008      	b.n	8006594 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[4];
 8006582:	4b09      	ldr	r3, [pc, #36]	; (80065a8 <HAL_GPIO_EXTI_Callback+0x90>)
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	60fb      	str	r3, [r7, #12]
      break;
 8006588:	e004      	b.n	8006594 <HAL_GPIO_EXTI_Callback+0x7c>
      fptr = DioIrq[5];
 800658a:	4b07      	ldr	r3, [pc, #28]	; (80065a8 <HAL_GPIO_EXTI_Callback+0x90>)
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	60fb      	str	r3, [r7, #12]
      break;
 8006590:	e000      	b.n	8006594 <HAL_GPIO_EXTI_Callback+0x7c>
      break;
 8006592:	bf00      	nop
}
  if(fptr != 0)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <HAL_GPIO_EXTI_Callback+0x88>
    fptr(NULL);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2000      	movs	r0, #0
 800659e:	4798      	blx	r3
}
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	2000000c 	.word	0x2000000c

080065ac <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	605a      	str	r2, [r3, #4]
    obj->IsStarted = false;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2200      	movs	r2, #0
 80065c6:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	725a      	strb	r2, [r3, #9]
    obj->Callback = callback;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	60da      	str	r2, [r3, #12]
    obj->Context = NULL;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	615a      	str	r2, [r3, #20]
}
 80065e0:	bf00      	nop
 80065e2:	370c      	adds	r7, #12
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bc80      	pop	{r7}
 80065e8:	4770      	bx	lr
	...

080065ec <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
 80065f8:	f107 0308 	add.w	r3, r7, #8
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7ff f9c3 	bl	8005988 <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d005      	beq.n	8006614 <TimerStart+0x28>
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 f989 	bl	8006920 <TimerExists>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d005      	beq.n	8006620 <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
 8006614:	f107 0308 	add.w	r3, r7, #8
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff f9c6 	bl	80059aa <BoardCriticalSectionEnd>
 800661e:	e02f      	b.n	8006680 <TimerStart+0x94>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	601a      	str	r2, [r3, #0]
    obj->IsStarted = true;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	725a      	strb	r2, [r3, #9]

    if( TimerListHead == NULL )
 8006634:	4b14      	ldr	r3, [pc, #80]	; (8006688 <TimerStart+0x9c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d105      	bne.n	8006648 <TimerStart+0x5c>
    {
        RtcSetTimerContext( );
 800663c:	f7ff fb8e 	bl	8005d5c <RtcSetTimerContext>
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 f853 	bl	80066ec <TimerInsertNewHeadTimer>
 8006646:	e016      	b.n	8006676 <TimerStart+0x8a>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
 8006648:	f7ff fd1a 	bl	8006080 <RtcGetTimerElapsedTime>
 800664c:	60f8      	str	r0, [r7, #12]
        obj->Timestamp += elapsedTime;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	441a      	add	r2, r3
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	601a      	str	r2, [r3, #0]

        if( obj->Timestamp < TimerListHead->Timestamp )
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4b0a      	ldr	r3, [pc, #40]	; (8006688 <TimerStart+0x9c>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d203      	bcs.n	8006670 <TimerStart+0x84>
        {
            TimerInsertNewHeadTimer( obj );
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f83f 	bl	80066ec <TimerInsertNewHeadTimer>
 800666e:	e002      	b.n	8006676 <TimerStart+0x8a>
        }
        else
        {
            TimerInsertTimer( obj );
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 f80b 	bl	800668c <TimerInsertTimer>
        }
    }
    CRITICAL_SECTION_END( );
 8006676:	f107 0308 	add.w	r3, r7, #8
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff f995 	bl	80059aa <BoardCriticalSectionEnd>
}
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	200001c0 	.word	0x200001c0

0800668c <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
 800668c:	b480      	push	{r7}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8006694:	4b14      	ldr	r3, [pc, #80]	; (80066e8 <TimerInsertTimer+0x5c>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
 800669a:	4b13      	ldr	r3, [pc, #76]	; (80066e8 <TimerInsertTimer+0x5c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
 80066a2:	e012      	b.n	80066ca <TimerInsertTimer+0x3e>
    {
        if( obj->Timestamp > next->Timestamp )
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d905      	bls.n	80066bc <TimerInsertTimer+0x30>
        {
            cur = next;
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	60fb      	str	r3, [r7, #12]
            next = next->Next;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	60bb      	str	r3, [r7, #8]
 80066ba:	e006      	b.n	80066ca <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	687a      	ldr	r2, [r7, #4]
 80066c0:	615a      	str	r2, [r3, #20]
            obj->Next = next;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	615a      	str	r2, [r3, #20]
            return;
 80066c8:	e009      	b.n	80066de <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e8      	bne.n	80066a4 <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	687a      	ldr	r2, [r7, #4]
 80066d6:	615a      	str	r2, [r3, #20]
    obj->Next = NULL;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	615a      	str	r2, [r3, #20]
}
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	200001c0 	.word	0x200001c0

080066ec <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 80066f4:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <TimerInsertNewHeadTimer+0x38>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d002      	beq.n	8006706 <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsNext2Expire = false;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	725a      	strb	r2, [r3, #9]
    }

    obj->Next = cur;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	68fa      	ldr	r2, [r7, #12]
 800670a:	615a      	str	r2, [r3, #20]
    TimerListHead = obj;
 800670c:	4a05      	ldr	r2, [pc, #20]	; (8006724 <TimerInsertNewHeadTimer+0x38>)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8006712:	4b04      	ldr	r3, [pc, #16]	; (8006724 <TimerInsertNewHeadTimer+0x38>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4618      	mov	r0, r3
 8006718:	f000 f968 	bl	80069ec <TimerSetTimeout>
}
 800671c:	bf00      	nop
 800671e:	3710      	adds	r7, #16
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	200001c0 	.word	0x200001c0

08006728 <TimerIrqHandler>:
{
    return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8006728:	b590      	push	{r4, r7, lr}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
 800672e:	f7ff fb29 	bl	8005d84 <RtcGetTimerContext>
 8006732:	6138      	str	r0, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
 8006734:	f7ff fb12 	bl	8005d5c <RtcSetTimerContext>
 8006738:	60f8      	str	r0, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	1ad3      	subs	r3, r2, r3
 8006740:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
 8006742:	4b39      	ldr	r3, [pc, #228]	; (8006828 <TimerIrqHandler+0x100>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d01c      	beq.n	8006784 <TimerIrqHandler+0x5c>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 800674a:	4b37      	ldr	r3, [pc, #220]	; (8006828 <TimerIrqHandler+0x100>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	617b      	str	r3, [r7, #20]
 8006750:	e014      	b.n	800677c <TimerIrqHandler+0x54>
        {
            next = cur->Next;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68ba      	ldr	r2, [r7, #8]
 800675e:	429a      	cmp	r2, r3
 8006760:	d206      	bcs.n	8006770 <TimerIrqHandler+0x48>
            {
                next->Timestamp -= deltaContext;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	1ad2      	subs	r2, r2, r3
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	e002      	b.n	8006776 <TimerIrqHandler+0x4e>
            }
            else
            {
                next->Timestamp = 0;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	695b      	ldr	r3, [r3, #20]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e6      	bne.n	8006752 <TimerIrqHandler+0x2a>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
 8006784:	4b28      	ldr	r3, [pc, #160]	; (8006828 <TimerIrqHandler+0x100>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d02c      	beq.n	80067e6 <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 800678c:	4b26      	ldr	r3, [pc, #152]	; (8006828 <TimerIrqHandler+0x100>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 8006792:	4b25      	ldr	r3, [pc, #148]	; (8006828 <TimerIrqHandler+0x100>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	4a23      	ldr	r2, [pc, #140]	; (8006828 <TimerIrqHandler+0x100>)
 800679a:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	2200      	movs	r2, #0
 80067a0:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d100      	bne.n	80067ac <TimerIrqHandler+0x84>
 80067aa:	e7fe      	b.n	80067aa <TimerIrqHandler+0x82>
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	6912      	ldr	r2, [r2, #16]
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80067b8:	e015      	b.n	80067e6 <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 80067ba:	4b1b      	ldr	r3, [pc, #108]	; (8006828 <TimerIrqHandler+0x100>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 80067c0:	4b19      	ldr	r3, [pc, #100]	; (8006828 <TimerIrqHandler+0x100>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	4a18      	ldr	r2, [pc, #96]	; (8006828 <TimerIrqHandler+0x100>)
 80067c8:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2200      	movs	r2, #0
 80067ce:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d100      	bne.n	80067da <TimerIrqHandler+0xb2>
 80067d8:	e7fe      	b.n	80067d8 <TimerIrqHandler+0xb0>
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	6912      	ldr	r2, [r2, #16]
 80067e2:	4610      	mov	r0, r2
 80067e4:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 80067e6:	4b10      	ldr	r3, [pc, #64]	; (8006828 <TimerIrqHandler+0x100>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d007      	beq.n	80067fe <TimerIrqHandler+0xd6>
 80067ee:	4b0e      	ldr	r3, [pc, #56]	; (8006828 <TimerIrqHandler+0x100>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	681c      	ldr	r4, [r3, #0]
 80067f4:	f7ff fc44 	bl	8006080 <RtcGetTimerElapsedTime>
 80067f8:	4603      	mov	r3, r0
 80067fa:	429c      	cmp	r4, r3
 80067fc:	d3dd      	bcc.n	80067ba <TimerIrqHandler+0x92>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 80067fe:	4b0a      	ldr	r3, [pc, #40]	; (8006828 <TimerIrqHandler+0x100>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d00c      	beq.n	8006820 <TimerIrqHandler+0xf8>
 8006806:	4b08      	ldr	r3, [pc, #32]	; (8006828 <TimerIrqHandler+0x100>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	7a5b      	ldrb	r3, [r3, #9]
 800680c:	f083 0301 	eor.w	r3, r3, #1
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d004      	beq.n	8006820 <TimerIrqHandler+0xf8>
    {
        TimerSetTimeout( TimerListHead );
 8006816:	4b04      	ldr	r3, [pc, #16]	; (8006828 <TimerIrqHandler+0x100>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f000 f8e6 	bl	80069ec <TimerSetTimeout>
    }
}
 8006820:	bf00      	nop
 8006822:	371c      	adds	r7, #28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd90      	pop	{r4, r7, pc}
 8006828:	200001c0 	.word	0x200001c0

0800682c <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
 8006834:	f107 030c 	add.w	r3, r7, #12
 8006838:	4618      	mov	r0, r3
 800683a:	f7ff f8a5 	bl	8005988 <BoardCriticalSectionBegin>

    TimerEvent_t* prev = TimerListHead;
 800683e:	4b37      	ldr	r3, [pc, #220]	; (800691c <TimerStop+0xf0>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
 8006844:	4b35      	ldr	r3, [pc, #212]	; (800691c <TimerStop+0xf0>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 800684a:	4b34      	ldr	r3, [pc, #208]	; (800691c <TimerStop+0xf0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d002      	beq.n	8006858 <TimerStop+0x2c>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d105      	bne.n	8006864 <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
 8006858:	f107 030c 	add.w	r3, r7, #12
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff f8a4 	bl	80059aa <BoardCriticalSectionEnd>
 8006862:	e057      	b.n	8006914 <TimerStop+0xe8>
        return;
    }

    obj->IsStarted = false;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == obj ) // Stop the Head
 800686a:	4b2c      	ldr	r3, [pc, #176]	; (800691c <TimerStop+0xf0>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d147      	bne.n	8006904 <TimerStop+0xd8>
    {
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8006874:	4b29      	ldr	r3, [pc, #164]	; (800691c <TimerStop+0xf0>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	7a5b      	ldrb	r3, [r3, #9]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d019      	beq.n	80068b2 <TimerStop+0x86>
        {
            TimerListHead->IsNext2Expire = false;
 800687e:	4b27      	ldr	r3, [pc, #156]	; (800691c <TimerStop+0xf0>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	2200      	movs	r2, #0
 8006884:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8006886:	4b25      	ldr	r3, [pc, #148]	; (800691c <TimerStop+0xf0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00a      	beq.n	80068a6 <TimerStop+0x7a>
            {
                TimerListHead = TimerListHead->Next;
 8006890:	4b22      	ldr	r3, [pc, #136]	; (800691c <TimerStop+0xf0>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	695b      	ldr	r3, [r3, #20]
 8006896:	4a21      	ldr	r2, [pc, #132]	; (800691c <TimerStop+0xf0>)
 8006898:	6013      	str	r3, [r2, #0]
                TimerSetTimeout( TimerListHead );
 800689a:	4b20      	ldr	r3, [pc, #128]	; (800691c <TimerStop+0xf0>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f000 f8a4 	bl	80069ec <TimerSetTimeout>
 80068a4:	e031      	b.n	800690a <TimerStop+0xde>
            }
            else
            {
                RtcStopAlarm( );
 80068a6:	f7ff fac5 	bl	8005e34 <RtcStopAlarm>
                TimerListHead = NULL;
 80068aa:	4b1c      	ldr	r3, [pc, #112]	; (800691c <TimerStop+0xf0>)
 80068ac:	2200      	movs	r2, #0
 80068ae:	601a      	str	r2, [r3, #0]
 80068b0:	e02b      	b.n	800690a <TimerStop+0xde>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 80068b2:	4b1a      	ldr	r3, [pc, #104]	; (800691c <TimerStop+0xf0>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d005      	beq.n	80068c8 <TimerStop+0x9c>
            {
                TimerListHead = TimerListHead->Next;
 80068bc:	4b17      	ldr	r3, [pc, #92]	; (800691c <TimerStop+0xf0>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	695b      	ldr	r3, [r3, #20]
 80068c2:	4a16      	ldr	r2, [pc, #88]	; (800691c <TimerStop+0xf0>)
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	e020      	b.n	800690a <TimerStop+0xde>
            }
            else
            {
                TimerListHead = NULL;
 80068c8:	4b14      	ldr	r3, [pc, #80]	; (800691c <TimerStop+0xf0>)
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
 80068ce:	e01c      	b.n	800690a <TimerStop+0xde>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
 80068d0:	693a      	ldr	r2, [r7, #16]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d110      	bne.n	80068fa <TimerStop+0xce>
            {
                if( cur->Next != NULL )
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d006      	beq.n	80068ee <TimerStop+0xc2>
                {
                    cur = cur->Next;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 80068e6:	697b      	ldr	r3, [r7, #20]
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	615a      	str	r2, [r3, #20]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 80068ec:	e00d      	b.n	800690a <TimerStop+0xde>
                    cur = NULL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	615a      	str	r2, [r3, #20]
                break;
 80068f8:	e007      	b.n	800690a <TimerStop+0xde>
            }
            else
            {
                prev = cur;
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d1e2      	bne.n	80068d0 <TimerStop+0xa4>
            }
        }
    }
    CRITICAL_SECTION_END( );
 800690a:	f107 030c 	add.w	r3, r7, #12
 800690e:	4618      	mov	r0, r3
 8006910:	f7ff f84b 	bl	80059aa <BoardCriticalSectionEnd>
}
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	200001c0 	.word	0x200001c0

08006920 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <TimerExists+0x34>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 800692e:	e008      	b.n	8006942 <TimerExists+0x22>
    {
        if( cur == obj )
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d101      	bne.n	800693c <TimerExists+0x1c>
        {
            return true;
 8006938:	2301      	movs	r3, #1
 800693a:	e006      	b.n	800694a <TimerExists+0x2a>
        }
        cur = cur->Next;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1f3      	bne.n	8006930 <TimerExists+0x10>
    }
    return false;
 8006948:	2300      	movs	r3, #0
}
 800694a:	4618      	mov	r0, r3
 800694c:	3714      	adds	r7, #20
 800694e:	46bd      	mov	sp, r7
 8006950:	bc80      	pop	{r7}
 8006952:	4770      	bx	lr
 8006954:	200001c0 	.word	0x200001c0

08006958 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
 8006966:	6838      	ldr	r0, [r7, #0]
 8006968:	f7ff fa1d 	bl	8005da6 <RtcMs2Tick>
 800696c:	60f8      	str	r0, [r7, #12]

    TimerStop( obj );
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff ff5c 	bl	800682c <TimerStop>

    minValue = RtcGetMinimumTimeout( );
 8006974:	f7ff fa10 	bl	8005d98 <RtcGetMinimumTimeout>
 8006978:	60b8      	str	r0, [r7, #8]

    if( ticks < minValue )
 800697a:	68fa      	ldr	r2, [r7, #12]
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	429a      	cmp	r2, r3
 8006980:	d201      	bcs.n	8006986 <TimerSetValue+0x2e>
    {
        ticks = minValue;
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	68fa      	ldr	r2, [r7, #12]
 8006990:	605a      	str	r2, [r3, #4]
}
 8006992:	bf00      	nop
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b082      	sub	sp, #8
 800699e:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
 80069a0:	f7ff fb5a 	bl	8006058 <RtcGetTimerValue>
 80069a4:	6078      	str	r0, [r7, #4]
    return  RtcTick2Ms( now );
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff fa1a 	bl	8005de0 <RtcTick2Ms>
 80069ac:	4603      	mov	r3, r0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
    if ( past == 0 )
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d101      	bne.n	80069c8 <TimerGetElapsedTime+0x12>
    {
        return 0;
 80069c4:	2300      	movs	r3, #0
 80069c6:	e00d      	b.n	80069e4 <TimerGetElapsedTime+0x2e>
    }
    uint32_t nowInTicks = RtcGetTimerValue( );
 80069c8:	f7ff fb46 	bl	8006058 <RtcGetTimerValue>
 80069cc:	60f8      	str	r0, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff f9e9 	bl	8005da6 <RtcMs2Tick>
 80069d4:	60b8      	str	r0, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff f9ff 	bl	8005de0 <RtcTick2Ms>
 80069e2:	4603      	mov	r3, r0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3710      	adds	r7, #16
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}

080069ec <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
 80069ec:	b590      	push	{r4, r7, lr}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
 80069f4:	f7ff f9d0 	bl	8005d98 <RtcGetMinimumTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	60fb      	str	r3, [r7, #12]
    obj->IsNext2Expire = true;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	725a      	strb	r2, [r3, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681c      	ldr	r4, [r3, #0]
 8006a06:	f7ff fb3b 	bl	8006080 <RtcGetTimerElapsedTime>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	429c      	cmp	r4, r3
 8006a12:	d206      	bcs.n	8006a22 <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 8006a14:	f7ff fb34 	bl	8006080 <RtcGetTimerElapsedTime>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	441a      	add	r2, r3
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7ff f9f6 	bl	8005e18 <RtcSetAlarm>
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd90      	pop	{r4, r7, pc}

08006a34 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8006a42:	e007      	b.n	8006a54 <memcpy1+0x20>
    {
        *dst++ = *src++;
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	1c53      	adds	r3, r2, #1
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	1c59      	adds	r1, r3, #1
 8006a4e:	60f9      	str	r1, [r7, #12]
 8006a50:	7812      	ldrb	r2, [r2, #0]
 8006a52:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8006a54:	88fb      	ldrh	r3, [r7, #6]
 8006a56:	1e5a      	subs	r2, r3, #1
 8006a58:	80fa      	strh	r2, [r7, #6]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f2      	bne.n	8006a44 <memcpy1+0x10>
    }
}
 8006a5e:	bf00      	nop
 8006a60:	bf00      	nop
 8006a62:	3714      	adds	r7, #20
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bc80      	pop	{r7}
 8006a68:	4770      	bx	lr
	...

08006a6c <__libc_init_array>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	2600      	movs	r6, #0
 8006a70:	4d0c      	ldr	r5, [pc, #48]	; (8006aa4 <__libc_init_array+0x38>)
 8006a72:	4c0d      	ldr	r4, [pc, #52]	; (8006aa8 <__libc_init_array+0x3c>)
 8006a74:	1b64      	subs	r4, r4, r5
 8006a76:	10a4      	asrs	r4, r4, #2
 8006a78:	42a6      	cmp	r6, r4
 8006a7a:	d109      	bne.n	8006a90 <__libc_init_array+0x24>
 8006a7c:	f000 f830 	bl	8006ae0 <_init>
 8006a80:	2600      	movs	r6, #0
 8006a82:	4d0a      	ldr	r5, [pc, #40]	; (8006aac <__libc_init_array+0x40>)
 8006a84:	4c0a      	ldr	r4, [pc, #40]	; (8006ab0 <__libc_init_array+0x44>)
 8006a86:	1b64      	subs	r4, r4, r5
 8006a88:	10a4      	asrs	r4, r4, #2
 8006a8a:	42a6      	cmp	r6, r4
 8006a8c:	d105      	bne.n	8006a9a <__libc_init_array+0x2e>
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a94:	4798      	blx	r3
 8006a96:	3601      	adds	r6, #1
 8006a98:	e7ee      	b.n	8006a78 <__libc_init_array+0xc>
 8006a9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a9e:	4798      	blx	r3
 8006aa0:	3601      	adds	r6, #1
 8006aa2:	e7f2      	b.n	8006a8a <__libc_init_array+0x1e>
 8006aa4:	08006c88 	.word	0x08006c88
 8006aa8:	08006c88 	.word	0x08006c88
 8006aac:	08006c88 	.word	0x08006c88
 8006ab0:	08006c8c 	.word	0x08006c8c

08006ab4 <memcpy>:
 8006ab4:	440a      	add	r2, r1
 8006ab6:	4291      	cmp	r1, r2
 8006ab8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006abc:	d100      	bne.n	8006ac0 <memcpy+0xc>
 8006abe:	4770      	bx	lr
 8006ac0:	b510      	push	{r4, lr}
 8006ac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ac6:	4291      	cmp	r1, r2
 8006ac8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006acc:	d1f9      	bne.n	8006ac2 <memcpy+0xe>
 8006ace:	bd10      	pop	{r4, pc}

08006ad0 <memset>:
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	4402      	add	r2, r0
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d100      	bne.n	8006ada <memset+0xa>
 8006ad8:	4770      	bx	lr
 8006ada:	f803 1b01 	strb.w	r1, [r3], #1
 8006ade:	e7f9      	b.n	8006ad4 <memset+0x4>

08006ae0 <_init>:
 8006ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ae2:	bf00      	nop
 8006ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ae6:	bc08      	pop	{r3}
 8006ae8:	469e      	mov	lr, r3
 8006aea:	4770      	bx	lr

08006aec <_fini>:
 8006aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aee:	bf00      	nop
 8006af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006af2:	bc08      	pop	{r3}
 8006af4:	469e      	mov	lr, r3
 8006af6:	4770      	bx	lr
