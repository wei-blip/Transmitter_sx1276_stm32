
L152RE_sx1276.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000794c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c84  08007c84  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08007c84  08007c84  00017c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c8c  08007c8c  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c8c  08007c8c  00017c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c90  08007c90  00017c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08007c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  200000a8  08007d3c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  08007d3c  00020cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aae8  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f28  00000000  00000000  0003abb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001470  00000000  00000000  0003eae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012b0  00000000  00000000  0003ff58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b84d  00000000  00000000  00041208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cd4  00000000  00000000  0005ca55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009de90  00000000  00000000  00074729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001125b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056f4  00000000  00000000  0011260c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200000a8 	.word	0x200000a8
 8000158:	00000000 	.word	0x00000000
 800015c:	08007a70 	.word	0x08007a70

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200000ac 	.word	0x200000ac
 8000178:	08007a70 	.word	0x08007a70

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08a      	sub	sp, #40	; 0x28
 8000478:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047a:	f107 0314 	add.w	r3, r7, #20
 800047e:	2200      	movs	r2, #0
 8000480:	601a      	str	r2, [r3, #0]
 8000482:	605a      	str	r2, [r3, #4]
 8000484:	609a      	str	r2, [r3, #8]
 8000486:	60da      	str	r2, [r3, #12]
 8000488:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048a:	4b4c      	ldr	r3, [pc, #304]	; (80005bc <MX_GPIO_Init+0x148>)
 800048c:	69db      	ldr	r3, [r3, #28]
 800048e:	4a4b      	ldr	r2, [pc, #300]	; (80005bc <MX_GPIO_Init+0x148>)
 8000490:	f043 0304 	orr.w	r3, r3, #4
 8000494:	61d3      	str	r3, [r2, #28]
 8000496:	4b49      	ldr	r3, [pc, #292]	; (80005bc <MX_GPIO_Init+0x148>)
 8000498:	69db      	ldr	r3, [r3, #28]
 800049a:	f003 0304 	and.w	r3, r3, #4
 800049e:	613b      	str	r3, [r7, #16]
 80004a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004a2:	4b46      	ldr	r3, [pc, #280]	; (80005bc <MX_GPIO_Init+0x148>)
 80004a4:	69db      	ldr	r3, [r3, #28]
 80004a6:	4a45      	ldr	r2, [pc, #276]	; (80005bc <MX_GPIO_Init+0x148>)
 80004a8:	f043 0320 	orr.w	r3, r3, #32
 80004ac:	61d3      	str	r3, [r2, #28]
 80004ae:	4b43      	ldr	r3, [pc, #268]	; (80005bc <MX_GPIO_Init+0x148>)
 80004b0:	69db      	ldr	r3, [r3, #28]
 80004b2:	f003 0320 	and.w	r3, r3, #32
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b40      	ldr	r3, [pc, #256]	; (80005bc <MX_GPIO_Init+0x148>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a3f      	ldr	r2, [pc, #252]	; (80005bc <MX_GPIO_Init+0x148>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b3d      	ldr	r3, [pc, #244]	; (80005bc <MX_GPIO_Init+0x148>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	60bb      	str	r3, [r7, #8]
 80004d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d2:	4b3a      	ldr	r3, [pc, #232]	; (80005bc <MX_GPIO_Init+0x148>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a39      	ldr	r2, [pc, #228]	; (80005bc <MX_GPIO_Init+0x148>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b37      	ldr	r3, [pc, #220]	; (80005bc <MX_GPIO_Init+0x148>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	607b      	str	r3, [r7, #4]
 80004e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SX1276_RST_Pin|LED_EXT_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2109      	movs	r1, #9
 80004ee:	4834      	ldr	r0, [pc, #208]	; (80005c0 <MX_GPIO_Init+0x14c>)
 80004f0:	f000 ffb5 	bl	800145e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2120      	movs	r1, #32
 80004f8:	4832      	ldr	r0, [pc, #200]	; (80005c4 <MX_GPIO_Init+0x150>)
 80004fa:	f000 ffb0 	bl	800145e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000504:	4830      	ldr	r0, [pc, #192]	; (80005c8 <MX_GPIO_Init+0x154>)
 8000506:	f000 ffaa 	bl	800145e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PCPin PCPin PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_13|DIO_4_Pin|DIO_5_Pin|DIO_3_Pin
 800050a:	f242 3360 	movw	r3, #9056	; 0x2360
 800050e:	617b      	str	r3, [r7, #20]
                          |DIO_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000510:	4b2e      	ldr	r3, [pc, #184]	; (80005cc <MX_GPIO_Init+0x158>)
 8000512:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000518:	f107 0314 	add.w	r3, r7, #20
 800051c:	4619      	mov	r1, r3
 800051e:	4828      	ldr	r0, [pc, #160]	; (80005c0 <MX_GPIO_Init+0x14c>)
 8000520:	f000 fdf6 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = SX1276_RST_Pin|LED_EXT_Pin;
 8000524:	2309      	movs	r3, #9
 8000526:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000528:	2301      	movs	r3, #1
 800052a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000530:	2300      	movs	r3, #0
 8000532:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000534:	f107 0314 	add.w	r3, r7, #20
 8000538:	4619      	mov	r1, r3
 800053a:	4821      	ldr	r0, [pc, #132]	; (80005c0 <MX_GPIO_Init+0x14c>)
 800053c:	f000 fde8 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000540:	2320      	movs	r3, #32
 8000542:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000544:	2301      	movs	r3, #1
 8000546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000548:	2300      	movs	r3, #0
 800054a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054c:	2300      	movs	r3, #0
 800054e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000550:	f107 0314 	add.w	r3, r7, #20
 8000554:	4619      	mov	r1, r3
 8000556:	481b      	ldr	r0, [pc, #108]	; (80005c4 <MX_GPIO_Init+0x150>)
 8000558:	f000 fdda 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin;
 800055c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000562:	2301      	movs	r3, #1
 8000564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000566:	2300      	movs	r3, #0
 8000568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056a:	2300      	movs	r3, #0
 800056c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0314 	add.w	r3, r7, #20
 8000572:	4619      	mov	r1, r3
 8000574:	4814      	ldr	r0, [pc, #80]	; (80005c8 <MX_GPIO_Init+0x154>)
 8000576:	f000 fdcb 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = DIO_1_Pin|DIO_0_Pin;
 800057a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800057e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000580:	4b12      	ldr	r3, [pc, #72]	; (80005cc <MX_GPIO_Init+0x158>)
 8000582:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4619      	mov	r1, r3
 800058e:	480d      	ldr	r0, [pc, #52]	; (80005c4 <MX_GPIO_Init+0x150>)
 8000590:	f000 fdbe 	bl	8001110 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000594:	2200      	movs	r2, #0
 8000596:	2105      	movs	r1, #5
 8000598:	2017      	movs	r0, #23
 800059a:	f000 fd4e 	bl	800103a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800059e:	2017      	movs	r0, #23
 80005a0:	f000 fd67 	bl	8001072 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80005a4:	2200      	movs	r2, #0
 80005a6:	2105      	movs	r1, #5
 80005a8:	2028      	movs	r0, #40	; 0x28
 80005aa:	f000 fd46 	bl	800103a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005ae:	2028      	movs	r0, #40	; 0x28
 80005b0:	f000 fd5f 	bl	8001072 <HAL_NVIC_EnableIRQ>

}
 80005b4:	bf00      	nop
 80005b6:	3728      	adds	r7, #40	; 0x28
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020800 	.word	0x40020800
 80005c4:	40020000 	.word	0x40020000
 80005c8:	40020400 	.word	0x40020400
 80005cc:	10110000 	.word	0x10110000

080005d0 <GpioWrite>:

/* USER CODE BEGIN 2 */
void GpioWrite( Gpio_t *obj, uint32_t value ) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  HAL_GPIO_WritePin(obj->port, obj->pin, (GPIO_PinState) value);
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6818      	ldr	r0, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	889b      	ldrh	r3, [r3, #4]
 80005e2:	683a      	ldr	r2, [r7, #0]
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	4619      	mov	r1, r3
 80005e8:	f000 ff39 	bl	800145e <HAL_GPIO_WritePin>
}
 80005ec:	bf00      	nop
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <GpioRead>:

uint32_t GpioRead( Gpio_t *obj ) {
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  return HAL_GPIO_ReadPin( obj->port, obj->pin);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	889b      	ldrh	r3, [r3, #4]
 8000604:	4619      	mov	r1, r3
 8000606:	4610      	mov	r0, r2
 8000608:	f000 ff12 	bl	8001430 <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
}
 800060e:	4618      	mov	r0, r3
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <GpioToggle>:

void GpioToggle( Gpio_t *obj ) {
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
 800061c:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(obj->port, obj->pin);
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	889b      	ldrh	r3, [r3, #4]
 8000626:	4619      	mov	r1, r3
 8000628:	4610      	mov	r0, r2
 800062a:	f000 ff30 	bl	800148e <HAL_GPIO_TogglePin>
}
 800062e:	bf00      	nop
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
	...

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800063e:	f000 fbc6 	bl	8000dce <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000642:	f000 f821 	bl	8000688 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000646:	f7ff ff15 	bl	8000474 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064a:	f000 fb25 	bl	8000c98 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800064e:	f000 f93d 	bl	80008cc <MX_SPI2_Init>
  MX_RTC_Init();
 8000652:	f000 f893 	bl	800077c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
#ifdef BER_TEST
  struct InputParametrsTX_s iparam;
  struct BER_TX_s berParam;
  berParam.len = BARKER_11;
 8000656:	230b      	movs	r3, #11
 8000658:	723b      	strb	r3, [r7, #8]
  struct PER_TX_s perParam = { 20 , 20 };
 800065a:	4a0a      	ldr	r2, [pc, #40]	; (8000684 <main+0x4c>)
 800065c:	463b      	mov	r3, r7
 800065e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000662:	e883 0003 	stmia.w	r3, {r0, r1}
  iparam.pBER = &berParam;
 8000666:	f107 0308 	add.w	r3, r7, #8
 800066a:	60fb      	str	r3, [r7, #12]
  iparam.pPER = &perParam;
 800066c:	463b      	mov	r3, r7
 800066e:	613b      	str	r3, [r7, #16]
  iparam.mode = BER;
 8000670:	2300      	movs	r3, #0
 8000672:	753b      	strb	r3, [r7, #20]
  Measurements( &iparam );
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	4618      	mov	r0, r3
 800067a:	f005 fe47 	bl	800630c <Measurements>
#endif

  ping_pong_rf();
 800067e:	f005 fb87 	bl	8005d90 <ping_pong_rf>
//  continuos_wave();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1);
 8000682:	e7fe      	b.n	8000682 <main+0x4a>
 8000684:	08007a88 	.word	0x08007a88

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	; 0x58
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000692:	2234      	movs	r2, #52	; 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f006 fda4 	bl	80071e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006b6:	4b25      	ldr	r3, [pc, #148]	; (800074c <SystemClock_Config+0xc4>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80006be:	4a23      	ldr	r2, [pc, #140]	; (800074c <SystemClock_Config+0xc4>)
 80006c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80006c4:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 80006c6:	2306      	movs	r3, #6
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ca:	2301      	movs	r3, #1
 80006cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	2301      	movs	r3, #1
 80006d0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006da:	2300      	movs	r3, #0
 80006dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80006de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80006e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80006e4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80006e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 fefe 	bl	80014f0 <HAL_RCC_OscConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x76>
  {
    Error_Handler();
 80006fa:	f000 f838 	bl	800076e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fe:	230f      	movs	r3, #15
 8000700:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	2101      	movs	r1, #1
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fa19 	bl	8001b50 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000724:	f000 f823 	bl	800076e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000728:	2301      	movs	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800072c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000730:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fccf 	bl	80020d8 <HAL_RCCEx_PeriphCLKConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000740:	f000 f815 	bl	800076e <Error_Handler>
  }
}
 8000744:	bf00      	nop
 8000746:	3758      	adds	r7, #88	; 0x58
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40007000 	.word	0x40007000

08000750 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000760:	d101      	bne.n	8000766 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000762:	f000 fb4d 	bl	8000e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	bc80      	pop	{r7}
 8000778:	4770      	bx	lr
	...

0800077c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b090      	sub	sp, #64	; 0x40
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000782:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	605a      	str	r2, [r3, #4]
 800078c:	609a      	str	r2, [r3, #8]
 800078e:	60da      	str	r2, [r3, #12]
 8000790:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000792:	2300      	movs	r3, #0
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2228      	movs	r2, #40	; 0x28
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f006 fd21 	bl	80071e4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007a2:	4b3a      	ldr	r3, [pc, #232]	; (800088c <MX_RTC_Init+0x110>)
 80007a4:	4a3a      	ldr	r2, [pc, #232]	; (8000890 <MX_RTC_Init+0x114>)
 80007a6:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007a8:	4b38      	ldr	r3, [pc, #224]	; (800088c <MX_RTC_Init+0x110>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007ae:	4b37      	ldr	r3, [pc, #220]	; (800088c <MX_RTC_Init+0x110>)
 80007b0:	227f      	movs	r2, #127	; 0x7f
 80007b2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007b4:	4b35      	ldr	r3, [pc, #212]	; (800088c <MX_RTC_Init+0x110>)
 80007b6:	22ff      	movs	r2, #255	; 0xff
 80007b8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007ba:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_RTC_Init+0x110>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007c0:	4b32      	ldr	r3, [pc, #200]	; (800088c <MX_RTC_Init+0x110>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_RTC_Init+0x110>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007cc:	482f      	ldr	r0, [pc, #188]	; (800088c <MX_RTC_Init+0x110>)
 80007ce:	f001 fd65 	bl	800229c <HAL_RTC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80007d8:	f7ff ffc9 	bl	800076e <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007dc:	2300      	movs	r3, #0
 80007de:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007ee:	2300      	movs	r3, #0
 80007f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80007fa:	2201      	movs	r2, #1
 80007fc:	4619      	mov	r1, r3
 80007fe:	4823      	ldr	r0, [pc, #140]	; (800088c <MX_RTC_Init+0x110>)
 8000800:	f001 fdc7 	bl	8002392 <HAL_RTC_SetTime>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800080a:	f7ff ffb0 	bl	800076e <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800080e:	2301      	movs	r3, #1
 8000810:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000814:	2301      	movs	r3, #1
 8000816:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800081a:	2301      	movs	r3, #1
 800081c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	2201      	movs	r2, #1
 800082c:	4619      	mov	r1, r3
 800082e:	4817      	ldr	r0, [pc, #92]	; (800088c <MX_RTC_Init+0x110>)
 8000830:	f001 fec0 	bl	80025b4 <HAL_RTC_SetDate>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800083a:	f7ff ff98 	bl	800076e <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800083e:	2300      	movs	r3, #0
 8000840:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000842:	2300      	movs	r3, #0
 8000844:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000846:	2300      	movs	r3, #0
 8000848:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800085a:	2300      	movs	r3, #0
 800085c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000862:	2301      	movs	r3, #1
 8000864:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000868:	f44f 7380 	mov.w	r3, #256	; 0x100
 800086c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800086e:	463b      	mov	r3, r7
 8000870:	2201      	movs	r2, #1
 8000872:	4619      	mov	r1, r3
 8000874:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_RTC_Init+0x110>)
 8000876:	f001 ff89 	bl	800278c <HAL_RTC_SetAlarm_IT>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_RTC_Init+0x108>
  {
    Error_Handler();
 8000880:	f7ff ff75 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	3740      	adds	r7, #64	; 0x40
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	2000024c 	.word	0x2000024c
 8000890:	40002800 	.word	0x40002800

08000894 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a08      	ldr	r2, [pc, #32]	; (80008c4 <HAL_RTC_MspInit+0x30>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d10a      	bne.n	80008bc <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <HAL_RTC_MspInit+0x34>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	601a      	str	r2, [r3, #0]

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 5, 0);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2105      	movs	r1, #5
 80008b0:	2029      	movs	r0, #41	; 0x29
 80008b2:	f000 fbc2 	bl	800103a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80008b6:	2029      	movs	r0, #41	; 0x29
 80008b8:	f000 fbdb 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80008bc:	bf00      	nop
 80008be:	3708      	adds	r7, #8
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40002800 	.word	0x40002800
 80008c8:	424706d8 	.word	0x424706d8

080008cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_SPI2_Init+0x64>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <MX_SPI2_Init+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_SPI2_Init+0x64>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_SPI2_Init+0x64>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MX_SPI2_Init+0x64>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_SPI2_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_SPI2_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_SPI2_Init+0x64>)
 80008f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_SPI2_Init+0x64>)
 8000900:	2218      	movs	r2, #24
 8000902:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_SPI2_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_SPI2_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_SPI2_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_SPI2_Init+0x64>)
 8000918:	220a      	movs	r2, #10
 800091a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_SPI2_Init+0x64>)
 800091e:	f002 fa09 	bl	8002d34 <HAL_SPI_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000928:	f7ff ff21 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */
  /* USER CODE END SPI2_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	2000026c 	.word	0x2000026c
 8000934:	40003800 	.word	0x40003800

08000938 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	; 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a17      	ldr	r2, [pc, #92]	; (80009b4 <HAL_SPI_MspInit+0x7c>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d128      	bne.n	80009ac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <HAL_SPI_MspInit+0x80>)
 800095c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <HAL_SPI_MspInit+0x80>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6253      	str	r3, [r2, #36]	; 0x24
 8000966:	4b14      	ldr	r3, [pc, #80]	; (80009b8 <HAL_SPI_MspInit+0x80>)
 8000968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	613b      	str	r3, [r7, #16]
 8000970:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b11      	ldr	r3, [pc, #68]	; (80009b8 <HAL_SPI_MspInit+0x80>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a10      	ldr	r2, [pc, #64]	; (80009b8 <HAL_SPI_MspInit+0x80>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <HAL_SPI_MspInit+0x80>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800098a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000990:	2302      	movs	r3, #2
 8000992:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	2300      	movs	r3, #0
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000998:	2303      	movs	r3, #3
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800099c:	2305      	movs	r3, #5
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <HAL_SPI_MspInit+0x84>)
 80009a8:	f000 fbb2 	bl	8001110 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009ac:	bf00      	nop
 80009ae:	3728      	adds	r7, #40	; 0x28
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40003800 	.word	0x40003800
 80009b8:	40023800 	.word	0x40023800
 80009bc:	40020400 	.word	0x40020400

080009c0 <SpiInOut>:
}

/* USER CODE BEGIN 1 */

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	807b      	strh	r3, [r7, #2]
    uint8_t rxData = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]

    if( ( obj == NULL ) || ( hspi2.Instance ) == NULL )
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b00      	cmp	r3, #0
    {
        assert_param( LMN_STATUS_ERROR );
    }

    __HAL_SPI_ENABLE( &hspi2 );
 80009d4:	4b18      	ldr	r3, [pc, #96]	; (8000a38 <SpiInOut+0x78>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <SpiInOut+0x78>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009e2:	601a      	str	r2, [r3, #0]

    CRITICAL_SECTION_BEGIN( );
 80009e4:	f107 0308 	add.w	r3, r7, #8
 80009e8:	4618      	mov	r0, r3
 80009ea:	f005 f90d 	bl	8005c08 <BoardCriticalSectionBegin>

    while( __HAL_SPI_GET_FLAG( &hspi2, SPI_FLAG_TXE ) == RESET );
 80009ee:	bf00      	nop
 80009f0:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <SpiInOut+0x78>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	689b      	ldr	r3, [r3, #8]
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d1f8      	bne.n	80009f0 <SpiInOut+0x30>
    hspi2.Instance->DR = ( uint16_t ) ( outData & 0xFF );
 80009fe:	887a      	ldrh	r2, [r7, #2]
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <SpiInOut+0x78>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	b2d2      	uxtb	r2, r2
 8000a06:	60da      	str	r2, [r3, #12]

    while( __HAL_SPI_GET_FLAG( &hspi2, SPI_FLAG_RXNE ) == RESET );
 8000a08:	bf00      	nop
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <SpiInOut+0x78>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	689b      	ldr	r3, [r3, #8]
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d1f8      	bne.n	8000a0a <SpiInOut+0x4a>
    rxData = ( uint16_t ) hspi2.Instance->DR;
 8000a18:	4b07      	ldr	r3, [pc, #28]	; (8000a38 <SpiInOut+0x78>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	73fb      	strb	r3, [r7, #15]

    CRITICAL_SECTION_END( );
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	4618      	mov	r0, r3
 8000a26:	f005 f900 	bl	8005c2a <BoardCriticalSectionEnd>

    return( rxData );
 8000a2a:	7bfb      	ldrb	r3, [r7, #15]
 8000a2c:	b29b      	uxth	r3, r3
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000026c 	.word	0x2000026c

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000a42:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <HAL_MspInit+0x58>)
 8000a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a46:	4a13      	ldr	r2, [pc, #76]	; (8000a94 <HAL_MspInit+0x58>)
 8000a48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <HAL_MspInit+0x58>)
 8000a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5a:	4b0e      	ldr	r3, [pc, #56]	; (8000a94 <HAL_MspInit+0x58>)
 8000a5c:	6a1b      	ldr	r3, [r3, #32]
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	; (8000a94 <HAL_MspInit+0x58>)
 8000a60:	f043 0301 	orr.w	r3, r3, #1
 8000a64:	6213      	str	r3, [r2, #32]
 8000a66:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <HAL_MspInit+0x58>)
 8000a68:	6a1b      	ldr	r3, [r3, #32]
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <HAL_MspInit+0x58>)
 8000a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <HAL_MspInit+0x58>)
 8000a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7c:	6253      	str	r3, [r2, #36]	; 0x24
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <HAL_MspInit+0x58>)
 8000a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3714      	adds	r7, #20
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40023800 	.word	0x40023800

08000a98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08c      	sub	sp, #48	; 0x30
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	201c      	movs	r0, #28
 8000aae:	f000 fac4 	bl	800103a <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ab2:	201c      	movs	r0, #28
 8000ab4:	f000 fadd 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	; (8000b38 <HAL_InitTick+0xa0>)
 8000aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000abc:	4a1e      	ldr	r2, [pc, #120]	; (8000b38 <HAL_InitTick+0xa0>)
 8000abe:	f043 0301 	orr.w	r3, r3, #1
 8000ac2:	6253      	str	r3, [r2, #36]	; 0x24
 8000ac4:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <HAL_InitTick+0xa0>)
 8000ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad0:	f107 0210 	add.w	r2, r7, #16
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	4611      	mov	r1, r2
 8000ada:	4618      	mov	r0, r3
 8000adc:	f001 fa6c 	bl	8001fb8 <HAL_RCC_GetClockConfig>

  /* Compute TIM2 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ae0:	f001 fa42 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8000ae4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_InitTick+0xa4>)
 8000aea:	fba2 2303 	umull	r2, r3, r2, r3
 8000aee:	0c9b      	lsrs	r3, r3, #18
 8000af0:	3b01      	subs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_InitTick+0xa8>)
 8000af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000afa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <HAL_InitTick+0xa8>)
 8000afe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b02:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000b04:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b08:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000b0a:	4b0d      	ldr	r3, [pc, #52]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b10:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 8000b16:	480a      	ldr	r0, [pc, #40]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b18:	f002 f995 	bl	8002e46 <HAL_TIM_Base_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d104      	bne.n	8000b2c <HAL_InitTick+0x94>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 8000b22:	4807      	ldr	r0, [pc, #28]	; (8000b40 <HAL_InitTick+0xa8>)
 8000b24:	f002 f9d8 	bl	8002ed8 <HAL_TIM_Base_Start_IT>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	e000      	b.n	8000b2e <HAL_InitTick+0x96>
  }

  /* Return function status */
  return HAL_ERROR;
 8000b2c:	2301      	movs	r3, #1
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3730      	adds	r7, #48	; 0x30
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40023800 	.word	0x40023800
 8000b3c:	431bde83 	.word	0x431bde83
 8000b40:	200002c4 	.word	0x200002c4

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bc80      	pop	{r7}
 8000b6c:	4770      	bx	lr

08000b6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr

08000b7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b7a:	b480      	push	{r7}
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr

08000b92 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000b96:	2020      	movs	r0, #32
 8000b98:	f000 fc92 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000b9c:	2040      	movs	r0, #64	; 0x40
 8000b9e:	f000 fc8f 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000ba2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000ba6:	f000 fc8b 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000baa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bae:	f000 fc87 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
	...

08000bb8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <TIM2_IRQHandler+0x10>)
 8000bbe:	f002 f9dd 	bl	8002f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200002c4 	.word	0x200002c4

08000bcc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bd0:	4802      	ldr	r0, [pc, #8]	; (8000bdc <USART2_IRQHandler+0x10>)
 8000bd2:	f002 fc29 	bl	8003428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000304 	.word	0x20000304

08000be0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000be4:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000be8:	f000 fc6a 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000bec:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000bf0:	f000 fc66 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bf4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bf8:	f000 fc62 	bl	80014c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&RtcHandle);
 8000c04:	4802      	ldr	r0, [pc, #8]	; (8000c10 <RTC_Alarm_IRQHandler+0x10>)
 8000c06:	f001 ff85 	bl	8002b14 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */
#endif
  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	200001f8 	.word	0x200001f8

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f006 fa96 	bl	8007174 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20014000 	.word	0x20014000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	200000c4 	.word	0x200000c4
 8000c7c:	20000cd8 	.word	0x20000cd8

08000c80 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000c84:	4b03      	ldr	r3, [pc, #12]	; (8000c94 <SystemInit+0x14>)
 8000c86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c8a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <MX_USART2_UART_Init+0x50>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000ca4:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cce:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <MX_USART2_UART_Init+0x4c>)
 8000cd0:	f002 fac4 	bl	800325c <HAL_UART_Init>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cda:	f7ff fd48 	bl	800076e <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000304 	.word	0x20000304
 8000ce8:	40004400 	.word	0x40004400

08000cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <HAL_UART_MspInit+0x8c>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d12f      	bne.n	8000d6e <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <HAL_UART_MspInit+0x90>)
 8000d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d12:	4a1a      	ldr	r2, [pc, #104]	; (8000d7c <HAL_UART_MspInit+0x90>)
 8000d14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d18:	6253      	str	r3, [r2, #36]	; 0x24
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <HAL_UART_MspInit+0x90>)
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <HAL_UART_MspInit+0x90>)
 8000d28:	69db      	ldr	r3, [r3, #28]
 8000d2a:	4a14      	ldr	r2, [pc, #80]	; (8000d7c <HAL_UART_MspInit+0x90>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	61d3      	str	r3, [r2, #28]
 8000d32:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_UART_MspInit+0x90>)
 8000d34:	69db      	ldr	r3, [r3, #28]
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d3e:	230c      	movs	r3, #12
 8000d40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d4e:	2307      	movs	r3, #7
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <HAL_UART_MspInit+0x94>)
 8000d5a:	f000 f9d9 	bl	8001110 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2105      	movs	r1, #5
 8000d62:	2026      	movs	r0, #38	; 0x26
 8000d64:	f000 f969 	bl	800103a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d68:	2026      	movs	r0, #38	; 0x26
 8000d6a:	f000 f982 	bl	8001072 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3728      	adds	r7, #40	; 0x28
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	40004400 	.word	0x40004400
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000

08000d84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000d84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000d86:	e003      	b.n	8000d90 <LoopCopyDataInit>

08000d88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000d88:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000d8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000d8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000d8e:	3104      	adds	r1, #4

08000d90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000d90:	480a      	ldr	r0, [pc, #40]	; (8000dbc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000d94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000d96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000d98:	d3f6      	bcc.n	8000d88 <CopyDataInit>
  ldr r2, =_sbss
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000d9c:	e002      	b.n	8000da4 <LoopFillZerobss>

08000d9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000d9e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000da0:	f842 3b04 	str.w	r3, [r2], #4

08000da4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000da6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000da8:	d3f9      	bcc.n	8000d9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000daa:	f7ff ff69 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dae:	f006 f9e7 	bl	8007180 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000db2:	f7ff fc41 	bl	8000638 <main>
  bx lr
 8000db6:	4770      	bx	lr
  ldr r3, =_sidata
 8000db8:	08007c94 	.word	0x08007c94
  ldr r0, =_sdata
 8000dbc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dc0:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 8000dc4:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 8000dc8:	20000cd8 	.word	0x20000cd8

08000dcc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000dcc:	e7fe      	b.n	8000dcc <ADC1_IRQHandler>

08000dce <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 f923 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff fe5a 	bl	8000a98 <HAL_InitTick>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d002      	beq.n	8000df0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	71fb      	strb	r3, [r7, #7]
 8000dee:	e001      	b.n	8000df4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000df0:	f7ff fe24 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <HAL_IncTick+0x1c>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <HAL_IncTick+0x20>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a03      	ldr	r2, [pc, #12]	; (8000e1c <HAL_IncTick+0x1c>)
 8000e10:	6013      	str	r3, [r2, #0]
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bc80      	pop	{r7}
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	20000344 	.word	0x20000344
 8000e20:	20000008 	.word	0x20000008

08000e24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  return uwTick;
 8000e28:	4b02      	ldr	r3, [pc, #8]	; (8000e34 <HAL_GetTick+0x10>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr
 8000e34:	20000344 	.word	0x20000344

08000e38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e40:	f7ff fff0 	bl	8000e24 <HAL_GetTick>
 8000e44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e50:	d004      	beq.n	8000e5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <HAL_Delay+0x40>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68fa      	ldr	r2, [r7, #12]
 8000e58:	4413      	add	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e5c:	bf00      	nop
 8000e5e:	f7ff ffe1 	bl	8000e24 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	d8f7      	bhi.n	8000e5e <HAL_Delay+0x26>
  {
  }
}
 8000e6e:	bf00      	nop
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000008 	.word	0x20000008

08000e7c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	4a03      	ldr	r2, [pc, #12]	; (8000e94 <HAL_DBGMCU_EnableDBGSleepMode+0x18>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6053      	str	r3, [r2, #4]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	e0042000 	.word	0xe0042000

08000e98 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000ea2:	f043 0302 	orr.w	r3, r3, #2
 8000ea6:	6053      	str	r3, [r2, #4]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bc80      	pop	{r7}
 8000eae:	4770      	bx	lr
 8000eb0:	e0042000 	.word	0xe0042000

08000eb4 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4a03      	ldr	r2, [pc, #12]	; (8000ecc <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000ebe:	f043 0304 	orr.w	r3, r3, #4
 8000ec2:	6053      	str	r3, [r2, #4]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	e0042000 	.word	0xe0042000

08000ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee0:	4b0c      	ldr	r3, [pc, #48]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eec:	4013      	ands	r3, r2
 8000eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f02:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <__NVIC_SetPriorityGrouping+0x44>)
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	60d3      	str	r3, [r2, #12]
}
 8000f08:	bf00      	nop
 8000f0a:	3714      	adds	r7, #20
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bc80      	pop	{r7}
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <__NVIC_GetPriorityGrouping+0x18>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	0a1b      	lsrs	r3, r3, #8
 8000f22:	f003 0307 	and.w	r3, r3, #7
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	db0b      	blt.n	8000f5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	f003 021f 	and.w	r2, r3, #31
 8000f4c:	4906      	ldr	r1, [pc, #24]	; (8000f68 <__NVIC_EnableIRQ+0x34>)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	095b      	lsrs	r3, r3, #5
 8000f54:	2001      	movs	r0, #1
 8000f56:	fa00 f202 	lsl.w	r2, r0, r2
 8000f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f5e:	bf00      	nop
 8000f60:	370c      	adds	r7, #12
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bc80      	pop	{r7}
 8000f66:	4770      	bx	lr
 8000f68:	e000e100 	.word	0xe000e100

08000f6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	6039      	str	r1, [r7, #0]
 8000f76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	db0a      	blt.n	8000f96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <__NVIC_SetPriority+0x4c>)
 8000f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8a:	0112      	lsls	r2, r2, #4
 8000f8c:	b2d2      	uxtb	r2, r2
 8000f8e:	440b      	add	r3, r1
 8000f90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f94:	e00a      	b.n	8000fac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	b2da      	uxtb	r2, r3
 8000f9a:	4908      	ldr	r1, [pc, #32]	; (8000fbc <__NVIC_SetPriority+0x50>)
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	3b04      	subs	r3, #4
 8000fa4:	0112      	lsls	r2, r2, #4
 8000fa6:	b2d2      	uxtb	r2, r2
 8000fa8:	440b      	add	r3, r1
 8000faa:	761a      	strb	r2, [r3, #24]
}
 8000fac:	bf00      	nop
 8000fae:	370c      	adds	r7, #12
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bc80      	pop	{r7}
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000e100 	.word	0xe000e100
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b089      	sub	sp, #36	; 0x24
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd4:	69fb      	ldr	r3, [r7, #28]
 8000fd6:	f1c3 0307 	rsb	r3, r3, #7
 8000fda:	2b04      	cmp	r3, #4
 8000fdc:	bf28      	it	cs
 8000fde:	2304      	movcs	r3, #4
 8000fe0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	d902      	bls.n	8000ff0 <NVIC_EncodePriority+0x30>
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3b03      	subs	r3, #3
 8000fee:	e000      	b.n	8000ff2 <NVIC_EncodePriority+0x32>
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43da      	mvns	r2, r3
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	401a      	ands	r2, r3
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001008:	f04f 31ff 	mov.w	r1, #4294967295
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa01 f303 	lsl.w	r3, r1, r3
 8001012:	43d9      	mvns	r1, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001018:	4313      	orrs	r3, r2
         );
}
 800101a:	4618      	mov	r0, r3
 800101c:	3724      	adds	r7, #36	; 0x24
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f7ff ff4f 	bl	8000ed0 <__NVIC_SetPriorityGrouping>
}
 8001032:	bf00      	nop
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b086      	sub	sp, #24
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	60b9      	str	r1, [r7, #8]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800104c:	f7ff ff64 	bl	8000f18 <__NVIC_GetPriorityGrouping>
 8001050:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	68b9      	ldr	r1, [r7, #8]
 8001056:	6978      	ldr	r0, [r7, #20]
 8001058:	f7ff ffb2 	bl	8000fc0 <NVIC_EncodePriority>
 800105c:	4602      	mov	r2, r0
 800105e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff81 	bl	8000f6c <__NVIC_SetPriority>
}
 800106a:	bf00      	nop
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b082      	sub	sp, #8
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800107c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff57 	bl	8000f34 <__NVIC_EnableIRQ>
}
 8001086:	bf00      	nop
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b084      	sub	sp, #16
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d005      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2204      	movs	r2, #4
 80010aa:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
 80010b0:	e029      	b.n	8001106 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f022 020e 	bic.w	r2, r2, #14
 80010c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f022 0201 	bic.w	r2, r2, #1
 80010d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d6:	f003 021c 	and.w	r2, r3, #28
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010de:	2101      	movs	r1, #1
 80010e0:	fa01 f202 	lsl.w	r2, r1, r2
 80010e4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2201      	movs	r2, #1
 80010ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d003      	beq.n	8001106 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	4798      	blx	r3
    }
  }
  return status;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b480      	push	{r7}
 8001112:	b087      	sub	sp, #28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001126:	e160      	b.n	80013ea <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2101      	movs	r1, #1
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	4013      	ands	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 8152 	beq.w	80013e4 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d00b      	beq.n	8001160 <HAL_GPIO_Init+0x50>
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b02      	cmp	r3, #2
 800114e:	d007      	beq.n	8001160 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001154:	2b11      	cmp	r3, #17
 8001156:	d003      	beq.n	8001160 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b12      	cmp	r3, #18
 800115e:	d130      	bne.n	80011c2 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	689b      	ldr	r3, [r3, #8]
 8001164:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001196:	2201      	movs	r2, #1
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	091b      	lsrs	r3, r3, #4
 80011ac:	f003 0201 	and.w	r2, r3, #1
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	2203      	movs	r2, #3
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689a      	ldr	r2, [r3, #8]
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	fa02 f303 	lsl.w	r3, r2, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0xf2>
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	2b12      	cmp	r3, #18
 8001200:	d123      	bne.n	800124a <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	08da      	lsrs	r2, r3, #3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	3208      	adds	r2, #8
 800120a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800120e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	009b      	lsls	r3, r3, #2
 8001218:	220f      	movs	r2, #15
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	691a      	ldr	r2, [r3, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	6939      	ldr	r1, [r7, #16]
 8001246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	2203      	movs	r2, #3
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	4013      	ands	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0203 	and.w	r2, r3, #3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4313      	orrs	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	693a      	ldr	r2, [r7, #16]
 800127c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	f000 80ac 	beq.w	80013e4 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128c:	4b5e      	ldr	r3, [pc, #376]	; (8001408 <HAL_GPIO_Init+0x2f8>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	4a5d      	ldr	r2, [pc, #372]	; (8001408 <HAL_GPIO_Init+0x2f8>)
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	6213      	str	r3, [r2, #32]
 8001298:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <HAL_GPIO_Init+0x2f8>)
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	f003 0301 	and.w	r3, r3, #1
 80012a0:	60bb      	str	r3, [r7, #8]
 80012a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80012a4:	4a59      	ldr	r2, [pc, #356]	; (800140c <HAL_GPIO_Init+0x2fc>)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	009b      	lsls	r3, r3, #2
 80012ba:	220f      	movs	r2, #15
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4a51      	ldr	r2, [pc, #324]	; (8001410 <HAL_GPIO_Init+0x300>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d025      	beq.n	800131c <HAL_GPIO_Init+0x20c>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	4a50      	ldr	r2, [pc, #320]	; (8001414 <HAL_GPIO_Init+0x304>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d01f      	beq.n	8001318 <HAL_GPIO_Init+0x208>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a4f      	ldr	r2, [pc, #316]	; (8001418 <HAL_GPIO_Init+0x308>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d019      	beq.n	8001314 <HAL_GPIO_Init+0x204>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	4a4e      	ldr	r2, [pc, #312]	; (800141c <HAL_GPIO_Init+0x30c>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d013      	beq.n	8001310 <HAL_GPIO_Init+0x200>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a4d      	ldr	r2, [pc, #308]	; (8001420 <HAL_GPIO_Init+0x310>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d00d      	beq.n	800130c <HAL_GPIO_Init+0x1fc>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	4a4c      	ldr	r2, [pc, #304]	; (8001424 <HAL_GPIO_Init+0x314>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d007      	beq.n	8001308 <HAL_GPIO_Init+0x1f8>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a4b      	ldr	r2, [pc, #300]	; (8001428 <HAL_GPIO_Init+0x318>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d101      	bne.n	8001304 <HAL_GPIO_Init+0x1f4>
 8001300:	2306      	movs	r3, #6
 8001302:	e00c      	b.n	800131e <HAL_GPIO_Init+0x20e>
 8001304:	2307      	movs	r3, #7
 8001306:	e00a      	b.n	800131e <HAL_GPIO_Init+0x20e>
 8001308:	2305      	movs	r3, #5
 800130a:	e008      	b.n	800131e <HAL_GPIO_Init+0x20e>
 800130c:	2304      	movs	r3, #4
 800130e:	e006      	b.n	800131e <HAL_GPIO_Init+0x20e>
 8001310:	2303      	movs	r3, #3
 8001312:	e004      	b.n	800131e <HAL_GPIO_Init+0x20e>
 8001314:	2302      	movs	r3, #2
 8001316:	e002      	b.n	800131e <HAL_GPIO_Init+0x20e>
 8001318:	2301      	movs	r3, #1
 800131a:	e000      	b.n	800131e <HAL_GPIO_Init+0x20e>
 800131c:	2300      	movs	r3, #0
 800131e:	697a      	ldr	r2, [r7, #20]
 8001320:	f002 0203 	and.w	r2, r2, #3
 8001324:	0092      	lsls	r2, r2, #2
 8001326:	4093      	lsls	r3, r2
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800132e:	4937      	ldr	r1, [pc, #220]	; (800140c <HAL_GPIO_Init+0x2fc>)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	089b      	lsrs	r3, r3, #2
 8001334:	3302      	adds	r3, #2
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800133c:	4b3b      	ldr	r3, [pc, #236]	; (800142c <HAL_GPIO_Init+0x31c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001360:	4a32      	ldr	r2, [pc, #200]	; (800142c <HAL_GPIO_Init+0x31c>)
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001366:	4b31      	ldr	r3, [pc, #196]	; (800142c <HAL_GPIO_Init+0x31c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	43db      	mvns	r3, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4013      	ands	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4313      	orrs	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800138a:	4a28      	ldr	r2, [pc, #160]	; (800142c <HAL_GPIO_Init+0x31c>)
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001390:	4b26      	ldr	r3, [pc, #152]	; (800142c <HAL_GPIO_Init+0x31c>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80013b4:	4a1d      	ldr	r2, [pc, #116]	; (800142c <HAL_GPIO_Init+0x31c>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013ba:	4b1c      	ldr	r3, [pc, #112]	; (800142c <HAL_GPIO_Init+0x31c>)
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	693a      	ldr	r2, [r7, #16]
 80013c6:	4013      	ands	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	4313      	orrs	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013de:	4a13      	ldr	r2, [pc, #76]	; (800142c <HAL_GPIO_Init+0x31c>)
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	3301      	adds	r3, #1
 80013e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	fa22 f303 	lsr.w	r3, r2, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f47f ae97 	bne.w	8001128 <HAL_GPIO_Init+0x18>
  }
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	371c      	adds	r7, #28
 8001400:	46bd      	mov	sp, r7
 8001402:	bc80      	pop	{r7}
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	40023800 	.word	0x40023800
 800140c:	40010000 	.word	0x40010000
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00
 8001420:	40021000 	.word	0x40021000
 8001424:	40021400 	.word	0x40021400
 8001428:	40021800 	.word	0x40021800
 800142c:	40010400 	.word	0x40010400

08001430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	4013      	ands	r3, r2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d002      	beq.n	800144e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	e001      	b.n	8001452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
}
 8001454:	4618      	mov	r0, r3
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	460b      	mov	r3, r1
 8001468:	807b      	strh	r3, [r7, #2]
 800146a:	4613      	mov	r3, r2
 800146c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800146e:	787b      	ldrb	r3, [r7, #1]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001474:	887a      	ldrh	r2, [r7, #2]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800147a:	e003      	b.n	8001484 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 800147c:	887b      	ldrh	r3, [r7, #2]
 800147e:	041a      	lsls	r2, r3, #16
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	619a      	str	r2, [r3, #24]
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	bc80      	pop	{r7}
 800148c:	4770      	bx	lr

0800148e <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800148e:	b480      	push	{r7}
 8001490:	b085      	sub	sp, #20
 8001492:	af00      	add	r7, sp, #0
 8001494:	6078      	str	r0, [r7, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014a0:	887a      	ldrh	r2, [r7, #2]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	4013      	ands	r3, r2
 80014a6:	041a      	lsls	r2, r3, #16
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	887b      	ldrh	r3, [r7, #2]
 80014ae:	400b      	ands	r3, r1
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014ca:	4b08      	ldr	r3, [pc, #32]	; (80014ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014cc:	695a      	ldr	r2, [r3, #20]
 80014ce:	88fb      	ldrh	r3, [r7, #6]
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d006      	beq.n	80014e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014d6:	4a05      	ldr	r2, [pc, #20]	; (80014ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4618      	mov	r0, r3
 80014e0:	f005 fb92 	bl	8006c08 <HAL_GPIO_EXTI_Callback>
  }
}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40010400 	.word	0x40010400

080014f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e31d      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001502:	4b94      	ldr	r3, [pc, #592]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800150c:	4b91      	ldr	r3, [pc, #580]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001514:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d07b      	beq.n	800161a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b08      	cmp	r3, #8
 8001526:	d006      	beq.n	8001536 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d10f      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001534:	d10b      	bne.n	800154e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001536:	4b87      	ldr	r3, [pc, #540]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d06a      	beq.n	8001618 <HAL_RCC_OscConfig+0x128>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d166      	bne.n	8001618 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e2f7      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d106      	bne.n	8001564 <HAL_RCC_OscConfig+0x74>
 8001556:	4b7f      	ldr	r3, [pc, #508]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a7e      	ldr	r2, [pc, #504]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800155c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001560:	6013      	str	r3, [r2, #0]
 8001562:	e02d      	b.n	80015c0 <HAL_RCC_OscConfig+0xd0>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10c      	bne.n	8001586 <HAL_RCC_OscConfig+0x96>
 800156c:	4b79      	ldr	r3, [pc, #484]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a78      	ldr	r2, [pc, #480]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b76      	ldr	r3, [pc, #472]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a75      	ldr	r2, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]
 8001584:	e01c      	b.n	80015c0 <HAL_RCC_OscConfig+0xd0>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b05      	cmp	r3, #5
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0xb8>
 800158e:	4b71      	ldr	r3, [pc, #452]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a70      	ldr	r2, [pc, #448]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001594:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001598:	6013      	str	r3, [r2, #0]
 800159a:	4b6e      	ldr	r3, [pc, #440]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a6d      	ldr	r2, [pc, #436]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 80015a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	e00b      	b.n	80015c0 <HAL_RCC_OscConfig+0xd0>
 80015a8:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a69      	ldr	r2, [pc, #420]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 80015ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b67      	ldr	r3, [pc, #412]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a66      	ldr	r2, [pc, #408]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 80015ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d013      	beq.n	80015f0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fc2c 	bl	8000e24 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015d0:	f7ff fc28 	bl	8000e24 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b64      	cmp	r3, #100	; 0x64
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e2ad      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015e2:	4b5c      	ldr	r3, [pc, #368]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0xe0>
 80015ee:	e014      	b.n	800161a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc18 	bl	8000e24 <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fc14 	bl	8000e24 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	; 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e299      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800160a:	4b52      	ldr	r3, [pc, #328]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1f0      	bne.n	80015f8 <HAL_RCC_OscConfig+0x108>
 8001616:	e000      	b.n	800161a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001618:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d05a      	beq.n	80016dc <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001626:	69bb      	ldr	r3, [r7, #24]
 8001628:	2b04      	cmp	r3, #4
 800162a:	d005      	beq.n	8001638 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	2b0c      	cmp	r3, #12
 8001630:	d119      	bne.n	8001666 <HAL_RCC_OscConfig+0x176>
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d116      	bne.n	8001666 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001638:	4b46      	ldr	r3, [pc, #280]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d005      	beq.n	8001650 <HAL_RCC_OscConfig+0x160>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d001      	beq.n	8001650 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e276      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001650:	4b40      	ldr	r3, [pc, #256]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	021b      	lsls	r3, r3, #8
 800165e:	493d      	ldr	r1, [pc, #244]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001660:	4313      	orrs	r3, r2
 8001662:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001664:	e03a      	b.n	80016dc <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d020      	beq.n	80016b0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800166e:	4b3a      	ldr	r3, [pc, #232]	; (8001758 <HAL_RCC_OscConfig+0x268>)
 8001670:	2201      	movs	r2, #1
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fbd6 	bl	8000e24 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167c:	f7ff fbd2 	bl	8000e24 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e257      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800168e:	4b31      	ldr	r3, [pc, #196]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d0f0      	beq.n	800167c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169a:	4b2e      	ldr	r3, [pc, #184]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	492a      	ldr	r1, [pc, #168]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 80016aa:	4313      	orrs	r3, r2
 80016ac:	604b      	str	r3, [r1, #4]
 80016ae:	e015      	b.n	80016dc <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b0:	4b29      	ldr	r3, [pc, #164]	; (8001758 <HAL_RCC_OscConfig+0x268>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b6:	f7ff fbb5 	bl	8000e24 <HAL_GetTick>
 80016ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016be:	f7ff fbb1 	bl	8000e24 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e236      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016d0:	4b20      	ldr	r3, [pc, #128]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0310 	and.w	r3, r3, #16
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80b8 	beq.w	800185a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d170      	bne.n	80017d2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f0:	4b18      	ldr	r3, [pc, #96]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_OscConfig+0x218>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e21a      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a1a      	ldr	r2, [r3, #32]
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001714:	429a      	cmp	r2, r3
 8001716:	d921      	bls.n	800175c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fc7b 	bl	8002018 <RCC_SetFlashLatencyFromMSIRange>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e208      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4906      	ldr	r1, [pc, #24]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800173a:	4313      	orrs	r3, r2
 800173c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	69db      	ldr	r3, [r3, #28]
 800174a:	061b      	lsls	r3, r3, #24
 800174c:	4901      	ldr	r1, [pc, #4]	; (8001754 <HAL_RCC_OscConfig+0x264>)
 800174e:	4313      	orrs	r3, r2
 8001750:	604b      	str	r3, [r1, #4]
 8001752:	e020      	b.n	8001796 <HAL_RCC_OscConfig+0x2a6>
 8001754:	40023800 	.word	0x40023800
 8001758:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800175c:	4ba4      	ldr	r3, [pc, #656]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6a1b      	ldr	r3, [r3, #32]
 8001768:	49a1      	ldr	r1, [pc, #644]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800176e:	4ba0      	ldr	r3, [pc, #640]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	061b      	lsls	r3, r3, #24
 800177c:	499c      	ldr	r1, [pc, #624]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 800177e:	4313      	orrs	r3, r2
 8001780:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	4618      	mov	r0, r3
 8001788:	f000 fc46 	bl	8002018 <RCC_SetFlashLatencyFromMSIRange>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e1d3      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	0b5b      	lsrs	r3, r3, #13
 800179c:	3301      	adds	r3, #1
 800179e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80017a6:	4a92      	ldr	r2, [pc, #584]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80017a8:	6892      	ldr	r2, [r2, #8]
 80017aa:	0912      	lsrs	r2, r2, #4
 80017ac:	f002 020f 	and.w	r2, r2, #15
 80017b0:	4990      	ldr	r1, [pc, #576]	; (80019f4 <HAL_RCC_OscConfig+0x504>)
 80017b2:	5c8a      	ldrb	r2, [r1, r2]
 80017b4:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80017b6:	4a90      	ldr	r2, [pc, #576]	; (80019f8 <HAL_RCC_OscConfig+0x508>)
 80017b8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017ba:	4b90      	ldr	r3, [pc, #576]	; (80019fc <HAL_RCC_OscConfig+0x50c>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f96a 	bl	8000a98 <HAL_InitTick>
 80017c4:	4603      	mov	r3, r0
 80017c6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d045      	beq.n	800185a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	e1b5      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d029      	beq.n	800182e <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017da:	4b89      	ldr	r3, [pc, #548]	; (8001a00 <HAL_RCC_OscConfig+0x510>)
 80017dc:	2201      	movs	r2, #1
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb20 	bl	8000e24 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017e8:	f7ff fb1c 	bl	8000e24 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1a1      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017fa:	4b7d      	ldr	r3, [pc, #500]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001806:	4b7a      	ldr	r3, [pc, #488]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	4977      	ldr	r1, [pc, #476]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001818:	4b75      	ldr	r3, [pc, #468]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	4972      	ldr	r1, [pc, #456]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
 800182c:	e015      	b.n	800185a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800182e:	4b74      	ldr	r3, [pc, #464]	; (8001a00 <HAL_RCC_OscConfig+0x510>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001834:	f7ff faf6 	bl	8000e24 <HAL_GetTick>
 8001838:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800183c:	f7ff faf2 	bl	8000e24 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e177      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800184e:	4b68      	ldr	r3, [pc, #416]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f0      	bne.n	800183c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0308 	and.w	r3, r3, #8
 8001862:	2b00      	cmp	r3, #0
 8001864:	d030      	beq.n	80018c8 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d016      	beq.n	800189c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186e:	4b65      	ldr	r3, [pc, #404]	; (8001a04 <HAL_RCC_OscConfig+0x514>)
 8001870:	2201      	movs	r2, #1
 8001872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001874:	f7ff fad6 	bl	8000e24 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187c:	f7ff fad2 	bl	8000e24 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e157      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800188e:	4b58      	ldr	r3, [pc, #352]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x38c>
 800189a:	e015      	b.n	80018c8 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800189c:	4b59      	ldr	r3, [pc, #356]	; (8001a04 <HAL_RCC_OscConfig+0x514>)
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a2:	f7ff fabf 	bl	8000e24 <HAL_GetTick>
 80018a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018a8:	e008      	b.n	80018bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018aa:	f7ff fabb 	bl	8000e24 <HAL_GetTick>
 80018ae:	4602      	mov	r2, r0
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	2b02      	cmp	r3, #2
 80018b6:	d901      	bls.n	80018bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80018b8:	2303      	movs	r3, #3
 80018ba:	e140      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018bc:	4b4c      	ldr	r3, [pc, #304]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80018be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1f0      	bne.n	80018aa <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80b5 	beq.w	8001a40 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018d6:	2300      	movs	r3, #0
 80018d8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018da:	4b45      	ldr	r3, [pc, #276]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80018dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10d      	bne.n	8001902 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80018e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ea:	4a41      	ldr	r2, [pc, #260]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6253      	str	r3, [r2, #36]	; 0x24
 80018f2:	4b3f      	ldr	r3, [pc, #252]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80018f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	60bb      	str	r3, [r7, #8]
 80018fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018fe:	2301      	movs	r3, #1
 8001900:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001902:	4b41      	ldr	r3, [pc, #260]	; (8001a08 <HAL_RCC_OscConfig+0x518>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190a:	2b00      	cmp	r3, #0
 800190c:	d118      	bne.n	8001940 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800190e:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <HAL_RCC_OscConfig+0x518>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a3d      	ldr	r2, [pc, #244]	; (8001a08 <HAL_RCC_OscConfig+0x518>)
 8001914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800191a:	f7ff fa83 	bl	8000e24 <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001920:	e008      	b.n	8001934 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001922:	f7ff fa7f 	bl	8000e24 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b64      	cmp	r3, #100	; 0x64
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e104      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <HAL_RCC_OscConfig+0x518>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d0f0      	beq.n	8001922 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x466>
 8001948:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 800194a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194c:	4a28      	ldr	r2, [pc, #160]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6353      	str	r3, [r2, #52]	; 0x34
 8001954:	e02d      	b.n	80019b2 <HAL_RCC_OscConfig+0x4c2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d10c      	bne.n	8001978 <HAL_RCC_OscConfig+0x488>
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	4a23      	ldr	r2, [pc, #140]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001968:	6353      	str	r3, [r2, #52]	; 0x34
 800196a:	4b21      	ldr	r3, [pc, #132]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 800196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196e:	4a20      	ldr	r2, [pc, #128]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001974:	6353      	str	r3, [r2, #52]	; 0x34
 8001976:	e01c      	b.n	80019b2 <HAL_RCC_OscConfig+0x4c2>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2b05      	cmp	r3, #5
 800197e:	d10c      	bne.n	800199a <HAL_RCC_OscConfig+0x4aa>
 8001980:	4b1b      	ldr	r3, [pc, #108]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001984:	4a1a      	ldr	r2, [pc, #104]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001986:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198a:	6353      	str	r3, [r2, #52]	; 0x34
 800198c:	4b18      	ldr	r3, [pc, #96]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 800198e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 8001992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001996:	6353      	str	r3, [r2, #52]	; 0x34
 8001998:	e00b      	b.n	80019b2 <HAL_RCC_OscConfig+0x4c2>
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 800199c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199e:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80019a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a4:	6353      	str	r3, [r2, #52]	; 0x34
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80019a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019aa:	4a11      	ldr	r2, [pc, #68]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80019ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80019b0:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d015      	beq.n	80019e6 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fa33 	bl	8000e24 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019c0:	e00a      	b.n	80019d8 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c2:	f7ff fa2f 	bl	8000e24 <HAL_GetTick>
 80019c6:	4602      	mov	r2, r0
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	1ad3      	subs	r3, r2, r3
 80019cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e0b2      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_OscConfig+0x500>)
 80019da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0ee      	beq.n	80019c2 <HAL_RCC_OscConfig+0x4d2>
 80019e4:	e023      	b.n	8001a2e <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e6:	f7ff fa1d 	bl	8000e24 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ec:	e019      	b.n	8001a22 <HAL_RCC_OscConfig+0x532>
 80019ee:	bf00      	nop
 80019f0:	40023800 	.word	0x40023800
 80019f4:	08007ac4 	.word	0x08007ac4
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000004 	.word	0x20000004
 8001a00:	42470020 	.word	0x42470020
 8001a04:	42470680 	.word	0x42470680
 8001a08:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fa0a 	bl	8000e24 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e08d      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x658>)
 8001a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1ee      	bne.n	8001a0c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a2e:	7ffb      	ldrb	r3, [r7, #31]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d105      	bne.n	8001a40 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a34:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <HAL_RCC_OscConfig+0x658>)
 8001a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a38:	4a43      	ldr	r2, [pc, #268]	; (8001b48 <HAL_RCC_OscConfig+0x658>)
 8001a3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a3e:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d079      	beq.n	8001b3c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d056      	beq.n	8001afc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d13b      	bne.n	8001ace <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a56:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <HAL_RCC_OscConfig+0x65c>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f9e2 	bl	8000e24 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f9de 	bl	8000e24 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e063      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a76:	4b34      	ldr	r3, [pc, #208]	; (8001b48 <HAL_RCC_OscConfig+0x658>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a82:	4b31      	ldr	r3, [pc, #196]	; (8001b48 <HAL_RCC_OscConfig+0x658>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a92:	4319      	orrs	r1, r3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	430b      	orrs	r3, r1
 8001a9a:	492b      	ldr	r1, [pc, #172]	; (8001b48 <HAL_RCC_OscConfig+0x658>)
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001aa0:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <HAL_RCC_OscConfig+0x65c>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa6:	f7ff f9bd 	bl	8000e24 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aae:	f7ff f9b9 	bl	8000e24 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e03e      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x658>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x5be>
 8001acc:	e036      	b.n	8001b3c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <HAL_RCC_OscConfig+0x65c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad4:	f7ff f9a6 	bl	8000e24 <HAL_GetTick>
 8001ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ada:	e008      	b.n	8001aee <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001adc:	f7ff f9a2 	bl	8000e24 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e027      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_RCC_OscConfig+0x658>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d1f0      	bne.n	8001adc <HAL_RCC_OscConfig+0x5ec>
 8001afa:	e01f      	b.n	8001b3c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d101      	bne.n	8001b08 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e01a      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_RCC_OscConfig+0x658>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10d      	bne.n	8001b38 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d106      	bne.n	8001b38 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3720      	adds	r7, #32
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	42470060 	.word	0x42470060

08001b50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d101      	bne.n	8001b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e11a      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b64:	4b8f      	ldr	r3, [pc, #572]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	683a      	ldr	r2, [r7, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d919      	bls.n	8001ba6 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d105      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x34>
 8001b78:	4b8a      	ldr	r3, [pc, #552]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a89      	ldr	r2, [pc, #548]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001b7e:	f043 0304 	orr.w	r3, r3, #4
 8001b82:	6013      	str	r3, [r2, #0]
 8001b84:	4b87      	ldr	r3, [pc, #540]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f023 0201 	bic.w	r2, r3, #1
 8001b8c:	4985      	ldr	r1, [pc, #532]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b94:	4b83      	ldr	r3, [pc, #524]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d001      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e0f9      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d008      	beq.n	8001bc4 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb2:	4b7d      	ldr	r3, [pc, #500]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	497a      	ldr	r1, [pc, #488]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 808e 	beq.w	8001cee <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d107      	bne.n	8001bea <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bda:	4b73      	ldr	r3, [pc, #460]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d121      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e0d7      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b03      	cmp	r3, #3
 8001bf0:	d107      	bne.n	8001c02 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bf2:	4b6d      	ldr	r3, [pc, #436]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d115      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e0cb      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d107      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c0a:	4b67      	ldr	r3, [pc, #412]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0bf      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c1a:	4b63      	ldr	r3, [pc, #396]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0b7      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c2a:	4b5f      	ldr	r3, [pc, #380]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f023 0203 	bic.w	r2, r3, #3
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	495c      	ldr	r1, [pc, #368]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c3c:	f7ff f8f2 	bl	8000e24 <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d112      	bne.n	8001c70 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c4a:	e00a      	b.n	8001c62 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c4c:	f7ff f8ea 	bl	8000e24 <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e09b      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c62:	4b51      	ldr	r3, [pc, #324]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d1ee      	bne.n	8001c4c <HAL_RCC_ClockConfig+0xfc>
 8001c6e:	e03e      	b.n	8001cee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d112      	bne.n	8001c9e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c78:	e00a      	b.n	8001c90 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c7a:	f7ff f8d3 	bl	8000e24 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e084      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c90:	4b45      	ldr	r3, [pc, #276]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 030c 	and.w	r3, r3, #12
 8001c98:	2b0c      	cmp	r3, #12
 8001c9a:	d1ee      	bne.n	8001c7a <HAL_RCC_ClockConfig+0x12a>
 8001c9c:	e027      	b.n	8001cee <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d11d      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ca6:	e00a      	b.n	8001cbe <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ca8:	f7ff f8bc 	bl	8000e24 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e06d      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cbe:	4b3a      	ldr	r3, [pc, #232]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 030c 	and.w	r3, r3, #12
 8001cc6:	2b04      	cmp	r3, #4
 8001cc8:	d1ee      	bne.n	8001ca8 <HAL_RCC_ClockConfig+0x158>
 8001cca:	e010      	b.n	8001cee <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ccc:	f7ff f8aa 	bl	8000e24 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e05b      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ce2:	4b31      	ldr	r3, [pc, #196]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1ee      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cee:	4b2d      	ldr	r3, [pc, #180]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d219      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x1be>
 8001d02:	4b28      	ldr	r3, [pc, #160]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a27      	ldr	r2, [pc, #156]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001d08:	f043 0304 	orr.w	r3, r3, #4
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b25      	ldr	r3, [pc, #148]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f023 0201 	bic.w	r2, r3, #1
 8001d16:	4923      	ldr	r1, [pc, #140]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <HAL_RCC_ClockConfig+0x254>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e034      	b.n	8001d9a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4917      	ldr	r1, [pc, #92]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5a:	4b13      	ldr	r3, [pc, #76]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	490f      	ldr	r1, [pc, #60]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d6e:	f000 f823 	bl	8001db8 <HAL_RCC_GetSysClockFreq>
 8001d72:	4602      	mov	r2, r0
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <HAL_RCC_ClockConfig+0x258>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	490b      	ldr	r1, [pc, #44]	; (8001dac <HAL_RCC_ClockConfig+0x25c>)
 8001d80:	5ccb      	ldrb	r3, [r1, r3]
 8001d82:	fa22 f303 	lsr.w	r3, r2, r3
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <HAL_RCC_ClockConfig+0x260>)
 8001d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d8a:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <HAL_RCC_ClockConfig+0x264>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fe82 	bl	8000a98 <HAL_InitTick>
 8001d94:	4603      	mov	r3, r0
 8001d96:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d98:	7afb      	ldrb	r3, [r7, #11]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40023c00 	.word	0x40023c00
 8001da8:	40023800 	.word	0x40023800
 8001dac:	08007ac4 	.word	0x08007ac4
 8001db0:	20000000 	.word	0x20000000
 8001db4:	20000004 	.word	0x20000004

08001db8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001db8:	b5b0      	push	{r4, r5, r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001dbe:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 030c 	and.w	r3, r3, #12
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d00d      	beq.n	8001dea <HAL_RCC_GetSysClockFreq+0x32>
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	f200 80a4 	bhi.w	8001f1c <HAL_RCC_GetSysClockFreq+0x164>
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d002      	beq.n	8001dde <HAL_RCC_GetSysClockFreq+0x26>
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d003      	beq.n	8001de4 <HAL_RCC_GetSysClockFreq+0x2c>
 8001ddc:	e09e      	b.n	8001f1c <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dde:	4b5a      	ldr	r3, [pc, #360]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x190>)
 8001de0:	613b      	str	r3, [r7, #16]
      break;
 8001de2:	e0a9      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de4:	4b59      	ldr	r3, [pc, #356]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x194>)
 8001de6:	613b      	str	r3, [r7, #16]
      break;
 8001de8:	e0a6      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	0c9b      	lsrs	r3, r3, #18
 8001dee:	f003 030f 	and.w	r3, r3, #15
 8001df2:	4a57      	ldr	r2, [pc, #348]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x198>)
 8001df4:	5cd3      	ldrb	r3, [r2, r3]
 8001df6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	0d9b      	lsrs	r3, r3, #22
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	3301      	adds	r3, #1
 8001e02:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e04:	4b4f      	ldr	r3, [pc, #316]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d041      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	461c      	mov	r4, r3
 8001e14:	f04f 0500 	mov.w	r5, #0
 8001e18:	4620      	mov	r0, r4
 8001e1a:	4629      	mov	r1, r5
 8001e1c:	f04f 0200 	mov.w	r2, #0
 8001e20:	f04f 0300 	mov.w	r3, #0
 8001e24:	014b      	lsls	r3, r1, #5
 8001e26:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e2a:	0142      	lsls	r2, r0, #5
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	1b00      	subs	r0, r0, r4
 8001e32:	eb61 0105 	sbc.w	r1, r1, r5
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	018b      	lsls	r3, r1, #6
 8001e40:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e44:	0182      	lsls	r2, r0, #6
 8001e46:	1a12      	subs	r2, r2, r0
 8001e48:	eb63 0301 	sbc.w	r3, r3, r1
 8001e4c:	f04f 0000 	mov.w	r0, #0
 8001e50:	f04f 0100 	mov.w	r1, #0
 8001e54:	00d9      	lsls	r1, r3, #3
 8001e56:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e5a:	00d0      	lsls	r0, r2, #3
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	1912      	adds	r2, r2, r4
 8001e62:	eb45 0303 	adc.w	r3, r5, r3
 8001e66:	f04f 0000 	mov.w	r0, #0
 8001e6a:	f04f 0100 	mov.w	r1, #0
 8001e6e:	0259      	lsls	r1, r3, #9
 8001e70:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e74:	0250      	lsls	r0, r2, #9
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	461a      	mov	r2, r3
 8001e82:	f04f 0300 	mov.w	r3, #0
 8001e86:	f7fe f979 	bl	800017c <__aeabi_uldivmod>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4613      	mov	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e040      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	461c      	mov	r4, r3
 8001e98:	f04f 0500 	mov.w	r5, #0
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	4629      	mov	r1, r5
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	014b      	lsls	r3, r1, #5
 8001eaa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eae:	0142      	lsls	r2, r0, #5
 8001eb0:	4610      	mov	r0, r2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	1b00      	subs	r0, r0, r4
 8001eb6:	eb61 0105 	sbc.w	r1, r1, r5
 8001eba:	f04f 0200 	mov.w	r2, #0
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	018b      	lsls	r3, r1, #6
 8001ec4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ec8:	0182      	lsls	r2, r0, #6
 8001eca:	1a12      	subs	r2, r2, r0
 8001ecc:	eb63 0301 	sbc.w	r3, r3, r1
 8001ed0:	f04f 0000 	mov.w	r0, #0
 8001ed4:	f04f 0100 	mov.w	r1, #0
 8001ed8:	00d9      	lsls	r1, r3, #3
 8001eda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ede:	00d0      	lsls	r0, r2, #3
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	1912      	adds	r2, r2, r4
 8001ee6:	eb45 0303 	adc.w	r3, r5, r3
 8001eea:	f04f 0000 	mov.w	r0, #0
 8001eee:	f04f 0100 	mov.w	r1, #0
 8001ef2:	0299      	lsls	r1, r3, #10
 8001ef4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ef8:	0290      	lsls	r0, r2, #10
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	461a      	mov	r2, r3
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	f7fe f937 	bl	800017c <__aeabi_uldivmod>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4613      	mov	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	613b      	str	r3, [r7, #16]
      break;
 8001f1a:	e00d      	b.n	8001f38 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x18c>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	0b5b      	lsrs	r3, r3, #13
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	613b      	str	r3, [r7, #16]
      break;
 8001f36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f38:	693b      	ldr	r3, [r7, #16]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bdb0      	pop	{r4, r5, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200
 8001f50:	08007ab8 	.word	0x08007ab8

08001f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f58:	4b02      	ldr	r3, [pc, #8]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bc80      	pop	{r7}
 8001f62:	4770      	bx	lr
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff2 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0a1b      	lsrs	r3, r3, #8
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08007ad4 	.word	0x08007ad4

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f94:	f7ff ffde 	bl	8001f54 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0adb      	lsrs	r3, r3, #11
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	08007ad4 	.word	0x08007ad4

08001fb8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	220f      	movs	r2, #15
 8001fc6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fc8:	4b11      	ldr	r3, [pc, #68]	; (8002010 <HAL_RCC_GetClockConfig+0x58>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f003 0203 	and.w	r2, r3, #3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fd4:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <HAL_RCC_GetClockConfig+0x58>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_GetClockConfig+0x58>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fec:	4b08      	ldr	r3, [pc, #32]	; (8002010 <HAL_RCC_GetClockConfig+0x58>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_GetClockConfig+0x5c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0201 	and.w	r2, r3, #1
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	601a      	str	r2, [r3, #0]
}
 8002006:	bf00      	nop
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr
 8002010:	40023800 	.word	0x40023800
 8002014:	40023c00 	.word	0x40023c00

08002018 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8002018:	b480      	push	{r7}
 800201a:	b087      	sub	sp, #28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002020:	2300      	movs	r3, #0
 8002022:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d12c      	bne.n	800208a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002030:	4b26      	ldr	r3, [pc, #152]	; (80020cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800203c:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002044:	617b      	str	r3, [r7, #20]
 8002046:	e016      	b.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002048:	4b20      	ldr	r3, [pc, #128]	; (80020cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800204e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002052:	6253      	str	r3, [r2, #36]	; 0x24
 8002054:	4b1d      	ldr	r3, [pc, #116]	; (80020cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	60fb      	str	r3, [r7, #12]
 800205e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002060:	4b1b      	ldr	r3, [pc, #108]	; (80020d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002068:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800206c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206e:	4a17      	ldr	r2, [pc, #92]	; (80020cc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002074:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 800207c:	d105      	bne.n	800208a <RCC_SetFlashLatencyFromMSIRange+0x72>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002084:	d101      	bne.n	800208a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8002086:	2301      	movs	r3, #1
 8002088:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d105      	bne.n	800209c <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	f043 0304 	orr.w	r3, r3, #4
 800209a:	6013      	str	r3, [r2, #0]
 800209c:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 0201 	bic.w	r2, r3, #1
 80020a4:	490b      	ldr	r1, [pc, #44]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d001      	beq.n	80020be <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	371c      	adds	r7, #28
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	40007000 	.word	0x40007000
 80020d4:	40023c00 	.word	0x40023c00

080020d8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f003 0301 	and.w	r3, r3, #1
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d106      	bne.n	80020fa <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80c6 	beq.w	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80020fa:	2300      	movs	r3, #0
 80020fc:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020fe:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10d      	bne.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800210a:	4b61      	ldr	r3, [pc, #388]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800210c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210e:	4a60      	ldr	r2, [pc, #384]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002110:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002114:	6253      	str	r3, [r2, #36]	; 0x24
 8002116:	4b5e      	ldr	r3, [pc, #376]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002122:	2301      	movs	r3, #1
 8002124:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002126:	4b5b      	ldr	r3, [pc, #364]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800212e:	2b00      	cmp	r3, #0
 8002130:	d118      	bne.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002132:	4b58      	ldr	r3, [pc, #352]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a57      	ldr	r2, [pc, #348]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800213c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800213e:	f7fe fe71 	bl	8000e24 <HAL_GetTick>
 8002142:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002144:	e008      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002146:	f7fe fe6d 	bl	8000e24 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	2b64      	cmp	r3, #100	; 0x64
 8002152:	d901      	bls.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002154:	2303      	movs	r3, #3
 8002156:	e097      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002158:	4b4e      	ldr	r3, [pc, #312]	; (8002294 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002160:	2b00      	cmp	r3, #0
 8002162:	d0f0      	beq.n	8002146 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002164:	4b4a      	ldr	r3, [pc, #296]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800216c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002176:	68fa      	ldr	r2, [r7, #12]
 8002178:	429a      	cmp	r2, r3
 800217a:	d106      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	429a      	cmp	r2, r3
 8002188:	d00f      	beq.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002192:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002196:	d108      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002198:	4b3d      	ldr	r3, [pc, #244]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021a4:	d101      	bne.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e06e      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80021aa:	4b39      	ldr	r3, [pc, #228]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021b2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d041      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d005      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10c      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d02d      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d027      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80021ee:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80021f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80021f6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021f8:	4b27      	ldr	r3, [pc, #156]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021fa:	2201      	movs	r2, #1
 80021fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021fe:	4b26      	ldr	r3, [pc, #152]	; (8002298 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002210:	2b00      	cmp	r3, #0
 8002212:	d014      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002214:	f7fe fe06 	bl	8000e24 <HAL_GetTick>
 8002218:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800221a:	e00a      	b.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800221c:	f7fe fe02 	bl	8000e24 <HAL_GetTick>
 8002220:	4602      	mov	r2, r0
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	f241 3288 	movw	r2, #5000	; 0x1388
 800222a:	4293      	cmp	r3, r2
 800222c:	d901      	bls.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e02a      	b.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002232:	4b17      	ldr	r3, [pc, #92]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002236:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800223a:	2b00      	cmp	r3, #0
 800223c:	d0ee      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002246:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800224a:	d10a      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800224c:	4b10      	ldr	r3, [pc, #64]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 800225c:	490c      	ldr	r1, [pc, #48]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]
 8002262:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002270:	4313      	orrs	r3, r2
 8002272:	634b      	str	r3, [r1, #52]	; 0x34

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002274:	7dfb      	ldrb	r3, [r7, #23]
 8002276:	2b01      	cmp	r3, #1
 8002278:	d105      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002284:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3718      	adds	r7, #24
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	40007000 	.word	0x40007000
 8002298:	424706dc 	.word	0x424706dc

0800229c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e06d      	b.n	800238a <HAL_RTC_Init+0xee>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	7f5b      	ldrb	r3, [r3, #29]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d105      	bne.n	80022c4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2200      	movs	r2, #0
 80022bc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fae8 	bl	8000894 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	22ca      	movs	r2, #202	; 0xca
 80022d0:	625a      	str	r2, [r3, #36]	; 0x24
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2253      	movs	r2, #83	; 0x53
 80022d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 fc8d 	bl	8002bfa <RTC_EnterInitMode>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	22ff      	movs	r2, #255	; 0xff
 80022ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2204      	movs	r2, #4
 80022f2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e048      	b.n	800238a <HAL_RTC_Init+0xee>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002306:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800230a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	6899      	ldr	r1, [r3, #8]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	430a      	orrs	r2, r1
 8002328:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68d2      	ldr	r2, [r2, #12]
 8002332:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6919      	ldr	r1, [r3, #16]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	041a      	lsls	r2, r3, #16
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	430a      	orrs	r2, r1
 8002346:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002356:	60da      	str	r2, [r3, #12]

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699a      	ldr	r2, [r3, #24]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	22ff      	movs	r2, #255	; 0xff
 8002380:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002388:	2300      	movs	r3, #0
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}

08002392 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002392:	b590      	push	{r4, r7, lr}
 8002394:	b087      	sub	sp, #28
 8002396:	af00      	add	r7, sp, #0
 8002398:	60f8      	str	r0, [r7, #12]
 800239a:	60b9      	str	r1, [r7, #8]
 800239c:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	7f1b      	ldrb	r3, [r3, #28]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_RTC_SetTime+0x18>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e0a3      	b.n	80024f2 <HAL_RTC_SetTime+0x160>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2202      	movs	r2, #2
 80023b4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d126      	bne.n	800240a <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d102      	bne.n	80023d0 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2200      	movs	r2, #0
 80023ce:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fc3a 	bl	8002c4e <RTC_ByteToBcd2>
 80023da:	4603      	mov	r3, r0
 80023dc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	785b      	ldrb	r3, [r3, #1]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f000 fc33 	bl	8002c4e <RTC_ByteToBcd2>
 80023e8:	4603      	mov	r3, r0
 80023ea:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80023ec:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	789b      	ldrb	r3, [r3, #2]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f000 fc2b 	bl	8002c4e <RTC_ByteToBcd2>
 80023f8:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80023fa:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	78db      	ldrb	r3, [r3, #3]
 8002402:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002404:	4313      	orrs	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
 8002408:	e018      	b.n	800243c <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2200      	movs	r2, #0
 800241c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800242a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8002430:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	78db      	ldrb	r3, [r3, #3]
 8002436:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	22ca      	movs	r2, #202	; 0xca
 8002442:	625a      	str	r2, [r3, #36]	; 0x24
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2253      	movs	r2, #83	; 0x53
 800244a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fbd4 	bl	8002bfa <RTC_EnterInitMode>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00b      	beq.n	8002470 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	22ff      	movs	r2, #255	; 0xff
 800245e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2204      	movs	r2, #4
 8002464:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2200      	movs	r2, #0
 800246a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e040      	b.n	80024f2 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800247a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800247e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	689a      	ldr	r2, [r3, #8]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800248e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6899      	ldr	r1, [r3, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	68da      	ldr	r2, [r3, #12]
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	431a      	orrs	r2, r3
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68da      	ldr	r2, [r3, #12]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80024b8:	68f8      	ldr	r0, [r7, #12]
 80024ba:	f000 fb71 	bl	8002ba0 <HAL_RTC_WaitForSynchro>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00b      	beq.n	80024dc <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	22ff      	movs	r2, #255	; 0xff
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2204      	movs	r2, #4
 80024d0:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e00a      	b.n	80024f2 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2201      	movs	r2, #1
 80024e8:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2200      	movs	r2, #0
 80024ee:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	371c      	adds	r7, #28
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd90      	pop	{r4, r7, pc}

080024fa <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b086      	sub	sp, #24
 80024fe:	af00      	add	r7, sp, #0
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)((hrtc->Instance->SSR) & RTC_SSR_SS);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	b29a      	uxth	r2, r3
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	609a      	str	r2, [r3, #8]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800252a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800252e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	0c1b      	lsrs	r3, r3, #16
 8002534:	b2db      	uxtb	r3, r3
 8002536:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800253a:	b2da      	uxtb	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	0a1b      	lsrs	r3, r3, #8
 8002544:	b2db      	uxtb	r3, r3
 8002546:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800254a:	b2da      	uxtb	r2, r3
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	b2db      	uxtb	r3, r3
 8002554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002558:	b2da      	uxtb	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	0c1b      	lsrs	r3, r3, #16
 8002562:	b2db      	uxtb	r3, r3
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	b2da      	uxtb	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d11a      	bne.n	80025aa <HAL_RTC_GetTime+0xb0>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f000 fb87 	bl	8002c8c <RTC_Bcd2ToByte>
 800257e:	4603      	mov	r3, r0
 8002580:	461a      	mov	r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	785b      	ldrb	r3, [r3, #1]
 800258a:	4618      	mov	r0, r3
 800258c:	f000 fb7e 	bl	8002c8c <RTC_Bcd2ToByte>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	789b      	ldrb	r3, [r3, #2]
 800259c:	4618      	mov	r0, r3
 800259e:	f000 fb75 	bl	8002c8c <RTC_Bcd2ToByte>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80025b4:	b590      	push	{r4, r7, lr}
 80025b6:	b087      	sub	sp, #28
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	7f1b      	ldrb	r3, [r3, #28]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_RTC_SetDate+0x18>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e08d      	b.n	80026e8 <HAL_RTC_SetDate+0x134>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2201      	movs	r2, #1
 80025d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2202      	movs	r2, #2
 80025d6:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10e      	bne.n	80025fc <HAL_RTC_SetDate+0x48>
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	785b      	ldrb	r3, [r3, #1]
 80025e2:	f003 0310 	and.w	r3, r3, #16
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d008      	beq.n	80025fc <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	785b      	ldrb	r3, [r3, #1]
 80025ee:	f023 0310 	bic.w	r3, r3, #16
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	330a      	adds	r3, #10
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d11c      	bne.n	800263c <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	78db      	ldrb	r3, [r3, #3]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fb21 	bl	8002c4e <RTC_ByteToBcd2>
 800260c:	4603      	mov	r3, r0
 800260e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	4618      	mov	r0, r3
 8002616:	f000 fb1a 	bl	8002c4e <RTC_ByteToBcd2>
 800261a:	4603      	mov	r3, r0
 800261c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800261e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	789b      	ldrb	r3, [r3, #2]
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fb12 	bl	8002c4e <RTC_ByteToBcd2>
 800262a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800262c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8002636:	4313      	orrs	r3, r2
 8002638:	617b      	str	r3, [r7, #20]
 800263a:	e00e      	b.n	800265a <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	78db      	ldrb	r3, [r3, #3]
 8002640:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	785b      	ldrb	r3, [r3, #1]
 8002646:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002648:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800264e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8002656:	4313      	orrs	r3, r2
 8002658:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	22ca      	movs	r2, #202	; 0xca
 8002660:	625a      	str	r2, [r3, #36]	; 0x24
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2253      	movs	r2, #83	; 0x53
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fac5 	bl	8002bfa <RTC_EnterInitMode>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	22ff      	movs	r2, #255	; 0xff
 800267c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2204      	movs	r2, #4
 8002682:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2200      	movs	r2, #0
 8002688:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e02c      	b.n	80026e8 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002698:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800269c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ac:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fa76 	bl	8002ba0 <HAL_RTC_WaitForSynchro>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	22ff      	movs	r2, #255	; 0xff
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2204      	movs	r2, #4
 80026c6:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00a      	b.n	80026e8 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	22ff      	movs	r2, #255	; 0xff
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80026e6:	2300      	movs	r3, #0
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd90      	pop	{r4, r7, pc}

080026f0 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	60b9      	str	r1, [r7, #8]
 80026fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002706:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800270a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	0c1b      	lsrs	r3, r3, #16
 8002710:	b2da      	uxtb	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	0a1b      	lsrs	r3, r3, #8
 800271a:	b2db      	uxtb	r3, r3
 800271c:	f003 031f 	and.w	r3, r3, #31
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800272e:	b2da      	uxtb	r2, r3
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	0b5b      	lsrs	r3, r3, #13
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	b2da      	uxtb	r2, r3
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d11a      	bne.n	8002780 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	78db      	ldrb	r3, [r3, #3]
 800274e:	4618      	mov	r0, r3
 8002750:	f000 fa9c 	bl	8002c8c <RTC_Bcd2ToByte>
 8002754:	4603      	mov	r3, r0
 8002756:	461a      	mov	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	4618      	mov	r0, r3
 8002762:	f000 fa93 	bl	8002c8c <RTC_Bcd2ToByte>
 8002766:	4603      	mov	r3, r0
 8002768:	461a      	mov	r2, r3
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	789b      	ldrb	r3, [r3, #2]
 8002772:	4618      	mov	r0, r3
 8002774:	f000 fa8a 	bl	8002c8c <RTC_Bcd2ToByte>
 8002778:	4603      	mov	r3, r0
 800277a:	461a      	mov	r2, r3
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3718      	adds	r7, #24
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
	...

0800278c <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800278c:	b590      	push	{r4, r7, lr}
 800278e:	b089      	sub	sp, #36	; 0x24
 8002790:	af00      	add	r7, sp, #0
 8002792:	60f8      	str	r0, [r7, #12]
 8002794:	60b9      	str	r1, [r7, #8]
 8002796:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8002798:	2300      	movs	r3, #0
 800279a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	61fb      	str	r3, [r7, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  uint32_t subsecondtmpreg = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	7f1b      	ldrb	r3, [r3, #28]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_RTC_SetAlarm_IT+0x24>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e11f      	b.n	80029f0 <HAL_RTC_SetAlarm_IT+0x264>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2202      	movs	r2, #2
 80027ba:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d137      	bne.n	8002832 <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d102      	bne.n	80027d6 <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	2200      	movs	r2, #0
 80027d4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 fa37 	bl	8002c4e <RTC_ByteToBcd2>
 80027e0:	4603      	mov	r3, r0
 80027e2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	785b      	ldrb	r3, [r3, #1]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fa30 	bl	8002c4e <RTC_ByteToBcd2>
 80027ee:	4603      	mov	r3, r0
 80027f0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80027f2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	789b      	ldrb	r3, [r3, #2]
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fa28 	bl	8002c4e <RTC_ByteToBcd2>
 80027fe:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002800:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	78db      	ldrb	r3, [r3, #3]
 8002808:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800280a:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002814:	4618      	mov	r0, r3
 8002816:	f000 fa1a 	bl	8002c4e <RTC_ByteToBcd2>
 800281a:	4603      	mov	r3, r0
 800281c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800281e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002826:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800282c:	4313      	orrs	r3, r2
 800282e:	61fb      	str	r3, [r7, #28]
 8002830:	e023      	b.n	800287a <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d102      	bne.n	8002846 <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2200      	movs	r2, #0
 8002844:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	785b      	ldrb	r3, [r3, #1]
 8002850:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002852:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8002858:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	78db      	ldrb	r3, [r3, #3]
 800285e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8002860:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002868:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800286a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8002870:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8002876:	4313      	orrs	r3, r2
 8002878:	61fb      	str	r3, [r7, #28]
  }
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4313      	orrs	r3, r2
 8002884:	617b      	str	r3, [r7, #20]
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	22ca      	movs	r2, #202	; 0xca
 800288c:	625a      	str	r2, [r3, #36]	; 0x24
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2253      	movs	r2, #83	; 0x53
 8002894:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800289e:	d148      	bne.n	8002932 <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028ae:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80028c0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80028c2:	f7fe faaf 	bl	8000e24 <HAL_GetTick>
 80028c6:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80028c8:	e013      	b.n	80028f2 <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80028ca:	f7fe faab 	bl	8000e24 <HAL_GetTick>
 80028ce:	4602      	mov	r2, r0
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028d8:	d90b      	bls.n	80028f2 <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	22ff      	movs	r2, #255	; 0xff
 80028e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2203      	movs	r2, #3
 80028e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e07e      	b.n	80029f0 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d0e4      	beq.n	80028ca <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	69fa      	ldr	r2, [r7, #28]
 8002906:	61da      	str	r2, [r3, #28]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	697a      	ldr	r2, [r7, #20]
 800290e:	645a      	str	r2, [r3, #68]	; 0x44
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	689a      	ldr	r2, [r3, #8]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689a      	ldr	r2, [r3, #8]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800292e:	609a      	str	r2, [r3, #8]
 8002930:	e047      	b.n	80029c2 <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002940:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	b2da      	uxtb	r2, r3
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002952:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002954:	f7fe fa66 	bl	8000e24 <HAL_GetTick>
 8002958:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800295a:	e013      	b.n	8002984 <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800295c:	f7fe fa62 	bl	8000e24 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800296a:	d90b      	bls.n	8002984 <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	22ff      	movs	r2, #255	; 0xff
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2203      	movs	r2, #3
 8002978:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e035      	b.n	80029f0 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0e4      	beq.n	800295c <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69fa      	ldr	r2, [r7, #28]
 8002998:	621a      	str	r2, [r3, #32]
#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	649a      	str	r2, [r3, #72]	; 0x48
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b0:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80029c0:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_RTC_SetAlarm_IT+0x26c>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <HAL_RTC_SetAlarm_IT+0x26c>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029cc:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RTC_SetAlarm_IT+0x26c>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_RTC_SetAlarm_IT+0x26c>)
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029d8:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	22ff      	movs	r2, #255	; 0xff
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2201      	movs	r2, #1
 80029e6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3724      	adds	r7, #36	; 0x24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}
 80029f8:	40010400 	.word	0x40010400

080029fc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	7f1b      	ldrb	r3, [r3, #28]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_RTC_DeactivateAlarm+0x16>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e07b      	b.n	8002b0a <HAL_RTC_DeactivateAlarm+0x10e>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	22ca      	movs	r2, #202	; 0xca
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2253      	movs	r2, #83	; 0x53
 8002a2c:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a34:	d12f      	bne.n	8002a96 <HAL_RTC_DeactivateAlarm+0x9a>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a44:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002a54:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002a56:	f7fe f9e5 	bl	8000e24 <HAL_GetTick>
 8002a5a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a5c:	e013      	b.n	8002a86 <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002a5e:	f7fe f9e1 	bl	8000e24 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a6c:	d90b      	bls.n	8002a86 <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	22ff      	movs	r2, #255	; 0xff
 8002a74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e041      	b.n	8002b0a <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d0e4      	beq.n	8002a5e <HAL_RTC_DeactivateAlarm+0x62>
 8002a94:	e02e      	b.n	8002af4 <HAL_RTC_DeactivateAlarm+0xf8>
    }
  }
  else
  {
    /* AlarmB */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002aa4:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	689a      	ldr	r2, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab4:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();
 8002ab6:	f7fe f9b5 	bl	8000e24 <HAL_GetTick>
 8002aba:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002abc:	e013      	b.n	8002ae6 <HAL_RTC_DeactivateAlarm+0xea>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002abe:	f7fe f9b1 	bl	8000e24 <HAL_GetTick>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002acc:	d90b      	bls.n	8002ae6 <HAL_RTC_DeactivateAlarm+0xea>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	22ff      	movs	r2, #255	; 0xff
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2203      	movs	r2, #3
 8002ada:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2200      	movs	r2, #0
 8002ae0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e011      	b.n	8002b0a <HAL_RTC_DeactivateAlarm+0x10e>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0e4      	beq.n	8002abe <HAL_RTC_DeactivateAlarm+0xc2>
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	22ff      	movs	r2, #255	; 0xff
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
	...

08002b14 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d012      	beq.n	8002b50 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00b      	beq.n	8002b50 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f003 fec7 	bl	80068cc <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8002b4e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d012      	beq.n	8002b84 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 f8d8 	bl	8002d22 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f462 7220 	orn	r2, r2, #640	; 0x280
 8002b82:	60da      	str	r2, [r3, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <HAL_RTC_AlarmIRQHandler+0x88>)
 8002b86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b8a:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	775a      	strb	r2, [r3, #29]
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	40010400 	.word	0x40010400

08002ba0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined(STM32L100xBA) || defined (STM32L151xBA) || defined (STM32L152xBA) || defined(STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined(STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined(STM32L151xE) || defined(STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d11c      	bne.n	8002bf0 <HAL_RTC_WaitForSynchro+0x50>
#endif /* STM32L100xBA || STM32L151xBA || STM32L152xBA || STM32L100xC || STM32L151xC || STM32L152xC || STM32L162xC || STM32L151xCA || STM32L151xD || STM32L152xCA || STM32L152xD || STM32L162xCA || STM32L162xD || STM32L151xE || STM32L151xDX || STM32L152xE || STM32L152xDX || STM32L162xE || STM32L162xDX */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002bc4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002bc6:	f7fe f92d 	bl	8000e24 <HAL_GetTick>
 8002bca:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002bcc:	e009      	b.n	8002be2 <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002bce:	f7fe f929 	bl	8000e24 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bdc:	d901      	bls.n	8002be2 <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e007      	b.n	8002bf2 <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d0ee      	beq.n	8002bce <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d119      	bne.n	8002c44 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f04f 32ff 	mov.w	r2, #4294967295
 8002c18:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c1a:	f7fe f903 	bl	8000e24 <HAL_GetTick>
 8002c1e:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c20:	e009      	b.n	8002c36 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002c22:	f7fe f8ff 	bl	8000e24 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c30:	d901      	bls.n	8002c36 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e007      	b.n	8002c46 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0ee      	beq.n	8002c22 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b085      	sub	sp, #20
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	4603      	mov	r3, r0
 8002c56:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002c5c:	79fb      	ldrb	r3, [r7, #7]
 8002c5e:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 8002c60:	e005      	b.n	8002c6e <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	3301      	adds	r3, #1
 8002c66:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002c68:	7afb      	ldrb	r3, [r7, #11]
 8002c6a:	3b0a      	subs	r3, #10
 8002c6c:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	2b09      	cmp	r3, #9
 8002c72:	d8f6      	bhi.n	8002c62 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	b2da      	uxtb	r2, r3
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	b2db      	uxtb	r3, r3
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bc80      	pop	{r7}
 8002c8a:	4770      	bx	lr

08002c8c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b085      	sub	sp, #20
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	4603      	mov	r3, r0
 8002c94:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002c96:	79fb      	ldrb	r3, [r7, #7]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	4413      	add	r3, r2
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	79fb      	ldrb	r3, [r7, #7]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	b2db      	uxtb	r3, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3714      	adds	r7, #20
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr

08002cc2 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7f1b      	ldrb	r3, [r3, #28]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d101      	bne.n	8002cd6 <HAL_RTCEx_EnableBypassShadow+0x14>
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	e020      	b.n	8002d18 <HAL_RTCEx_EnableBypassShadow+0x56>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	22ca      	movs	r2, #202	; 0xca
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2253      	movs	r2, #83	; 0x53
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689a      	ldr	r2, [r3, #8]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0220 	orr.w	r2, r2, #32
 8002d00:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	22ff      	movs	r2, #255	; 0xff
 8002d08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr

08002d22 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002d22:	b480      	push	{r7}
 8002d24:	b083      	sub	sp, #12
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e07b      	b.n	8002e3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d108      	bne.n	8002d60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d56:	d009      	beq.n	8002d6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	61da      	str	r2, [r3, #28]
 8002d5e:	e005      	b.n	8002d6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fdd6 	bl	8000938 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	691b      	ldr	r3, [r3, #16]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0301 	and.w	r3, r3, #1
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002de6:	431a      	orrs	r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df0:	ea42 0103 	orr.w	r1, r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002df8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	0c1b      	lsrs	r3, r3, #16
 8002e0a:	f003 0104 	and.w	r1, r3, #4
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	f003 0210 	and.w	r2, r3, #16
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	69da      	ldr	r2, [r3, #28]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2200      	movs	r2, #0
 8002e32:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b082      	sub	sp, #8
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d101      	bne.n	8002e58 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e031      	b.n	8002ebc <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d106      	bne.n	8002e72 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f829 	bl	8002ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2202      	movs	r2, #2
 8002e76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	3304      	adds	r3, #4
 8002e82:	4619      	mov	r1, r3
 8002e84:	4610      	mov	r0, r2
 8002e86:	f000 f979 	bl	800317c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b085      	sub	sp, #20
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d001      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e03a      	b.n	8002f66 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68da      	ldr	r2, [r3, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0201 	orr.w	r2, r2, #1
 8002f06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d00e      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x58>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a16      	ldr	r2, [pc, #88]	; (8002f70 <HAL_TIM_Base_Start_IT+0x98>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d009      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x58>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a14      	ldr	r2, [pc, #80]	; (8002f74 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d004      	beq.n	8002f30 <HAL_TIM_Base_Start_IT+0x58>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a13      	ldr	r2, [pc, #76]	; (8002f78 <HAL_TIM_Base_Start_IT+0xa0>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d111      	bne.n	8002f54 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b06      	cmp	r3, #6
 8002f40:	d010      	beq.n	8002f64 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f52:	e007      	b.n	8002f64 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr
 8002f70:	40000400 	.word	0x40000400
 8002f74:	40000800 	.word	0x40000800
 8002f78:	40010800 	.word	0x40010800

08002f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d122      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b02      	cmp	r3, #2
 8002f9e:	d11b      	bne.n	8002fd8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0202 	mvn.w	r2, #2
 8002fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d003      	beq.n	8002fc6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 f8c1 	bl	8003146 <HAL_TIM_IC_CaptureCallback>
 8002fc4:	e005      	b.n	8002fd2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 f8b4 	bl	8003134 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f8c3 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	f003 0304 	and.w	r3, r3, #4
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d122      	bne.n	800302c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0304 	and.w	r3, r3, #4
 8002ff0:	2b04      	cmp	r3, #4
 8002ff2:	d11b      	bne.n	800302c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0204 	mvn.w	r2, #4
 8002ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2202      	movs	r2, #2
 8003002:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f897 	bl	8003146 <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f88a 	bl	8003134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f899 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b08      	cmp	r3, #8
 8003038:	d122      	bne.n	8003080 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f003 0308 	and.w	r3, r3, #8
 8003044:	2b08      	cmp	r3, #8
 8003046:	d11b      	bne.n	8003080 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0208 	mvn.w	r2, #8
 8003050:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2204      	movs	r2, #4
 8003056:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f86d 	bl	8003146 <HAL_TIM_IC_CaptureCallback>
 800306c:	e005      	b.n	800307a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f860 	bl	8003134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f86f 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	2b10      	cmp	r3, #16
 800308c:	d122      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b10      	cmp	r3, #16
 800309a:	d11b      	bne.n	80030d4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0210 	mvn.w	r2, #16
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2208      	movs	r2, #8
 80030aa:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f843 	bl	8003146 <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f836 	bl	8003134 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f845 	bl	8003158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d10e      	bne.n	8003100 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d107      	bne.n	8003100 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f06f 0201 	mvn.w	r2, #1
 80030f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7fd fb28 	bl	8000750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800310a:	2b40      	cmp	r3, #64	; 0x40
 800310c:	d10e      	bne.n	800312c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003118:	2b40      	cmp	r3, #64	; 0x40
 800311a:	d107      	bne.n	800312c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003124:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f81f 	bl	800316a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800312c:	bf00      	nop
 800312e:	3708      	adds	r7, #8
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}

08003134 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	bc80      	pop	{r7}
 8003144:	4770      	bx	lr

08003146 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bc80      	pop	{r7}
 8003156:	4770      	bx	lr

08003158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003158:	b480      	push	{r7}
 800315a:	b083      	sub	sp, #12
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr

0800316a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800316a:	b480      	push	{r7}
 800316c:	b083      	sub	sp, #12
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	bc80      	pop	{r7}
 800317a:	4770      	bx	lr

0800317c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003192:	d00f      	beq.n	80031b4 <TIM_Base_SetConfig+0x38>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a2b      	ldr	r2, [pc, #172]	; (8003244 <TIM_Base_SetConfig+0xc8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00b      	beq.n	80031b4 <TIM_Base_SetConfig+0x38>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <TIM_Base_SetConfig+0xcc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d007      	beq.n	80031b4 <TIM_Base_SetConfig+0x38>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a29      	ldr	r2, [pc, #164]	; (800324c <TIM_Base_SetConfig+0xd0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_Base_SetConfig+0x38>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a28      	ldr	r2, [pc, #160]	; (8003250 <TIM_Base_SetConfig+0xd4>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d108      	bne.n	80031c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031cc:	d017      	beq.n	80031fe <TIM_Base_SetConfig+0x82>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a1c      	ldr	r2, [pc, #112]	; (8003244 <TIM_Base_SetConfig+0xc8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <TIM_Base_SetConfig+0x82>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1b      	ldr	r2, [pc, #108]	; (8003248 <TIM_Base_SetConfig+0xcc>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00f      	beq.n	80031fe <TIM_Base_SetConfig+0x82>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1a      	ldr	r2, [pc, #104]	; (800324c <TIM_Base_SetConfig+0xd0>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_Base_SetConfig+0x82>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a19      	ldr	r2, [pc, #100]	; (8003250 <TIM_Base_SetConfig+0xd4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0x82>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a18      	ldr	r2, [pc, #96]	; (8003254 <TIM_Base_SetConfig+0xd8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x82>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a17      	ldr	r2, [pc, #92]	; (8003258 <TIM_Base_SetConfig+0xdc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	615a      	str	r2, [r3, #20]
}
 800323a:	bf00      	nop
 800323c:	3714      	adds	r7, #20
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr
 8003244:	40000400 	.word	0x40000400
 8003248:	40000800 	.word	0x40000800
 800324c:	40000c00 	.word	0x40000c00
 8003250:	40010800 	.word	0x40010800
 8003254:	40010c00 	.word	0x40010c00
 8003258:	40011000 	.word	0x40011000

0800325c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d101      	bne.n	800326e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e03f      	b.n	80032ee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003274:	b2db      	uxtb	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d106      	bne.n	8003288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fd fd32 	bl	8000cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2224      	movs	r2, #36	; 0x24
 800328c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68da      	ldr	r2, [r3, #12]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800329e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032a0:	6878      	ldr	r0, [r7, #4]
 80032a2:	f000 fb45 	bl	8003930 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	691a      	ldr	r2, [r3, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695a      	ldr	r2, [r3, #20]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68da      	ldr	r2, [r3, #12]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b088      	sub	sp, #32
 80032fa:	af02      	add	r7, sp, #8
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	603b      	str	r3, [r7, #0]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003306:	2300      	movs	r3, #0
 8003308:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b20      	cmp	r3, #32
 8003314:	f040 8083 	bne.w	800341e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d002      	beq.n	8003324 <HAL_UART_Transmit+0x2e>
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e07b      	b.n	8003420 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_UART_Transmit+0x40>
 8003332:	2302      	movs	r3, #2
 8003334:	e074      	b.n	8003420 <HAL_UART_Transmit+0x12a>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2221      	movs	r2, #33	; 0x21
 8003348:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800334c:	f7fd fd6a 	bl	8000e24 <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	88fa      	ldrh	r2, [r7, #6]
 800335c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003366:	e042      	b.n	80033ee <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800336c:	b29b      	uxth	r3, r3
 800336e:	3b01      	subs	r3, #1
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800337e:	d122      	bne.n	80033c6 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	2200      	movs	r2, #0
 8003388:	2180      	movs	r1, #128	; 0x80
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 f967 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e042      	b.n	8003420 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	881b      	ldrh	r3, [r3, #0]
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ac:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d103      	bne.n	80033be <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3302      	adds	r3, #2
 80033ba:	60bb      	str	r3, [r7, #8]
 80033bc:	e017      	b.n	80033ee <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	3301      	adds	r3, #1
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	e013      	b.n	80033ee <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	2200      	movs	r2, #0
 80033ce:	2180      	movs	r1, #128	; 0x80
 80033d0:	68f8      	ldr	r0, [r7, #12]
 80033d2:	f000 f944 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 80033d6:	4603      	mov	r3, r0
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d001      	beq.n	80033e0 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e01f      	b.n	8003420 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	1c5a      	adds	r2, r3, #1
 80033e4:	60ba      	str	r2, [r7, #8]
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1b7      	bne.n	8003368 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f92b 	bl	800365e <UART_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e006      	b.n	8003420 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3718      	adds	r7, #24
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003448:	2300      	movs	r3, #0
 800344a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10d      	bne.n	800347a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f003 0320 	and.w	r3, r3, #32
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_UART_IRQHandler+0x52>
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	f003 0320 	and.w	r3, r3, #32
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9db 	bl	800382e <UART_Receive_IT>
      return;
 8003478:	e0d0      	b.n	800361c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80b0 	beq.w	80035e2 <HAL_UART_IRQHandler+0x1ba>
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d105      	bne.n	8003498 <HAL_UART_IRQHandler+0x70>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 80a5 	beq.w	80035e2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_UART_IRQHandler+0x90>
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	f043 0201 	orr.w	r2, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	f003 0304 	and.w	r3, r3, #4
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_UART_IRQHandler+0xb0>
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d005      	beq.n	80034d8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	f043 0202 	orr.w	r2, r3, #2
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00a      	beq.n	80034f8 <HAL_UART_IRQHandler+0xd0>
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f0:	f043 0204 	orr.w	r2, r3, #4
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00f      	beq.n	8003522 <HAL_UART_IRQHandler+0xfa>
 8003502:	69bb      	ldr	r3, [r7, #24]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <HAL_UART_IRQHandler+0xee>
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	f043 0208 	orr.w	r2, r3, #8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	2b00      	cmp	r3, #0
 8003528:	d077      	beq.n	800361a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	f003 0320 	and.w	r3, r3, #32
 8003530:	2b00      	cmp	r3, #0
 8003532:	d007      	beq.n	8003544 <HAL_UART_IRQHandler+0x11c>
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f003 0320 	and.w	r3, r3, #32
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f975 	bl	800382e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800354e:	2b40      	cmp	r3, #64	; 0x40
 8003550:	bf0c      	ite	eq
 8003552:	2301      	moveq	r3, #1
 8003554:	2300      	movne	r3, #0
 8003556:	b2db      	uxtb	r3, r3
 8003558:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355e:	f003 0308 	and.w	r3, r3, #8
 8003562:	2b00      	cmp	r3, #0
 8003564:	d102      	bne.n	800356c <HAL_UART_IRQHandler+0x144>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d031      	beq.n	80035d0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f8c0 	bl	80036f2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	695b      	ldr	r3, [r3, #20]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d123      	bne.n	80035c8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695a      	ldr	r2, [r3, #20]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800358e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003594:	2b00      	cmp	r3, #0
 8003596:	d013      	beq.n	80035c0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	4a21      	ldr	r2, [pc, #132]	; (8003624 <HAL_UART_IRQHandler+0x1fc>)
 800359e:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fd fd72 	bl	800108e <HAL_DMA_Abort_IT>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d016      	beq.n	80035de <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035ba:	4610      	mov	r0, r2
 80035bc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035be:	e00e      	b.n	80035de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f000 f843 	bl	800364c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035c6:	e00a      	b.n	80035de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f000 f83f 	bl	800364c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ce:	e006      	b.n	80035de <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f000 f83b 	bl	800364c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80035dc:	e01d      	b.n	800361a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035de:	bf00      	nop
    return;
 80035e0:	e01b      	b.n	800361a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <HAL_UART_IRQHandler+0x1d6>
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8ac 	bl	8003754 <UART_Transmit_IT>
    return;
 80035fc:	e00e      	b.n	800361c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_UART_IRQHandler+0x1f4>
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 f8f3 	bl	80037fe <UART_EndTransmit_IT>
    return;
 8003618:	e000      	b.n	800361c <HAL_UART_IRQHandler+0x1f4>
    return;
 800361a:	bf00      	nop
  }
}
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	0800372d 	.word	0x0800372d

08003628 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800363a:	b480      	push	{r7}
 800363c:	b083      	sub	sp, #12
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	bc80      	pop	{r7}
 800364a:	4770      	bx	lr

0800364c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b083      	sub	sp, #12
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr

0800365e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4613      	mov	r3, r2
 800366c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366e:	e02c      	b.n	80036ca <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003670:	69bb      	ldr	r3, [r7, #24]
 8003672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003676:	d028      	beq.n	80036ca <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d007      	beq.n	800368e <UART_WaitOnFlagUntilTimeout+0x30>
 800367e:	f7fd fbd1 	bl	8000e24 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	429a      	cmp	r2, r3
 800368c:	d21d      	bcs.n	80036ca <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68da      	ldr	r2, [r3, #12]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800369c:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	695a      	ldr	r2, [r3, #20]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0201 	bic.w	r2, r2, #1
 80036ac:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e00f      	b.n	80036ea <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4013      	ands	r3, r2
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	bf0c      	ite	eq
 80036da:	2301      	moveq	r3, #1
 80036dc:	2300      	movne	r3, #0
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	79fb      	ldrb	r3, [r7, #7]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d0c3      	beq.n	8003670 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	68da      	ldr	r2, [r3, #12]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003708:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2220      	movs	r2, #32
 800371e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	bc80      	pop	{r7}
 800372a:	4770      	bx	lr

0800372c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2200      	movs	r2, #0
 800373e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f7ff ff80 	bl	800364c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800374c:	bf00      	nop
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b21      	cmp	r3, #33	; 0x21
 8003766:	d144      	bne.n	80037f2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003770:	d11a      	bne.n	80037a8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	881b      	ldrh	r3, [r3, #0]
 800377c:	461a      	mov	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003786:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d105      	bne.n	800379c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	1c9a      	adds	r2, r3, #2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	621a      	str	r2, [r3, #32]
 800379a:	e00e      	b.n	80037ba <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	1c5a      	adds	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	621a      	str	r2, [r3, #32]
 80037a6:	e008      	b.n	80037ba <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	1c59      	adds	r1, r3, #1
 80037ae:	687a      	ldr	r2, [r7, #4]
 80037b0:	6211      	str	r1, [r2, #32]
 80037b2:	781a      	ldrb	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037be:	b29b      	uxth	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	4619      	mov	r1, r3
 80037c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68da      	ldr	r2, [r3, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037ee:	2300      	movs	r3, #0
 80037f0:	e000      	b.n	80037f4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80037f2:	2302      	movs	r3, #2
  }
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3714      	adds	r7, #20
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bc80      	pop	{r7}
 80037fc:	4770      	bx	lr

080037fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	68da      	ldr	r2, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003814:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ff02 	bl	8003628 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b22      	cmp	r3, #34	; 0x22
 8003840:	d171      	bne.n	8003926 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384a:	d123      	bne.n	8003894 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003850:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10e      	bne.n	8003878 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003866:	b29a      	uxth	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	629a      	str	r2, [r3, #40]	; 0x28
 8003876:	e029      	b.n	80038cc <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	b29b      	uxth	r3, r3
 8003880:	b2db      	uxtb	r3, r3
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800388c:	1c5a      	adds	r2, r3, #1
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	629a      	str	r2, [r3, #40]	; 0x28
 8003892:	e01b      	b.n	80038cc <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d10a      	bne.n	80038b2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6858      	ldr	r0, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6291      	str	r1, [r2, #40]	; 0x28
 80038ac:	b2c2      	uxtb	r2, r0
 80038ae:	701a      	strb	r2, [r3, #0]
 80038b0:	e00c      	b.n	80038cc <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038be:	1c58      	adds	r0, r3, #1
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	6288      	str	r0, [r1, #40]	; 0x28
 80038c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	4619      	mov	r1, r3
 80038da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d120      	bne.n	8003922 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0220 	bic.w	r2, r2, #32
 80038ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68da      	ldr	r2, [r3, #12]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0201 	bic.w	r2, r2, #1
 800390e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2220      	movs	r2, #32
 8003914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f7ff fe8e 	bl	800363a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e002      	b.n	8003928 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003922:	2300      	movs	r3, #0
 8003924:	e000      	b.n	8003928 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003926:	2302      	movs	r3, #2
  }
}
 8003928:	4618      	mov	r0, r3
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68da      	ldr	r2, [r3, #12]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	430a      	orrs	r2, r1
 800394c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4313      	orrs	r3, r2
 8003964:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003970:	f023 030c 	bic.w	r3, r3, #12
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	68b9      	ldr	r1, [r7, #8]
 800397a:	430b      	orrs	r3, r1
 800397c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	699a      	ldr	r2, [r3, #24]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a55      	ldr	r2, [pc, #340]	; (8003af0 <UART_SetConfig+0x1c0>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d103      	bne.n	80039a6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800399e:	f7fe faf7 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	e002      	b.n	80039ac <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80039a6:	f7fe fadf 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 80039aa:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039b4:	d14c      	bne.n	8003a50 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039b6:	68fa      	ldr	r2, [r7, #12]
 80039b8:	4613      	mov	r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	009a      	lsls	r2, r3, #2
 80039c0:	441a      	add	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	005b      	lsls	r3, r3, #1
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	4a49      	ldr	r2, [pc, #292]	; (8003af4 <UART_SetConfig+0x1c4>)
 80039ce:	fba2 2303 	umull	r2, r3, r2, r3
 80039d2:	095b      	lsrs	r3, r3, #5
 80039d4:	0119      	lsls	r1, r3, #4
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	009a      	lsls	r2, r3, #2
 80039e0:	441a      	add	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80039ec:	4b41      	ldr	r3, [pc, #260]	; (8003af4 <UART_SetConfig+0x1c4>)
 80039ee:	fba3 0302 	umull	r0, r3, r3, r2
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	2064      	movs	r0, #100	; 0x64
 80039f6:	fb00 f303 	mul.w	r3, r0, r3
 80039fa:	1ad3      	subs	r3, r2, r3
 80039fc:	00db      	lsls	r3, r3, #3
 80039fe:	3332      	adds	r3, #50	; 0x32
 8003a00:	4a3c      	ldr	r2, [pc, #240]	; (8003af4 <UART_SetConfig+0x1c4>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	095b      	lsrs	r3, r3, #5
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a0e:	4419      	add	r1, r3
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009a      	lsls	r2, r3, #2
 8003a1a:	441a      	add	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a26:	4b33      	ldr	r3, [pc, #204]	; (8003af4 <UART_SetConfig+0x1c4>)
 8003a28:	fba3 0302 	umull	r0, r3, r3, r2
 8003a2c:	095b      	lsrs	r3, r3, #5
 8003a2e:	2064      	movs	r0, #100	; 0x64
 8003a30:	fb00 f303 	mul.w	r3, r0, r3
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	3332      	adds	r3, #50	; 0x32
 8003a3a:	4a2e      	ldr	r2, [pc, #184]	; (8003af4 <UART_SetConfig+0x1c4>)
 8003a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a40:	095b      	lsrs	r3, r3, #5
 8003a42:	f003 0207 	and.w	r2, r3, #7
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	440a      	add	r2, r1
 8003a4c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a4e:	e04a      	b.n	8003ae6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009a      	lsls	r2, r3, #2
 8003a5a:	441a      	add	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	4a23      	ldr	r2, [pc, #140]	; (8003af4 <UART_SetConfig+0x1c4>)
 8003a68:	fba2 2303 	umull	r2, r3, r2, r3
 8003a6c:	095b      	lsrs	r3, r3, #5
 8003a6e:	0119      	lsls	r1, r3, #4
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4613      	mov	r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	4413      	add	r3, r2
 8003a78:	009a      	lsls	r2, r3, #2
 8003a7a:	441a      	add	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	fbb2 f2f3 	udiv	r2, r2, r3
 8003a86:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <UART_SetConfig+0x1c4>)
 8003a88:	fba3 0302 	umull	r0, r3, r3, r2
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	2064      	movs	r0, #100	; 0x64
 8003a90:	fb00 f303 	mul.w	r3, r0, r3
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	011b      	lsls	r3, r3, #4
 8003a98:	3332      	adds	r3, #50	; 0x32
 8003a9a:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <UART_SetConfig+0x1c4>)
 8003a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003aa0:	095b      	lsrs	r3, r3, #5
 8003aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003aa6:	4419      	add	r1, r3
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009a      	lsls	r2, r3, #2
 8003ab2:	441a      	add	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <UART_SetConfig+0x1c4>)
 8003ac0:	fba3 0302 	umull	r0, r3, r3, r2
 8003ac4:	095b      	lsrs	r3, r3, #5
 8003ac6:	2064      	movs	r0, #100	; 0x64
 8003ac8:	fb00 f303 	mul.w	r3, r0, r3
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	3332      	adds	r3, #50	; 0x32
 8003ad2:	4a08      	ldr	r2, [pc, #32]	; (8003af4 <UART_SetConfig+0x1c4>)
 8003ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	f003 020f 	and.w	r2, r3, #15
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
}
 8003ae6:	bf00      	nop
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40013800 	.word	0x40013800
 8003af4:	51eb851f 	.word	0x51eb851f

08003af8 <SX1276Init>:
/*
 * Radio driver functions implementation
 */

void SX1276Init( RadioEvents_t *events )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  // my
    SX1276.Reset.port = SX1276_RST_GPIO_Port;
 8003b00:	4b2f      	ldr	r3, [pc, #188]	; (8003bc0 <SX1276Init+0xc8>)
 8003b02:	4a30      	ldr	r2, [pc, #192]	; (8003bc4 <SX1276Init+0xcc>)
 8003b04:	601a      	str	r2, [r3, #0]
    SX1276.Reset.pin = SX1276_RST_Pin;
 8003b06:	4b2e      	ldr	r3, [pc, #184]	; (8003bc0 <SX1276Init+0xc8>)
 8003b08:	2201      	movs	r2, #1
 8003b0a:	809a      	strh	r2, [r3, #4]

    SX1276.Spi.Nss.port = SPI2_NSS_GPIO_Port;
 8003b0c:	4b2c      	ldr	r3, [pc, #176]	; (8003bc0 <SX1276Init+0xc8>)
 8003b0e:	4a2e      	ldr	r2, [pc, #184]	; (8003bc8 <SX1276Init+0xd0>)
 8003b10:	63da      	str	r2, [r3, #60]	; 0x3c
    SX1276.Spi.Nss.pin  = SPI2_NSS_Pin;
 8003b12:	4b2b      	ldr	r3, [pc, #172]	; (8003bc0 <SX1276Init+0xc8>)
 8003b14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b18:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    SX1276.Spi.SpiId = SPI_2;
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <SX1276Init+0xc8>)
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    uint8_t i;

    RadioEvents = events;
 8003b24:	4a29      	ldr	r2, [pc, #164]	; (8003bcc <SX1276Init+0xd4>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6013      	str	r3, [r2, #0]

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 8003b2a:	4929      	ldr	r1, [pc, #164]	; (8003bd0 <SX1276Init+0xd8>)
 8003b2c:	4829      	ldr	r0, [pc, #164]	; (8003bd4 <SX1276Init+0xdc>)
 8003b2e:	f003 f8c1 	bl	8006cb4 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 8003b32:	4927      	ldr	r1, [pc, #156]	; (8003bd0 <SX1276Init+0xd8>)
 8003b34:	4828      	ldr	r0, [pc, #160]	; (8003bd8 <SX1276Init+0xe0>)
 8003b36:	f003 f8bd 	bl	8006cb4 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 8003b3a:	4925      	ldr	r1, [pc, #148]	; (8003bd0 <SX1276Init+0xd8>)
 8003b3c:	4827      	ldr	r0, [pc, #156]	; (8003bdc <SX1276Init+0xe4>)
 8003b3e:	f003 f8b9 	bl	8006cb4 <TimerInit>

    SX1276Reset( );
 8003b42:	f002 ff37 	bl	80069b4 <SX1276Reset>

    RxChainCalibration( );
 8003b46:	f000 f8fb 	bl	8003d40 <RxChainCalibration>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f001 f8b4 	bl	8004cb8 <SX1276SetOpMode>

    SX1276IoInit();
 8003b50:	f002 fec6 	bl	80068e0 <SX1276IoInit>

    SX1276IoIrqInit( DioIrq );
 8003b54:	4822      	ldr	r0, [pc, #136]	; (8003be0 <SX1276Init+0xe8>)
 8003b56:	f002 fef7 	bl	8006948 <SX1276IoIrqInit>


    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e020      	b.n	8003ba2 <SX1276Init+0xaa>
    {
        SX1276SetModem( RadioRegsInit[i].Modem );
 8003b60:	7bfa      	ldrb	r2, [r7, #15]
 8003b62:	4920      	ldr	r1, [pc, #128]	; (8003be4 <SX1276Init+0xec>)
 8003b64:	4613      	mov	r3, r2
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	4413      	add	r3, r2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f001 f8ce 	bl	8004d10 <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 8003b74:	7bfa      	ldrb	r2, [r7, #15]
 8003b76:	491b      	ldr	r1, [pc, #108]	; (8003be4 <SX1276Init+0xec>)
 8003b78:	4613      	mov	r3, r2
 8003b7a:	005b      	lsls	r3, r3, #1
 8003b7c:	4413      	add	r3, r2
 8003b7e:	440b      	add	r3, r1
 8003b80:	3301      	adds	r3, #1
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	7bfa      	ldrb	r2, [r7, #15]
 8003b88:	4916      	ldr	r1, [pc, #88]	; (8003be4 <SX1276Init+0xec>)
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	4413      	add	r3, r2
 8003b90:	440b      	add	r3, r1
 8003b92:	3302      	adds	r3, #2
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	4619      	mov	r1, r3
 8003b98:	f001 f912 	bl	8004dc0 <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003b9c:	7bfb      	ldrb	r3, [r7, #15]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
 8003ba4:	2b0f      	cmp	r3, #15
 8003ba6:	d9db      	bls.n	8003b60 <SX1276Init+0x68>
    }

    SX1276SetModem( MODEM_FSK );
 8003ba8:	2000      	movs	r0, #0
 8003baa:	f001 f8b1 	bl	8004d10 <SX1276SetModem>

    SX1276.Settings.State = RF_IDLE;
 8003bae:	4b04      	ldr	r3, [pc, #16]	; (8003bc0 <SX1276Init+0xc8>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8003bb6:	bf00      	nop
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000378 	.word	0x20000378
 8003bc4:	40020800 	.word	0x40020800
 8003bc8:	40020400 	.word	0x40020400
 8003bcc:	200000c8 	.word	0x200000c8
 8003bd0:	08005249 	.word	0x08005249
 8003bd4:	20000348 	.word	0x20000348
 8003bd8:	20000420 	.word	0x20000420
 8003bdc:	20000360 	.word	0x20000360
 8003be0:	2000000c 	.word	0x2000000c
 8003be4:	08007adc 	.word	0x08007adc

08003be8 <SX1276GetStatus>:

RadioState_t SX1276GetStatus( void )
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
    return SX1276.Settings.State;
 8003bec:	4b03      	ldr	r3, [pc, #12]	; (8003bfc <SX1276GetStatus+0x14>)
 8003bee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	20000378 	.word	0x20000378

08003c00 <SX1276SetChannel>:

void SX1276SetChannel( uint32_t freq )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
    uint32_t freqInPllSteps = SX1276ConvertFreqInHzToPllStep( freq );
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f001 f9f5 	bl	8004ff8 <SX1276ConvertFreqInHzToPllStep>
 8003c0e:	60f8      	str	r0, [r7, #12]

    SX1276.Settings.Channel = freq;
 8003c10:	4a0d      	ldr	r2, [pc, #52]	; (8003c48 <SX1276SetChannel+0x48>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6493      	str	r3, [r2, #72]	; 0x48

    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	0c1b      	lsrs	r3, r3, #16
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	2006      	movs	r0, #6
 8003c20:	f001 f8ce 	bl	8004dc0 <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	0a1b      	lsrs	r3, r3, #8
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	2007      	movs	r0, #7
 8003c2e:	f001 f8c7 	bl	8004dc0 <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	4619      	mov	r1, r3
 8003c38:	2008      	movs	r0, #8
 8003c3a:	f001 f8c1 	bl	8004dc0 <SX1276Write>
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	20000378 	.word	0x20000378

08003c4c <SX1276IsChannelFree>:

bool SX1276IsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8003c60:	2300      	movs	r3, #0
 8003c62:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]

    SX1276SetSleep( );
 8003c68:	f000 fd34 	bl	80046d4 <SX1276SetSleep>

    SX1276SetModem( MODEM_FSK );
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f001 f84f 	bl	8004d10 <SX1276SetModem>

    SX1276SetChannel( freq );
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff ffc4 	bl	8003c00 <SX1276SetChannel>

    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8003c78:	68b8      	ldr	r0, [r7, #8]
 8003c7a:	f001 f9e3 	bl	8005044 <GetFskBandwidthRegValue>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	4619      	mov	r1, r3
 8003c82:	2012      	movs	r0, #18
 8003c84:	f001 f89c 	bl	8004dc0 <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 8003c88:	68b8      	ldr	r0, [r7, #8]
 8003c8a:	f001 f9db 	bl	8005044 <GetFskBandwidthRegValue>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4619      	mov	r1, r3
 8003c92:	2013      	movs	r0, #19
 8003c94:	f001 f894 	bl	8004dc0 <SX1276Write>

    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003c98:	2005      	movs	r0, #5
 8003c9a:	f001 f80d 	bl	8004cb8 <SX1276SetOpMode>

    DelayMs( 1 );
 8003c9e:	2001      	movs	r0, #1
 8003ca0:	f001 fff6 	bl	8005c90 <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8003ca4:	f003 f9fd 	bl	80070a2 <TimerGetCurrentTime>
 8003ca8:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003caa:	e00d      	b.n	8003cc8 <SX1276IsChannelFree+0x7c>
    {
        rssi = SX1276ReadRssi( MODEM_FSK );
 8003cac:	2000      	movs	r0, #0
 8003cae:	f000 ffc5 	bl	8004c3c <SX1276ReadRssi>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8003cb6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	dd02      	ble.n	8003cc8 <SX1276IsChannelFree+0x7c>
        {
            status = false;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	75fb      	strb	r3, [r7, #23]
            break;
 8003cc6:	e006      	b.n	8003cd6 <SX1276IsChannelFree+0x8a>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8003cc8:	6938      	ldr	r0, [r7, #16]
 8003cca:	f003 f9f8 	bl	80070be <TimerGetElapsedTime>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d8ea      	bhi.n	8003cac <SX1276IsChannelFree+0x60>
        }
    }
    SX1276SetSleep( );
 8003cd6:	f000 fcfd 	bl	80046d4 <SX1276SetSleep>
    return status;
 8003cda:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3718      	adds	r7, #24
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <SX1276Random>:

uint32_t SX1276Random( void )
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 8003cea:	2300      	movs	r3, #0
 8003cec:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1276SetModem( MODEM_LORA );
 8003cee:	2001      	movs	r0, #1
 8003cf0:	f001 f80e 	bl	8004d10 <SX1276SetModem>

    // Disable LoRa modem interrupts
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003cf4:	21ff      	movs	r1, #255	; 0xff
 8003cf6:	2011      	movs	r0, #17
 8003cf8:	f001 f862 	bl	8004dc0 <SX1276Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1276SetOpMode( RF_OPMODE_RECEIVER );
 8003cfc:	2005      	movs	r0, #5
 8003cfe:	f000 ffdb 	bl	8004cb8 <SX1276SetOpMode>

    for( i = 0; i < 32; i++ )
 8003d02:	2300      	movs	r3, #0
 8003d04:	71fb      	strb	r3, [r7, #7]
 8003d06:	e011      	b.n	8003d2c <SX1276Random+0x48>
    {
        DelayMs( 1 );
 8003d08:	2001      	movs	r0, #1
 8003d0a:	f001 ffc1 	bl	8005c90 <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8003d0e:	202c      	movs	r0, #44	; 0x2c
 8003d10:	f001 f866 	bl	8004de0 <SX1276Read>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f003 0201 	and.w	r2, r3, #1
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8003d26:	79fb      	ldrb	r3, [r7, #7]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	71fb      	strb	r3, [r7, #7]
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	2b1f      	cmp	r3, #31
 8003d30:	d9ea      	bls.n	8003d08 <SX1276Random+0x24>
    }

    SX1276SetSleep( );
 8003d32:	f000 fccf 	bl	80046d4 <SX1276SetSleep>

    return rnd;
 8003d36:	683b      	ldr	r3, [r7, #0]
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3708      	adds	r7, #8
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <RxChainCalibration>:
 * Performs the Rx chain calibration for LF and HF bands
 * \remark Must be called just after the reset so all registers are at their
 *         default values
 */
static void RxChainCalibration( void )
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
    uint8_t regPaConfigInitVal;
    uint32_t initialFreq;

    // Save context
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 8003d46:	2009      	movs	r0, #9
 8003d48:	f001 f84a 	bl	8004de0 <SX1276Read>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]

    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003d50:	2006      	movs	r0, #6
 8003d52:	f001 f845 	bl	8004de0 <SX1276Read>
 8003d56:	4603      	mov	r3, r0
 8003d58:	041c      	lsls	r4, r3, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 8003d5a:	2007      	movs	r0, #7
 8003d5c:	f001 f840 	bl	8004de0 <SX1276Read>
 8003d60:	4603      	mov	r3, r0
 8003d62:	021b      	lsls	r3, r3, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003d64:	431c      	orrs	r4, r3
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 8003d66:	2008      	movs	r0, #8
 8003d68:	f001 f83a 	bl	8004de0 <SX1276Read>
 8003d6c:	4603      	mov	r3, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 8003d6e:	4323      	orrs	r3, r4
 8003d70:	4618      	mov	r0, r3
 8003d72:	f001 f923 	bl	8004fbc <SX1276ConvertPllStepToFreqInHz>
 8003d76:	6038      	str	r0, [r7, #0]

    // Cut the PA just in case, RFO output, power = -1 dBm
    SX1276Write( REG_PACONFIG, 0x00 );
 8003d78:	2100      	movs	r1, #0
 8003d7a:	2009      	movs	r0, #9
 8003d7c:	f001 f820 	bl	8004dc0 <SX1276Write>

    // Launch Rx chain calibration for LF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8003d80:	203b      	movs	r0, #59	; 0x3b
 8003d82:	f001 f82d 	bl	8004de0 <SX1276Read>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	4619      	mov	r1, r3
 8003d90:	203b      	movs	r0, #59	; 0x3b
 8003d92:	f001 f815 	bl	8004dc0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003d96:	bf00      	nop
 8003d98:	203b      	movs	r0, #59	; 0x3b
 8003d9a:	f001 f821 	bl	8004de0 <SX1276Read>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	f003 0320 	and.w	r3, r3, #32
 8003da4:	2b20      	cmp	r3, #32
 8003da6:	d0f7      	beq.n	8003d98 <RxChainCalibration+0x58>
    {
    }

    // Sets a Frequency in HF band
    SX1276SetChannel( 868000000 );
 8003da8:	4811      	ldr	r0, [pc, #68]	; (8003df0 <RxChainCalibration+0xb0>)
 8003daa:	f7ff ff29 	bl	8003c00 <SX1276SetChannel>

    // Launch Rx chain calibration for HF band
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 8003dae:	203b      	movs	r0, #59	; 0x3b
 8003db0:	f001 f816 	bl	8004de0 <SX1276Read>
 8003db4:	4603      	mov	r3, r0
 8003db6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	203b      	movs	r0, #59	; 0x3b
 8003dc0:	f000 fffe 	bl	8004dc0 <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 8003dc4:	bf00      	nop
 8003dc6:	203b      	movs	r0, #59	; 0x3b
 8003dc8:	f001 f80a 	bl	8004de0 <SX1276Read>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f003 0320 	and.w	r3, r3, #32
 8003dd2:	2b20      	cmp	r3, #32
 8003dd4:	d0f7      	beq.n	8003dc6 <RxChainCalibration+0x86>
    {
    }

    // Restore context
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 8003dd6:	79fb      	ldrb	r3, [r7, #7]
 8003dd8:	4619      	mov	r1, r3
 8003dda:	2009      	movs	r0, #9
 8003ddc:	f000 fff0 	bl	8004dc0 <SX1276Write>
    SX1276SetChannel( initialFreq );
 8003de0:	6838      	ldr	r0, [r7, #0]
 8003de2:	f7ff ff0d 	bl	8003c00 <SX1276SetChannel>
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd90      	pop	{r4, r7, pc}
 8003dee:	bf00      	nop
 8003df0:	33bca100 	.word	0x33bca100

08003df4 <SX1276SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60b9      	str	r1, [r7, #8]
 8003dfc:	607a      	str	r2, [r7, #4]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4603      	mov	r3, r0
 8003e02:	73fb      	strb	r3, [r7, #15]
 8003e04:	4613      	mov	r3, r2
 8003e06:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 ff80 	bl	8004d10 <SX1276SetModem>

    switch( modem )
 8003e10:	7bfb      	ldrb	r3, [r7, #15]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <SX1276SetRxConfig+0x2a>
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	f000 8099 	beq.w	8003f4e <SX1276SetRxConfig+0x15a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8003e1c:	e1c3      	b.n	80041a6 <SX1276SetRxConfig+0x3b2>
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 8003e1e:	4a78      	ldr	r2, [pc, #480]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 8003e24:	4a76      	ldr	r2, [pc, #472]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 8003e2a:	4a75      	ldr	r2, [pc, #468]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
 8003e2e:	6593      	str	r3, [r2, #88]	; 0x58
            SX1276.Settings.Fsk.FixLen = fixLen;
 8003e30:	4a73      	ldr	r2, [pc, #460]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003e36:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 8003e3a:	4a71      	ldr	r2, [pc, #452]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e3c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003e40:	f882 3063 	strb.w	r3, [r2, #99]	; 0x63
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8003e44:	4a6e      	ldr	r2, [pc, #440]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003e4a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 8003e4e:	4a6c      	ldr	r2, [pc, #432]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e50:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003e54:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 8003e58:	4a69      	ldr	r2, [pc, #420]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e5a:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003e5e:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8003e62:	4a67      	ldr	r2, [pc, #412]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003e66:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 8003e6a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e6c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8003e70:	fb02 f203 	mul.w	r2, r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e7a:	4a61      	ldr	r2, [pc, #388]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003e7c:	66d3      	str	r3, [r2, #108]	; 0x6c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8003e7e:	4a61      	ldr	r2, [pc, #388]	; (8004004 <SX1276SetRxConfig+0x210>)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e86:	617b      	str	r3, [r7, #20]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	4619      	mov	r1, r3
 8003e90:	2002      	movs	r0, #2
 8003e92:	f000 ff95 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	2003      	movs	r0, #3
 8003e9e:	f000 ff8f 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8003ea2:	68b8      	ldr	r0, [r7, #8]
 8003ea4:	f001 f8ce 	bl	8005044 <GetFskBandwidthRegValue>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4619      	mov	r1, r3
 8003eac:	2012      	movs	r0, #18
 8003eae:	f000 ff87 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8003eb2:	6a38      	ldr	r0, [r7, #32]
 8003eb4:	f001 f8c6 	bl	8005044 <GetFskBandwidthRegValue>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4619      	mov	r1, r3
 8003ebc:	2013      	movs	r0, #19
 8003ebe:	f000 ff7f 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8003ec2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	4619      	mov	r1, r3
 8003ecc:	2025      	movs	r0, #37	; 0x25
 8003ece:	f000 ff77 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8003ed2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	2026      	movs	r0, #38	; 0x26
 8003eda:	f000 ff71 	bl	8004dc0 <SX1276Write>
            if( fixLen == 1 )
 8003ede:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d006      	beq.n	8003ef4 <SX1276SetRxConfig+0x100>
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 8003ee6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003eea:	4619      	mov	r1, r3
 8003eec:	2032      	movs	r0, #50	; 0x32
 8003eee:	f000 ff67 	bl	8004dc0 <SX1276Write>
 8003ef2:	e003      	b.n	8003efc <SX1276SetRxConfig+0x108>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8003ef4:	21ff      	movs	r1, #255	; 0xff
 8003ef6:	2032      	movs	r0, #50	; 0x32
 8003ef8:	f000 ff62 	bl	8004dc0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8003efc:	2030      	movs	r0, #48	; 0x30
 8003efe:	f000 ff6f 	bl	8004de0 <SX1276Read>
 8003f02:	4603      	mov	r3, r0
 8003f04:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8003f06:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8003f0a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8003f0c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8003f10:	2a00      	cmp	r2, #0
 8003f12:	d001      	beq.n	8003f18 <SX1276SetRxConfig+0x124>
 8003f14:	2200      	movs	r2, #0
 8003f16:	e001      	b.n	8003f1c <SX1276SetRxConfig+0x128>
 8003f18:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8003f20:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f24:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8003f26:	b25b      	sxtb	r3, r3
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	4619      	mov	r1, r3
 8003f30:	2030      	movs	r0, #48	; 0x30
 8003f32:	f000 ff45 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8003f36:	2031      	movs	r0, #49	; 0x31
 8003f38:	f000 ff52 	bl	8004de0 <SX1276Read>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	4619      	mov	r1, r3
 8003f46:	2031      	movs	r0, #49	; 0x31
 8003f48:	f000 ff3a 	bl	8004dc0 <SX1276Write>
        break;
 8003f4c:	e12b      	b.n	80041a6 <SX1276SetRxConfig+0x3b2>
            if( bandwidth > 2 )
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d900      	bls.n	8003f56 <SX1276SetRxConfig+0x162>
                while( 1 );
 8003f54:	e7fe      	b.n	8003f54 <SX1276SetRxConfig+0x160>
            bandwidth += 7;
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3307      	adds	r3, #7
 8003f5a:	60bb      	str	r3, [r7, #8]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 8003f5c:	4a28      	ldr	r2, [pc, #160]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8003f64:	4a26      	ldr	r2, [pc, #152]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8003f6c:	4a24      	ldr	r2, [pc, #144]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003f6e:	7bbb      	ldrb	r3, [r7, #14]
 8003f70:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8003f74:	4a22      	ldr	r2, [pc, #136]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003f76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f78:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 8003f7c:	4a20      	ldr	r2, [pc, #128]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003f7e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8003f82:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 8003f86:	4a1e      	ldr	r2, [pc, #120]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003f88:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f8c:	f882 3091 	strb.w	r3, [r2, #145]	; 0x91
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8003f90:	4a1b      	ldr	r2, [pc, #108]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003f92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003f96:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8003f9a:	4a19      	ldr	r2, [pc, #100]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003f9c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8003fa0:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 8003fa4:	4a16      	ldr	r2, [pc, #88]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003fa6:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8003faa:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8003fae:	4a14      	ldr	r2, [pc, #80]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003fb0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8003fb4:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 8003fb8:	4a11      	ldr	r2, [pc, #68]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003fba:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8003fbe:	f882 3096 	strb.w	r3, [r2, #150]	; 0x96
            if( datarate > 12 )
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b0c      	cmp	r3, #12
 8003fc6:	d902      	bls.n	8003fce <SX1276SetRxConfig+0x1da>
                datarate = 12;
 8003fc8:	230c      	movs	r3, #12
 8003fca:	607b      	str	r3, [r7, #4]
 8003fcc:	e004      	b.n	8003fd8 <SX1276SetRxConfig+0x1e4>
            else if( datarate < 6 )
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b05      	cmp	r3, #5
 8003fd2:	d801      	bhi.n	8003fd8 <SX1276SetRxConfig+0x1e4>
                datarate = 6;
 8003fd4:	2306      	movs	r3, #6
 8003fd6:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b07      	cmp	r3, #7
 8003fdc:	d105      	bne.n	8003fea <SX1276SetRxConfig+0x1f6>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b0b      	cmp	r3, #11
 8003fe2:	d008      	beq.n	8003ff6 <SX1276SetRxConfig+0x202>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b0c      	cmp	r3, #12
 8003fe8:	d005      	beq.n	8003ff6 <SX1276SetRxConfig+0x202>
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b08      	cmp	r3, #8
 8003fee:	d10b      	bne.n	8004008 <SX1276SetRxConfig+0x214>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b0c      	cmp	r3, #12
 8003ff4:	d108      	bne.n	8004008 <SX1276SetRxConfig+0x214>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8003ff6:	4b02      	ldr	r3, [pc, #8]	; (8004000 <SX1276SetRxConfig+0x20c>)
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8003ffe:	e007      	b.n	8004010 <SX1276SetRxConfig+0x21c>
 8004000:	20000378 	.word	0x20000378
 8004004:	01e84800 	.word	0x01e84800
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004008:	4b69      	ldr	r3, [pc, #420]	; (80041b0 <SX1276SetRxConfig+0x3bc>)
 800400a:	2200      	movs	r2, #0
 800400c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 8004010:	201d      	movs	r0, #29
 8004012:	f000 fee5 	bl	8004de0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	b2db      	uxtb	r3, r3
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	b2da      	uxtb	r2, r3
 800401e:	7bbb      	ldrb	r3, [r7, #14]
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	b2db      	uxtb	r3, r3
 8004024:	4313      	orrs	r3, r2
 8004026:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004028:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800402c:	4313      	orrs	r3, r2
 800402e:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 8004030:	4619      	mov	r1, r3
 8004032:	201d      	movs	r0, #29
 8004034:	f000 fec4 	bl	8004dc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 8004038:	201e      	movs	r0, #30
 800403a:	f000 fed1 	bl	8004de0 <SX1276Read>
 800403e:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 8004040:	f003 0308 	and.w	r3, r3, #8
 8004044:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	b2db      	uxtb	r3, r3
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 800404e:	4313      	orrs	r3, r2
 8004050:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 8004052:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	b2db      	uxtb	r3, r3
 800405a:	4313      	orrs	r3, r2
 800405c:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800405e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004060:	0a1b      	lsrs	r3, r3, #8
 8004062:	b29b      	uxth	r3, r3
 8004064:	b2db      	uxtb	r3, r3
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800406c:	4313      	orrs	r3, r2
 800406e:	b2db      	uxtb	r3, r3
 8004070:	4619      	mov	r1, r3
 8004072:	201e      	movs	r0, #30
 8004074:	f000 fea4 	bl	8004dc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004078:	2026      	movs	r0, #38	; 0x26
 800407a:	f000 feb1 	bl	8004de0 <SX1276Read>
 800407e:	4603      	mov	r3, r0
 8004080:	b25b      	sxtb	r3, r3
 8004082:	f023 0308 	bic.w	r3, r3, #8
 8004086:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004088:	4b49      	ldr	r3, [pc, #292]	; (80041b0 <SX1276SetRxConfig+0x3bc>)
 800408a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800408e:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8004090:	b25b      	sxtb	r3, r3
 8004092:	4313      	orrs	r3, r2
 8004094:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 8004096:	b2db      	uxtb	r3, r3
 8004098:	4619      	mov	r1, r3
 800409a:	2026      	movs	r0, #38	; 0x26
 800409c:	f000 fe90 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 80040a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	4619      	mov	r1, r3
 80040a6:	201f      	movs	r0, #31
 80040a8:	f000 fe8a 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 80040ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	4619      	mov	r1, r3
 80040b6:	2020      	movs	r0, #32
 80040b8:	f000 fe82 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 80040bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	4619      	mov	r1, r3
 80040c2:	2021      	movs	r0, #33	; 0x21
 80040c4:	f000 fe7c 	bl	8004dc0 <SX1276Write>
            if( fixLen == 1 )
 80040c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <SX1276SetRxConfig+0x2e8>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 80040d0:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040d4:	4619      	mov	r1, r3
 80040d6:	2022      	movs	r0, #34	; 0x22
 80040d8:	f000 fe72 	bl	8004dc0 <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 80040dc:	4b34      	ldr	r3, [pc, #208]	; (80041b0 <SX1276SetRxConfig+0x3bc>)
 80040de:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d011      	beq.n	800410a <SX1276SetRxConfig+0x316>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80040e6:	2044      	movs	r0, #68	; 0x44
 80040e8:	f000 fe7a 	bl	8004de0 <SX1276Read>
 80040ec:	4603      	mov	r3, r0
 80040ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	4619      	mov	r1, r3
 80040f6:	2044      	movs	r0, #68	; 0x44
 80040f8:	f000 fe62 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80040fc:	4b2c      	ldr	r3, [pc, #176]	; (80041b0 <SX1276SetRxConfig+0x3bc>)
 80040fe:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8004102:	4619      	mov	r1, r3
 8004104:	2024      	movs	r0, #36	; 0x24
 8004106:	f000 fe5b 	bl	8004dc0 <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b09      	cmp	r3, #9
 800410e:	d10d      	bne.n	800412c <SX1276SetRxConfig+0x338>
 8004110:	4b27      	ldr	r3, [pc, #156]	; (80041b0 <SX1276SetRxConfig+0x3bc>)
 8004112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004114:	4a27      	ldr	r2, [pc, #156]	; (80041b4 <SX1276SetRxConfig+0x3c0>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d908      	bls.n	800412c <SX1276SetRxConfig+0x338>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800411a:	2102      	movs	r1, #2
 800411c:	2036      	movs	r0, #54	; 0x36
 800411e:	f000 fe4f 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 8004122:	2164      	movs	r1, #100	; 0x64
 8004124:	203a      	movs	r0, #58	; 0x3a
 8004126:	f000 fe4b 	bl	8004dc0 <SX1276Write>
 800412a:	e00f      	b.n	800414c <SX1276SetRxConfig+0x358>
            else if( bandwidth == 9 )
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	2b09      	cmp	r3, #9
 8004130:	d108      	bne.n	8004144 <SX1276SetRxConfig+0x350>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 8004132:	2102      	movs	r1, #2
 8004134:	2036      	movs	r0, #54	; 0x36
 8004136:	f000 fe43 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800413a:	217f      	movs	r1, #127	; 0x7f
 800413c:	203a      	movs	r0, #58	; 0x3a
 800413e:	f000 fe3f 	bl	8004dc0 <SX1276Write>
 8004142:	e003      	b.n	800414c <SX1276SetRxConfig+0x358>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 8004144:	2103      	movs	r1, #3
 8004146:	2036      	movs	r0, #54	; 0x36
 8004148:	f000 fe3a 	bl	8004dc0 <SX1276Write>
            if( datarate == 6 )
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2b06      	cmp	r3, #6
 8004150:	d114      	bne.n	800417c <SX1276SetRxConfig+0x388>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004152:	2031      	movs	r0, #49	; 0x31
 8004154:	f000 fe44 	bl	8004de0 <SX1276Read>
 8004158:	4603      	mov	r3, r0
 800415a:	b25b      	sxtb	r3, r3
 800415c:	f023 0307 	bic.w	r3, r3, #7
 8004160:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8004162:	f043 0305 	orr.w	r3, r3, #5
 8004166:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004168:	b2db      	uxtb	r3, r3
 800416a:	4619      	mov	r1, r3
 800416c:	2031      	movs	r0, #49	; 0x31
 800416e:	f000 fe27 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 8004172:	210c      	movs	r1, #12
 8004174:	2037      	movs	r0, #55	; 0x37
 8004176:	f000 fe23 	bl	8004dc0 <SX1276Write>
        break;
 800417a:	e013      	b.n	80041a4 <SX1276SetRxConfig+0x3b0>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800417c:	2031      	movs	r0, #49	; 0x31
 800417e:	f000 fe2f 	bl	8004de0 <SX1276Read>
 8004182:	4603      	mov	r3, r0
 8004184:	b25b      	sxtb	r3, r3
 8004186:	f023 0307 	bic.w	r3, r3, #7
 800418a:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800418c:	f043 0303 	orr.w	r3, r3, #3
 8004190:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004192:	b2db      	uxtb	r3, r3
 8004194:	4619      	mov	r1, r3
 8004196:	2031      	movs	r0, #49	; 0x31
 8004198:	f000 fe12 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800419c:	210a      	movs	r1, #10
 800419e:	2037      	movs	r0, #55	; 0x37
 80041a0:	f000 fe0e 	bl	8004dc0 <SX1276Write>
        break;
 80041a4:	bf00      	nop
}
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	20000378 	.word	0x20000378
 80041b4:	1f4add40 	.word	0x1f4add40

080041b8 <SX1276SetTxConfig>:
void SX1276SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60ba      	str	r2, [r7, #8]
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	4603      	mov	r3, r0
 80041c4:	73fb      	strb	r3, [r7, #15]
 80041c6:	460b      	mov	r3, r1
 80041c8:	73bb      	strb	r3, [r7, #14]
    SX1276SetModem( modem );
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fd9f 	bl	8004d10 <SX1276SetModem>

    SX1276SetRfTxPower( power );
 80041d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f002 fc0c 	bl	80069f4 <SX1276SetRfTxPower>

    switch( modem )
 80041dc:	7bfb      	ldrb	r3, [r7, #15]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <SX1276SetTxConfig+0x30>
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d07d      	beq.n	80042e2 <SX1276SetTxConfig+0x12a>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 80041e6:	e16a      	b.n	80044be <SX1276SetTxConfig+0x306>
            SX1276.Settings.Fsk.Power = power;
 80041e8:	4ab7      	ldr	r2, [pc, #732]	; (80044c8 <SX1276SetTxConfig+0x310>)
 80041ea:	7bbb      	ldrb	r3, [r7, #14]
 80041ec:	f882 304c 	strb.w	r3, [r2, #76]	; 0x4c
            SX1276.Settings.Fsk.Fdev = fdev;
 80041f0:	4ab5      	ldr	r2, [pc, #724]	; (80044c8 <SX1276SetTxConfig+0x310>)
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	6513      	str	r3, [r2, #80]	; 0x50
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 80041f6:	4ab4      	ldr	r2, [pc, #720]	; (80044c8 <SX1276SetTxConfig+0x310>)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6553      	str	r3, [r2, #84]	; 0x54
            SX1276.Settings.Fsk.Datarate = datarate;
 80041fc:	4ab2      	ldr	r2, [pc, #712]	; (80044c8 <SX1276SetTxConfig+0x310>)
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	65d3      	str	r3, [r2, #92]	; 0x5c
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 8004202:	4ab1      	ldr	r2, [pc, #708]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004204:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004206:	f8a2 3060 	strh.w	r3, [r2, #96]	; 0x60
            SX1276.Settings.Fsk.FixLen = fixLen;
 800420a:	4aaf      	ldr	r2, [pc, #700]	; (80044c8 <SX1276SetTxConfig+0x310>)
 800420c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004210:	f882 3062 	strb.w	r3, [r2, #98]	; 0x62
            SX1276.Settings.Fsk.CrcOn = crcOn;
 8004214:	4aac      	ldr	r2, [pc, #688]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004216:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800421a:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800421e:	4aaa      	ldr	r2, [pc, #680]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004220:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004224:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
            SX1276.Settings.Fsk.TxTimeout = timeout;
 8004228:	4aa7      	ldr	r2, [pc, #668]	; (80044c8 <SX1276SetTxConfig+0x310>)
 800422a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800422c:	6693      	str	r3, [r2, #104]	; 0x68
            uint32_t fdevInPllSteps = SX1276ConvertFreqInHzToPllStep( fdev );
 800422e:	68b8      	ldr	r0, [r7, #8]
 8004230:	f000 fee2 	bl	8004ff8 <SX1276ConvertFreqInHzToPllStep>
 8004234:	6178      	str	r0, [r7, #20]
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	b2db      	uxtb	r3, r3
 800423c:	4619      	mov	r1, r3
 800423e:	2004      	movs	r0, #4
 8004240:	f000 fdbe 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	b2db      	uxtb	r3, r3
 8004248:	4619      	mov	r1, r3
 800424a:	2005      	movs	r0, #5
 800424c:	f000 fdb8 	bl	8004dc0 <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 8004250:	4a9e      	ldr	r2, [pc, #632]	; (80044cc <SX1276SetTxConfig+0x314>)
 8004252:	6a3b      	ldr	r3, [r7, #32]
 8004254:	fbb2 f3f3 	udiv	r3, r2, r3
 8004258:	613b      	str	r3, [r7, #16]
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	0a1b      	lsrs	r3, r3, #8
 800425e:	b2db      	uxtb	r3, r3
 8004260:	4619      	mov	r1, r3
 8004262:	2002      	movs	r0, #2
 8004264:	f000 fdac 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	4619      	mov	r1, r3
 800426e:	2003      	movs	r0, #3
 8004270:	f000 fda6 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8004274:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004276:	0a1b      	lsrs	r3, r3, #8
 8004278:	b29b      	uxth	r3, r3
 800427a:	b2db      	uxtb	r3, r3
 800427c:	4619      	mov	r1, r3
 800427e:	2025      	movs	r0, #37	; 0x25
 8004280:	f000 fd9e 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8004284:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004286:	b2db      	uxtb	r3, r3
 8004288:	4619      	mov	r1, r3
 800428a:	2026      	movs	r0, #38	; 0x26
 800428c:	f000 fd98 	bl	8004dc0 <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 8004290:	2030      	movs	r0, #48	; 0x30
 8004292:	f000 fda5 	bl	8004de0 <SX1276Read>
 8004296:	4603      	mov	r3, r0
 8004298:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800429a:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800429e:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 80042a0:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80042a4:	2a00      	cmp	r2, #0
 80042a6:	d001      	beq.n	80042ac <SX1276SetTxConfig+0xf4>
 80042a8:	2200      	movs	r2, #0
 80042aa:	e001      	b.n	80042b0 <SX1276SetTxConfig+0xf8>
 80042ac:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80042b0:	4313      	orrs	r3, r2
 80042b2:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80042b4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80042b8:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80042ba:	b25b      	sxtb	r3, r3
 80042bc:	4313      	orrs	r3, r2
 80042be:	b25b      	sxtb	r3, r3
            SX1276Write( REG_PACKETCONFIG1,
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	4619      	mov	r1, r3
 80042c4:	2030      	movs	r0, #48	; 0x30
 80042c6:	f000 fd7b 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80042ca:	2031      	movs	r0, #49	; 0x31
 80042cc:	f000 fd88 	bl	8004de0 <SX1276Read>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	4619      	mov	r1, r3
 80042da:	2031      	movs	r0, #49	; 0x31
 80042dc:	f000 fd70 	bl	8004dc0 <SX1276Write>
        break;
 80042e0:	e0ed      	b.n	80044be <SX1276SetTxConfig+0x306>
            SX1276.Settings.LoRa.Power = power;
 80042e2:	4a79      	ldr	r2, [pc, #484]	; (80044c8 <SX1276SetTxConfig+0x310>)
 80042e4:	7bbb      	ldrb	r3, [r7, #14]
 80042e6:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
            if( bandwidth > 2 )
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d900      	bls.n	80042f2 <SX1276SetTxConfig+0x13a>
                while( 1 );
 80042f0:	e7fe      	b.n	80042f0 <SX1276SetTxConfig+0x138>
            bandwidth += 7;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	3307      	adds	r3, #7
 80042f6:	607b      	str	r3, [r7, #4]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 80042f8:	4a73      	ldr	r2, [pc, #460]	; (80044c8 <SX1276SetTxConfig+0x310>)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
            SX1276.Settings.LoRa.Datarate = datarate;
 8004300:	4a71      	ldr	r2, [pc, #452]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
            SX1276.Settings.LoRa.Coderate = coderate;
 8004308:	4a6f      	ldr	r2, [pc, #444]	; (80044c8 <SX1276SetTxConfig+0x310>)
 800430a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800430e:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 8004312:	4a6d      	ldr	r2, [pc, #436]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004314:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004316:	f8a2 308e 	strh.w	r3, [r2, #142]	; 0x8e
            SX1276.Settings.LoRa.FixLen = fixLen;
 800431a:	4a6b      	ldr	r2, [pc, #428]	; (80044c8 <SX1276SetTxConfig+0x310>)
 800431c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004320:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 8004324:	4a68      	ldr	r2, [pc, #416]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004326:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800432a:	f882 3093 	strb.w	r3, [r2, #147]	; 0x93
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800432e:	4a66      	ldr	r2, [pc, #408]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004330:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8004334:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1276.Settings.LoRa.CrcOn = crcOn;
 8004338:	4a63      	ldr	r2, [pc, #396]	; (80044c8 <SX1276SetTxConfig+0x310>)
 800433a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800433e:	f882 3092 	strb.w	r3, [r2, #146]	; 0x92
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 8004342:	4a61      	ldr	r2, [pc, #388]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004344:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8004348:	f882 3095 	strb.w	r3, [r2, #149]	; 0x95
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800434c:	4a5e      	ldr	r2, [pc, #376]	; (80044c8 <SX1276SetTxConfig+0x310>)
 800434e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004350:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
            if( datarate > 12 )
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b0c      	cmp	r3, #12
 8004358:	d902      	bls.n	8004360 <SX1276SetTxConfig+0x1a8>
                datarate = 12;
 800435a:	230c      	movs	r3, #12
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	e004      	b.n	800436a <SX1276SetTxConfig+0x1b2>
            else if( datarate < 6 )
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	2b05      	cmp	r3, #5
 8004364:	d801      	bhi.n	800436a <SX1276SetTxConfig+0x1b2>
                datarate = 6;
 8004366:	2306      	movs	r3, #6
 8004368:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b07      	cmp	r3, #7
 800436e:	d105      	bne.n	800437c <SX1276SetTxConfig+0x1c4>
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	2b0b      	cmp	r3, #11
 8004374:	d008      	beq.n	8004388 <SX1276SetTxConfig+0x1d0>
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	2b0c      	cmp	r3, #12
 800437a:	d005      	beq.n	8004388 <SX1276SetTxConfig+0x1d0>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b08      	cmp	r3, #8
 8004380:	d107      	bne.n	8004392 <SX1276SetTxConfig+0x1da>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	2b0c      	cmp	r3, #12
 8004386:	d104      	bne.n	8004392 <SX1276SetTxConfig+0x1da>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x01;
 8004388:	4b4f      	ldr	r3, [pc, #316]	; (80044c8 <SX1276SetTxConfig+0x310>)
 800438a:	2201      	movs	r2, #1
 800438c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8004390:	e003      	b.n	800439a <SX1276SetTxConfig+0x1e2>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 8004392:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004394:	2200      	movs	r2, #0
 8004396:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800439a:	4b4b      	ldr	r3, [pc, #300]	; (80044c8 <SX1276SetTxConfig+0x310>)
 800439c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d011      	beq.n	80043c8 <SX1276SetTxConfig+0x210>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 80043a4:	2044      	movs	r0, #68	; 0x44
 80043a6:	f000 fd1b 	bl	8004de0 <SX1276Read>
 80043aa:	4603      	mov	r3, r0
 80043ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	4619      	mov	r1, r3
 80043b4:	2044      	movs	r0, #68	; 0x44
 80043b6:	f000 fd03 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 80043ba:	4b43      	ldr	r3, [pc, #268]	; (80044c8 <SX1276SetTxConfig+0x310>)
 80043bc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80043c0:	4619      	mov	r1, r3
 80043c2:	2024      	movs	r0, #36	; 0x24
 80043c4:	f000 fcfc 	bl	8004dc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 80043c8:	201d      	movs	r0, #29
 80043ca:	f000 fd09 	bl	8004de0 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043da:	005b      	lsls	r3, r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	4313      	orrs	r3, r2
 80043e0:	b2da      	uxtb	r2, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80043e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 80043e6:	4313      	orrs	r3, r2
 80043e8:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 80043ea:	4619      	mov	r1, r3
 80043ec:	201d      	movs	r0, #29
 80043ee:	f000 fce7 	bl	8004dc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 80043f2:	201e      	movs	r0, #30
 80043f4:	f000 fcf4 	bl	8004de0 <SX1276Read>
 80043f8:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 80043fa:	f003 030b 	and.w	r3, r3, #11
 80043fe:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 8004400:	6a3b      	ldr	r3, [r7, #32]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	011b      	lsls	r3, r3, #4
 8004406:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK ) |
 8004408:	4313      	orrs	r3, r2
 800440a:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800440c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	b2db      	uxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 8004414:	4313      	orrs	r3, r2
 8004416:	b2db      	uxtb	r3, r3
 8004418:	4619      	mov	r1, r3
 800441a:	201e      	movs	r0, #30
 800441c:	f000 fcd0 	bl	8004dc0 <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 8004420:	2026      	movs	r0, #38	; 0x26
 8004422:	f000 fcdd 	bl	8004de0 <SX1276Read>
 8004426:	4603      	mov	r3, r0
 8004428:	b25b      	sxtb	r3, r3
 800442a:	f023 0308 	bic.w	r3, r3, #8
 800442e:	b25a      	sxtb	r2, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 8004430:	4b25      	ldr	r3, [pc, #148]	; (80044c8 <SX1276SetTxConfig+0x310>)
 8004432:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8004436:	00db      	lsls	r3, r3, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 8004438:	b25b      	sxtb	r3, r3
 800443a:	4313      	orrs	r3, r2
 800443c:	b25b      	sxtb	r3, r3
            SX1276Write( REG_LR_MODEMCONFIG3,
 800443e:	b2db      	uxtb	r3, r3
 8004440:	4619      	mov	r1, r3
 8004442:	2026      	movs	r0, #38	; 0x26
 8004444:	f000 fcbc 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8004448:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	b29b      	uxth	r3, r3
 800444e:	b2db      	uxtb	r3, r3
 8004450:	4619      	mov	r1, r3
 8004452:	2020      	movs	r0, #32
 8004454:	f000 fcb4 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8004458:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800445a:	b2db      	uxtb	r3, r3
 800445c:	4619      	mov	r1, r3
 800445e:	2021      	movs	r0, #33	; 0x21
 8004460:	f000 fcae 	bl	8004dc0 <SX1276Write>
            if( datarate == 6 )
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d114      	bne.n	8004494 <SX1276SetTxConfig+0x2dc>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800446a:	2031      	movs	r0, #49	; 0x31
 800446c:	f000 fcb8 	bl	8004de0 <SX1276Read>
 8004470:	4603      	mov	r3, r0
 8004472:	b25b      	sxtb	r3, r3
 8004474:	f023 0307 	bic.w	r3, r3, #7
 8004478:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800447a:	f043 0305 	orr.w	r3, r3, #5
 800447e:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 8004480:	b2db      	uxtb	r3, r3
 8004482:	4619      	mov	r1, r3
 8004484:	2031      	movs	r0, #49	; 0x31
 8004486:	f000 fc9b 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800448a:	210c      	movs	r1, #12
 800448c:	2037      	movs	r0, #55	; 0x37
 800448e:	f000 fc97 	bl	8004dc0 <SX1276Write>
        break;
 8004492:	e013      	b.n	80044bc <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 8004494:	2031      	movs	r0, #49	; 0x31
 8004496:	f000 fca3 	bl	8004de0 <SX1276Read>
 800449a:	4603      	mov	r3, r0
 800449c:	b25b      	sxtb	r3, r3
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80044a4:	f043 0303 	orr.w	r3, r3, #3
 80044a8:	b25b      	sxtb	r3, r3
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 80044aa:	b2db      	uxtb	r3, r3
 80044ac:	4619      	mov	r1, r3
 80044ae:	2031      	movs	r0, #49	; 0x31
 80044b0:	f000 fc86 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 80044b4:	210a      	movs	r1, #10
 80044b6:	2037      	movs	r0, #55	; 0x37
 80044b8:	f000 fc82 	bl	8004dc0 <SX1276Write>
        break;
 80044bc:	bf00      	nop
}
 80044be:	bf00      	nop
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
 80044c6:	bf00      	nop
 80044c8:	20000378 	.word	0x20000378
 80044cc:	01e84800 	.word	0x01e84800

080044d0 <SX1276GetTimeOnAir>:

uint32_t SX1276GetTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08a      	sub	sp, #40	; 0x28
 80044d4:	af04      	add	r7, sp, #16
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
 80044da:	461a      	mov	r2, r3
 80044dc:	4603      	mov	r3, r0
 80044de:	73fb      	strb	r3, [r7, #15]
 80044e0:	4613      	mov	r3, r2
 80044e2:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 80044e8:	2301      	movs	r3, #1
 80044ea:	613b      	str	r3, [r7, #16]

    switch( modem )
 80044ec:	7bfb      	ldrb	r3, [r7, #15]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <SX1276GetTimeOnAir+0x28>
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d012      	beq.n	800451c <SX1276GetTimeOnAir+0x4c>
 80044f6:	e02c      	b.n	8004552 <SX1276GetTimeOnAir+0x82>
    {
    case MODEM_FSK:
        {
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 80044f8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80044fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8004500:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8004504:	8c38      	ldrh	r0, [r7, #32]
 8004506:	f000 fdef 	bl	80050e8 <SX1276GetGfskTimeOnAirNumerator>
 800450a:	4603      	mov	r3, r0
 800450c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004510:	fb02 f303 	mul.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	613b      	str	r3, [r7, #16]
        }
        break;
 800451a:	e01a      	b.n	8004552 <SX1276GetTimeOnAir+0x82>
    case MODEM_LORA:
        {
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800451c:	8c39      	ldrh	r1, [r7, #32]
 800451e:	7bba      	ldrb	r2, [r7, #14]
 8004520:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8004524:	9302      	str	r3, [sp, #8]
 8004526:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800452a:	9301      	str	r3, [sp, #4]
 800452c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	460b      	mov	r3, r1
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	68b8      	ldr	r0, [r7, #8]
 8004538:	f000 fe05 	bl	8005146 <SX1276GetLoRaTimeOnAirNumerator>
 800453c:	4603      	mov	r3, r0
 800453e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	617b      	str	r3, [r7, #20]
                                                                   payloadLen, crcOn );
            denominator = SX1276GetLoRaBandwidthInHz( bandwidth );
 8004548:	68b8      	ldr	r0, [r7, #8]
 800454a:	f000 fda5 	bl	8005098 <SX1276GetLoRaBandwidthInHz>
 800454e:	6138      	str	r0, [r7, #16]
        }
        break;
 8004550:	bf00      	nop
    }
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	1e5a      	subs	r2, r3, #1
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <SX1276Send>:

void SX1276Send( uint8_t *buffer, uint8_t size )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]

    switch( SX1276.Settings.Modem )
 8004578:	4b54      	ldr	r3, [pc, #336]	; (80046cc <SX1276Send+0x164>)
 800457a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800457e:	2b00      	cmp	r3, #0
 8004580:	d002      	beq.n	8004588 <SX1276Send+0x20>
 8004582:	2b01      	cmp	r3, #1
 8004584:	d049      	beq.n	800461a <SX1276Send+0xb2>
 8004586:	e099      	b.n	80046bc <SX1276Send+0x154>
    {
    case MODEM_FSK:
        {
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 8004588:	4b50      	ldr	r3, [pc, #320]	; (80046cc <SX1276Send+0x164>)
 800458a:	2200      	movs	r2, #0
 800458c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = size;
 8004590:	78fb      	ldrb	r3, [r7, #3]
 8004592:	b29a      	uxth	r2, r3
 8004594:	4b4d      	ldr	r3, [pc, #308]	; (80046cc <SX1276Send+0x164>)
 8004596:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

            if( SX1276.Settings.Fsk.FixLen == false )
 800459a:	4b4c      	ldr	r3, [pc, #304]	; (80046cc <SX1276Send+0x164>)
 800459c:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80045a0:	f083 0301 	eor.w	r3, r3, #1
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d005      	beq.n	80045b6 <SX1276Send+0x4e>
            {
                SX1276WriteFifo( ( uint8_t* )&size, 1 );
 80045aa:	1cfb      	adds	r3, r7, #3
 80045ac:	2101      	movs	r1, #1
 80045ae:	4618      	mov	r0, r3
 80045b0:	f000 fc90 	bl	8004ed4 <SX1276WriteFifo>
 80045b4:	e004      	b.n	80045c0 <SX1276Send+0x58>
            }
            else
            {
                SX1276Write( REG_PAYLOADLENGTH, size );
 80045b6:	78fb      	ldrb	r3, [r7, #3]
 80045b8:	4619      	mov	r1, r3
 80045ba:	2032      	movs	r0, #50	; 0x32
 80045bc:	f000 fc00 	bl	8004dc0 <SX1276Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d007      	beq.n	80045d6 <SX1276Send+0x6e>
 80045c6:	78fb      	ldrb	r3, [r7, #3]
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d804      	bhi.n	80045d6 <SX1276Send+0x6e>
            {
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 80045cc:	78fa      	ldrb	r2, [r7, #3]
 80045ce:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <SX1276Send+0x164>)
 80045d0:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
 80045d4:	e00a      	b.n	80045ec <SX1276Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	b29b      	uxth	r3, r3
 80045da:	461a      	mov	r2, r3
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	483c      	ldr	r0, [pc, #240]	; (80046d0 <SX1276Send+0x168>)
 80045e0:	f002 fdac 	bl	800713c <memcpy1>
                SX1276.Settings.FskPacketHandler.ChunkSize = 32;
 80045e4:	4b39      	ldr	r3, [pc, #228]	; (80046cc <SX1276Send+0x164>)
 80045e6:	2220      	movs	r2, #32
 80045e8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
            }

            // Write payload buffer
            SX1276WriteFifo( buffer, SX1276.Settings.FskPacketHandler.ChunkSize );
 80045ec:	4b37      	ldr	r3, [pc, #220]	; (80046cc <SX1276Send+0x164>)
 80045ee:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80045f2:	4619      	mov	r1, r3
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fc6d 	bl	8004ed4 <SX1276WriteFifo>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 80045fa:	4b34      	ldr	r3, [pc, #208]	; (80046cc <SX1276Send+0x164>)
 80045fc:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8004600:	4b32      	ldr	r3, [pc, #200]	; (80046cc <SX1276Send+0x164>)
 8004602:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8004606:	b29b      	uxth	r3, r3
 8004608:	4413      	add	r3, r2
 800460a:	b29a      	uxth	r2, r3
 800460c:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <SX1276Send+0x164>)
 800460e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 8004612:	4b2e      	ldr	r3, [pc, #184]	; (80046cc <SX1276Send+0x164>)
 8004614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004616:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004618:	e050      	b.n	80046bc <SX1276Send+0x154>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 800461a:	4b2c      	ldr	r3, [pc, #176]	; (80046cc <SX1276Send+0x164>)
 800461c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00f      	beq.n	8004644 <SX1276Send+0xdc>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 8004624:	2033      	movs	r0, #51	; 0x33
 8004626:	f000 fbdb 	bl	8004de0 <SX1276Read>
 800462a:	4603      	mov	r3, r0
 800462c:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8004630:	b2db      	uxtb	r3, r3
 8004632:	4619      	mov	r1, r3
 8004634:	2033      	movs	r0, #51	; 0x33
 8004636:	f000 fbc3 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800463a:	2119      	movs	r1, #25
 800463c:	203b      	movs	r0, #59	; 0x3b
 800463e:	f000 fbbf 	bl	8004dc0 <SX1276Write>
 8004642:	e013      	b.n	800466c <SX1276Send+0x104>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004644:	2033      	movs	r0, #51	; 0x33
 8004646:	f000 fbcb 	bl	8004de0 <SX1276Read>
 800464a:	4603      	mov	r3, r0
 800464c:	b25b      	sxtb	r3, r3
 800464e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8004652:	b25b      	sxtb	r3, r3
 8004654:	f043 0301 	orr.w	r3, r3, #1
 8004658:	b25b      	sxtb	r3, r3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	4619      	mov	r1, r3
 800465e:	2033      	movs	r0, #51	; 0x33
 8004660:	f000 fbae 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004664:	211d      	movs	r1, #29
 8004666:	203b      	movs	r0, #59	; 0x3b
 8004668:	f000 fbaa 	bl	8004dc0 <SX1276Write>
            }

            SX1276.Settings.LoRaPacketHandler.Size = size;
 800466c:	78fa      	ldrb	r2, [r7, #3]
 800466e:	4b17      	ldr	r3, [pc, #92]	; (80046cc <SX1276Send+0x164>)
 8004670:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

            // Initializes the payload size
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	4619      	mov	r1, r3
 8004678:	2022      	movs	r0, #34	; 0x22
 800467a:	f000 fba1 	bl	8004dc0 <SX1276Write>

            // Full buffer used for Tx
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800467e:	2100      	movs	r1, #0
 8004680:	200e      	movs	r0, #14
 8004682:	f000 fb9d 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 8004686:	2100      	movs	r1, #0
 8004688:	200d      	movs	r0, #13
 800468a:	f000 fb99 	bl	8004dc0 <SX1276Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800468e:	2001      	movs	r0, #1
 8004690:	f000 fba6 	bl	8004de0 <SX1276Read>
 8004694:	4603      	mov	r3, r0
 8004696:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d104      	bne.n	80046a8 <SX1276Send+0x140>
            {
                SX1276SetStby( );
 800469e:	f000 f839 	bl	8004714 <SX1276SetStby>
                DelayMs( 1 );
 80046a2:	2001      	movs	r0, #1
 80046a4:	f001 faf4 	bl	8005c90 <DelayMs>
            }
            // Write payload buffer
            SX1276WriteFifo( buffer, size );
 80046a8:	78fb      	ldrb	r3, [r7, #3]
 80046aa:	4619      	mov	r1, r3
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fc11 	bl	8004ed4 <SX1276WriteFifo>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 80046b2:	4b06      	ldr	r3, [pc, #24]	; (80046cc <SX1276Send+0x164>)
 80046b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046b8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80046ba:	bf00      	nop
    }

    SX1276SetTx( txTimeout );
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f9cb 	bl	8004a58 <SX1276SetTx>
}
 80046c2:	bf00      	nop
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	20000378 	.word	0x20000378
 80046d0:	200000cc 	.word	0x200000cc

080046d4 <SX1276SetSleep>:

void SX1276SetSleep( void )
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 80046d8:	480a      	ldr	r0, [pc, #40]	; (8004704 <SX1276SetSleep+0x30>)
 80046da:	f002 fc2b 	bl	8006f34 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 80046de:	480a      	ldr	r0, [pc, #40]	; (8004708 <SX1276SetSleep+0x34>)
 80046e0:	f002 fc28 	bl	8006f34 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 80046e4:	4809      	ldr	r0, [pc, #36]	; (800470c <SX1276SetSleep+0x38>)
 80046e6:	f002 fc25 	bl	8006f34 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_SLEEP );
 80046ea:	2000      	movs	r0, #0
 80046ec:	f000 fae4 	bl	8004cb8 <SX1276SetOpMode>

    // Disable TCXO radio is in SLEEP mode
    SX1276SetBoardTcxo( false );
 80046f0:	2000      	movs	r0, #0
 80046f2:	f002 f94d 	bl	8006990 <SX1276SetBoardTcxo>

    SX1276.Settings.State = RF_IDLE;
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <SX1276SetSleep+0x3c>)
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000420 	.word	0x20000420
 8004708:	20000348 	.word	0x20000348
 800470c:	20000360 	.word	0x20000360
 8004710:	20000378 	.word	0x20000378

08004714 <SX1276SetStby>:

void SX1276SetStby( void )
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8004718:	4808      	ldr	r0, [pc, #32]	; (800473c <SX1276SetStby+0x28>)
 800471a:	f002 fc0b 	bl	8006f34 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 800471e:	4808      	ldr	r0, [pc, #32]	; (8004740 <SX1276SetStby+0x2c>)
 8004720:	f002 fc08 	bl	8006f34 <TimerStop>
    TimerStop( &RxTimeoutSyncWord );
 8004724:	4807      	ldr	r0, [pc, #28]	; (8004744 <SX1276SetStby+0x30>)
 8004726:	f002 fc05 	bl	8006f34 <TimerStop>

    SX1276SetOpMode( RF_OPMODE_STANDBY );
 800472a:	2001      	movs	r0, #1
 800472c:	f000 fac4 	bl	8004cb8 <SX1276SetOpMode>
    SX1276.Settings.State = RF_IDLE;
 8004730:	4b05      	ldr	r3, [pc, #20]	; (8004748 <SX1276SetStby+0x34>)
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
 8004738:	bf00      	nop
 800473a:	bd80      	pop	{r7, pc}
 800473c:	20000420 	.word	0x20000420
 8004740:	20000348 	.word	0x20000348
 8004744:	20000360 	.word	0x20000360
 8004748:	20000378 	.word	0x20000378

0800474c <SX1276SetRx>:

void SX1276SetRx( uint32_t timeout )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8004754:	2300      	movs	r3, #0
 8004756:	73fb      	strb	r3, [r7, #15]
    TimerStop( &TxTimeoutTimer );
 8004758:	48ba      	ldr	r0, [pc, #744]	; (8004a44 <SX1276SetRx+0x2f8>)
 800475a:	f002 fbeb 	bl	8006f34 <TimerStop>

    switch( SX1276.Settings.Modem )
 800475e:	4bba      	ldr	r3, [pc, #744]	; (8004a48 <SX1276SetRx+0x2fc>)
 8004760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004764:	2b00      	cmp	r3, #0
 8004766:	d002      	beq.n	800476e <SX1276SetRx+0x22>
 8004768:	2b01      	cmp	r3, #1
 800476a:	d03e      	beq.n	80047ea <SX1276SetRx+0x9e>
 800476c:	e12f      	b.n	80049ce <SX1276SetRx+0x282>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800476e:	4bb6      	ldr	r3, [pc, #728]	; (8004a48 <SX1276SetRx+0x2fc>)
 8004770:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8004774:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004776:	2040      	movs	r0, #64	; 0x40
 8004778:	f000 fb32 	bl	8004de0 <SX1276Read>
 800477c:	4603      	mov	r3, r0
 800477e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 8004786:	f043 030c 	orr.w	r3, r3, #12
 800478a:	b25b      	sxtb	r3, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800478c:	b2db      	uxtb	r3, r3
 800478e:	4619      	mov	r1, r3
 8004790:	2040      	movs	r0, #64	; 0x40
 8004792:	f000 fb15 	bl	8004dc0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004796:	2041      	movs	r0, #65	; 0x41
 8004798:	f000 fb22 	bl	8004de0 <SX1276Read>
 800479c:	4603      	mov	r3, r0
 800479e:	f063 033e 	orn	r3, r3, #62	; 0x3e
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	4619      	mov	r1, r3
 80047a6:	2041      	movs	r0, #65	; 0x41
 80047a8:	f000 fb0a 	bl	8004dc0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 80047ac:	2035      	movs	r0, #53	; 0x35
 80047ae:	f000 fb17 	bl	8004de0 <SX1276Read>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	4ba3      	ldr	r3, [pc, #652]	; (8004a48 <SX1276SetRx+0x2fc>)
 80047bc:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e

            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80047c0:	211e      	movs	r1, #30
 80047c2:	200d      	movs	r0, #13
 80047c4:	f000 fafc 	bl	8004dc0 <SX1276Write>

            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 80047c8:	4b9f      	ldr	r3, [pc, #636]	; (8004a48 <SX1276SetRx+0x2fc>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 80047d0:	4b9d      	ldr	r3, [pc, #628]	; (8004a48 <SX1276SetRx+0x2fc>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 80047d8:	4b9b      	ldr	r3, [pc, #620]	; (8004a48 <SX1276SetRx+0x2fc>)
 80047da:	2200      	movs	r2, #0
 80047dc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 80047e0:	4b99      	ldr	r3, [pc, #612]	; (8004a48 <SX1276SetRx+0x2fc>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
        }
        break;
 80047e8:	e0f1      	b.n	80049ce <SX1276SetRx+0x282>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.IqInverted == true )
 80047ea:	4b97      	ldr	r3, [pc, #604]	; (8004a48 <SX1276SetRx+0x2fc>)
 80047ec:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00f      	beq.n	8004814 <SX1276SetRx+0xc8>
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 80047f4:	2033      	movs	r0, #51	; 0x33
 80047f6:	f000 faf3 	bl	8004de0 <SX1276Read>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 8004800:	b2db      	uxtb	r3, r3
 8004802:	4619      	mov	r1, r3
 8004804:	2033      	movs	r0, #51	; 0x33
 8004806:	f000 fadb 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800480a:	2119      	movs	r1, #25
 800480c:	203b      	movs	r0, #59	; 0x3b
 800480e:	f000 fad7 	bl	8004dc0 <SX1276Write>
 8004812:	e013      	b.n	800483c <SX1276SetRx+0xf0>
            }
            else
            {
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 8004814:	2033      	movs	r0, #51	; 0x33
 8004816:	f000 fae3 	bl	8004de0 <SX1276Read>
 800481a:	4603      	mov	r3, r0
 800481c:	b25b      	sxtb	r3, r3
 800481e:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 8004822:	b25b      	sxtb	r3, r3
 8004824:	f043 0301 	orr.w	r3, r3, #1
 8004828:	b25b      	sxtb	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	4619      	mov	r1, r3
 800482e:	2033      	movs	r0, #51	; 0x33
 8004830:	f000 fac6 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 8004834:	211d      	movs	r1, #29
 8004836:	203b      	movs	r0, #59	; 0x3b
 8004838:	f000 fac2 	bl	8004dc0 <SX1276Write>
            }

            // ERRATA 2.3 - Receiver Spurious Reception of a LoRa Signal
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800483c:	4b82      	ldr	r3, [pc, #520]	; (8004a48 <SX1276SetRx+0x2fc>)
 800483e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004842:	2b08      	cmp	r3, #8
 8004844:	f200 8087 	bhi.w	8004956 <SX1276SetRx+0x20a>
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 8004848:	2031      	movs	r0, #49	; 0x31
 800484a:	f000 fac9 	bl	8004de0 <SX1276Read>
 800484e:	4603      	mov	r3, r0
 8004850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004854:	b2db      	uxtb	r3, r3
 8004856:	4619      	mov	r1, r3
 8004858:	2031      	movs	r0, #49	; 0x31
 800485a:	f000 fab1 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800485e:	2100      	movs	r1, #0
 8004860:	2030      	movs	r0, #48	; 0x30
 8004862:	f000 faad 	bl	8004dc0 <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 8004866:	4b78      	ldr	r3, [pc, #480]	; (8004a48 <SX1276SetRx+0x2fc>)
 8004868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800486c:	2b08      	cmp	r3, #8
 800486e:	d87d      	bhi.n	800496c <SX1276SetRx+0x220>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <SX1276SetRx+0x12c>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	0800489d 	.word	0x0800489d
 800487c:	080048b7 	.word	0x080048b7
 8004880:	080048d1 	.word	0x080048d1
 8004884:	080048eb 	.word	0x080048eb
 8004888:	08004905 	.word	0x08004905
 800488c:	0800491f 	.word	0x0800491f
 8004890:	08004939 	.word	0x08004939
 8004894:	08004943 	.word	0x08004943
 8004898:	0800494d 	.word	0x0800494d
                {
                case 0: // 7.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800489c:	2148      	movs	r1, #72	; 0x48
 800489e:	202f      	movs	r0, #47	; 0x2f
 80048a0:	f000 fa8e 	bl	8004dc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 80048a4:	4b68      	ldr	r3, [pc, #416]	; (8004a48 <SX1276SetRx+0x2fc>)
 80048a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a8:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 80048ac:	3302      	adds	r3, #2
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff f9a6 	bl	8003c00 <SX1276SetChannel>
                    break;
 80048b4:	e05a      	b.n	800496c <SX1276SetRx+0x220>
                case 1: // 10.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80048b6:	2144      	movs	r1, #68	; 0x44
 80048b8:	202f      	movs	r0, #47	; 0x2f
 80048ba:	f000 fa81 	bl	8004dc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 80048be:	4b62      	ldr	r3, [pc, #392]	; (8004a48 <SX1276SetRx+0x2fc>)
 80048c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048c2:	f503 5322 	add.w	r3, r3, #10368	; 0x2880
 80048c6:	3334      	adds	r3, #52	; 0x34
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff f999 	bl	8003c00 <SX1276SetChannel>
                    break;
 80048ce:	e04d      	b.n	800496c <SX1276SetRx+0x220>
                case 2: // 15.6 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80048d0:	2144      	movs	r1, #68	; 0x44
 80048d2:	202f      	movs	r0, #47	; 0x2f
 80048d4:	f000 fa74 	bl	8004dc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 80048d8:	4b5b      	ldr	r3, [pc, #364]	; (8004a48 <SX1276SetRx+0x2fc>)
 80048da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048dc:	f503 5374 	add.w	r3, r3, #15616	; 0x3d00
 80048e0:	3304      	adds	r3, #4
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff f98c 	bl	8003c00 <SX1276SetChannel>
                    break;
 80048e8:	e040      	b.n	800496c <SX1276SetRx+0x220>
                case 3: // 20.8 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 80048ea:	2144      	movs	r1, #68	; 0x44
 80048ec:	202f      	movs	r0, #47	; 0x2f
 80048ee:	f000 fa67 	bl	8004dc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 80048f2:	4b55      	ldr	r3, [pc, #340]	; (8004a48 <SX1276SetRx+0x2fc>)
 80048f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048f6:	f503 43a2 	add.w	r3, r3, #20736	; 0x5100
 80048fa:	335e      	adds	r3, #94	; 0x5e
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff f97f 	bl	8003c00 <SX1276SetChannel>
                    break;
 8004902:	e033      	b.n	800496c <SX1276SetRx+0x220>
                case 4: // 31.2 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 8004904:	2144      	movs	r1, #68	; 0x44
 8004906:	202f      	movs	r0, #47	; 0x2f
 8004908:	f000 fa5a 	bl	8004dc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800490c:	4b4e      	ldr	r3, [pc, #312]	; (8004a48 <SX1276SetRx+0x2fc>)
 800490e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004910:	f503 43f4 	add.w	r3, r3, #31232	; 0x7a00
 8004914:	3312      	adds	r3, #18
 8004916:	4618      	mov	r0, r3
 8004918:	f7ff f972 	bl	8003c00 <SX1276SetChannel>
                    break;
 800491c:	e026      	b.n	800496c <SX1276SetRx+0x220>
                case 5: // 41.4 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800491e:	2144      	movs	r1, #68	; 0x44
 8004920:	202f      	movs	r0, #47	; 0x2f
 8004922:	f000 fa4d 	bl	8004dc0 <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 8004926:	4b48      	ldr	r3, [pc, #288]	; (8004a48 <SX1276SetRx+0x2fc>)
 8004928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492a:	f503 4322 	add.w	r3, r3, #41472	; 0xa200
 800492e:	33c6      	adds	r3, #198	; 0xc6
 8004930:	4618      	mov	r0, r3
 8004932:	f7ff f965 	bl	8003c00 <SX1276SetChannel>
                    break;
 8004936:	e019      	b.n	800496c <SX1276SetRx+0x220>
                case 6: // 62.5 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004938:	2140      	movs	r1, #64	; 0x40
 800493a:	202f      	movs	r0, #47	; 0x2f
 800493c:	f000 fa40 	bl	8004dc0 <SX1276Write>
                    break;
 8004940:	e014      	b.n	800496c <SX1276SetRx+0x220>
                case 7: // 125 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 8004942:	2140      	movs	r1, #64	; 0x40
 8004944:	202f      	movs	r0, #47	; 0x2f
 8004946:	f000 fa3b 	bl	8004dc0 <SX1276Write>
                    break;
 800494a:	e00f      	b.n	800496c <SX1276SetRx+0x220>
                case 8: // 250 kHz
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800494c:	2140      	movs	r1, #64	; 0x40
 800494e:	202f      	movs	r0, #47	; 0x2f
 8004950:	f000 fa36 	bl	8004dc0 <SX1276Write>
                    break;
 8004954:	e00a      	b.n	800496c <SX1276SetRx+0x220>
                }
            }
            else
            {
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 8004956:	2031      	movs	r0, #49	; 0x31
 8004958:	f000 fa42 	bl	8004de0 <SX1276Read>
 800495c:	4603      	mov	r3, r0
 800495e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004962:	b2db      	uxtb	r3, r3
 8004964:	4619      	mov	r1, r3
 8004966:	2031      	movs	r0, #49	; 0x31
 8004968:	f000 fa2a 	bl	8004dc0 <SX1276Write>
            }

            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <SX1276SetRx+0x2fc>)
 800496e:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8004972:	73fb      	strb	r3, [r7, #15]

            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004974:	4b34      	ldr	r3, [pc, #208]	; (8004a48 <SX1276SetRx+0x2fc>)
 8004976:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00f      	beq.n	800499e <SX1276SetRx+0x252>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800497e:	211d      	movs	r1, #29
 8004980:	2011      	movs	r0, #17
 8004982:	f000 fa1d 	bl	8004dc0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8004986:	2040      	movs	r0, #64	; 0x40
 8004988:	f000 fa2a 	bl	8004de0 <SX1276Read>
 800498c:	4603      	mov	r3, r0
 800498e:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004992:	b2db      	uxtb	r3, r3
 8004994:	4619      	mov	r1, r3
 8004996:	2040      	movs	r0, #64	; 0x40
 8004998:	f000 fa12 	bl	8004dc0 <SX1276Write>
 800499c:	e00e      	b.n	80049bc <SX1276SetRx+0x270>
            }
            else
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800499e:	211f      	movs	r1, #31
 80049a0:	2011      	movs	r0, #17
 80049a2:	f000 fa0d 	bl	8004dc0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80049a6:	2040      	movs	r0, #64	; 0x40
 80049a8:	f000 fa1a 	bl	8004de0 <SX1276Read>
 80049ac:	4603      	mov	r3, r0
 80049ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	4619      	mov	r1, r3
 80049b6:	2040      	movs	r0, #64	; 0x40
 80049b8:	f000 fa02 	bl	8004dc0 <SX1276Write>
            }
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 80049bc:	2100      	movs	r1, #0
 80049be:	200f      	movs	r0, #15
 80049c0:	f000 f9fe 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 80049c4:	2100      	movs	r1, #0
 80049c6:	200d      	movs	r0, #13
 80049c8:	f000 f9fa 	bl	8004dc0 <SX1276Write>
        }
        break;
 80049cc:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 80049ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049d2:	2100      	movs	r1, #0
 80049d4:	481d      	ldr	r0, [pc, #116]	; (8004a4c <SX1276SetRx+0x300>)
 80049d6:	f002 fc05 	bl	80071e4 <memset>

    SX1276.Settings.State = RF_RX_RUNNING;
 80049da:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <SX1276SetRx+0x2fc>)
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if( timeout != 0 )
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d006      	beq.n	80049f6 <SX1276SetRx+0x2aa>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4819      	ldr	r0, [pc, #100]	; (8004a50 <SX1276SetRx+0x304>)
 80049ec:	f002 fb38 	bl	8007060 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80049f0:	4817      	ldr	r0, [pc, #92]	; (8004a50 <SX1276SetRx+0x304>)
 80049f2:	f002 f97f 	bl	8006cf4 <TimerStart>
    }

    if( SX1276.Settings.Modem == MODEM_FSK )
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <SX1276SetRx+0x2fc>)
 80049f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d112      	bne.n	8004a26 <SX1276SetRx+0x2da>
    {
        SX1276SetOpMode( RF_OPMODE_RECEIVER ); // ??
 8004a00:	2005      	movs	r0, #5
 8004a02:	f000 f959 	bl	8004cb8 <SX1276SetOpMode>

        if( rxContinuous == false )
 8004a06:	7bfb      	ldrb	r3, [r7, #15]
 8004a08:	f083 0301 	eor.w	r3, r3, #1
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d013      	beq.n	8004a3a <SX1276SetRx+0x2ee>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <SX1276SetRx+0x2fc>)
 8004a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a16:	4619      	mov	r1, r3
 8004a18:	480e      	ldr	r0, [pc, #56]	; (8004a54 <SX1276SetRx+0x308>)
 8004a1a:	f002 fb21 	bl	8007060 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 8004a1e:	480d      	ldr	r0, [pc, #52]	; (8004a54 <SX1276SetRx+0x308>)
 8004a20:	f002 f968 	bl	8006cf4 <TimerStart>
        else
        {
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8004a24:	e009      	b.n	8004a3a <SX1276SetRx+0x2ee>
        if( rxContinuous == true )
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d003      	beq.n	8004a34 <SX1276SetRx+0x2e8>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER );
 8004a2c:	2005      	movs	r0, #5
 8004a2e:	f000 f943 	bl	8004cb8 <SX1276SetOpMode>
}
 8004a32:	e002      	b.n	8004a3a <SX1276SetRx+0x2ee>
            SX1276SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8004a34:	2006      	movs	r0, #6
 8004a36:	f000 f93f 	bl	8004cb8 <SX1276SetOpMode>
}
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000348 	.word	0x20000348
 8004a48:	20000378 	.word	0x20000378
 8004a4c:	200000cc 	.word	0x200000cc
 8004a50:	20000420 	.word	0x20000420
 8004a54:	20000360 	.word	0x20000360

08004a58 <SX1276SetTx>:

static void SX1276SetTx( uint32_t timeout )
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
    TimerStop( &RxTimeoutTimer );
 8004a60:	4836      	ldr	r0, [pc, #216]	; (8004b3c <SX1276SetTx+0xe4>)
 8004a62:	f002 fa67 	bl	8006f34 <TimerStop>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8004a66:	6879      	ldr	r1, [r7, #4]
 8004a68:	4835      	ldr	r0, [pc, #212]	; (8004b40 <SX1276SetTx+0xe8>)
 8004a6a:	f002 faf9 	bl	8007060 <TimerSetValue>

    switch( SX1276.Settings.Modem )
 8004a6e:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <SX1276SetTx+0xec>)
 8004a70:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <SX1276SetTx+0x26>
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d021      	beq.n	8004ac0 <SX1276SetTx+0x68>
 8004a7c:	e04f      	b.n	8004b1e <SX1276SetTx+0xc6>
            // DIO1=FifoLevel
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8004a7e:	2040      	movs	r0, #64	; 0x40
 8004a80:	f000 f9ae 	bl	8004de0 <SX1276Read>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f003 0303 	and.w	r3, r3, #3
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	2040      	movs	r0, #64	; 0x40
 8004a90:	f000 f996 	bl	8004dc0 <SX1276Write>
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) );

            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 8004a94:	2041      	movs	r0, #65	; 0x41
 8004a96:	f000 f9a3 	bl	8004de0 <SX1276Read>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	4619      	mov	r1, r3
 8004aa4:	2041      	movs	r0, #65	; 0x41
 8004aa6:	f000 f98b 	bl	8004dc0 <SX1276Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 8004aaa:	2035      	movs	r0, #53	; 0x35
 8004aac:	f000 f998 	bl	8004de0 <SX1276Read>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	4b22      	ldr	r3, [pc, #136]	; (8004b44 <SX1276SetTx+0xec>)
 8004aba:	f883 207e 	strb.w	r2, [r3, #126]	; 0x7e
        }
        break;
 8004abe:	e02e      	b.n	8004b1e <SX1276SetTx+0xc6>
    case MODEM_LORA:
        {
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 8004ac0:	4b20      	ldr	r3, [pc, #128]	; (8004b44 <SX1276SetTx+0xec>)
 8004ac2:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d014      	beq.n	8004af4 <SX1276SetTx+0x9c>
            {
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004aca:	21f5      	movs	r1, #245	; 0xf5
 8004acc:	2011      	movs	r0, #17
 8004ace:	f000 f977 	bl	8004dc0 <SX1276Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 8004ad2:	2040      	movs	r0, #64	; 0x40
 8004ad4:	f000 f984 	bl	8004de0 <SX1276Read>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	b25b      	sxtb	r3, r3
 8004adc:	f003 0333 	and.w	r3, r3, #51	; 0x33
 8004ae0:	b25b      	sxtb	r3, r3
 8004ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ae6:	b25b      	sxtb	r3, r3
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	4619      	mov	r1, r3
 8004aec:	2040      	movs	r0, #64	; 0x40
 8004aee:	f000 f967 	bl	8004dc0 <SX1276Write>

                // DIO0=TxDone
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 8004af2:	e013      	b.n	8004b1c <SX1276SetTx+0xc4>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004af4:	21f7      	movs	r1, #247	; 0xf7
 8004af6:	2011      	movs	r0, #17
 8004af8:	f000 f962 	bl	8004dc0 <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8004afc:	2040      	movs	r0, #64	; 0x40
 8004afe:	f000 f96f 	bl	8004de0 <SX1276Read>
 8004b02:	4603      	mov	r3, r0
 8004b04:	b25b      	sxtb	r3, r3
 8004b06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b0a:	b25b      	sxtb	r3, r3
 8004b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b10:	b25b      	sxtb	r3, r3
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	4619      	mov	r1, r3
 8004b16:	2040      	movs	r0, #64	; 0x40
 8004b18:	f000 f952 	bl	8004dc0 <SX1276Write>
        break;
 8004b1c:	bf00      	nop
    }

    SX1276.Settings.State = RF_TX_RUNNING;
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <SX1276SetTx+0xec>)
 8004b20:	2202      	movs	r2, #2
 8004b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 8004b26:	4806      	ldr	r0, [pc, #24]	; (8004b40 <SX1276SetTx+0xe8>)
 8004b28:	f002 f8e4 	bl	8006cf4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8004b2c:	2003      	movs	r0, #3
 8004b2e:	f000 f8c3 	bl	8004cb8 <SX1276SetOpMode>
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000420 	.word	0x20000420
 8004b40:	20000348 	.word	0x20000348
 8004b44:	20000378 	.word	0x20000378

08004b48 <SX1276StartCad>:

void SX1276StartCad( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
    switch( SX1276.Settings.Modem )
 8004b4c:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <SX1276StartCad+0x48>)
 8004b4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d019      	beq.n	8004b8a <SX1276StartCad+0x42>
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d000      	beq.n	8004b5c <SX1276StartCad+0x14>
            SX1276.Settings.State = RF_CAD;
            SX1276SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8004b5a:	e017      	b.n	8004b8c <SX1276StartCad+0x44>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8004b5c:	21fa      	movs	r1, #250	; 0xfa
 8004b5e:	2011      	movs	r0, #17
 8004b60:	f000 f92e 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 8004b64:	2040      	movs	r0, #64	; 0x40
 8004b66:	f000 f93b 	bl	8004de0 <SX1276Read>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f023 0303 	bic.w	r3, r3, #3
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	4619      	mov	r1, r3
 8004b74:	2040      	movs	r0, #64	; 0x40
 8004b76:	f000 f923 	bl	8004dc0 <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <SX1276StartCad+0x48>)
 8004b7c:	2203      	movs	r2, #3
 8004b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SX1276SetOpMode( RFLR_OPMODE_CAD );
 8004b82:	2007      	movs	r0, #7
 8004b84:	f000 f898 	bl	8004cb8 <SX1276SetOpMode>
        break;
 8004b88:	e000      	b.n	8004b8c <SX1276StartCad+0x44>
        break;
 8004b8a:	bf00      	nop
    }
}
 8004b8c:	bf00      	nop
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20000378 	.word	0x20000378

08004b94 <SX1276SetTxContinuousWave>:

void SX1276SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b08e      	sub	sp, #56	; 0x38
 8004b98:	af0a      	add	r7, sp, #40	; 0x28
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8004ba4:	883b      	ldrh	r3, [r7, #0]
 8004ba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004baa:	fb02 f303 	mul.w	r3, r2, r3
 8004bae:	60fb      	str	r3, [r7, #12]

    SX1276SetChannel( freq );
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f7ff f825 	bl	8003c00 <SX1276SetChannel>

    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 8004bb6:	f997 1003 	ldrsb.w	r1, [r7, #3]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	9308      	str	r3, [sp, #32]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	9307      	str	r3, [sp, #28]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	9306      	str	r3, [sp, #24]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9305      	str	r3, [sp, #20]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	9304      	str	r3, [sp, #16]
 8004bce:	2300      	movs	r3, #0
 8004bd0:	9303      	str	r3, [sp, #12]
 8004bd2:	2305      	movs	r3, #5
 8004bd4:	9302      	str	r3, [sp, #8]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	2300      	movs	r3, #0
 8004be2:	2200      	movs	r2, #0
 8004be4:	2000      	movs	r0, #0
 8004be6:	f7ff fae7 	bl	80041b8 <SX1276SetTxConfig>

    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 8004bea:	2031      	movs	r0, #49	; 0x31
 8004bec:	f000 f8f8 	bl	8004de0 <SX1276Read>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	2031      	movs	r0, #49	; 0x31
 8004bfc:	f000 f8e0 	bl	8004dc0 <SX1276Write>
    // Disable radio interrupts
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8004c00:	21f0      	movs	r1, #240	; 0xf0
 8004c02:	2040      	movs	r0, #64	; 0x40
 8004c04:	f000 f8dc 	bl	8004dc0 <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8004c08:	21a0      	movs	r1, #160	; 0xa0
 8004c0a:	2041      	movs	r0, #65	; 0x41
 8004c0c:	f000 f8d8 	bl	8004dc0 <SX1276Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8004c10:	68f9      	ldr	r1, [r7, #12]
 8004c12:	4808      	ldr	r0, [pc, #32]	; (8004c34 <SX1276SetTxContinuousWave+0xa0>)
 8004c14:	f002 fa24 	bl	8007060 <TimerSetValue>

    SX1276.Settings.State = RF_TX_RUNNING; //??
 8004c18:	4b07      	ldr	r3, [pc, #28]	; (8004c38 <SX1276SetTxContinuousWave+0xa4>)
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    TimerStart( &TxTimeoutTimer );
 8004c20:	4804      	ldr	r0, [pc, #16]	; (8004c34 <SX1276SetTxContinuousWave+0xa0>)
 8004c22:	f002 f867 	bl	8006cf4 <TimerStart>
    SX1276SetOpMode( RF_OPMODE_TRANSMITTER );
 8004c26:	2003      	movs	r0, #3
 8004c28:	f000 f846 	bl	8004cb8 <SX1276SetOpMode>
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	20000348 	.word	0x20000348
 8004c38:	20000378 	.word	0x20000378

08004c3c <SX1276ReadRssi>:

int16_t SX1276ReadRssi( RadioModems_t modem )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	4603      	mov	r3, r0
 8004c44:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 8004c46:	2300      	movs	r3, #0
 8004c48:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <SX1276ReadRssi+0x1a>
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d00b      	beq.n	8004c6c <SX1276ReadRssi+0x30>
 8004c54:	e021      	b.n	8004c9a <SX1276ReadRssi+0x5e>
    {
    case MODEM_FSK:
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8004c56:	2011      	movs	r0, #17
 8004c58:	f000 f8c2 	bl	8004de0 <SX1276Read>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	085b      	lsrs	r3, r3, #1
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	425b      	negs	r3, r3
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	81fb      	strh	r3, [r7, #14]
        break;
 8004c6a:	e01a      	b.n	8004ca2 <SX1276ReadRssi+0x66>
    case MODEM_LORA:
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 8004c6c:	4b10      	ldr	r3, [pc, #64]	; (8004cb0 <SX1276ReadRssi+0x74>)
 8004c6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c70:	4a10      	ldr	r2, [pc, #64]	; (8004cb4 <SX1276ReadRssi+0x78>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d908      	bls.n	8004c88 <SX1276ReadRssi+0x4c>
        {
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 8004c76:	201b      	movs	r0, #27
 8004c78:	f000 f8b2 	bl	8004de0 <SX1276Read>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b9d      	subs	r3, #157	; 0x9d
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	81fb      	strh	r3, [r7, #14]
        }
        else
        {
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
        }
        break;
 8004c86:	e00c      	b.n	8004ca2 <SX1276ReadRssi+0x66>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 8004c88:	201b      	movs	r0, #27
 8004c8a:	f000 f8a9 	bl	8004de0 <SX1276Read>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	3ba4      	subs	r3, #164	; 0xa4
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	81fb      	strh	r3, [r7, #14]
        break;
 8004c98:	e003      	b.n	8004ca2 <SX1276ReadRssi+0x66>
    default:
        rssi = -1;
 8004c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004c9e:	81fb      	strh	r3, [r7, #14]
        break;
 8004ca0:	bf00      	nop
    }
    return rssi;
 8004ca2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3710      	adds	r7, #16
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	20000378 	.word	0x20000378
 8004cb4:	1f4add40 	.word	0x1f4add40

08004cb8 <SX1276SetOpMode>:

static void SX1276SetOpMode( uint8_t opMode )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b082      	sub	sp, #8
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	71fb      	strb	r3, [r7, #7]
            SX1276DbgPinTxWrite( 0 );
            SX1276DbgPinRxWrite( 0 );
            break;
    }
#endif
    if( opMode == RF_OPMODE_SLEEP )
 8004cc2:	79fb      	ldrb	r3, [r7, #7]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d103      	bne.n	8004cd0 <SX1276SetOpMode+0x18>
    {
        SX1276SetAntSwLowPower( true );
 8004cc8:	2001      	movs	r0, #1
 8004cca:	f001 ff55 	bl	8006b78 <SX1276SetAntSwLowPower>
 8004cce:	e009      	b.n	8004ce4 <SX1276SetOpMode+0x2c>
    }
    else
    {
        // Enable TCXO if operating mode different from SLEEP.
        SX1276SetBoardTcxo( true );
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	f001 fe5d 	bl	8006990 <SX1276SetBoardTcxo>
        SX1276SetAntSwLowPower( false );
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f001 ff4e 	bl	8006b78 <SX1276SetAntSwLowPower>
        SX1276SetAntSw( opMode );
 8004cdc:	79fb      	ldrb	r3, [r7, #7]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f001 ff74 	bl	8006bcc <SX1276SetAntSw>
    }
    SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 8004ce4:	2001      	movs	r0, #1
 8004ce6:	f000 f87b 	bl	8004de0 <SX1276Read>
 8004cea:	4603      	mov	r3, r0
 8004cec:	b25b      	sxtb	r3, r3
 8004cee:	f023 0307 	bic.w	r3, r3, #7
 8004cf2:	b25a      	sxtb	r2, r3
 8004cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	b25b      	sxtb	r3, r3
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	4619      	mov	r1, r3
 8004d00:	2001      	movs	r0, #1
 8004d02:	f000 f85d 	bl	8004dc0 <SX1276Write>
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <SX1276SetModem>:

void SX1276SetModem( RadioModems_t modem )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	4603      	mov	r3, r0
 8004d18:	71fb      	strb	r3, [r7, #7]
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 8004d1a:	2001      	movs	r0, #1
 8004d1c:	f000 f860 	bl	8004de0 <SX1276Read>
 8004d20:	4603      	mov	r3, r0
 8004d22:	b25b      	sxtb	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	da04      	bge.n	8004d32 <SX1276SetModem+0x22>
    {
        SX1276.Settings.Modem = MODEM_LORA;
 8004d28:	4b24      	ldr	r3, [pc, #144]	; (8004dbc <SX1276SetModem+0xac>)
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d30:	e003      	b.n	8004d3a <SX1276SetModem+0x2a>
    }
    else
    {
        SX1276.Settings.Modem = MODEM_FSK;
 8004d32:	4b22      	ldr	r3, [pc, #136]	; (8004dbc <SX1276SetModem+0xac>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }

    if( SX1276.Settings.Modem == modem )
 8004d3a:	4b20      	ldr	r3, [pc, #128]	; (8004dbc <SX1276SetModem+0xac>)
 8004d3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d40:	79fa      	ldrb	r2, [r7, #7]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d036      	beq.n	8004db4 <SX1276SetModem+0xa4>
    {
        return;
    }

    SX1276.Settings.Modem = modem;
 8004d46:	4a1d      	ldr	r2, [pc, #116]	; (8004dbc <SX1276SetModem+0xac>)
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    switch( SX1276.Settings.Modem )
 8004d4e:	4b1b      	ldr	r3, [pc, #108]	; (8004dbc <SX1276SetModem+0xac>)
 8004d50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d016      	beq.n	8004d86 <SX1276SetModem+0x76>
    {
    default:
    case MODEM_FSK:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004d58:	2000      	movs	r0, #0
 8004d5a:	f7ff ffad 	bl	8004cb8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8004d5e:	2001      	movs	r0, #1
 8004d60:	f000 f83e 	bl	8004de0 <SX1276Read>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f000 f826 	bl	8004dc0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004d74:	2100      	movs	r1, #0
 8004d76:	2040      	movs	r0, #64	; 0x40
 8004d78:	f000 f822 	bl	8004dc0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8004d7c:	2130      	movs	r1, #48	; 0x30
 8004d7e:	2041      	movs	r0, #65	; 0x41
 8004d80:	f000 f81e 	bl	8004dc0 <SX1276Write>
        break;
 8004d84:	e017      	b.n	8004db6 <SX1276SetModem+0xa6>
    case MODEM_LORA:
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 8004d86:	2000      	movs	r0, #0
 8004d88:	f7ff ff96 	bl	8004cb8 <SX1276SetOpMode>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8004d8c:	2001      	movs	r0, #1
 8004d8e:	f000 f827 	bl	8004de0 <SX1276Read>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f000 f80f 	bl	8004dc0 <SX1276Write>

        SX1276Write( REG_DIOMAPPING1, 0x00 );
 8004da2:	2100      	movs	r1, #0
 8004da4:	2040      	movs	r0, #64	; 0x40
 8004da6:	f000 f80b 	bl	8004dc0 <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 8004daa:	2100      	movs	r1, #0
 8004dac:	2041      	movs	r0, #65	; 0x41
 8004dae:	f000 f807 	bl	8004dc0 <SX1276Write>
        break;
 8004db2:	e000      	b.n	8004db6 <SX1276SetModem+0xa6>
        return;
 8004db4:	bf00      	nop
    }
}
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000378 	.word	0x20000378

08004dc0 <SX1276Write>:

void SX1276Write( uint32_t addr, uint8_t data )
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( addr, &data, 1 );
 8004dcc:	1cfb      	adds	r3, r7, #3
 8004dce:	2201      	movs	r2, #1
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 f814 	bl	8004e00 <SX1276WriteBuffer>
}
 8004dd8:	bf00      	nop
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <SX1276Read>:

uint8_t SX1276Read( uint32_t addr )
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
    uint8_t data;
    SX1276ReadBuffer( addr, &data, 1 );
 8004de8:	f107 030f 	add.w	r3, r7, #15
 8004dec:	2201      	movs	r2, #1
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f839 	bl	8004e68 <SX1276ReadBuffer>
    return data;
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <SX1276WriteBuffer>:

void SX1276WriteBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8004e0e:	2100      	movs	r1, #0
 8004e10:	4813      	ldr	r0, [pc, #76]	; (8004e60 <SX1276WriteBuffer+0x60>)
 8004e12:	f7fb fbdd 	bl	80005d0 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr | 0x80 );
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	b29b      	uxth	r3, r3
 8004e1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	4619      	mov	r1, r3
 8004e22:	4810      	ldr	r0, [pc, #64]	; (8004e64 <SX1276WriteBuffer+0x64>)
 8004e24:	f7fb fdcc 	bl	80009c0 <SpiInOut>
    for( i = 0; i < size; i++ )
 8004e28:	2300      	movs	r3, #0
 8004e2a:	75fb      	strb	r3, [r7, #23]
 8004e2c:	e00b      	b.n	8004e46 <SX1276WriteBuffer+0x46>
    {
        SpiInOut( &SX1276.Spi, buffer[i] );
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4413      	add	r3, r2
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b29b      	uxth	r3, r3
 8004e38:	4619      	mov	r1, r3
 8004e3a:	480a      	ldr	r0, [pc, #40]	; (8004e64 <SX1276WriteBuffer+0x64>)
 8004e3c:	f7fb fdc0 	bl	80009c0 <SpiInOut>
    for( i = 0; i < size; i++ )
 8004e40:	7dfb      	ldrb	r3, [r7, #23]
 8004e42:	3301      	adds	r3, #1
 8004e44:	75fb      	strb	r3, [r7, #23]
 8004e46:	7dfa      	ldrb	r2, [r7, #23]
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d3ef      	bcc.n	8004e2e <SX1276WriteBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8004e4e:	2101      	movs	r1, #1
 8004e50:	4803      	ldr	r0, [pc, #12]	; (8004e60 <SX1276WriteBuffer+0x60>)
 8004e52:	f7fb fbbd 	bl	80005d0 <GpioWrite>
}
 8004e56:	bf00      	nop
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	200003b4 	.word	0x200003b4
 8004e64:	200003b0 	.word	0x200003b0

08004e68 <SX1276ReadBuffer>:

void SX1276ReadBuffer( uint32_t addr, uint8_t *buffer, uint8_t size )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	71fb      	strb	r3, [r7, #7]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1276.Spi.Nss, 0 );
 8004e76:	2100      	movs	r1, #0
 8004e78:	4814      	ldr	r0, [pc, #80]	; (8004ecc <SX1276ReadBuffer+0x64>)
 8004e7a:	f7fb fba9 	bl	80005d0 <GpioWrite>

    SpiInOut( &SX1276.Spi, addr & 0x7F );
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	4619      	mov	r1, r3
 8004e8a:	4811      	ldr	r0, [pc, #68]	; (8004ed0 <SX1276ReadBuffer+0x68>)
 8004e8c:	f7fb fd98 	bl	80009c0 <SpiInOut>

    for( i = 0; i < size; i++ )
 8004e90:	2300      	movs	r3, #0
 8004e92:	75fb      	strb	r3, [r7, #23]
 8004e94:	e00d      	b.n	8004eb2 <SX1276ReadBuffer+0x4a>
    {
        buffer[i] = SpiInOut( &SX1276.Spi, 0 );
 8004e96:	2100      	movs	r1, #0
 8004e98:	480d      	ldr	r0, [pc, #52]	; (8004ed0 <SX1276ReadBuffer+0x68>)
 8004e9a:	f7fb fd91 	bl	80009c0 <SpiInOut>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	b2ca      	uxtb	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
 8004eae:	3301      	adds	r3, #1
 8004eb0:	75fb      	strb	r3, [r7, #23]
 8004eb2:	7dfa      	ldrb	r2, [r7, #23]
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d3ed      	bcc.n	8004e96 <SX1276ReadBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1276.Spi.Nss, 1 );
 8004eba:	2101      	movs	r1, #1
 8004ebc:	4803      	ldr	r0, [pc, #12]	; (8004ecc <SX1276ReadBuffer+0x64>)
 8004ebe:	f7fb fb87 	bl	80005d0 <GpioWrite>
}
 8004ec2:	bf00      	nop
 8004ec4:	3718      	adds	r7, #24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	200003b4 	.word	0x200003b4
 8004ed0:	200003b0 	.word	0x200003b0

08004ed4 <SX1276WriteFifo>:

static void SX1276WriteFifo( uint8_t *buffer, uint8_t size )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b082      	sub	sp, #8
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	70fb      	strb	r3, [r7, #3]
    SX1276WriteBuffer( 0, buffer, size );
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7ff ff8a 	bl	8004e00 <SX1276WriteBuffer>
}
 8004eec:	bf00      	nop
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <SX1276ReadFifo>:

static void SX1276ReadFifo( uint8_t *buffer, uint8_t size )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	460b      	mov	r3, r1
 8004efe:	70fb      	strb	r3, [r7, #3]
    SX1276ReadBuffer( 0, buffer, size );
 8004f00:	78fb      	ldrb	r3, [r7, #3]
 8004f02:	461a      	mov	r2, r3
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	2000      	movs	r0, #0
 8004f08:	f7ff ffae 	bl	8004e68 <SX1276ReadBuffer>
}
 8004f0c:	bf00      	nop
 8004f0e:	3708      	adds	r7, #8
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd80      	pop	{r7, pc}

08004f14 <SX1276SetMaxPayloadLength>:

void SX1276SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	460a      	mov	r2, r1
 8004f1e:	71fb      	strb	r3, [r7, #7]
 8004f20:	4613      	mov	r3, r2
 8004f22:	71bb      	strb	r3, [r7, #6]
    SX1276SetModem( modem );
 8004f24:	79fb      	ldrb	r3, [r7, #7]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7ff fef2 	bl	8004d10 <SX1276SetModem>

    switch( modem )
 8004f2c:	79fb      	ldrb	r3, [r7, #7]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <SX1276SetMaxPayloadLength+0x24>
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d00e      	beq.n	8004f54 <SX1276SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8004f36:	e014      	b.n	8004f62 <SX1276SetMaxPayloadLength+0x4e>
        if( SX1276.Settings.Fsk.FixLen == false )
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <SX1276SetMaxPayloadLength+0x58>)
 8004f3a:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004f3e:	f083 0301 	eor.w	r3, r3, #1
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00b      	beq.n	8004f60 <SX1276SetMaxPayloadLength+0x4c>
            SX1276Write( REG_PAYLOADLENGTH, max );
 8004f48:	79bb      	ldrb	r3, [r7, #6]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	2032      	movs	r0, #50	; 0x32
 8004f4e:	f7ff ff37 	bl	8004dc0 <SX1276Write>
        break;
 8004f52:	e005      	b.n	8004f60 <SX1276SetMaxPayloadLength+0x4c>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 8004f54:	79bb      	ldrb	r3, [r7, #6]
 8004f56:	4619      	mov	r1, r3
 8004f58:	2023      	movs	r0, #35	; 0x23
 8004f5a:	f7ff ff31 	bl	8004dc0 <SX1276Write>
        break;
 8004f5e:	e000      	b.n	8004f62 <SX1276SetMaxPayloadLength+0x4e>
        break;
 8004f60:	bf00      	nop
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000378 	.word	0x20000378

08004f70 <SX1276SetPublicNetwork>:

void SX1276SetPublicNetwork( bool enable )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b082      	sub	sp, #8
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	4603      	mov	r3, r0
 8004f78:	71fb      	strb	r3, [r7, #7]
    SX1276SetModem( MODEM_LORA );
 8004f7a:	2001      	movs	r0, #1
 8004f7c:	f7ff fec8 	bl	8004d10 <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 8004f80:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <SX1276SetPublicNetwork+0x38>)
 8004f82:	79fb      	ldrb	r3, [r7, #7]
 8004f84:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
    if( enable == true )
 8004f88:	79fb      	ldrb	r3, [r7, #7]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <SX1276SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 8004f8e:	2134      	movs	r1, #52	; 0x34
 8004f90:	2039      	movs	r0, #57	; 0x39
 8004f92:	f7ff ff15 	bl	8004dc0 <SX1276Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8004f96:	e003      	b.n	8004fa0 <SX1276SetPublicNetwork+0x30>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8004f98:	2112      	movs	r1, #18
 8004f9a:	2039      	movs	r0, #57	; 0x39
 8004f9c:	f7ff ff10 	bl	8004dc0 <SX1276Write>
}
 8004fa0:	bf00      	nop
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	20000378 	.word	0x20000378

08004fac <SX1276GetWakeupTime>:

uint32_t SX1276GetWakeupTime( void )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
    return SX1276GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
 8004fb0:	f001 fcf8 	bl	80069a4 <SX1276GetBoardTcxoWakeupTime>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	3301      	adds	r3, #1
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <SX1276ConvertPllStepToFreqInHz>:

static uint32_t SX1276ConvertPllStepToFreqInHz( uint32_t pllSteps )
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
    uint32_t freqInHzInt;
    uint32_t freqInHzFrac;
    
    // freqInHz = pllSteps * ( SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	60fb      	str	r3, [r7, #12]
    freqInHzFrac = pllSteps - ( freqInHzInt << SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	021b      	lsls	r3, r3, #8
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f643 5209 	movw	r2, #15625	; 0x3d09
 8004fda:	fb02 f203 	mul.w	r2, r2, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	f643 5109 	movw	r1, #15625	; 0x3d09
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	3380      	adds	r3, #128	; 0x80
 8004fea:	0a1b      	lsrs	r3, r3, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 8004fec:	4413      	add	r3, r2
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <SX1276ConvertFreqInHzToPllStep>:

static uint32_t SX1276ConvertFreqInHzToPllStep( uint32_t freqInHz )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
    uint32_t stepsInt;
    uint32_t stepsFrac;

    // pllSteps = freqInHz / (SX1276_XTAL_FREQ / 2^19 )
    // Get integer and fractional parts of the frequency computed with a PLL step scaled value
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a0f      	ldr	r2, [pc, #60]	; (8005040 <SX1276ConvertFreqInHzToPllStep+0x48>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	0b1b      	lsrs	r3, r3, #12
 800500a:	60fb      	str	r3, [r7, #12]
    stepsFrac = freqInHz - ( stepsInt * SX1276_PLL_STEP_SCALED );
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f643 5209 	movw	r2, #15625	; 0x3d09
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	60bb      	str	r3, [r7, #8]
    
    // Apply the scaling factor to retrieve a frequency in Hz (+ ceiling)
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	021a      	lsls	r2, r3, #8
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	f503 53f4 	add.w	r3, r3, #7808	; 0x1e80
 8005028:	3304      	adds	r3, #4
 800502a:	4905      	ldr	r1, [pc, #20]	; (8005040 <SX1276ConvertFreqInHzToPllStep+0x48>)
 800502c:	fba1 1303 	umull	r1, r3, r1, r3
 8005030:	0b1b      	lsrs	r3, r3, #12
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 8005032:	4413      	add	r3, r2
             SX1276_PLL_STEP_SCALED );
}
 8005034:	4618      	mov	r0, r3
 8005036:	3714      	adds	r7, #20
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	431bde83 	.word	0x431bde83

08005044 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800504c:	2300      	movs	r3, #0
 800504e:	73fb      	strb	r3, [r7, #15]
 8005050:	e017      	b.n	8005082 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 8005052:	7bfb      	ldrb	r3, [r7, #15]
 8005054:	4a0f      	ldr	r2, [pc, #60]	; (8005094 <GetFskBandwidthRegValue+0x50>)
 8005056:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	429a      	cmp	r2, r3
 800505e:	d30d      	bcc.n	800507c <GetFskBandwidthRegValue+0x38>
 8005060:	7bfb      	ldrb	r3, [r7, #15]
 8005062:	3301      	adds	r3, #1
 8005064:	4a0b      	ldr	r2, [pc, #44]	; (8005094 <GetFskBandwidthRegValue+0x50>)
 8005066:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	429a      	cmp	r2, r3
 800506e:	d205      	bcs.n	800507c <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	4a08      	ldr	r2, [pc, #32]	; (8005094 <GetFskBandwidthRegValue+0x50>)
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	4413      	add	r3, r2
 8005078:	791b      	ldrb	r3, [r3, #4]
 800507a:	e006      	b.n	800508a <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	3301      	adds	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	2b14      	cmp	r3, #20
 8005086:	d9e4      	bls.n	8005052 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 8005088:	e7fe      	b.n	8005088 <GetFskBandwidthRegValue+0x44>
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	bc80      	pop	{r7}
 8005092:	4770      	bx	lr
 8005094:	08007b0c 	.word	0x08007b0c

08005098 <SX1276GetLoRaBandwidthInHz>:

static uint32_t SX1276GetLoRaBandwidthInHz( uint32_t bw )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
    uint32_t bandwidthInHz = 0;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]

    switch( bw )
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d00f      	beq.n	80050ca <SX1276GetLoRaBandwidthInHz+0x32>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2b02      	cmp	r3, #2
 80050ae:	d80f      	bhi.n	80050d0 <SX1276GetLoRaBandwidthInHz+0x38>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <SX1276GetLoRaBandwidthInHz+0x26>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d003      	beq.n	80050c4 <SX1276GetLoRaBandwidthInHz+0x2c>
 80050bc:	e008      	b.n	80050d0 <SX1276GetLoRaBandwidthInHz+0x38>
    {
    case 0: // 125 kHz
        bandwidthInHz = 125000UL;
 80050be:	4b07      	ldr	r3, [pc, #28]	; (80050dc <SX1276GetLoRaBandwidthInHz+0x44>)
 80050c0:	60fb      	str	r3, [r7, #12]
        break;
 80050c2:	e005      	b.n	80050d0 <SX1276GetLoRaBandwidthInHz+0x38>
    case 1: // 250 kHz
        bandwidthInHz = 250000UL;
 80050c4:	4b06      	ldr	r3, [pc, #24]	; (80050e0 <SX1276GetLoRaBandwidthInHz+0x48>)
 80050c6:	60fb      	str	r3, [r7, #12]
        break;
 80050c8:	e002      	b.n	80050d0 <SX1276GetLoRaBandwidthInHz+0x38>
    case 2: // 500 kHz
        bandwidthInHz = 500000UL;
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <SX1276GetLoRaBandwidthInHz+0x4c>)
 80050cc:	60fb      	str	r3, [r7, #12]
        break;
 80050ce:	bf00      	nop
    }

    return bandwidthInHz;
 80050d0:	68fb      	ldr	r3, [r7, #12]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bc80      	pop	{r7}
 80050da:	4770      	bx	lr
 80050dc:	0001e848 	.word	0x0001e848
 80050e0:	0003d090 	.word	0x0003d090
 80050e4:	0007a120 	.word	0x0007a120

080050e8 <SX1276GetGfskTimeOnAirNumerator>:

static uint32_t SX1276GetGfskTimeOnAirNumerator( uint16_t preambleLen, bool fixLen,
                                                 uint8_t payloadLen, bool crcOn )
{
 80050e8:	b490      	push	{r4, r7}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	4604      	mov	r4, r0
 80050f0:	4608      	mov	r0, r1
 80050f2:	4611      	mov	r1, r2
 80050f4:	461a      	mov	r2, r3
 80050f6:	4623      	mov	r3, r4
 80050f8:	80fb      	strh	r3, [r7, #6]
 80050fa:	4603      	mov	r3, r0
 80050fc:	717b      	strb	r3, [r7, #5]
 80050fe:	460b      	mov	r3, r1
 8005100:	713b      	strb	r3, [r7, #4]
 8005102:	4613      	mov	r3, r2
 8005104:	70fb      	strb	r3, [r7, #3]
    const uint8_t syncWordLength = 3;
 8005106:	2303      	movs	r3, #3
 8005108:	73fb      	strb	r3, [r7, #15]

    return ( preambleLen << 3 ) +
 800510a:	88fb      	ldrh	r3, [r7, #6]
 800510c:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 800510e:	797a      	ldrb	r2, [r7, #5]
 8005110:	f082 0201 	eor.w	r2, r2, #1
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	2a00      	cmp	r2, #0
 8005118:	d001      	beq.n	800511e <SX1276GetGfskTimeOnAirNumerator+0x36>
 800511a:	2208      	movs	r2, #8
 800511c:	e000      	b.n	8005120 <SX1276GetGfskTimeOnAirNumerator+0x38>
 800511e:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8005120:	441a      	add	r2, r3
             ( syncWordLength << 3 ) +
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) +
 8005126:	441a      	add	r2, r3
             ( ( payloadLen +
 8005128:	793b      	ldrb	r3, [r7, #4]
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 800512a:	78f9      	ldrb	r1, [r7, #3]
 800512c:	2900      	cmp	r1, #0
 800512e:	d001      	beq.n	8005134 <SX1276GetGfskTimeOnAirNumerator+0x4c>
 8005130:	2102      	movs	r1, #2
 8005132:	e000      	b.n	8005136 <SX1276GetGfskTimeOnAirNumerator+0x4e>
 8005134:	2100      	movs	r1, #0
               ( 0 ) + // Address filter size
 8005136:	440b      	add	r3, r1
               ) << 3 
 8005138:	00db      	lsls	r3, r3, #3
             ( syncWordLength << 3 ) +
 800513a:	4413      	add	r3, r2
             );
}
 800513c:	4618      	mov	r0, r3
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bc90      	pop	{r4, r7}
 8005144:	4770      	bx	lr

08005146 <SX1276GetLoRaTimeOnAirNumerator>:

static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 8005146:	b480      	push	{r7}
 8005148:	b08b      	sub	sp, #44	; 0x2c
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	4611      	mov	r1, r2
 8005152:	461a      	mov	r2, r3
 8005154:	460b      	mov	r3, r1
 8005156:	71fb      	strb	r3, [r7, #7]
 8005158:	4613      	mov	r3, r2
 800515a:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800515c:	79fb      	ldrb	r3, [r7, #7]
 800515e:	3304      	adds	r3, #4
 8005160:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8005162:	2300      	movs	r3, #0
 8005164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b05      	cmp	r3, #5
 800516c:	d002      	beq.n	8005174 <SX1276GetLoRaTimeOnAirNumerator+0x2e>
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	2b06      	cmp	r3, #6
 8005172:	d104      	bne.n	800517e <SX1276GetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8005174:	88bb      	ldrh	r3, [r7, #4]
 8005176:	2b0b      	cmp	r3, #11
 8005178:	d801      	bhi.n	800517e <SX1276GetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800517a:	230c      	movs	r3, #12
 800517c:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <SX1276GetLoRaTimeOnAirNumerator+0x4a>
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	2b0b      	cmp	r3, #11
 8005188:	d008      	beq.n	800519c <SX1276GetLoRaTimeOnAirNumerator+0x56>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b0c      	cmp	r3, #12
 800518e:	d005      	beq.n	800519c <SX1276GetLoRaTimeOnAirNumerator+0x56>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d105      	bne.n	80051a2 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	2b0c      	cmp	r3, #12
 800519a:	d102      	bne.n	80051a2 <SX1276GetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 800519c:	2301      	movs	r3, #1
 800519e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80051a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80051a6:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80051a8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80051ac:	2a00      	cmp	r2, #0
 80051ae:	d001      	beq.n	80051b4 <SX1276GetLoRaTimeOnAirNumerator+0x6e>
 80051b0:	2210      	movs	r2, #16
 80051b2:	e000      	b.n	80051b6 <SX1276GetLoRaTimeOnAirNumerator+0x70>
 80051b4:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80051b6:	4413      	add	r3, r2
 80051b8:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80051be:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80051c0:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80051c4:	2a00      	cmp	r2, #0
 80051c6:	d001      	beq.n	80051cc <SX1276GetLoRaTimeOnAirNumerator+0x86>
 80051c8:	2200      	movs	r2, #0
 80051ca:	e000      	b.n	80051ce <SX1276GetLoRaTimeOnAirNumerator+0x88>
 80051cc:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80051ce:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80051d0:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b06      	cmp	r3, #6
 80051d6:	d803      	bhi.n	80051e0 <SX1276GetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	e00e      	b.n	80051fe <SX1276GetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3308      	adds	r3, #8
 80051e4:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80051e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d004      	beq.n	80051f8 <SX1276GetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	3b02      	subs	r3, #2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	623b      	str	r3, [r7, #32]
 80051f6:	e002      	b.n	80051fe <SX1276GetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	2b00      	cmp	r3, #0
 8005202:	da01      	bge.n	8005208 <SX1276GetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	4413      	add	r3, r2
 800520e:	1e5a      	subs	r2, r3, #1
 8005210:	6a3b      	ldr	r3, [r7, #32]
 8005212:	fb92 f3f3 	sdiv	r3, r2, r3
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	fb02 f203 	mul.w	r2, r2, r3
 800521c:	88bb      	ldrh	r3, [r7, #4]
 800521e:	4413      	add	r3, r2
    int32_t intermediate =
 8005220:	330c      	adds	r3, #12
 8005222:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b06      	cmp	r3, #6
 8005228:	d802      	bhi.n	8005230 <SX1276GetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	3302      	adds	r3, #2
 800522e:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	3b02      	subs	r3, #2
 800523a:	fa02 f303 	lsl.w	r3, r2, r3
}
 800523e:	4618      	mov	r0, r3
 8005240:	372c      	adds	r7, #44	; 0x2c
 8005242:	46bd      	mov	sp, r7
 8005244:	bc80      	pop	{r7}
 8005246:	4770      	bx	lr

08005248 <SX1276OnTimeoutIrq>:

static void SX1276OnTimeoutIrq( void* context )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 8005250:	4b4d      	ldr	r3, [pc, #308]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 8005252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005256:	2b01      	cmp	r3, #1
 8005258:	d002      	beq.n	8005260 <SX1276OnTimeoutIrq+0x18>
 800525a:	2b02      	cmp	r3, #2
 800525c:	d043      	beq.n	80052e6 <SX1276OnTimeoutIrq+0x9e>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800525e:	e08e      	b.n	800537e <SX1276OnTimeoutIrq+0x136>
        if( SX1276.Settings.Modem == MODEM_FSK )
 8005260:	4b49      	ldr	r3, [pc, #292]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 8005262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005266:	2b00      	cmp	r3, #0
 8005268:	d12f      	bne.n	80052ca <SX1276OnTimeoutIrq+0x82>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800526a:	4b47      	ldr	r3, [pc, #284]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
            SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8005272:	4b45      	ldr	r3, [pc, #276]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 8005274:	2200      	movs	r2, #0
 8005276:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800527a:	4b43      	ldr	r3, [pc, #268]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 800527c:	2200      	movs	r2, #0
 800527e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
            SX1276.Settings.FskPacketHandler.Size = 0;
 8005282:	4b41      	ldr	r3, [pc, #260]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 8005284:	2200      	movs	r2, #0
 8005286:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800528a:	210b      	movs	r1, #11
 800528c:	203e      	movs	r0, #62	; 0x3e
 800528e:	f7ff fd97 	bl	8004dc0 <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8005292:	2110      	movs	r1, #16
 8005294:	203f      	movs	r0, #63	; 0x3f
 8005296:	f7ff fd93 	bl	8004dc0 <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800529a:	4b3b      	ldr	r3, [pc, #236]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 800529c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <SX1276OnTimeoutIrq+0x74>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80052a4:	200d      	movs	r0, #13
 80052a6:	f7ff fd9b 	bl	8004de0 <SX1276Read>
 80052aa:	4603      	mov	r3, r0
 80052ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	4619      	mov	r1, r3
 80052b4:	200d      	movs	r0, #13
 80052b6:	f7ff fd83 	bl	8004dc0 <SX1276Write>
 80052ba:	e006      	b.n	80052ca <SX1276OnTimeoutIrq+0x82>
                SX1276.Settings.State = RF_IDLE;
 80052bc:	4b32      	ldr	r3, [pc, #200]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                TimerStop( &RxTimeoutSyncWord );
 80052c4:	4831      	ldr	r0, [pc, #196]	; (800538c <SX1276OnTimeoutIrq+0x144>)
 80052c6:	f001 fe35 	bl	8006f34 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80052ca:	4b31      	ldr	r3, [pc, #196]	; (8005390 <SX1276OnTimeoutIrq+0x148>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d052      	beq.n	8005378 <SX1276OnTimeoutIrq+0x130>
 80052d2:	4b2f      	ldr	r3, [pc, #188]	; (8005390 <SX1276OnTimeoutIrq+0x148>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d04d      	beq.n	8005378 <SX1276OnTimeoutIrq+0x130>
            RadioEvents->RxTimeout( );
 80052dc:	4b2c      	ldr	r3, [pc, #176]	; (8005390 <SX1276OnTimeoutIrq+0x148>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	4798      	blx	r3
        break;
 80052e4:	e048      	b.n	8005378 <SX1276OnTimeoutIrq+0x130>
        SX1276Reset( );
 80052e6:	f001 fb65 	bl	80069b4 <SX1276Reset>
        RxChainCalibration( );
 80052ea:	f7fe fd29 	bl	8003d40 <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 80052ee:	2000      	movs	r0, #0
 80052f0:	f7ff fce2 	bl	8004cb8 <SX1276SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80052f4:	2300      	movs	r3, #0
 80052f6:	73fb      	strb	r3, [r7, #15]
 80052f8:	e020      	b.n	800533c <SX1276OnTimeoutIrq+0xf4>
            SX1276SetModem( RadioRegsInit[i].Modem );
 80052fa:	7bfa      	ldrb	r2, [r7, #15]
 80052fc:	4925      	ldr	r1, [pc, #148]	; (8005394 <SX1276OnTimeoutIrq+0x14c>)
 80052fe:	4613      	mov	r3, r2
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	4413      	add	r3, r2
 8005304:	440b      	add	r3, r1
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f7ff fd01 	bl	8004d10 <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800530e:	7bfa      	ldrb	r2, [r7, #15]
 8005310:	4920      	ldr	r1, [pc, #128]	; (8005394 <SX1276OnTimeoutIrq+0x14c>)
 8005312:	4613      	mov	r3, r2
 8005314:	005b      	lsls	r3, r3, #1
 8005316:	4413      	add	r3, r2
 8005318:	440b      	add	r3, r1
 800531a:	3301      	adds	r3, #1
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	4618      	mov	r0, r3
 8005320:	7bfa      	ldrb	r2, [r7, #15]
 8005322:	491c      	ldr	r1, [pc, #112]	; (8005394 <SX1276OnTimeoutIrq+0x14c>)
 8005324:	4613      	mov	r3, r2
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4413      	add	r3, r2
 800532a:	440b      	add	r3, r1
 800532c:	3302      	adds	r3, #2
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	4619      	mov	r1, r3
 8005332:	f7ff fd45 	bl	8004dc0 <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8005336:	7bfb      	ldrb	r3, [r7, #15]
 8005338:	3301      	adds	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
 800533c:	7bfb      	ldrb	r3, [r7, #15]
 800533e:	2b0f      	cmp	r3, #15
 8005340:	d9db      	bls.n	80052fa <SX1276OnTimeoutIrq+0xb2>
        SX1276SetModem( MODEM_FSK );
 8005342:	2000      	movs	r0, #0
 8005344:	f7ff fce4 	bl	8004d10 <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 8005348:	4b0f      	ldr	r3, [pc, #60]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 800534a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fe0e 	bl	8004f70 <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 8005354:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <SX1276OnTimeoutIrq+0x140>)
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800535c:	4b0c      	ldr	r3, [pc, #48]	; (8005390 <SX1276OnTimeoutIrq+0x148>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00b      	beq.n	800537c <SX1276OnTimeoutIrq+0x134>
 8005364:	4b0a      	ldr	r3, [pc, #40]	; (8005390 <SX1276OnTimeoutIrq+0x148>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d006      	beq.n	800537c <SX1276OnTimeoutIrq+0x134>
            RadioEvents->TxTimeout( );
 800536e:	4b08      	ldr	r3, [pc, #32]	; (8005390 <SX1276OnTimeoutIrq+0x148>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	4798      	blx	r3
        break;
 8005376:	e001      	b.n	800537c <SX1276OnTimeoutIrq+0x134>
        break;
 8005378:	bf00      	nop
 800537a:	e000      	b.n	800537e <SX1276OnTimeoutIrq+0x136>
        break;
 800537c:	bf00      	nop
    }
}
 800537e:	bf00      	nop
 8005380:	3710      	adds	r7, #16
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	20000378 	.word	0x20000378
 800538c:	20000360 	.word	0x20000360
 8005390:	200000c8 	.word	0x200000c8
 8005394:	08007adc 	.word	0x08007adc

08005398 <SX1276OnDio0Irq>:

static void SX1276OnDio0Irq( void* context )
{
 8005398:	b590      	push	{r4, r7, lr}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
    volatile uint8_t irqFlags = 0;
 80053a0:	2300      	movs	r3, #0
 80053a2:	737b      	strb	r3, [r7, #13]

    switch( SX1276.Settings.State )
 80053a4:	4bae      	ldr	r3, [pc, #696]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80053a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d003      	beq.n	80053b6 <SX1276OnDio0Irq+0x1e>
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	f000 81de 	beq.w	8005770 <SX1276OnDio0Irq+0x3d8>
                }
                break;
            }
            break;
        default:
            break;
 80053b4:	e1fb      	b.n	80057ae <SX1276OnDio0Irq+0x416>
            switch( SX1276.Settings.Modem )
 80053b6:	4baa      	ldr	r3, [pc, #680]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80053b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d003      	beq.n	80053c8 <SX1276OnDio0Irq+0x30>
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	f000 80ec 	beq.w	800559e <SX1276OnDio0Irq+0x206>
                break;
 80053c6:	e1d2      	b.n	800576e <SX1276OnDio0Irq+0x3d6>
                if( SX1276.Settings.Fsk.CrcOn == true )
 80053c8:	4ba5      	ldr	r3, [pc, #660]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80053ca:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d04e      	beq.n	8005470 <SX1276OnDio0Irq+0xd8>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 80053d2:	203f      	movs	r0, #63	; 0x3f
 80053d4:	f7ff fd04 	bl	8004de0 <SX1276Read>
 80053d8:	4603      	mov	r3, r0
 80053da:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 80053dc:	7b7b      	ldrb	r3, [r7, #13]
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	f003 0302 	and.w	r3, r3, #2
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d043      	beq.n	8005470 <SX1276OnDio0Irq+0xd8>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80053e8:	210b      	movs	r1, #11
 80053ea:	203e      	movs	r0, #62	; 0x3e
 80053ec:	f7ff fce8 	bl	8004dc0 <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80053f0:	2110      	movs	r1, #16
 80053f2:	203f      	movs	r0, #63	; 0x3f
 80053f4:	f7ff fce4 	bl	8004dc0 <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 80053f8:	489a      	ldr	r0, [pc, #616]	; (8005664 <SX1276OnDio0Irq+0x2cc>)
 80053fa:	f001 fd9b 	bl	8006f34 <TimerStop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 80053fe:	4b98      	ldr	r3, [pc, #608]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005400:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005404:	f083 0301 	eor.w	r3, r3, #1
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d007      	beq.n	800541e <SX1276OnDio0Irq+0x86>
                            TimerStop( &RxTimeoutSyncWord );
 800540e:	4896      	ldr	r0, [pc, #600]	; (8005668 <SX1276OnDio0Irq+0x2d0>)
 8005410:	f001 fd90 	bl	8006f34 <TimerStop>
                            SX1276.Settings.State = RF_IDLE;
 8005414:	4b92      	ldr	r3, [pc, #584]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005416:	2200      	movs	r2, #0
 8005418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800541c:	e00a      	b.n	8005434 <SX1276OnDio0Irq+0x9c>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800541e:	200d      	movs	r0, #13
 8005420:	f7ff fcde 	bl	8004de0 <SX1276Read>
 8005424:	4603      	mov	r3, r0
 8005426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800542a:	b2db      	uxtb	r3, r3
 800542c:	4619      	mov	r1, r3
 800542e:	200d      	movs	r0, #13
 8005430:	f7ff fcc6 	bl	8004dc0 <SX1276Write>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8005434:	4b8d      	ldr	r3, [pc, #564]	; (800566c <SX1276OnDio0Irq+0x2d4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <SX1276OnDio0Irq+0xb6>
 800543c:	4b8b      	ldr	r3, [pc, #556]	; (800566c <SX1276OnDio0Irq+0x2d4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 8005446:	4b89      	ldr	r3, [pc, #548]	; (800566c <SX1276OnDio0Irq+0x2d4>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800544e:	4b84      	ldr	r3, [pc, #528]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005450:	2200      	movs	r2, #0
 8005452:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                        SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8005456:	4b82      	ldr	r3, [pc, #520]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005458:	2200      	movs	r2, #0
 800545a:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800545e:	4b80      	ldr	r3, [pc, #512]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005460:	2200      	movs	r2, #0
 8005462:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 8005466:	4b7e      	ldr	r3, [pc, #504]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005468:	2200      	movs	r2, #0
 800546a:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                        break;
 800546e:	e17e      	b.n	800576e <SX1276OnDio0Irq+0x3d6>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 8005470:	4b7b      	ldr	r3, [pc, #492]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005472:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005476:	2b00      	cmp	r3, #0
 8005478:	d133      	bne.n	80054e2 <SX1276OnDio0Irq+0x14a>
 800547a:	4b79      	ldr	r3, [pc, #484]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 800547c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005480:	2b00      	cmp	r3, #0
 8005482:	d12e      	bne.n	80054e2 <SX1276OnDio0Irq+0x14a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8005484:	4b76      	ldr	r3, [pc, #472]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005486:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800548a:	f083 0301 	eor.w	r3, r3, #1
 800548e:	b2db      	uxtb	r3, r3
 8005490:	2b00      	cmp	r3, #0
 8005492:	d004      	beq.n	800549e <SX1276OnDio0Irq+0x106>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8005494:	2101      	movs	r1, #1
 8005496:	4876      	ldr	r0, [pc, #472]	; (8005670 <SX1276OnDio0Irq+0x2d8>)
 8005498:	f7ff fd2c 	bl	8004ef4 <SX1276ReadFifo>
 800549c:	e007      	b.n	80054ae <SX1276OnDio0Irq+0x116>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800549e:	2032      	movs	r0, #50	; 0x32
 80054a0:	f7ff fc9e 	bl	8004de0 <SX1276Read>
 80054a4:	4603      	mov	r3, r0
 80054a6:	b29a      	uxth	r2, r3
 80054a8:	4b6d      	ldr	r3, [pc, #436]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80054aa:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80054ae:	4b6c      	ldr	r3, [pc, #432]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80054b0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80054b4:	461a      	mov	r2, r3
 80054b6:	4b6f      	ldr	r3, [pc, #444]	; (8005674 <SX1276OnDio0Irq+0x2dc>)
 80054b8:	18d0      	adds	r0, r2, r3
 80054ba:	4b69      	ldr	r3, [pc, #420]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80054bc:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80054c0:	b2da      	uxtb	r2, r3
 80054c2:	4b67      	ldr	r3, [pc, #412]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80054c4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	4619      	mov	r1, r3
 80054d0:	f7ff fd10 	bl	8004ef4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80054d4:	4b62      	ldr	r3, [pc, #392]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80054d6:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 80054da:	4b61      	ldr	r3, [pc, #388]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80054dc:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 80054e0:	e018      	b.n	8005514 <SX1276OnDio0Irq+0x17c>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80054e2:	4b5f      	ldr	r3, [pc, #380]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80054e4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80054e8:	461a      	mov	r2, r3
 80054ea:	4b62      	ldr	r3, [pc, #392]	; (8005674 <SX1276OnDio0Irq+0x2dc>)
 80054ec:	18d0      	adds	r0, r2, r3
 80054ee:	4b5c      	ldr	r3, [pc, #368]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80054f0:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	4b5a      	ldr	r3, [pc, #360]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80054f8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	b2db      	uxtb	r3, r3
 8005502:	4619      	mov	r1, r3
 8005504:	f7ff fcf6 	bl	8004ef4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005508:	4b55      	ldr	r3, [pc, #340]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 800550a:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 800550e:	4b54      	ldr	r3, [pc, #336]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005510:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                TimerStop( &RxTimeoutTimer );
 8005514:	4853      	ldr	r0, [pc, #332]	; (8005664 <SX1276OnDio0Irq+0x2cc>)
 8005516:	f001 fd0d 	bl	8006f34 <TimerStop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800551a:	4b51      	ldr	r3, [pc, #324]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 800551c:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8005520:	f083 0301 	eor.w	r3, r3, #1
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <SX1276OnDio0Irq+0x1a2>
                    SX1276.Settings.State = RF_IDLE;
 800552a:	4b4d      	ldr	r3, [pc, #308]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 800552c:	2200      	movs	r2, #0
 800552e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutSyncWord );
 8005532:	484d      	ldr	r0, [pc, #308]	; (8005668 <SX1276OnDio0Irq+0x2d0>)
 8005534:	f001 fcfe 	bl	8006f34 <TimerStop>
 8005538:	e00a      	b.n	8005550 <SX1276OnDio0Irq+0x1b8>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800553a:	200d      	movs	r0, #13
 800553c:	f7ff fc50 	bl	8004de0 <SX1276Read>
 8005540:	4603      	mov	r3, r0
 8005542:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005546:	b2db      	uxtb	r3, r3
 8005548:	4619      	mov	r1, r3
 800554a:	200d      	movs	r0, #13
 800554c:	f7ff fc38 	bl	8004dc0 <SX1276Write>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005550:	4b46      	ldr	r3, [pc, #280]	; (800566c <SX1276OnDio0Irq+0x2d4>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d011      	beq.n	800557c <SX1276OnDio0Irq+0x1e4>
 8005558:	4b44      	ldr	r3, [pc, #272]	; (800566c <SX1276OnDio0Irq+0x2d4>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00c      	beq.n	800557c <SX1276OnDio0Irq+0x1e4>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 8005562:	4b42      	ldr	r3, [pc, #264]	; (800566c <SX1276OnDio0Irq+0x2d4>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	689c      	ldr	r4, [r3, #8]
 8005568:	4b3d      	ldr	r3, [pc, #244]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 800556a:	f8b3 107a 	ldrh.w	r1, [r3, #122]	; 0x7a
 800556e:	4b3c      	ldr	r3, [pc, #240]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005570:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8005574:	b21a      	sxth	r2, r3
 8005576:	2300      	movs	r3, #0
 8005578:	483e      	ldr	r0, [pc, #248]	; (8005674 <SX1276OnDio0Irq+0x2dc>)
 800557a:	47a0      	blx	r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800557c:	4b38      	ldr	r3, [pc, #224]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 800557e:	2200      	movs	r2, #0
 8005580:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                SX1276.Settings.FskPacketHandler.SyncWordDetected = false;
 8005584:	4b36      	ldr	r3, [pc, #216]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005586:	2200      	movs	r2, #0
 8005588:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800558c:	4b34      	ldr	r3, [pc, #208]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                SX1276.Settings.FskPacketHandler.Size = 0;
 8005594:	4b32      	ldr	r3, [pc, #200]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005596:	2200      	movs	r2, #0
 8005598:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                break;
 800559c:	e0e7      	b.n	800576e <SX1276OnDio0Irq+0x3d6>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800559e:	2140      	movs	r1, #64	; 0x40
 80055a0:	2012      	movs	r0, #18
 80055a2:	f7ff fc0d 	bl	8004dc0 <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 80055a6:	2012      	movs	r0, #18
 80055a8:	f7ff fc1a 	bl	8004de0 <SX1276Read>
 80055ac:	4603      	mov	r3, r0
 80055ae:	737b      	strb	r3, [r7, #13]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 80055b0:	7b7b      	ldrb	r3, [r7, #13]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d122      	bne.n	8005602 <SX1276OnDio0Irq+0x26a>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 80055bc:	2120      	movs	r1, #32
 80055be:	2012      	movs	r0, #18
 80055c0:	f7ff fbfe 	bl	8004dc0 <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 80055c4:	4b26      	ldr	r3, [pc, #152]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80055c6:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80055ca:	f083 0301 	eor.w	r3, r3, #1
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <SX1276OnDio0Irq+0x244>
                            SX1276.Settings.State = RF_IDLE;
 80055d4:	4b22      	ldr	r3, [pc, #136]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                        TimerStop( &RxTimeoutTimer );
 80055dc:	4821      	ldr	r0, [pc, #132]	; (8005664 <SX1276OnDio0Irq+0x2cc>)
 80055de:	f001 fca9 	bl	8006f34 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 80055e2:	4b22      	ldr	r3, [pc, #136]	; (800566c <SX1276OnDio0Irq+0x2d4>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	f000 80be 	beq.w	8005768 <SX1276OnDio0Irq+0x3d0>
 80055ec:	4b1f      	ldr	r3, [pc, #124]	; (800566c <SX1276OnDio0Irq+0x2d4>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f000 80b8 	beq.w	8005768 <SX1276OnDio0Irq+0x3d0>
                            RadioEvents->RxError( );
 80055f8:	4b1c      	ldr	r3, [pc, #112]	; (800566c <SX1276OnDio0Irq+0x2d4>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	4798      	blx	r3
                        break;
 8005600:	e0b2      	b.n	8005768 <SX1276OnDio0Irq+0x3d0>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 8005602:	2019      	movs	r0, #25
 8005604:	f7ff fbec 	bl	8004de0 <SX1276Read>
 8005608:	4603      	mov	r3, r0
 800560a:	b25b      	sxtb	r3, r3
 800560c:	3302      	adds	r3, #2
 800560e:	109b      	asrs	r3, r3, #2
 8005610:	b25a      	sxtb	r2, r3
 8005612:	4b13      	ldr	r3, [pc, #76]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005614:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 8005618:	201a      	movs	r0, #26
 800561a:	f7ff fbe1 	bl	8004de0 <SX1276Read>
 800561e:	4603      	mov	r3, r0
 8005620:	81fb      	strh	r3, [r7, #14]
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005624:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8005628:	2b00      	cmp	r3, #0
 800562a:	da3c      	bge.n	80056a6 <SX1276OnDio0Irq+0x30e>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 800562e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005630:	4a11      	ldr	r2, [pc, #68]	; (8005678 <SX1276OnDio0Irq+0x2e0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d922      	bls.n	800567c <SX1276OnDio0Irq+0x2e4>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 8005636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800563a:	111b      	asrs	r3, r3, #4
 800563c:	b21b      	sxth	r3, r3
 800563e:	b29a      	uxth	r2, r3
 8005640:	89fb      	ldrh	r3, [r7, #14]
 8005642:	4413      	add	r3, r2
 8005644:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 8005646:	4b06      	ldr	r3, [pc, #24]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 8005648:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 800564c:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800564e:	4413      	add	r3, r2
 8005650:	b29b      	uxth	r3, r3
 8005652:	3b9d      	subs	r3, #157	; 0x9d
 8005654:	b29b      	uxth	r3, r3
 8005656:	b21a      	sxth	r2, r3
 8005658:	4b01      	ldr	r3, [pc, #4]	; (8005660 <SX1276OnDio0Irq+0x2c8>)
 800565a:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 800565e:	e044      	b.n	80056ea <SX1276OnDio0Irq+0x352>
 8005660:	20000378 	.word	0x20000378
 8005664:	20000420 	.word	0x20000420
 8005668:	20000360 	.word	0x20000360
 800566c:	200000c8 	.word	0x200000c8
 8005670:	200003f2 	.word	0x200003f2
 8005674:	200000cc 	.word	0x200000cc
 8005678:	1f4add40 	.word	0x1f4add40
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800567c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005680:	111b      	asrs	r3, r3, #4
 8005682:	b21b      	sxth	r3, r3
 8005684:	b29a      	uxth	r2, r3
 8005686:	89fb      	ldrh	r3, [r7, #14]
 8005688:	4413      	add	r3, r2
 800568a:	b29a      	uxth	r2, r3
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800568c:	4b4a      	ldr	r3, [pc, #296]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 800568e:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8005692:	b29b      	uxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 8005694:	4413      	add	r3, r2
 8005696:	b29b      	uxth	r3, r3
 8005698:	3ba4      	subs	r3, #164	; 0xa4
 800569a:	b29b      	uxth	r3, r3
 800569c:	b21a      	sxth	r2, r3
 800569e:	4b46      	ldr	r3, [pc, #280]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 80056a0:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80056a4:	e021      	b.n	80056ea <SX1276OnDio0Irq+0x352>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 80056a6:	4b44      	ldr	r3, [pc, #272]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 80056a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056aa:	4a44      	ldr	r2, [pc, #272]	; (80057bc <SX1276OnDio0Irq+0x424>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d90e      	bls.n	80056ce <SX1276OnDio0Irq+0x336>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 80056b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056b4:	111b      	asrs	r3, r3, #4
 80056b6:	b21b      	sxth	r3, r3
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	89fb      	ldrh	r3, [r7, #14]
 80056bc:	4413      	add	r3, r2
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b9d      	subs	r3, #157	; 0x9d
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	b21a      	sxth	r2, r3
 80056c6:	4b3c      	ldr	r3, [pc, #240]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 80056c8:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
 80056cc:	e00d      	b.n	80056ea <SX1276OnDio0Irq+0x352>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 80056ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80056d2:	111b      	asrs	r3, r3, #4
 80056d4:	b21b      	sxth	r3, r3
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	89fb      	ldrh	r3, [r7, #14]
 80056da:	4413      	add	r3, r2
 80056dc:	b29b      	uxth	r3, r3
 80056de:	3ba4      	subs	r3, #164	; 0xa4
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	b21a      	sxth	r2, r3
 80056e4:	4b34      	ldr	r3, [pc, #208]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 80056e6:	f8a3 20a2 	strh.w	r2, [r3, #162]	; 0xa2
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 80056ea:	2013      	movs	r0, #19
 80056ec:	f7ff fb78 	bl	8004de0 <SX1276Read>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	4b30      	ldr	r3, [pc, #192]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 80056f6:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 80056fa:	2010      	movs	r0, #16
 80056fc:	f7ff fb70 	bl	8004de0 <SX1276Read>
 8005700:	4603      	mov	r3, r0
 8005702:	4619      	mov	r1, r3
 8005704:	200d      	movs	r0, #13
 8005706:	f7ff fb5b 	bl	8004dc0 <SX1276Write>
                    SX1276ReadFifo( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size );
 800570a:	4b2b      	ldr	r3, [pc, #172]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 800570c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8005710:	4619      	mov	r1, r3
 8005712:	482b      	ldr	r0, [pc, #172]	; (80057c0 <SX1276OnDio0Irq+0x428>)
 8005714:	f7ff fbee 	bl	8004ef4 <SX1276ReadFifo>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 8005718:	4b27      	ldr	r3, [pc, #156]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 800571a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800571e:	f083 0301 	eor.w	r3, r3, #1
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d003      	beq.n	8005730 <SX1276OnDio0Irq+0x398>
                        SX1276.Settings.State = RF_IDLE;
 8005728:	4b23      	ldr	r3, [pc, #140]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 800572a:	2200      	movs	r2, #0
 800572c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                    TimerStop( &RxTimeoutTimer );
 8005730:	4824      	ldr	r0, [pc, #144]	; (80057c4 <SX1276OnDio0Irq+0x42c>)
 8005732:	f001 fbff 	bl	8006f34 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8005736:	4b24      	ldr	r3, [pc, #144]	; (80057c8 <SX1276OnDio0Irq+0x430>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d016      	beq.n	800576c <SX1276OnDio0Irq+0x3d4>
 800573e:	4b22      	ldr	r3, [pc, #136]	; (80057c8 <SX1276OnDio0Irq+0x430>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d011      	beq.n	800576c <SX1276OnDio0Irq+0x3d4>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 8005748:	4b1f      	ldr	r3, [pc, #124]	; (80057c8 <SX1276OnDio0Irq+0x430>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689c      	ldr	r4, [r3, #8]
 800574e:	4b1a      	ldr	r3, [pc, #104]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 8005750:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8005754:	b299      	uxth	r1, r3
 8005756:	4b18      	ldr	r3, [pc, #96]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 8005758:	f9b3 20a2 	ldrsh.w	r2, [r3, #162]	; 0xa2
 800575c:	4b16      	ldr	r3, [pc, #88]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 800575e:	f993 30a0 	ldrsb.w	r3, [r3, #160]	; 0xa0
 8005762:	4817      	ldr	r0, [pc, #92]	; (80057c0 <SX1276OnDio0Irq+0x428>)
 8005764:	47a0      	blx	r4
                break;
 8005766:	e001      	b.n	800576c <SX1276OnDio0Irq+0x3d4>
                        break;
 8005768:	bf00      	nop
 800576a:	e020      	b.n	80057ae <SX1276OnDio0Irq+0x416>
                break;
 800576c:	bf00      	nop
            break;
 800576e:	e01e      	b.n	80057ae <SX1276OnDio0Irq+0x416>
            TimerStop( &TxTimeoutTimer );
 8005770:	4816      	ldr	r0, [pc, #88]	; (80057cc <SX1276OnDio0Irq+0x434>)
 8005772:	f001 fbdf 	bl	8006f34 <TimerStop>
            switch( SX1276.Settings.Modem )
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 8005778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800577c:	2b01      	cmp	r3, #1
 800577e:	d103      	bne.n	8005788 <SX1276OnDio0Irq+0x3f0>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8005780:	2108      	movs	r1, #8
 8005782:	2012      	movs	r0, #18
 8005784:	f7ff fb1c 	bl	8004dc0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 8005788:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <SX1276OnDio0Irq+0x420>)
 800578a:	2200      	movs	r2, #0
 800578c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8005790:	4b0d      	ldr	r3, [pc, #52]	; (80057c8 <SX1276OnDio0Irq+0x430>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <SX1276OnDio0Irq+0x412>
 8005798:	4b0b      	ldr	r3, [pc, #44]	; (80057c8 <SX1276OnDio0Irq+0x430>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <SX1276OnDio0Irq+0x412>
                    RadioEvents->TxDone( );
 80057a2:	4b09      	ldr	r3, [pc, #36]	; (80057c8 <SX1276OnDio0Irq+0x430>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4798      	blx	r3
                break;
 80057aa:	bf00      	nop
            break;
 80057ac:	bf00      	nop
    }
}
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd90      	pop	{r4, r7, pc}
 80057b6:	bf00      	nop
 80057b8:	20000378 	.word	0x20000378
 80057bc:	1f4add40 	.word	0x1f4add40
 80057c0:	200000cc 	.word	0x200000cc
 80057c4:	20000420 	.word	0x20000420
 80057c8:	200000c8 	.word	0x200000c8
 80057cc:	20000348 	.word	0x20000348

080057d0 <SX1276OnDio1Irq>:

static void SX1276OnDio1Irq( void* context )
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b082      	sub	sp, #8
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 80057d8:	4b7a      	ldr	r3, [pc, #488]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80057da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d003      	beq.n	80057ea <SX1276OnDio1Irq+0x1a>
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	f000 809a 	beq.w	800591c <SX1276OnDio1Irq+0x14c>
            default:
                break;
            }
            break;
        default:
            break;
 80057e8:	e0e7      	b.n	80059ba <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 80057ea:	4b76      	ldr	r3, [pc, #472]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80057ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d002      	beq.n	80057fa <SX1276OnDio1Irq+0x2a>
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d06d      	beq.n	80058d4 <SX1276OnDio1Irq+0x104>
                break;
 80057f8:	e08f      	b.n	800591a <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 80057fa:	f001 f9fb 	bl	8006bf4 <SX1276GetDio1PinState>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8085 	beq.w	8005910 <SX1276OnDio1Irq+0x140>
                TimerStop( &RxTimeoutSyncWord );
 8005806:	4870      	ldr	r0, [pc, #448]	; (80059c8 <SX1276OnDio1Irq+0x1f8>)
 8005808:	f001 fb94 	bl	8006f34 <TimerStop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800580c:	4b6d      	ldr	r3, [pc, #436]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800580e:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005812:	2b00      	cmp	r3, #0
 8005814:	d119      	bne.n	800584a <SX1276OnDio1Irq+0x7a>
 8005816:	4b6b      	ldr	r3, [pc, #428]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005818:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d114      	bne.n	800584a <SX1276OnDio1Irq+0x7a>
                    if( SX1276.Settings.Fsk.FixLen == false )
 8005820:	4b68      	ldr	r3, [pc, #416]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005822:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005826:	f083 0301 	eor.w	r3, r3, #1
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d004      	beq.n	800583a <SX1276OnDio1Irq+0x6a>
                        SX1276ReadFifo( ( uint8_t* )&SX1276.Settings.FskPacketHandler.Size, 1 );
 8005830:	2101      	movs	r1, #1
 8005832:	4866      	ldr	r0, [pc, #408]	; (80059cc <SX1276OnDio1Irq+0x1fc>)
 8005834:	f7ff fb5e 	bl	8004ef4 <SX1276ReadFifo>
 8005838:	e007      	b.n	800584a <SX1276OnDio1Irq+0x7a>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800583a:	2032      	movs	r0, #50	; 0x32
 800583c:	f7ff fad0 	bl	8004de0 <SX1276Read>
 8005840:	4603      	mov	r3, r0
 8005842:	b29a      	uxth	r2, r3
 8005844:	4b5f      	ldr	r3, [pc, #380]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005846:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800584a:	4b5e      	ldr	r3, [pc, #376]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800584c:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005850:	461a      	mov	r2, r3
 8005852:	4b5c      	ldr	r3, [pc, #368]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005854:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	4a5a      	ldr	r2, [pc, #360]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800585c:	f892 207e 	ldrb.w	r2, [r2, #126]	; 0x7e
 8005860:	4293      	cmp	r3, r2
 8005862:	db1d      	blt.n	80058a0 <SX1276OnDio1Irq+0xd0>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 8005864:	4b57      	ldr	r3, [pc, #348]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005866:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800586a:	461a      	mov	r2, r3
 800586c:	4b58      	ldr	r3, [pc, #352]	; (80059d0 <SX1276OnDio1Irq+0x200>)
 800586e:	441a      	add	r2, r3
 8005870:	4b54      	ldr	r3, [pc, #336]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005872:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 8005876:	3b01      	subs	r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7ff fb39 	bl	8004ef4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 8005882:	4b50      	ldr	r3, [pc, #320]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005884:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 8005888:	4b4e      	ldr	r3, [pc, #312]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800588a:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
 800588e:	b29b      	uxth	r3, r3
 8005890:	4413      	add	r3, r2
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	4b4a      	ldr	r3, [pc, #296]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800589a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 800589e:	e03c      	b.n	800591a <SX1276OnDio1Irq+0x14a>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80058a0:	4b48      	ldr	r3, [pc, #288]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80058a2:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80058a6:	461a      	mov	r2, r3
 80058a8:	4b49      	ldr	r3, [pc, #292]	; (80059d0 <SX1276OnDio1Irq+0x200>)
 80058aa:	18d0      	adds	r0, r2, r3
 80058ac:	4b45      	ldr	r3, [pc, #276]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80058ae:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	4b43      	ldr	r3, [pc, #268]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80058b6:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	4619      	mov	r1, r3
 80058c2:	f7ff fb17 	bl	8004ef4 <SX1276ReadFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 80058c6:	4b3f      	ldr	r3, [pc, #252]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80058c8:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 80058cc:	4b3d      	ldr	r3, [pc, #244]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80058ce:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 80058d2:	e022      	b.n	800591a <SX1276OnDio1Irq+0x14a>
                if( SX1276GetDio1PinState( ) == 0 )
 80058d4:	f001 f98e 	bl	8006bf4 <SX1276GetDio1PinState>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d01a      	beq.n	8005914 <SX1276OnDio1Irq+0x144>
                TimerStop( &RxTimeoutTimer );
 80058de:	483d      	ldr	r0, [pc, #244]	; (80059d4 <SX1276OnDio1Irq+0x204>)
 80058e0:	f001 fb28 	bl	8006f34 <TimerStop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 80058e4:	2180      	movs	r1, #128	; 0x80
 80058e6:	2012      	movs	r0, #18
 80058e8:	f7ff fa6a 	bl	8004dc0 <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 80058ec:	4b35      	ldr	r3, [pc, #212]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80058f4:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <SX1276OnDio1Irq+0x208>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00d      	beq.n	8005918 <SX1276OnDio1Irq+0x148>
 80058fc:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <SX1276OnDio1Irq+0x208>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d008      	beq.n	8005918 <SX1276OnDio1Irq+0x148>
                    RadioEvents->RxTimeout( );
 8005906:	4b34      	ldr	r3, [pc, #208]	; (80059d8 <SX1276OnDio1Irq+0x208>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	4798      	blx	r3
                break;
 800590e:	e003      	b.n	8005918 <SX1276OnDio1Irq+0x148>
                    break;
 8005910:	bf00      	nop
 8005912:	e052      	b.n	80059ba <SX1276OnDio1Irq+0x1ea>
                    break;
 8005914:	bf00      	nop
 8005916:	e050      	b.n	80059ba <SX1276OnDio1Irq+0x1ea>
                break;
 8005918:	bf00      	nop
            break;
 800591a:	e04e      	b.n	80059ba <SX1276OnDio1Irq+0x1ea>
            switch( SX1276.Settings.Modem )
 800591c:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800591e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <SX1276OnDio1Irq+0x15a>
 8005926:	2b01      	cmp	r3, #1
                break;
 8005928:	e046      	b.n	80059b8 <SX1276OnDio1Irq+0x1e8>
                if( SX1276GetDio1PinState( ) == 1 )
 800592a:	f001 f963 	bl	8006bf4 <SX1276GetDio1PinState>
 800592e:	4603      	mov	r3, r0
 8005930:	2b01      	cmp	r3, #1
 8005932:	d040      	beq.n	80059b6 <SX1276OnDio1Irq+0x1e6>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 8005934:	4b23      	ldr	r3, [pc, #140]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005936:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 800593a:	461a      	mov	r2, r3
 800593c:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800593e:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005946:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 800594a:	4293      	cmp	r3, r2
 800594c:	dd19      	ble.n	8005982 <SX1276OnDio1Irq+0x1b2>
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005950:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005954:	461a      	mov	r2, r3
 8005956:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <SX1276OnDio1Irq+0x200>)
 8005958:	4413      	add	r3, r2
 800595a:	4a1a      	ldr	r2, [pc, #104]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800595c:	f892 207f 	ldrb.w	r2, [r2, #127]	; 0x7f
 8005960:	4611      	mov	r1, r2
 8005962:	4618      	mov	r0, r3
 8005964:	f7ff fab6 	bl	8004ed4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 8005968:	4b16      	ldr	r3, [pc, #88]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800596a:	f8b3 207c 	ldrh.w	r2, [r3, #124]	; 0x7c
 800596e:	4b15      	ldr	r3, [pc, #84]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005970:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8005974:	b29b      	uxth	r3, r3
 8005976:	4413      	add	r3, r2
 8005978:	b29a      	uxth	r2, r3
 800597a:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 800597c:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 8005980:	e01a      	b.n	80059b8 <SX1276OnDio1Irq+0x1e8>
                    SX1276WriteFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 8005982:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005984:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 8005988:	461a      	mov	r2, r3
 800598a:	4b11      	ldr	r3, [pc, #68]	; (80059d0 <SX1276OnDio1Irq+0x200>)
 800598c:	18d0      	adds	r0, r2, r3
 800598e:	4b0d      	ldr	r3, [pc, #52]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005990:	f8b3 307a 	ldrh.w	r3, [r3, #122]	; 0x7a
 8005994:	b2da      	uxtb	r2, r3
 8005996:	4b0b      	ldr	r3, [pc, #44]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 8005998:	f8b3 307c 	ldrh.w	r3, [r3, #124]	; 0x7c
 800599c:	b2db      	uxtb	r3, r3
 800599e:	1ad3      	subs	r3, r2, r3
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	4619      	mov	r1, r3
 80059a4:	f7ff fa96 	bl	8004ed4 <SX1276WriteFifo>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 80059a8:	4b06      	ldr	r3, [pc, #24]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80059aa:	f8b3 207a 	ldrh.w	r2, [r3, #122]	; 0x7a
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <SX1276OnDio1Irq+0x1f4>)
 80059b0:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
                break;
 80059b4:	e000      	b.n	80059b8 <SX1276OnDio1Irq+0x1e8>
                    break;
 80059b6:	bf00      	nop
            break;
 80059b8:	bf00      	nop
    }
}
 80059ba:	bf00      	nop
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	20000378 	.word	0x20000378
 80059c8:	20000360 	.word	0x20000360
 80059cc:	200003f2 	.word	0x200003f2
 80059d0:	200000cc 	.word	0x200000cc
 80059d4:	20000420 	.word	0x20000420
 80059d8:	200000c8 	.word	0x200000c8

080059dc <SX1276OnDio2Irq>:

static void SX1276OnDio2Irq( void* context )
{
 80059dc:	b590      	push	{r4, r7, lr}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.State )
 80059e4:	4b52      	ldr	r3, [pc, #328]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 80059e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059ea:	2b01      	cmp	r3, #1
 80059ec:	d002      	beq.n	80059f4 <SX1276OnDio2Irq+0x18>
 80059ee:	2b02      	cmp	r3, #2
 80059f0:	d06e      	beq.n	8005ad0 <SX1276OnDio2Irq+0xf4>
            default:
                break;
            }
            break;
        default:
            break;
 80059f2:	e099      	b.n	8005b28 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 80059f4:	4b4e      	ldr	r3, [pc, #312]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 80059f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d002      	beq.n	8005a04 <SX1276OnDio2Irq+0x28>
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d043      	beq.n	8005a8a <SX1276OnDio2Irq+0xae>
                break;
 8005a02:	e064      	b.n	8005ace <SX1276OnDio2Irq+0xf2>
                if( SX1276.DIO4.port == NULL )
 8005a04:	4b4a      	ldr	r3, [pc, #296]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d103      	bne.n	8005a14 <SX1276OnDio2Irq+0x38>
                    SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005a0c:	4b48      	ldr	r3, [pc, #288]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 8005a14:	4b46      	ldr	r3, [pc, #280]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005a16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d054      	beq.n	8005ac8 <SX1276OnDio2Irq+0xec>
 8005a1e:	4b44      	ldr	r3, [pc, #272]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005a20:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d14f      	bne.n	8005ac8 <SX1276OnDio2Irq+0xec>
                    TimerStop( &RxTimeoutSyncWord );
 8005a28:	4842      	ldr	r0, [pc, #264]	; (8005b34 <SX1276OnDio2Irq+0x158>)
 8005a2a:	f001 fa83 	bl	8006f34 <TimerStop>
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 8005a2e:	4b40      	ldr	r3, [pc, #256]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 8005a36:	2011      	movs	r0, #17
 8005a38:	f7ff f9d2 	bl	8004de0 <SX1276Read>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	085b      	lsrs	r3, r3, #1
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	425b      	negs	r3, r3
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	b25a      	sxtb	r2, r3
 8005a48:	4b39      	ldr	r3, [pc, #228]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005a4a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005a4e:	201b      	movs	r0, #27
 8005a50:	f7ff f9c6 	bl	8004de0 <SX1276Read>
 8005a54:	4603      	mov	r3, r0
 8005a56:	021c      	lsls	r4, r3, #8
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 8005a58:	201c      	movs	r0, #28
 8005a5a:	f7ff f9c1 	bl	8004de0 <SX1276Read>
 8005a5e:	4603      	mov	r3, r0
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 8005a60:	4323      	orrs	r3, r4
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7ff faaa 	bl	8004fbc <SX1276ConvertPllStepToFreqInHz>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	4b30      	ldr	r3, [pc, #192]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005a6e:	675a      	str	r2, [r3, #116]	; 0x74
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 8005a70:	200c      	movs	r0, #12
 8005a72:	f7ff f9b5 	bl	8004de0 <SX1276Read>
 8005a76:	4603      	mov	r3, r0
 8005a78:	095b      	lsrs	r3, r3, #5
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	b2da      	uxtb	r2, r3
 8005a82:	4b2b      	ldr	r3, [pc, #172]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005a84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                break;
 8005a88:	e01e      	b.n	8005ac8 <SX1276OnDio2Irq+0xec>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005a8a:	4b29      	ldr	r3, [pc, #164]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005a8c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d01b      	beq.n	8005acc <SX1276OnDio2Irq+0xf0>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005a94:	2102      	movs	r1, #2
 8005a96:	2012      	movs	r0, #18
 8005a98:	f7ff f992 	bl	8004dc0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005a9c:	4b26      	ldr	r3, [pc, #152]	; (8005b38 <SX1276OnDio2Irq+0x15c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d013      	beq.n	8005acc <SX1276OnDio2Irq+0xf0>
 8005aa4:	4b24      	ldr	r3, [pc, #144]	; (8005b38 <SX1276OnDio2Irq+0x15c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695b      	ldr	r3, [r3, #20]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00e      	beq.n	8005acc <SX1276OnDio2Irq+0xf0>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005aae:	4b22      	ldr	r3, [pc, #136]	; (8005b38 <SX1276OnDio2Irq+0x15c>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695c      	ldr	r4, [r3, #20]
 8005ab4:	201c      	movs	r0, #28
 8005ab6:	f7ff f993 	bl	8004de0 <SX1276Read>
 8005aba:	4603      	mov	r3, r0
 8005abc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	47a0      	blx	r4
                break;
 8005ac6:	e001      	b.n	8005acc <SX1276OnDio2Irq+0xf0>
                break;
 8005ac8:	bf00      	nop
 8005aca:	e02d      	b.n	8005b28 <SX1276OnDio2Irq+0x14c>
                break;
 8005acc:	bf00      	nop
            break;
 8005ace:	e02b      	b.n	8005b28 <SX1276OnDio2Irq+0x14c>
            switch( SX1276.Settings.Modem )
 8005ad0:	4b17      	ldr	r3, [pc, #92]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d020      	beq.n	8005b1c <SX1276OnDio2Irq+0x140>
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d120      	bne.n	8005b20 <SX1276OnDio2Irq+0x144>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 8005ade:	4b14      	ldr	r3, [pc, #80]	; (8005b30 <SX1276OnDio2Irq+0x154>)
 8005ae0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d01d      	beq.n	8005b24 <SX1276OnDio2Irq+0x148>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8005ae8:	2102      	movs	r1, #2
 8005aea:	2012      	movs	r0, #18
 8005aec:	f7ff f968 	bl	8004dc0 <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8005af0:	4b11      	ldr	r3, [pc, #68]	; (8005b38 <SX1276OnDio2Irq+0x15c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d015      	beq.n	8005b24 <SX1276OnDio2Irq+0x148>
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <SX1276OnDio2Irq+0x15c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d010      	beq.n	8005b24 <SX1276OnDio2Irq+0x148>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8005b02:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <SX1276OnDio2Irq+0x15c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695c      	ldr	r4, [r3, #20]
 8005b08:	201c      	movs	r0, #28
 8005b0a:	f7ff f969 	bl	8004de0 <SX1276Read>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	4618      	mov	r0, r3
 8005b18:	47a0      	blx	r4
                break;
 8005b1a:	e003      	b.n	8005b24 <SX1276OnDio2Irq+0x148>
                break;
 8005b1c:	bf00      	nop
 8005b1e:	e002      	b.n	8005b26 <SX1276OnDio2Irq+0x14a>
                break;
 8005b20:	bf00      	nop
 8005b22:	e000      	b.n	8005b26 <SX1276OnDio2Irq+0x14a>
                break;
 8005b24:	bf00      	nop
            break;
 8005b26:	bf00      	nop
    }
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd90      	pop	{r4, r7, pc}
 8005b30:	20000378 	.word	0x20000378
 8005b34:	20000360 	.word	0x20000360
 8005b38:	200000c8 	.word	0x200000c8

08005b3c <SX1276OnDio3Irq>:

static void SX1276OnDio3Irq( void* context )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8005b44:	4b1e      	ldr	r3, [pc, #120]	; (8005bc0 <SX1276OnDio3Irq+0x84>)
 8005b46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d030      	beq.n	8005bb0 <SX1276OnDio3Irq+0x74>
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d000      	beq.n	8005b54 <SX1276OnDio3Irq+0x18>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 8005b52:	e030      	b.n	8005bb6 <SX1276OnDio3Irq+0x7a>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8005b54:	2012      	movs	r0, #18
 8005b56:	f7ff f943 	bl	8004de0 <SX1276Read>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	f003 0301 	and.w	r3, r3, #1
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d112      	bne.n	8005b8a <SX1276OnDio3Irq+0x4e>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8005b64:	2105      	movs	r1, #5
 8005b66:	2012      	movs	r0, #18
 8005b68:	f7ff f92a 	bl	8004dc0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005b6c:	4b15      	ldr	r3, [pc, #84]	; (8005bc4 <SX1276OnDio3Irq+0x88>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d01f      	beq.n	8005bb4 <SX1276OnDio3Irq+0x78>
 8005b74:	4b13      	ldr	r3, [pc, #76]	; (8005bc4 <SX1276OnDio3Irq+0x88>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d01a      	beq.n	8005bb4 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( true );
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <SX1276OnDio3Irq+0x88>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	2001      	movs	r0, #1
 8005b86:	4798      	blx	r3
        break;
 8005b88:	e014      	b.n	8005bb4 <SX1276OnDio3Irq+0x78>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8005b8a:	2104      	movs	r1, #4
 8005b8c:	2012      	movs	r0, #18
 8005b8e:	f7ff f917 	bl	8004dc0 <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8005b92:	4b0c      	ldr	r3, [pc, #48]	; (8005bc4 <SX1276OnDio3Irq+0x88>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00c      	beq.n	8005bb4 <SX1276OnDio3Irq+0x78>
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <SX1276OnDio3Irq+0x88>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d007      	beq.n	8005bb4 <SX1276OnDio3Irq+0x78>
                RadioEvents->CadDone( false );
 8005ba4:	4b07      	ldr	r3, [pc, #28]	; (8005bc4 <SX1276OnDio3Irq+0x88>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	699b      	ldr	r3, [r3, #24]
 8005baa:	2000      	movs	r0, #0
 8005bac:	4798      	blx	r3
        break;
 8005bae:	e001      	b.n	8005bb4 <SX1276OnDio3Irq+0x78>
        break;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <SX1276OnDio3Irq+0x7a>
        break;
 8005bb4:	bf00      	nop
    }
}
 8005bb6:	bf00      	nop
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000378 	.word	0x20000378
 8005bc4:	200000c8 	.word	0x200000c8

08005bc8 <SX1276OnDio4Irq>:

static void SX1276OnDio4Irq( void* context )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
    switch( SX1276.Settings.Modem )
 8005bd0:	4b0c      	ldr	r3, [pc, #48]	; (8005c04 <SX1276OnDio4Irq+0x3c>)
 8005bd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d002      	beq.n	8005be0 <SX1276OnDio4Irq+0x18>
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d00a      	beq.n	8005bf4 <SX1276OnDio4Irq+0x2c>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 8005bde:	e00c      	b.n	8005bfa <SX1276OnDio4Irq+0x32>
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 8005be0:	4b08      	ldr	r3, [pc, #32]	; (8005c04 <SX1276OnDio4Irq+0x3c>)
 8005be2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d106      	bne.n	8005bf8 <SX1276OnDio4Irq+0x30>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 8005bea:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <SX1276OnDio4Irq+0x3c>)
 8005bec:	2201      	movs	r2, #1
 8005bee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
        break;
 8005bf2:	e001      	b.n	8005bf8 <SX1276OnDio4Irq+0x30>
        break;
 8005bf4:	bf00      	nop
 8005bf6:	e000      	b.n	8005bfa <SX1276OnDio4Irq+0x32>
        break;
 8005bf8:	bf00      	nop
    }
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bc80      	pop	{r7}
 8005c02:	4770      	bx	lr
 8005c04:	20000378 	.word	0x20000378

08005c08 <BoardCriticalSectionBegin>:

uint8_t Uart2TxBuffer[UART2_FIFO_TX_SIZE];
uint8_t Uart2RxBuffer[UART2_FIFO_RX_SIZE];

void BoardCriticalSectionBegin( uint32_t *mask )
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c10:	f3ef 8310 	mrs	r3, PRIMASK
 8005c14:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c16:	68fa      	ldr	r2, [r7, #12]
    *mask = __get_PRIMASK( );
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c1c:	b672      	cpsid	i
}
 8005c1e:	bf00      	nop
    __disable_irq( );
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bc80      	pop	{r7}
 8005c28:	4770      	bx	lr

08005c2a <BoardCriticalSectionEnd>:

void BoardCriticalSectionEnd( uint32_t *mask )
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
    __set_PRIMASK( *mask );
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f383 8810 	msr	PRIMASK, r3
}
 8005c3e:	bf00      	nop
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr

08005c4a <BoardInitPeriph>:

void BoardInitPeriph( void )
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	af00      	add	r7, sp, #0

}
 8005c4e:	bf00      	nop
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr
	...

08005c58 <BoardInitMcu>:

void BoardInitMcu( void )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	af00      	add	r7, sp, #0
    if( McuInitialized == false )
 8005c5c:	4b06      	ldr	r3, [pc, #24]	; (8005c78 <BoardInitMcu+0x20>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	f083 0301 	eor.w	r3, r3, #1
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d003      	beq.n	8005c72 <BoardInitMcu+0x1a>
    {
        RtcInit( );
 8005c6a:	f000 fb85 	bl	8006378 <RtcInit>
        BoardUnusedIoInit( );
 8005c6e:	f000 f805 	bl	8005c7c <BoardUnusedIoInit>
//        LpmSetOffMode( LPM_APPLI_ID, LPM_DISABLE );

    }
}
 8005c72:	bf00      	nop
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	200001cc 	.word	0x200001cc

08005c7c <BoardUnusedIoInit>:
//    // Compute and return the temperature in degree celcius * 256
//    return ( int16_t ) COMPUTE_TEMPERATURE( tempRaw, BatteryVoltage );
//}

static void BoardUnusedIoInit( void )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	af00      	add	r7, sp, #0
    HAL_DBGMCU_EnableDBGSleepMode( );
 8005c80:	f7fb f8fc 	bl	8000e7c <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode( );
 8005c84:	f7fb f908 	bl	8000e98 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode( );
 8005c88:	f7fb f914 	bl	8000eb4 <HAL_DBGMCU_EnableDBGStandbyMode>
}
 8005c8c:	bf00      	nop
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <DelayMs>:
{
    DelayMs( s * 1000.0f );
}

void DelayMs( uint32_t ms )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	f7fb f8cd 	bl	8000e38 <HAL_Delay>
}
 8005c9e:	bf00      	nop
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
	...

08005ca8 <InitRf>:
 */
extern Gpio_t Led1;
extern Gpio_t Led2;

static void InitRf (bool crcOn)
{
 8005ca8:	b590      	push	{r4, r7, lr}
 8005caa:	b08d      	sub	sp, #52	; 0x34
 8005cac:	af0a      	add	r7, sp, #40	; 0x28
 8005cae:	4603      	mov	r3, r0
 8005cb0:	71fb      	strb	r3, [r7, #7]
  // Target board initialization
  BoardInitMcu( );
 8005cb2:	f7ff ffd1 	bl	8005c58 <BoardInitMcu>
  BoardInitPeriph( );
 8005cb6:	f7ff ffc8 	bl	8005c4a <BoardInitPeriph>

  // Radio initialization
  RadioEvents.TxDone = OnTxDone;
 8005cba:	4b2c      	ldr	r3, [pc, #176]	; (8005d6c <InitRf+0xc4>)
 8005cbc:	4a2c      	ldr	r2, [pc, #176]	; (8005d70 <InitRf+0xc8>)
 8005cbe:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8005cc0:	4b2a      	ldr	r3, [pc, #168]	; (8005d6c <InitRf+0xc4>)
 8005cc2:	4a2c      	ldr	r2, [pc, #176]	; (8005d74 <InitRf+0xcc>)
 8005cc4:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8005cc6:	4b29      	ldr	r3, [pc, #164]	; (8005d6c <InitRf+0xc4>)
 8005cc8:	4a2b      	ldr	r2, [pc, #172]	; (8005d78 <InitRf+0xd0>)
 8005cca:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8005ccc:	4b27      	ldr	r3, [pc, #156]	; (8005d6c <InitRf+0xc4>)
 8005cce:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <InitRf+0xd4>)
 8005cd0:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8005cd2:	4b26      	ldr	r3, [pc, #152]	; (8005d6c <InitRf+0xc4>)
 8005cd4:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <InitRf+0xd8>)
 8005cd6:	611a      	str	r2, [r3, #16]

  Radio.Init( &RadioEvents );
 8005cd8:	4b2a      	ldr	r3, [pc, #168]	; (8005d84 <InitRf+0xdc>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4823      	ldr	r0, [pc, #140]	; (8005d6c <InitRf+0xc4>)
 8005cde:	4798      	blx	r3

  Radio.SetChannel( RF_FREQUENCY );
 8005ce0:	4b28      	ldr	r3, [pc, #160]	; (8005d84 <InitRf+0xdc>)
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	4828      	ldr	r0, [pc, #160]	; (8005d88 <InitRf+0xe0>)
 8005ce6:	4798      	blx	r3

  Radio.SetMaxPayloadLength( MODEM_LORA, BUFFER_SIZE );

#elif defined( USE_MODEM_FSK )

  Radio.SetTxConfig( MODEM_FSK, TX_OUTPUT_POWER, FSK_FDEV, 0,
 8005ce8:	4b26      	ldr	r3, [pc, #152]	; (8005d84 <InitRf+0xdc>)
 8005cea:	69dc      	ldr	r4, [r3, #28]
 8005cec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005cf0:	9308      	str	r3, [sp, #32]
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	9307      	str	r3, [sp, #28]
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	9306      	str	r3, [sp, #24]
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9305      	str	r3, [sp, #20]
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	9304      	str	r3, [sp, #16]
 8005d02:	2300      	movs	r3, #0
 8005d04:	9303      	str	r3, [sp, #12]
 8005d06:	2305      	movs	r3, #5
 8005d08:	9302      	str	r3, [sp, #8]
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	9301      	str	r3, [sp, #4]
 8005d0e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005d12:	9300      	str	r3, [sp, #0]
 8005d14:	2300      	movs	r3, #0
 8005d16:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8005d1a:	210e      	movs	r1, #14
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	47a0      	blx	r4
                                FSK_DATARATE, 0,
                                FSK_PREAMBLE_LENGTH, FSK_FIX_LENGTH_PAYLOAD_ON,
								crcOn, 0, 0, 0, 3000 );

  Radio.SetRxConfig( MODEM_FSK, FSK_BANDWIDTH, FSK_DATARATE,
 8005d20:	4b18      	ldr	r3, [pc, #96]	; (8005d84 <InitRf+0xdc>)
 8005d22:	699c      	ldr	r4, [r3, #24]
 8005d24:	2301      	movs	r3, #1
 8005d26:	9309      	str	r3, [sp, #36]	; 0x24
 8005d28:	2300      	movs	r3, #0
 8005d2a:	9308      	str	r3, [sp, #32]
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9307      	str	r3, [sp, #28]
 8005d30:	2300      	movs	r3, #0
 8005d32:	9306      	str	r3, [sp, #24]
 8005d34:	79fb      	ldrb	r3, [r7, #7]
 8005d36:	9305      	str	r3, [sp, #20]
 8005d38:	2300      	movs	r3, #0
 8005d3a:	9304      	str	r3, [sp, #16]
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	9303      	str	r3, [sp, #12]
 8005d40:	2300      	movs	r3, #0
 8005d42:	9302      	str	r3, [sp, #8]
 8005d44:	2305      	movs	r3, #5
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <InitRf+0xe4>)
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8005d52:	f24c 3150 	movw	r1, #50000	; 0xc350
 8005d56:	2000      	movs	r0, #0
 8005d58:	47a0      	blx	r4
                                0, FSK_AFC_BANDWIDTH, FSK_PREAMBLE_LENGTH,
                                0, FSK_FIX_LENGTH_PAYLOAD_ON, 0, crcOn,
                                0, 0, false, true );

  Radio.SetMaxPayloadLength( MODEM_FSK, BUFFER_SIZE );
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <InitRf+0xdc>)
 8005d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d5e:	2140      	movs	r1, #64	; 0x40
 8005d60:	2000      	movs	r0, #0
 8005d62:	4798      	blx	r3
#endif

}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd90      	pop	{r4, r7, pc}
 8005d6c:	200001d0 	.word	0x200001d0
 8005d70:	08005fe5 	.word	0x08005fe5
 8005d74:	0800601d 	.word	0x0800601d
 8005d78:	08006091 	.word	0x08006091
 8005d7c:	080060ad 	.word	0x080060ad
 8005d80:	080060c9 	.word	0x080060c9
 8005d84:	08007be4 	.word	0x08007be4
 8005d88:	1ad27480 	.word	0x1ad27480
 8005d8c:	00014585 	.word	0x00014585

08005d90 <ping_pong_rf>:
}
#endif


void ping_pong_rf (void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b082      	sub	sp, #8
 8005d94:	af00      	add	r7, sp, #0
  bool isMaster = true;
 8005d96:	2301      	movs	r3, #1
 8005d98:	71fb      	strb	r3, [r7, #7]
  uint8_t i;
  InitRf( true );
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	f7ff ff84 	bl	8005ca8 <InitRf>
  while(1) {

  }
#endif

  HAL_GPIO_WritePin(LED_EXT_GPIO_Port, LED_EXT_Pin, RESET);
 8005da0:	2200      	movs	r2, #0
 8005da2:	2108      	movs	r1, #8
 8005da4:	4886      	ldr	r0, [pc, #536]	; (8005fc0 <ping_pong_rf+0x230>)
 8005da6:	f7fb fb5a 	bl	800145e <HAL_GPIO_WritePin>
  Radio.Rx( RX_TIMEOUT_VALUE );
 8005daa:	4b86      	ldr	r3, [pc, #536]	; (8005fc4 <ping_pong_rf+0x234>)
 8005dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005db2:	4798      	blx	r3

  while( 1 )
     {
         switch( State )
 8005db4:	4b84      	ldr	r3, [pc, #528]	; (8005fc8 <ping_pong_rf+0x238>)
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	3b01      	subs	r3, #1
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	f200 80f5 	bhi.w	8005faa <ping_pong_rf+0x21a>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <ping_pong_rf+0x38>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005ddd 	.word	0x08005ddd
 8005dcc:	08005f2d 	.word	0x08005f2d
 8005dd0:	08005f2d 	.word	0x08005f2d
 8005dd4:	08005f15 	.word	0x08005f15
 8005dd8:	08005f99 	.word	0x08005f99
         {
         case RX:
             if( isMaster == true )
 8005ddc:	79fb      	ldrb	r3, [r7, #7]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d054      	beq.n	8005e8c <ping_pong_rf+0xfc>
             {
                 if( BufferSize > 0 )
 8005de2:	4b7a      	ldr	r3, [pc, #488]	; (8005fcc <ping_pong_rf+0x23c>)
 8005de4:	881b      	ldrh	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 8090 	beq.w	8005f0c <ping_pong_rf+0x17c>
                 {
                     if( strncmp( ( const char* )Buffer, ( const char* )PongMsg, 4 ) == 0 )
 8005dec:	2204      	movs	r2, #4
 8005dee:	4978      	ldr	r1, [pc, #480]	; (8005fd0 <ping_pong_rf+0x240>)
 8005df0:	4878      	ldr	r0, [pc, #480]	; (8005fd4 <ping_pong_rf+0x244>)
 8005df2:	f001 fa1f 	bl	8007234 <strncmp>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d12c      	bne.n	8005e56 <ping_pong_rf+0xc6>
                     {
                         // Indicates on a LED that the received frame is a PONG
                         GpioToggle( &Led1 );
 8005dfc:	4876      	ldr	r0, [pc, #472]	; (8005fd8 <ping_pong_rf+0x248>)
 8005dfe:	f7fa fc0a 	bl	8000616 <GpioToggle>

                         // Send the next PING frame
                         Buffer[0] = 'P';
 8005e02:	4b74      	ldr	r3, [pc, #464]	; (8005fd4 <ping_pong_rf+0x244>)
 8005e04:	2250      	movs	r2, #80	; 0x50
 8005e06:	701a      	strb	r2, [r3, #0]
                         Buffer[1] = 'I';
 8005e08:	4b72      	ldr	r3, [pc, #456]	; (8005fd4 <ping_pong_rf+0x244>)
 8005e0a:	2249      	movs	r2, #73	; 0x49
 8005e0c:	705a      	strb	r2, [r3, #1]
                         Buffer[2] = 'N';
 8005e0e:	4b71      	ldr	r3, [pc, #452]	; (8005fd4 <ping_pong_rf+0x244>)
 8005e10:	224e      	movs	r2, #78	; 0x4e
 8005e12:	709a      	strb	r2, [r3, #2]
                         Buffer[3] = 'G';
 8005e14:	4b6f      	ldr	r3, [pc, #444]	; (8005fd4 <ping_pong_rf+0x244>)
 8005e16:	2247      	movs	r2, #71	; 0x47
 8005e18:	70da      	strb	r2, [r3, #3]
                         // We fill the buffer with numbers for the payload
                         for( i = 4; i < BufferSize; i++ )
 8005e1a:	2304      	movs	r3, #4
 8005e1c:	71bb      	strb	r3, [r7, #6]
 8005e1e:	e008      	b.n	8005e32 <ping_pong_rf+0xa2>
                         {
                             Buffer[i] = i - 4;
 8005e20:	79bb      	ldrb	r3, [r7, #6]
 8005e22:	79ba      	ldrb	r2, [r7, #6]
 8005e24:	3a04      	subs	r2, #4
 8005e26:	b2d1      	uxtb	r1, r2
 8005e28:	4a6a      	ldr	r2, [pc, #424]	; (8005fd4 <ping_pong_rf+0x244>)
 8005e2a:	54d1      	strb	r1, [r2, r3]
                         for( i = 4; i < BufferSize; i++ )
 8005e2c:	79bb      	ldrb	r3, [r7, #6]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	71bb      	strb	r3, [r7, #6]
 8005e32:	79bb      	ldrb	r3, [r7, #6]
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	4b65      	ldr	r3, [pc, #404]	; (8005fcc <ping_pong_rf+0x23c>)
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d3f0      	bcc.n	8005e20 <ping_pong_rf+0x90>
                         }
                         DelayMs( 1 );
 8005e3e:	2001      	movs	r0, #1
 8005e40:	f7ff ff26 	bl	8005c90 <DelayMs>
                         Radio.Send( Buffer, BufferSize );
 8005e44:	4b5f      	ldr	r3, [pc, #380]	; (8005fc4 <ping_pong_rf+0x234>)
 8005e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e48:	4a60      	ldr	r2, [pc, #384]	; (8005fcc <ping_pong_rf+0x23c>)
 8005e4a:	8812      	ldrh	r2, [r2, #0]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	4611      	mov	r1, r2
 8005e50:	4860      	ldr	r0, [pc, #384]	; (8005fd4 <ping_pong_rf+0x244>)
 8005e52:	4798      	blx	r3
 8005e54:	e05a      	b.n	8005f0c <ping_pong_rf+0x17c>
                     }
                     else if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 8005e56:	2204      	movs	r2, #4
 8005e58:	4960      	ldr	r1, [pc, #384]	; (8005fdc <ping_pong_rf+0x24c>)
 8005e5a:	485e      	ldr	r0, [pc, #376]	; (8005fd4 <ping_pong_rf+0x244>)
 8005e5c:	f001 f9ea 	bl	8007234 <strncmp>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10a      	bne.n	8005e7c <ping_pong_rf+0xec>
                     { // A master already exists then become a slave
                         isMaster = false;
 8005e66:	2300      	movs	r3, #0
 8005e68:	71fb      	strb	r3, [r7, #7]
                         GpioToggle( &Led2 ); // Set LED off
 8005e6a:	485d      	ldr	r0, [pc, #372]	; (8005fe0 <ping_pong_rf+0x250>)
 8005e6c:	f7fa fbd3 	bl	8000616 <GpioToggle>
                         Radio.Rx( RX_TIMEOUT_VALUE );
 8005e70:	4b54      	ldr	r3, [pc, #336]	; (8005fc4 <ping_pong_rf+0x234>)
 8005e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e78:	4798      	blx	r3
 8005e7a:	e047      	b.n	8005f0c <ping_pong_rf+0x17c>
                     }
                     else // valid reception but neither a PING or a PONG message
                     {    // Set device as master ans start again
                         isMaster = true;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	71fb      	strb	r3, [r7, #7]
                         Radio.Rx( RX_TIMEOUT_VALUE );
 8005e80:	4b50      	ldr	r3, [pc, #320]	; (8005fc4 <ping_pong_rf+0x234>)
 8005e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e88:	4798      	blx	r3
 8005e8a:	e03f      	b.n	8005f0c <ping_pong_rf+0x17c>
                     }
                 }
             }
             else
             {
                 if( BufferSize > 0 )
 8005e8c:	4b4f      	ldr	r3, [pc, #316]	; (8005fcc <ping_pong_rf+0x23c>)
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d03b      	beq.n	8005f0c <ping_pong_rf+0x17c>
                 {
                     if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 8005e94:	2204      	movs	r2, #4
 8005e96:	4951      	ldr	r1, [pc, #324]	; (8005fdc <ping_pong_rf+0x24c>)
 8005e98:	484e      	ldr	r0, [pc, #312]	; (8005fd4 <ping_pong_rf+0x244>)
 8005e9a:	f001 f9cb 	bl	8007234 <strncmp>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d12c      	bne.n	8005efe <ping_pong_rf+0x16e>
                     {
                         // Indicates on a LED that the received frame is a PING
                         GpioToggle( &Led1 );
 8005ea4:	484c      	ldr	r0, [pc, #304]	; (8005fd8 <ping_pong_rf+0x248>)
 8005ea6:	f7fa fbb6 	bl	8000616 <GpioToggle>

                         // Send the reply to the PONG string
                         Buffer[0] = 'P';
 8005eaa:	4b4a      	ldr	r3, [pc, #296]	; (8005fd4 <ping_pong_rf+0x244>)
 8005eac:	2250      	movs	r2, #80	; 0x50
 8005eae:	701a      	strb	r2, [r3, #0]
                         Buffer[1] = 'O';
 8005eb0:	4b48      	ldr	r3, [pc, #288]	; (8005fd4 <ping_pong_rf+0x244>)
 8005eb2:	224f      	movs	r2, #79	; 0x4f
 8005eb4:	705a      	strb	r2, [r3, #1]
                         Buffer[2] = 'N';
 8005eb6:	4b47      	ldr	r3, [pc, #284]	; (8005fd4 <ping_pong_rf+0x244>)
 8005eb8:	224e      	movs	r2, #78	; 0x4e
 8005eba:	709a      	strb	r2, [r3, #2]
                         Buffer[3] = 'G';
 8005ebc:	4b45      	ldr	r3, [pc, #276]	; (8005fd4 <ping_pong_rf+0x244>)
 8005ebe:	2247      	movs	r2, #71	; 0x47
 8005ec0:	70da      	strb	r2, [r3, #3]
                         // We fill the buffer with numbers for the payload
                         for( i = 4; i < BufferSize; i++ )
 8005ec2:	2304      	movs	r3, #4
 8005ec4:	71bb      	strb	r3, [r7, #6]
 8005ec6:	e008      	b.n	8005eda <ping_pong_rf+0x14a>
                         {
                             Buffer[i] = i - 4;
 8005ec8:	79bb      	ldrb	r3, [r7, #6]
 8005eca:	79ba      	ldrb	r2, [r7, #6]
 8005ecc:	3a04      	subs	r2, #4
 8005ece:	b2d1      	uxtb	r1, r2
 8005ed0:	4a40      	ldr	r2, [pc, #256]	; (8005fd4 <ping_pong_rf+0x244>)
 8005ed2:	54d1      	strb	r1, [r2, r3]
                         for( i = 4; i < BufferSize; i++ )
 8005ed4:	79bb      	ldrb	r3, [r7, #6]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	71bb      	strb	r3, [r7, #6]
 8005eda:	79bb      	ldrb	r3, [r7, #6]
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	4b3b      	ldr	r3, [pc, #236]	; (8005fcc <ping_pong_rf+0x23c>)
 8005ee0:	881b      	ldrh	r3, [r3, #0]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	d3f0      	bcc.n	8005ec8 <ping_pong_rf+0x138>
                         }
                         DelayMs( 1 );
 8005ee6:	2001      	movs	r0, #1
 8005ee8:	f7ff fed2 	bl	8005c90 <DelayMs>
                         Radio.Send( Buffer, BufferSize );
 8005eec:	4b35      	ldr	r3, [pc, #212]	; (8005fc4 <ping_pong_rf+0x234>)
 8005eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef0:	4a36      	ldr	r2, [pc, #216]	; (8005fcc <ping_pong_rf+0x23c>)
 8005ef2:	8812      	ldrh	r2, [r2, #0]
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	4836      	ldr	r0, [pc, #216]	; (8005fd4 <ping_pong_rf+0x244>)
 8005efa:	4798      	blx	r3
 8005efc:	e006      	b.n	8005f0c <ping_pong_rf+0x17c>
                     }
                     else // valid reception but not a PING as expected
                     {    // Set device as master and start again
                         isMaster = true;
 8005efe:	2301      	movs	r3, #1
 8005f00:	71fb      	strb	r3, [r7, #7]
                         Radio.Rx( RX_TIMEOUT_VALUE );
 8005f02:	4b30      	ldr	r3, [pc, #192]	; (8005fc4 <ping_pong_rf+0x234>)
 8005f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f0a:	4798      	blx	r3
                     }
                 }
             }
             State = LOWPOWER;
 8005f0c:	4b2e      	ldr	r3, [pc, #184]	; (8005fc8 <ping_pong_rf+0x238>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	701a      	strb	r2, [r3, #0]
             break;
 8005f12:	e04b      	b.n	8005fac <ping_pong_rf+0x21c>
         case TX:
             // Indicates on a LED that we have sent a PING [Master]
             // Indicates on a LED that we have sent a PONG [Slave]
             GpioToggle( &Led2 );
 8005f14:	4832      	ldr	r0, [pc, #200]	; (8005fe0 <ping_pong_rf+0x250>)
 8005f16:	f7fa fb7e 	bl	8000616 <GpioToggle>
             Radio.Rx( RX_TIMEOUT_VALUE );
 8005f1a:	4b2a      	ldr	r3, [pc, #168]	; (8005fc4 <ping_pong_rf+0x234>)
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f22:	4798      	blx	r3
             State = LOWPOWER;
 8005f24:	4b28      	ldr	r3, [pc, #160]	; (8005fc8 <ping_pong_rf+0x238>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	701a      	strb	r2, [r3, #0]
             break;
 8005f2a:	e03f      	b.n	8005fac <ping_pong_rf+0x21c>
         case RX_TIMEOUT:
         case RX_ERROR:
             if( isMaster == true )
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d029      	beq.n	8005f86 <ping_pong_rf+0x1f6>
             {
                 // Send the next PING frame
                 Buffer[0] = 'P';
 8005f32:	4b28      	ldr	r3, [pc, #160]	; (8005fd4 <ping_pong_rf+0x244>)
 8005f34:	2250      	movs	r2, #80	; 0x50
 8005f36:	701a      	strb	r2, [r3, #0]
                 Buffer[1] = 'I';
 8005f38:	4b26      	ldr	r3, [pc, #152]	; (8005fd4 <ping_pong_rf+0x244>)
 8005f3a:	2249      	movs	r2, #73	; 0x49
 8005f3c:	705a      	strb	r2, [r3, #1]
                 Buffer[2] = 'N';
 8005f3e:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <ping_pong_rf+0x244>)
 8005f40:	224e      	movs	r2, #78	; 0x4e
 8005f42:	709a      	strb	r2, [r3, #2]
                 Buffer[3] = 'G';
 8005f44:	4b23      	ldr	r3, [pc, #140]	; (8005fd4 <ping_pong_rf+0x244>)
 8005f46:	2247      	movs	r2, #71	; 0x47
 8005f48:	70da      	strb	r2, [r3, #3]
                 for( i = 4; i < BufferSize; i++ )
 8005f4a:	2304      	movs	r3, #4
 8005f4c:	71bb      	strb	r3, [r7, #6]
 8005f4e:	e008      	b.n	8005f62 <ping_pong_rf+0x1d2>
                 {
                     Buffer[i] = i - 4;
 8005f50:	79bb      	ldrb	r3, [r7, #6]
 8005f52:	79ba      	ldrb	r2, [r7, #6]
 8005f54:	3a04      	subs	r2, #4
 8005f56:	b2d1      	uxtb	r1, r2
 8005f58:	4a1e      	ldr	r2, [pc, #120]	; (8005fd4 <ping_pong_rf+0x244>)
 8005f5a:	54d1      	strb	r1, [r2, r3]
                 for( i = 4; i < BufferSize; i++ )
 8005f5c:	79bb      	ldrb	r3, [r7, #6]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	71bb      	strb	r3, [r7, #6]
 8005f62:	79bb      	ldrb	r3, [r7, #6]
 8005f64:	b29a      	uxth	r2, r3
 8005f66:	4b19      	ldr	r3, [pc, #100]	; (8005fcc <ping_pong_rf+0x23c>)
 8005f68:	881b      	ldrh	r3, [r3, #0]
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d3f0      	bcc.n	8005f50 <ping_pong_rf+0x1c0>
                 }
                 DelayMs( 1 );
 8005f6e:	2001      	movs	r0, #1
 8005f70:	f7ff fe8e 	bl	8005c90 <DelayMs>
                 Radio.Send( Buffer, BufferSize );
 8005f74:	4b13      	ldr	r3, [pc, #76]	; (8005fc4 <ping_pong_rf+0x234>)
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	4a14      	ldr	r2, [pc, #80]	; (8005fcc <ping_pong_rf+0x23c>)
 8005f7a:	8812      	ldrh	r2, [r2, #0]
 8005f7c:	b2d2      	uxtb	r2, r2
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4814      	ldr	r0, [pc, #80]	; (8005fd4 <ping_pong_rf+0x244>)
 8005f82:	4798      	blx	r3
 8005f84:	e004      	b.n	8005f90 <ping_pong_rf+0x200>
             }
             else
             {
                 Radio.Rx( RX_TIMEOUT_VALUE );
 8005f86:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <ping_pong_rf+0x234>)
 8005f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f8e:	4798      	blx	r3
             }
             State = LOWPOWER;
 8005f90:	4b0d      	ldr	r3, [pc, #52]	; (8005fc8 <ping_pong_rf+0x238>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	701a      	strb	r2, [r3, #0]
             break;
 8005f96:	e009      	b.n	8005fac <ping_pong_rf+0x21c>
         case TX_TIMEOUT:
             Radio.Rx( RX_TIMEOUT_VALUE );
 8005f98:	4b0a      	ldr	r3, [pc, #40]	; (8005fc4 <ping_pong_rf+0x234>)
 8005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005fa0:	4798      	blx	r3
             State = LOWPOWER;
 8005fa2:	4b09      	ldr	r3, [pc, #36]	; (8005fc8 <ping_pong_rf+0x238>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
             break;
 8005fa8:	e000      	b.n	8005fac <ping_pong_rf+0x21c>
         case LOWPOWER:
         default:
             // Set low power
             break;
 8005faa:	bf00      	nop
         }

//         BoardLowPowerHandler( );
         // Process Radio IRQ
         if( Radio.IrqProcess != NULL )
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <ping_pong_rf+0x234>)
 8005fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f43f aeff 	beq.w	8005db4 <ping_pong_rf+0x24>
         {
             Radio.IrqProcess( );
 8005fb6:	4b03      	ldr	r3, [pc, #12]	; (8005fc4 <ping_pong_rf+0x234>)
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fba:	4798      	blx	r3
         switch( State )
 8005fbc:	e6fa      	b.n	8005db4 <ping_pong_rf+0x24>
 8005fbe:	bf00      	nop
 8005fc0:	40020800 	.word	0x40020800
 8005fc4:	08007be4 	.word	0x08007be4
 8005fc8:	200001cd 	.word	0x200001cd
 8005fcc:	20000040 	.word	0x20000040
 8005fd0:	08007bc4 	.word	0x08007bc4
 8005fd4:	20000c48 	.word	0x20000c48
 8005fd8:	20000840 	.word	0x20000840
 8005fdc:	08007bbc 	.word	0x08007bbc
 8005fe0:	20000438 	.word	0x20000438

08005fe4 <OnTxDone>:
         }
     }
}

void OnTxDone( void )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8005fe8:	2108      	movs	r1, #8
 8005fea:	4808      	ldr	r0, [pc, #32]	; (800600c <OnTxDone+0x28>)
 8005fec:	f7fb fa4f 	bl	800148e <HAL_GPIO_TogglePin>
    Radio.Sleep( );
 8005ff0:	4b07      	ldr	r3, [pc, #28]	; (8006010 <OnTxDone+0x2c>)
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	4798      	blx	r3
    State = TX;
 8005ff6:	4b07      	ldr	r3, [pc, #28]	; (8006014 <OnTxDone+0x30>)
 8005ff8:	2204      	movs	r2, #4
 8005ffa:	701a      	strb	r2, [r3, #0]
#ifdef UART_TEST
    count++;
#endif
    count++;
 8005ffc:	4b06      	ldr	r3, [pc, #24]	; (8006018 <OnTxDone+0x34>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3301      	adds	r3, #1
 8006002:	4a05      	ldr	r2, [pc, #20]	; (8006018 <OnTxDone+0x34>)
 8006004:	6013      	str	r3, [r2, #0]
}
 8006006:	bf00      	nop
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop
 800600c:	40020800 	.word	0x40020800
 8006010:	08007be4 	.word	0x08007be4
 8006014:	200001cd 	.word	0x200001cd
 8006018:	20000248 	.word	0x20000248

0800601c <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	4608      	mov	r0, r1
 8006026:	4611      	mov	r1, r2
 8006028:	461a      	mov	r2, r3
 800602a:	4603      	mov	r3, r0
 800602c:	817b      	strh	r3, [r7, #10]
 800602e:	460b      	mov	r3, r1
 8006030:	813b      	strh	r3, [r7, #8]
 8006032:	4613      	mov	r3, r2
 8006034:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_TogglePin(LED_EXT_GPIO_Port, LED_EXT_Pin);
 8006036:	2108      	movs	r1, #8
 8006038:	480e      	ldr	r0, [pc, #56]	; (8006074 <OnRxDone+0x58>)
 800603a:	f7fb fa28 	bl	800148e <HAL_GPIO_TogglePin>
    Radio.Sleep( );
 800603e:	4b0e      	ldr	r3, [pc, #56]	; (8006078 <OnRxDone+0x5c>)
 8006040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006042:	4798      	blx	r3
    BufferSize = size;
 8006044:	4a0d      	ldr	r2, [pc, #52]	; (800607c <OnRxDone+0x60>)
 8006046:	897b      	ldrh	r3, [r7, #10]
 8006048:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 800604a:	4b0c      	ldr	r3, [pc, #48]	; (800607c <OnRxDone+0x60>)
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	461a      	mov	r2, r3
 8006050:	68f9      	ldr	r1, [r7, #12]
 8006052:	480b      	ldr	r0, [pc, #44]	; (8006080 <OnRxDone+0x64>)
 8006054:	f001 f8b8 	bl	80071c8 <memcpy>
    RssiValue = rssi;
 8006058:	893b      	ldrh	r3, [r7, #8]
 800605a:	b25a      	sxtb	r2, r3
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <OnRxDone+0x68>)
 800605e:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 8006060:	4a09      	ldr	r2, [pc, #36]	; (8006088 <OnRxDone+0x6c>)
 8006062:	79fb      	ldrb	r3, [r7, #7]
 8006064:	7013      	strb	r3, [r2, #0]
    State = RX;
 8006066:	4b09      	ldr	r3, [pc, #36]	; (800608c <OnRxDone+0x70>)
 8006068:	2201      	movs	r2, #1
 800606a:	701a      	strb	r2, [r3, #0]
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	40020800 	.word	0x40020800
 8006078:	08007be4 	.word	0x08007be4
 800607c:	20000040 	.word	0x20000040
 8006080:	20000c48 	.word	0x20000c48
 8006084:	200001ce 	.word	0x200001ce
 8006088:	200001cf 	.word	0x200001cf
 800608c:	200001cd 	.word	0x200001cd

08006090 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8006094:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <OnTxTimeout+0x14>)
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	4798      	blx	r3
    State = TX_TIMEOUT;
 800609a:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <OnTxTimeout+0x18>)
 800609c:	2205      	movs	r2, #5
 800609e:	701a      	strb	r2, [r3, #0]
}
 80060a0:	bf00      	nop
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	08007be4 	.word	0x08007be4
 80060a8:	200001cd 	.word	0x200001cd

080060ac <OnRxTimeout>:

void OnRxTimeout( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 80060b0:	4b03      	ldr	r3, [pc, #12]	; (80060c0 <OnRxTimeout+0x14>)
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	4798      	blx	r3
    State = RX_TIMEOUT;
 80060b6:	4b03      	ldr	r3, [pc, #12]	; (80060c4 <OnRxTimeout+0x18>)
 80060b8:	2202      	movs	r2, #2
 80060ba:	701a      	strb	r2, [r3, #0]
}
 80060bc:	bf00      	nop
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	08007be4 	.word	0x08007be4
 80060c4:	200001cd 	.word	0x200001cd

080060c8 <OnRxError>:

void OnRxError( void )
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 80060cc:	4b03      	ldr	r3, [pc, #12]	; (80060dc <OnRxError+0x14>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	4798      	blx	r3
    State = RX_ERROR;
 80060d2:	4b03      	ldr	r3, [pc, #12]	; (80060e0 <OnRxError+0x18>)
 80060d4:	2203      	movs	r2, #3
 80060d6:	701a      	strb	r2, [r3, #0]
}
 80060d8:	bf00      	nop
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	08007be4 	.word	0x08007be4
 80060e0:	200001cd 	.word	0x200001cd

080060e4 <Radio_TX>:


// Перед использованием этой функции необходимо вызвать Radio.Send()
// Сама функция Radio_TX должна крутиться в бесконечном цикле
void Radio_TX (uint8_t *pData, uint8_t size ) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	460b      	mov	r3, r1
 80060ee:	70fb      	strb	r3, [r7, #3]
	  switch( State )
 80060f0:	4b09      	ldr	r3, [pc, #36]	; (8006118 <Radio_TX+0x34>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b04      	cmp	r3, #4
 80060f6:	d109      	bne.n	800610c <Radio_TX+0x28>
	  	{
		  case TX:
		  Radio.Send( pData, size );
 80060f8:	4b08      	ldr	r3, [pc, #32]	; (800611c <Radio_TX+0x38>)
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	78fa      	ldrb	r2, [r7, #3]
 80060fe:	4611      	mov	r1, r2
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	4798      	blx	r3
		  State = LOWPOWER;
 8006104:	4b04      	ldr	r3, [pc, #16]	; (8006118 <Radio_TX+0x34>)
 8006106:	2200      	movs	r2, #0
 8006108:	701a      	strb	r2, [r3, #0]
		  break;
 800610a:	e000      	b.n	800610e <Radio_TX+0x2a>
		  case TX_TIMEOUT:
		  case RX:
		  case RX_ERROR:
		  case LOWPOWER:
		  default:
		  break;
 800610c:	bf00      	nop
  }
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	200001cd 	.word	0x200001cd
 800611c:	08007be4 	.word	0x08007be4

08006120 <PerMeasTime>:
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
// для измерения PER

// Просто отправляет числа от 1 до max_count_of_packets
// Время вернется в мс
uint32_t PerMeasTime ( int max_count_of_packets ) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
	uint8_t data[] = {0, 0, 0, 0};
 8006128:	2300      	movs	r3, #0
 800612a:	60bb      	str	r3, [r7, #8]
	uint32_t curT = HAL_GetTick();
 800612c:	f7fa fe7a 	bl	8000e24 <HAL_GetTick>
 8006130:	60f8      	str	r0, [r7, #12]
	State = TX;
 8006132:	4b11      	ldr	r3, [pc, #68]	; (8006178 <PerMeasTime+0x58>)
 8006134:	2204      	movs	r2, #4
 8006136:	701a      	strb	r2, [r3, #0]
	while( count < max_count_of_packets ) {
 8006138:	e00d      	b.n	8006156 <PerMeasTime+0x36>
		*( uint32_t* )data = count;
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	4a0f      	ldr	r2, [pc, #60]	; (800617c <PerMeasTime+0x5c>)
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	601a      	str	r2, [r3, #0]
		Radio_TX( data, sizeof(data) );
 8006144:	f107 0308 	add.w	r3, r7, #8
 8006148:	2104      	movs	r1, #4
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff ffca 	bl	80060e4 <Radio_TX>
		HAL_Delay(30);
 8006150:	201e      	movs	r0, #30
 8006152:	f7fa fe71 	bl	8000e38 <HAL_Delay>
	while( count < max_count_of_packets ) {
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <PerMeasTime+0x5c>)
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	429a      	cmp	r2, r3
 800615e:	d3ec      	bcc.n	800613a <PerMeasTime+0x1a>
	}
	count = 0;
 8006160:	4b06      	ldr	r3, [pc, #24]	; (800617c <PerMeasTime+0x5c>)
 8006162:	2200      	movs	r2, #0
 8006164:	601a      	str	r2, [r3, #0]
	return ( HAL_GetTick() - curT );
 8006166:	f7fa fe5d 	bl	8000e24 <HAL_GetTick>
 800616a:	4602      	mov	r2, r0
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	1ad3      	subs	r3, r2, r3
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	200001cd 	.word	0x200001cd
 800617c:	20000248 	.word	0x20000248

08006180 <AverageTime>:

// Считает среднее время отправления max_count_of_packets пакетов
// Усредняет NumOfAver раз
uint32_t AverageTime ( uint8_t NumOfAver, int max_count_of_packets ) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	4603      	mov	r3, r0
 8006188:	6039      	str	r1, [r7, #0]
 800618a:	71fb      	strb	r3, [r7, #7]
	uint32_t time;
	uint8_t i = 0;
 800618c:	2300      	movs	r3, #0
 800618e:	72fb      	strb	r3, [r7, #11]
	while (i < NumOfAver) {
 8006190:	e009      	b.n	80061a6 <AverageTime+0x26>
		time += PerMeasTime(max_count_of_packets);
 8006192:	6838      	ldr	r0, [r7, #0]
 8006194:	f7ff ffc4 	bl	8006120 <PerMeasTime>
 8006198:	4602      	mov	r2, r0
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	60fb      	str	r3, [r7, #12]
		i++;
 80061a0:	7afb      	ldrb	r3, [r7, #11]
 80061a2:	3301      	adds	r3, #1
 80061a4:	72fb      	strb	r3, [r7, #11]
	while (i < NumOfAver) {
 80061a6:	7afa      	ldrb	r2, [r7, #11]
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d3f1      	bcc.n	8006192 <AverageTime+0x12>
	}
	return ( time / NumOfAver );
 80061ae:	79fb      	ldrb	r3, [r7, #7]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3710      	adds	r7, #16
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
	...

080061c0 <PerTestRun>:

void PerTestRun ( uint16_t number_of_average, uint32_t  number_of_packet_sent ) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b0a6      	sub	sp, #152	; 0x98
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	4603      	mov	r3, r0
 80061c8:	6039      	str	r1, [r7, #0]
 80061ca:	80fb      	strh	r3, [r7, #6]
	InitRf( true );
 80061cc:	2001      	movs	r0, #1
 80061ce:	f7ff fd6b 	bl	8005ca8 <InitRf>
  // в этом файле (sx1276mb1las-board.c) есть дефайн для прерывания на кнопку
	ButtonIsNotPushed = true;
 80061d2:	4b25      	ldr	r3, [pc, #148]	; (8006268 <PerTestRun+0xa8>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	701a      	strb	r2, [r3, #0]
	uint32_t aver_time = AverageTime( number_of_average,
 80061d8:	88fb      	ldrh	r3, [r7, #6]
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	4611      	mov	r1, r2
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7ff ffcd 	bl	8006180 <AverageTime>
 80061e6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
			number_of_packet_sent ); // замеряем среднее время требуемое для передачи последовательности
	HAL_GPIO_WritePin(LED_EXT_GPIO_Port, LED_EXT_Pin, SET);
 80061ea:	2201      	movs	r2, #1
 80061ec:	2108      	movs	r1, #8
 80061ee:	481f      	ldr	r0, [pc, #124]	; (800626c <PerTestRun+0xac>)
 80061f0:	f7fb f935 	bl	800145e <HAL_GPIO_WritePin>
	char str[128] = {0};
 80061f4:	2300      	movs	r3, #0
 80061f6:	60bb      	str	r3, [r7, #8]
 80061f8:	f107 030c 	add.w	r3, r7, #12
 80061fc:	227c      	movs	r2, #124	; 0x7c
 80061fe:	2100      	movs	r1, #0
 8006200:	4618      	mov	r0, r3
 8006202:	f000 ffef 	bl	80071e4 <memset>
	sprintf(str, "%s %lu %s\n\r", "Average time equals:", aver_time, "ms");
 8006206:	f107 0008 	add.w	r0, r7, #8
 800620a:	4b19      	ldr	r3, [pc, #100]	; (8006270 <PerTestRun+0xb0>)
 800620c:	9300      	str	r3, [sp, #0]
 800620e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006212:	4a18      	ldr	r2, [pc, #96]	; (8006274 <PerTestRun+0xb4>)
 8006214:	4918      	ldr	r1, [pc, #96]	; (8006278 <PerTestRun+0xb8>)
 8006216:	f000 ffed 	bl	80071f4 <siprintf>
	HAL_UART_Transmit(&huart2, ( uint8_t* )str, sizeof(str), 10); // отсылаем в терминал измеренное время
 800621a:	f107 0108 	add.w	r1, r7, #8
 800621e:	230a      	movs	r3, #10
 8006220:	2280      	movs	r2, #128	; 0x80
 8006222:	4816      	ldr	r0, [pc, #88]	; (800627c <PerTestRun+0xbc>)
 8006224:	f7fd f867 	bl	80032f6 <HAL_UART_Transmit>
	while ( ButtonIsNotPushed ); // в этот момент настраиваем приёмную сторону для приёма сигнала
 8006228:	bf00      	nop
 800622a:	4b0f      	ldr	r3, [pc, #60]	; (8006268 <PerTestRun+0xa8>)
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d1fb      	bne.n	800622a <PerTestRun+0x6a>
	while ( 1 ) {
		uint32_t TimeB = HAL_GetTick();
 8006232:	f7fa fdf7 	bl	8000e24 <HAL_GetTick>
 8006236:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		PerMeasTime( number_of_packet_sent ); // передаётся "зубец пилы"
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f7ff ff6f 	bl	8006120 <PerMeasTime>
		while ( ( HAL_GetTick() - TimeB ) <= aver_time );
 8006242:	bf00      	nop
 8006244:	f7fa fdee 	bl	8000e24 <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8006254:	429a      	cmp	r2, r3
 8006256:	d2f5      	bcs.n	8006244 <PerTestRun+0x84>
		HAL_Delay( 2*aver_time );	/* такая большая задержка чтобы на приёмной стороне однозначно определить что
 8006258:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	4618      	mov	r0, r3
 8006260:	f7fa fdea 	bl	8000e38 <HAL_Delay>
	while ( 1 ) {
 8006264:	e7e5      	b.n	8006232 <PerTestRun+0x72>
 8006266:	bf00      	nop
 8006268:	20000244 	.word	0x20000244
 800626c:	40020800 	.word	0x40020800
 8006270:	08007ab4 	.word	0x08007ab4
 8006274:	08007a90 	.word	0x08007a90
 8006278:	08007aa8 	.word	0x08007aa8
 800627c:	20000304 	.word	0x20000304

08006280 <SearchSeq>:
// Обработчик прерываний в sx1276mb1las-board.c
// Конец
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

// для измерения BER
uint16_t SearchSeq( BarkerLen_t len ) {
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	4603      	mov	r3, r0
 8006288:	71fb      	strb	r3, [r7, #7]
	BarkerSeq_t* pSeq = &BarkerSeq[0];
 800628a:	4b0c      	ldr	r3, [pc, #48]	; (80062bc <SearchSeq+0x3c>)
 800628c:	60fb      	str	r3, [r7, #12]
	for( ; pSeq <= &BarkerSeq[ sizeof( BarkerSeq ) - 1 ];  pSeq ++ ) {
 800628e:	e00a      	b.n	80062a6 <SearchSeq+0x26>
		if( pSeq->SequenceSize == len ) return pSeq->Sequence;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	79fa      	ldrb	r2, [r7, #7]
 8006296:	429a      	cmp	r2, r3
 8006298:	d102      	bne.n	80062a0 <SearchSeq+0x20>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	885b      	ldrh	r3, [r3, #2]
 800629e:	e007      	b.n	80062b0 <SearchSeq+0x30>
	for( ; pSeq <= &BarkerSeq[ sizeof( BarkerSeq ) - 1 ];  pSeq ++ ) {
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3304      	adds	r3, #4
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	4a05      	ldr	r2, [pc, #20]	; (80062c0 <SearchSeq+0x40>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d9f0      	bls.n	8006290 <SearchSeq+0x10>
	}
	return 0;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3714      	adds	r7, #20
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bc80      	pop	{r7}
 80062b8:	4770      	bx	lr
 80062ba:	bf00      	nop
 80062bc:	20000024 	.word	0x20000024
 80062c0:	20000090 	.word	0x20000090

080062c4 <BerTestRun>:

void BerTestRun( BarkerLen_t len ) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	4603      	mov	r3, r0
 80062cc:	71fb      	strb	r3, [r7, #7]
	InitRf( false );
 80062ce:	2000      	movs	r0, #0
 80062d0:	f7ff fcea 	bl	8005ca8 <InitRf>
	uint8_t data[] = {0, 0};
 80062d4:	2300      	movs	r3, #0
 80062d6:	81bb      	strh	r3, [r7, #12]
	State = TX;
 80062d8:	4b0b      	ldr	r3, [pc, #44]	; (8006308 <BerTestRun+0x44>)
 80062da:	2204      	movs	r2, #4
 80062dc:	701a      	strb	r2, [r3, #0]
	uint16_t seq = SearchSeq( len );
 80062de:	79fb      	ldrb	r3, [r7, #7]
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff ffcd 	bl	8006280 <SearchSeq>
 80062e6:	4603      	mov	r3, r0
 80062e8:	81fb      	strh	r3, [r7, #14]
	*( uint16_t* )data = seq;
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	89fa      	ldrh	r2, [r7, #14]
 80062f0:	801a      	strh	r2, [r3, #0]
	while(1){
		Radio_TX( data, sizeof( data ) );
 80062f2:	f107 030c 	add.w	r3, r7, #12
 80062f6:	2102      	movs	r1, #2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7ff fef3 	bl	80060e4 <Radio_TX>
		HAL_Delay(30);
 80062fe:	201e      	movs	r0, #30
 8006300:	f7fa fd9a 	bl	8000e38 <HAL_Delay>
		Radio_TX( data, sizeof( data ) );
 8006304:	e7f5      	b.n	80062f2 <BerTestRun+0x2e>
 8006306:	bf00      	nop
 8006308:	200001cd 	.word	0x200001cd

0800630c <Measurements>:
	}
}
// Конец
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

bool Measurements ( struct InputParametrsTX_s* param ) {
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	switch ( param->mode ) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7a1b      	ldrb	r3, [r3, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <Measurements+0x16>
 800631c:	2b01      	cmp	r3, #1
 800631e:	d00d      	beq.n	800633c <Measurements+0x30>
			PerTestRun(param->pPER->NumberOfAverage, param->pPER->NumberOfPacketSent);
		}
		else return false;
	break;
	default:
	break;
 8006320:	e023      	b.n	800636a <Measurements+0x5e>
		if ( param -> pBER != NULL ) BerTestRun( param->pBER->len );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d006      	beq.n	8006338 <Measurements+0x2c>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff ffc7 	bl	80062c4 <BerTestRun>
	break;
 8006336:	e018      	b.n	800636a <Measurements+0x5e>
		else return false;
 8006338:	2300      	movs	r3, #0
 800633a:	e017      	b.n	800636c <Measurements+0x60>
		if ( param -> pPER != NULL ) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d010      	beq.n	8006366 <Measurements+0x5a>
			count = 0;
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <Measurements+0x68>)
 8006346:	2200      	movs	r2, #0
 8006348:	601a      	str	r2, [r3, #0]
			InitRf( true );
 800634a:	2001      	movs	r0, #1
 800634c:	f7ff fcac 	bl	8005ca8 <InitRf>
			PerTestRun(param->pPER->NumberOfAverage, param->pPER->NumberOfPacketSent);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	881a      	ldrh	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	4619      	mov	r1, r3
 800635e:	4610      	mov	r0, r2
 8006360:	f7ff ff2e 	bl	80061c0 <PerTestRun>
	break;
 8006364:	e001      	b.n	800636a <Measurements+0x5e>
		else return false;
 8006366:	2300      	movs	r3, #0
 8006368:	e000      	b.n	800636c <Measurements+0x60>
	}
	return true;
 800636a:	2301      	movs	r3, #1
}
 800636c:	4618      	mov	r0, r3
 800636e:	3708      	adds	r7, #8
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	20000248 	.word	0x20000248

08006378 <RtcInit>:
 * \retval calendarValue Time in ticks
 */
static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time );

void RtcInit( void )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
    RTC_DateTypeDef date;
    RTC_TimeTypeDef time;

    if( RtcInitialized == false )
 800637e:	4b2f      	ldr	r3, [pc, #188]	; (800643c <RtcInit+0xc4>)
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f083 0301 	eor.w	r3, r3, #1
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d053      	beq.n	8006434 <RtcInit+0xbc>
    {
        __HAL_RCC_RTC_ENABLE( );
 800638c:	4b2c      	ldr	r3, [pc, #176]	; (8006440 <RtcInit+0xc8>)
 800638e:	2201      	movs	r2, #1
 8006390:	601a      	str	r2, [r3, #0]

        RtcHandle.Instance            = RTC;
 8006392:	4b2c      	ldr	r3, [pc, #176]	; (8006444 <RtcInit+0xcc>)
 8006394:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <RtcInit+0xd0>)
 8006396:	601a      	str	r2, [r3, #0]
        RtcHandle.Init.HourFormat     = RTC_HOURFORMAT_24;
 8006398:	4b2a      	ldr	r3, [pc, #168]	; (8006444 <RtcInit+0xcc>)
 800639a:	2200      	movs	r2, #0
 800639c:	605a      	str	r2, [r3, #4]
        RtcHandle.Init.AsynchPrediv   = PREDIV_A;  // RTC_ASYNCH_PREDIV;
 800639e:	4b29      	ldr	r3, [pc, #164]	; (8006444 <RtcInit+0xcc>)
 80063a0:	221f      	movs	r2, #31
 80063a2:	609a      	str	r2, [r3, #8]
        RtcHandle.Init.SynchPrediv    = PREDIV_S;  // RTC_SYNCH_PREDIV;
 80063a4:	4b27      	ldr	r3, [pc, #156]	; (8006444 <RtcInit+0xcc>)
 80063a6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80063aa:	60da      	str	r2, [r3, #12]
        RtcHandle.Init.OutPut         = RTC_OUTPUT_DISABLE;
 80063ac:	4b25      	ldr	r3, [pc, #148]	; (8006444 <RtcInit+0xcc>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	611a      	str	r2, [r3, #16]
        RtcHandle.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80063b2:	4b24      	ldr	r3, [pc, #144]	; (8006444 <RtcInit+0xcc>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	615a      	str	r2, [r3, #20]
        RtcHandle.Init.OutPutType     = RTC_OUTPUT_TYPE_OPENDRAIN;
 80063b8:	4b22      	ldr	r3, [pc, #136]	; (8006444 <RtcInit+0xcc>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	619a      	str	r2, [r3, #24]
        HAL_RTC_Init( &RtcHandle );
 80063be:	4821      	ldr	r0, [pc, #132]	; (8006444 <RtcInit+0xcc>)
 80063c0:	f7fb ff6c 	bl	800229c <HAL_RTC_Init>

        date.Year                     = 0;
 80063c4:	2300      	movs	r3, #0
 80063c6:	75fb      	strb	r3, [r7, #23]
        date.Month                    = RTC_MONTH_JANUARY;
 80063c8:	2301      	movs	r3, #1
 80063ca:	757b      	strb	r3, [r7, #21]
        date.Date                     = 1;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75bb      	strb	r3, [r7, #22]
        date.WeekDay                  = RTC_WEEKDAY_MONDAY;
 80063d0:	2301      	movs	r3, #1
 80063d2:	753b      	strb	r3, [r7, #20]
        HAL_RTC_SetDate( &RtcHandle, &date, RTC_FORMAT_BIN );
 80063d4:	f107 0314 	add.w	r3, r7, #20
 80063d8:	2200      	movs	r2, #0
 80063da:	4619      	mov	r1, r3
 80063dc:	4819      	ldr	r0, [pc, #100]	; (8006444 <RtcInit+0xcc>)
 80063de:	f7fc f8e9 	bl	80025b4 <HAL_RTC_SetDate>

        /*at 0:0:0*/
        time.Hours                    = 0;
 80063e2:	2300      	movs	r3, #0
 80063e4:	703b      	strb	r3, [r7, #0]
        time.Minutes                  = 0;
 80063e6:	2300      	movs	r3, #0
 80063e8:	707b      	strb	r3, [r7, #1]
        time.Seconds                  = 0;
 80063ea:	2300      	movs	r3, #0
 80063ec:	70bb      	strb	r3, [r7, #2]
        time.SubSeconds               = 0;
 80063ee:	2300      	movs	r3, #0
 80063f0:	607b      	str	r3, [r7, #4]
        time.TimeFormat               = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	70fb      	strb	r3, [r7, #3]
        time.StoreOperation           = RTC_STOREOPERATION_RESET;
 80063f6:	2300      	movs	r3, #0
 80063f8:	613b      	str	r3, [r7, #16]
        time.DayLightSaving           = RTC_DAYLIGHTSAVING_NONE;
 80063fa:	2300      	movs	r3, #0
 80063fc:	60fb      	str	r3, [r7, #12]
        HAL_RTC_SetTime( &RtcHandle, &time, RTC_FORMAT_BIN );
 80063fe:	463b      	mov	r3, r7
 8006400:	2200      	movs	r2, #0
 8006402:	4619      	mov	r1, r3
 8006404:	480f      	ldr	r0, [pc, #60]	; (8006444 <RtcInit+0xcc>)
 8006406:	f7fb ffc4 	bl	8002392 <HAL_RTC_SetTime>

        // Enable Direct Read of the calendar registers (not through Shadow registers)
        HAL_RTCEx_EnableBypassShadow( &RtcHandle );
 800640a:	480e      	ldr	r0, [pc, #56]	; (8006444 <RtcInit+0xcc>)
 800640c:	f7fc fc59 	bl	8002cc2 <HAL_RTCEx_EnableBypassShadow>

        HAL_NVIC_SetPriority( RTC_Alarm_IRQn, 1, 0 );
 8006410:	2200      	movs	r2, #0
 8006412:	2101      	movs	r1, #1
 8006414:	2029      	movs	r0, #41	; 0x29
 8006416:	f7fa fe10 	bl	800103a <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ( RTC_Alarm_IRQn );
 800641a:	2029      	movs	r0, #41	; 0x29
 800641c:	f7fa fe29 	bl	8001072 <HAL_NVIC_EnableIRQ>

        // Init alarm.
        HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8006420:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006424:	4807      	ldr	r0, [pc, #28]	; (8006444 <RtcInit+0xcc>)
 8006426:	f7fc fae9 	bl	80029fc <HAL_RTC_DeactivateAlarm>

        RtcSetTimerContext( );
 800642a:	f000 f80f 	bl	800644c <RtcSetTimerContext>
        RtcInitialized = true;
 800642e:	4b03      	ldr	r3, [pc, #12]	; (800643c <RtcInit+0xc4>)
 8006430:	2201      	movs	r2, #1
 8006432:	701a      	strb	r2, [r3, #0]
    }
}
 8006434:	bf00      	nop
 8006436:	3718      	adds	r7, #24
 8006438:	46bd      	mov	sp, r7
 800643a:	bd80      	pop	{r7, pc}
 800643c:	200001f4 	.word	0x200001f4
 8006440:	424706d8 	.word	0x424706d8
 8006444:	200001f8 	.word	0x200001f8
 8006448:	40002800 	.word	0x40002800

0800644c <RtcSetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcSetTimerContext( void )
{
 800644c:	b580      	push	{r7, lr}
 800644e:	af00      	add	r7, sp, #0
    RtcTimerContext.Time = ( uint32_t )RtcGetCalendarValue( &RtcTimerContext.CalendarDate, &RtcTimerContext.CalendarTime );
 8006450:	4905      	ldr	r1, [pc, #20]	; (8006468 <RtcSetTimerContext+0x1c>)
 8006452:	4806      	ldr	r0, [pc, #24]	; (800646c <RtcSetTimerContext+0x20>)
 8006454:	f000 f9a4 	bl	80067a0 <RtcGetCalendarValue>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4b04      	ldr	r3, [pc, #16]	; (8006470 <RtcSetTimerContext+0x24>)
 800645e:	601a      	str	r2, [r3, #0]
    return ( uint32_t )RtcTimerContext.Time;
 8006460:	4b03      	ldr	r3, [pc, #12]	; (8006470 <RtcSetTimerContext+0x24>)
 8006462:	681b      	ldr	r3, [r3, #0]
}
 8006464:	4618      	mov	r0, r3
 8006466:	bd80      	pop	{r7, pc}
 8006468:	2000021c 	.word	0x2000021c
 800646c:	20000230 	.word	0x20000230
 8006470:	20000218 	.word	0x20000218

08006474 <RtcGetTimerContext>:
 *
 * \param none
 * \retval timerValue In ticks
 */
uint32_t RtcGetTimerContext( void )
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
    return RtcTimerContext.Time;
 8006478:	4b02      	ldr	r3, [pc, #8]	; (8006484 <RtcGetTimerContext+0x10>)
 800647a:	681b      	ldr	r3, [r3, #0]
}
 800647c:	4618      	mov	r0, r3
 800647e:	46bd      	mov	sp, r7
 8006480:	bc80      	pop	{r7}
 8006482:	4770      	bx	lr
 8006484:	20000218 	.word	0x20000218

08006488 <RtcGetMinimumTimeout>:
 * \brief returns the wake up time in ticks
 *
 * \retval wake up time in ticks
 */
uint32_t RtcGetMinimumTimeout( void )
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
    return( MIN_ALARM_DELAY );
 800648c:	2303      	movs	r3, #3
}
 800648e:	4618      	mov	r0, r3
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr

08006496 <RtcMs2Tick>:
 *
 * \param[IN] milliseconds Time in milliseconds
 * \retval returns time in timer ticks
 */
uint32_t RtcMs2Tick( uint32_t milliseconds )
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
    return ( uint32_t )( ( ( ( uint64_t )milliseconds ) * CONV_DENOM ) / CONV_NUMER );
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	461a      	mov	r2, r3
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	f04f 0000 	mov.w	r0, #0
 80064aa:	f04f 0100 	mov.w	r1, #0
 80064ae:	01d9      	lsls	r1, r3, #7
 80064b0:	ea41 6152 	orr.w	r1, r1, r2, lsr #25
 80064b4:	01d0      	lsls	r0, r2, #7
 80064b6:	f04f 027d 	mov.w	r2, #125	; 0x7d
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	f7f9 fe5d 	bl	800017c <__aeabi_uldivmod>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4613      	mov	r3, r2
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <RtcTick2Ms>:
 *
 * \param[IN] time in timer ticks
 * \retval returns time in milliseconds
 */
uint32_t RtcTick2Ms( uint32_t tick )
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
    uint32_t seconds = tick >> N_PREDIV_S;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	0a9b      	lsrs	r3, r3, #10
 80064dc:	60fb      	str	r3, [r7, #12]

    tick = tick & PREDIV_S;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80064e4:	607b      	str	r3, [r7, #4]
    return ( ( seconds * 1000 ) + ( ( tick * 1000 ) >> N_PREDIV_S ) );
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064ec:	fb02 f203 	mul.w	r2, r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80064f6:	fb01 f303 	mul.w	r3, r1, r3
 80064fa:	0a9b      	lsrs	r3, r3, #10
 80064fc:	4413      	add	r3, r2
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	bc80      	pop	{r7}
 8006506:	4770      	bx	lr

08006508 <RtcSetAlarm>:
 * \note The alarm is set at now (read in this function) + timeout
 *
 * \param timeout Duration of the Timer ticks
 */
void RtcSetAlarm( uint32_t timeout )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
    // We don't go in Low Power mode for timeout below MIN_ALARM_DELAY
    if( ( int64_t )MIN_ALARM_DELAY < ( int64_t )( timeout - RtcGetTimerElapsedTime( ) ) )
 8006510:	f000 f92e 	bl	8006770 <RtcGetTimerElapsedTime>
    else
    {
//        LpmSetStopMode( LPM_RTC_ID, LPM_DISABLE );
    }

    RtcStartAlarm( timeout );
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f81f 	bl	8006558 <RtcStartAlarm>
}
 800651a:	bf00      	nop
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
	...

08006524 <RtcStopAlarm>:

void RtcStopAlarm( void )
{
 8006524:	b580      	push	{r7, lr}
 8006526:	af00      	add	r7, sp, #0
    // Disable the Alarm A interrupt
    HAL_RTC_DeactivateAlarm( &RtcHandle, RTC_ALARM_A );
 8006528:	f44f 7180 	mov.w	r1, #256	; 0x100
 800652c:	4808      	ldr	r0, [pc, #32]	; (8006550 <RtcStopAlarm+0x2c>)
 800652e:	f7fc fa65 	bl	80029fc <HAL_RTC_DeactivateAlarm>

    // Clear RTC Alarm Flag
    __HAL_RTC_ALARM_CLEAR_FLAG( &RtcHandle, RTC_FLAG_ALRAF );
 8006532:	4b07      	ldr	r3, [pc, #28]	; (8006550 <RtcStopAlarm+0x2c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	b2da      	uxtb	r2, r3
 800653a:	4b05      	ldr	r3, [pc, #20]	; (8006550 <RtcStopAlarm+0x2c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006542:	60da      	str	r2, [r3, #12]

    // Clear the EXTI's line Flag for RTC Alarm
    __HAL_RTC_ALARM_EXTI_CLEAR_FLAG( );
 8006544:	4b03      	ldr	r3, [pc, #12]	; (8006554 <RtcStopAlarm+0x30>)
 8006546:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800654a:	615a      	str	r2, [r3, #20]
}
 800654c:	bf00      	nop
 800654e:	bd80      	pop	{r7, pc}
 8006550:	200001f8 	.word	0x200001f8
 8006554:	40010400 	.word	0x40010400

08006558 <RtcStartAlarm>:

void RtcStartAlarm( uint32_t timeout )
{
 8006558:	b5b0      	push	{r4, r5, r7, lr}
 800655a:	b08c      	sub	sp, #48	; 0x30
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
    uint16_t rtcAlarmSubSeconds = 0;
 8006560:	2300      	movs	r3, #0
 8006562:	85fb      	strh	r3, [r7, #46]	; 0x2e
    uint16_t rtcAlarmSeconds = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	85bb      	strh	r3, [r7, #44]	; 0x2c
    uint16_t rtcAlarmMinutes = 0;
 8006568:	2300      	movs	r3, #0
 800656a:	857b      	strh	r3, [r7, #42]	; 0x2a
    uint16_t rtcAlarmHours = 0;
 800656c:	2300      	movs	r3, #0
 800656e:	853b      	strh	r3, [r7, #40]	; 0x28
    uint16_t rtcAlarmDays = 0;
 8006570:	2300      	movs	r3, #0
 8006572:	84fb      	strh	r3, [r7, #38]	; 0x26
    RTC_TimeTypeDef time = RtcTimerContext.CalendarTime;
 8006574:	4b6e      	ldr	r3, [pc, #440]	; (8006730 <RtcStartAlarm+0x1d8>)
 8006576:	f107 0410 	add.w	r4, r7, #16
 800657a:	1d1d      	adds	r5, r3, #4
 800657c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800657e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006580:	682b      	ldr	r3, [r5, #0]
 8006582:	6023      	str	r3, [r4, #0]
    RTC_DateTypeDef date = RtcTimerContext.CalendarDate;
 8006584:	4b6a      	ldr	r3, [pc, #424]	; (8006730 <RtcStartAlarm+0x1d8>)
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	60fb      	str	r3, [r7, #12]

    RtcStopAlarm( );
 800658a:	f7ff ffcb 	bl	8006524 <RtcStopAlarm>

    /*reverse counter */
    rtcAlarmSubSeconds =  PREDIV_S - time.SubSeconds;
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8006596:	3303      	adds	r3, #3
 8006598:	85fb      	strh	r3, [r7, #46]	; 0x2e
    rtcAlarmSubSeconds += ( timeout & PREDIV_S );
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	b29b      	uxth	r3, r3
 800659e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80065a2:	b29a      	uxth	r2, r3
 80065a4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80065a6:	4413      	add	r3, r2
 80065a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    // convert timeout  to seconds
    timeout >>= N_PREDIV_S;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	0a9b      	lsrs	r3, r3, #10
 80065ae:	607b      	str	r3, [r7, #4]

    // Convert microsecs to RTC format and add to 'Now'
    rtcAlarmDays =  date.Date;
 80065b0:	7bbb      	ldrb	r3, [r7, #14]
 80065b2:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 80065b4:	e008      	b.n	80065c8 <RtcStartAlarm+0x70>
    {
        timeout -= TM_SECONDS_IN_1DAY;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 80065bc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80065c0:	607b      	str	r3, [r7, #4]
        rtcAlarmDays++;
 80065c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065c4:	3301      	adds	r3, #1
 80065c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( timeout >= TM_SECONDS_IN_1DAY )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a5a      	ldr	r2, [pc, #360]	; (8006734 <RtcStartAlarm+0x1dc>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d8f2      	bhi.n	80065b6 <RtcStartAlarm+0x5e>
    }

    // Calc hours
    rtcAlarmHours = time.Hours;
 80065d0:	7c3b      	ldrb	r3, [r7, #16]
 80065d2:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 80065d4:	e006      	b.n	80065e4 <RtcStartAlarm+0x8c>
    {
        timeout -= TM_SECONDS_IN_1HOUR;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 80065dc:	607b      	str	r3, [r7, #4]
        rtcAlarmHours++;
 80065de:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80065e0:	3301      	adds	r3, #1
 80065e2:	853b      	strh	r3, [r7, #40]	; 0x28
    while( timeout >= TM_SECONDS_IN_1HOUR )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f5b3 6f61 	cmp.w	r3, #3600	; 0xe10
 80065ea:	d2f4      	bcs.n	80065d6 <RtcStartAlarm+0x7e>
    }

    // Calc minutes
    rtcAlarmMinutes = time.Minutes;
 80065ec:	7c7b      	ldrb	r3, [r7, #17]
 80065ee:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 80065f0:	e005      	b.n	80065fe <RtcStartAlarm+0xa6>
    {
        timeout -= TM_SECONDS_IN_1MINUTE;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	3b3c      	subs	r3, #60	; 0x3c
 80065f6:	607b      	str	r3, [r7, #4]
        rtcAlarmMinutes++;
 80065f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80065fa:	3301      	adds	r3, #1
 80065fc:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( timeout >= TM_SECONDS_IN_1MINUTE )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2b3b      	cmp	r3, #59	; 0x3b
 8006602:	d8f6      	bhi.n	80065f2 <RtcStartAlarm+0x9a>
    }

    // Calc seconds
    rtcAlarmSeconds =  time.Seconds + timeout;
 8006604:	7cbb      	ldrb	r3, [r7, #18]
 8006606:	b29a      	uxth	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	b29b      	uxth	r3, r3
 800660c:	4413      	add	r3, r2
 800660e:	85bb      	strh	r3, [r7, #44]	; 0x2c

    //***** Correct for modulo********
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8006610:	e006      	b.n	8006620 <RtcStartAlarm+0xc8>
    {
        rtcAlarmSubSeconds -= ( PREDIV_S + 1 );
 8006612:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006614:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8006618:	85fb      	strh	r3, [r7, #46]	; 0x2e
        rtcAlarmSeconds++;
 800661a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800661c:	3301      	adds	r3, #1
 800661e:	85bb      	strh	r3, [r7, #44]	; 0x2c
    while( rtcAlarmSubSeconds >= ( PREDIV_S + 1 ) )
 8006620:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006626:	d2f4      	bcs.n	8006612 <RtcStartAlarm+0xba>
    }

    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8006628:	e005      	b.n	8006636 <RtcStartAlarm+0xde>
    { 
        rtcAlarmSeconds -= TM_SECONDS_IN_1MINUTE;
 800662a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800662c:	3b3c      	subs	r3, #60	; 0x3c
 800662e:	85bb      	strh	r3, [r7, #44]	; 0x2c
        rtcAlarmMinutes++;
 8006630:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006632:	3301      	adds	r3, #1
 8006634:	857b      	strh	r3, [r7, #42]	; 0x2a
    while( rtcAlarmSeconds >= TM_SECONDS_IN_1MINUTE )
 8006636:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006638:	2b3b      	cmp	r3, #59	; 0x3b
 800663a:	d8f6      	bhi.n	800662a <RtcStartAlarm+0xd2>
    }

    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 800663c:	e005      	b.n	800664a <RtcStartAlarm+0xf2>
    {
        rtcAlarmMinutes -= TM_MINUTES_IN_1HOUR;
 800663e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006640:	3b3c      	subs	r3, #60	; 0x3c
 8006642:	857b      	strh	r3, [r7, #42]	; 0x2a
        rtcAlarmHours++;
 8006644:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006646:	3301      	adds	r3, #1
 8006648:	853b      	strh	r3, [r7, #40]	; 0x28
    while( rtcAlarmMinutes >= TM_MINUTES_IN_1HOUR )
 800664a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800664c:	2b3b      	cmp	r3, #59	; 0x3b
 800664e:	d8f6      	bhi.n	800663e <RtcStartAlarm+0xe6>
    }

    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 8006650:	e005      	b.n	800665e <RtcStartAlarm+0x106>
    {
        rtcAlarmHours -= TM_HOURS_IN_1DAY;
 8006652:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006654:	3b18      	subs	r3, #24
 8006656:	853b      	strh	r3, [r7, #40]	; 0x28
        rtcAlarmDays++;
 8006658:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800665a:	3301      	adds	r3, #1
 800665c:	84fb      	strh	r3, [r7, #38]	; 0x26
    while( rtcAlarmHours >= TM_HOURS_IN_1DAY )
 800665e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006660:	2b17      	cmp	r3, #23
 8006662:	d8f6      	bhi.n	8006652 <RtcStartAlarm+0xfa>
    }

    if( date.Year % 4 == 0 ) 
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	f003 0303 	and.w	r3, r3, #3
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b00      	cmp	r3, #0
 800666e:	d113      	bne.n	8006698 <RtcStartAlarm+0x140>
    {
        if( rtcAlarmDays > DaysInMonthLeapYear[date.Month - 1] )
 8006670:	7b7b      	ldrb	r3, [r7, #13]
 8006672:	3b01      	subs	r3, #1
 8006674:	4a30      	ldr	r2, [pc, #192]	; (8006738 <RtcStartAlarm+0x1e0>)
 8006676:	5cd3      	ldrb	r3, [r2, r3]
 8006678:	b29b      	uxth	r3, r3
 800667a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800667c:	429a      	cmp	r2, r3
 800667e:	d91e      	bls.n	80066be <RtcStartAlarm+0x166>
        {
            rtcAlarmDays = rtcAlarmDays % DaysInMonthLeapYear[date.Month - 1];
 8006680:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006682:	7b7a      	ldrb	r2, [r7, #13]
 8006684:	3a01      	subs	r2, #1
 8006686:	492c      	ldr	r1, [pc, #176]	; (8006738 <RtcStartAlarm+0x1e0>)
 8006688:	5c8a      	ldrb	r2, [r1, r2]
 800668a:	fb93 f1f2 	sdiv	r1, r3, r2
 800668e:	fb02 f201 	mul.w	r2, r2, r1
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	84fb      	strh	r3, [r7, #38]	; 0x26
 8006696:	e012      	b.n	80066be <RtcStartAlarm+0x166>
        }
    }
    else
    {
        if( rtcAlarmDays > DaysInMonth[date.Month - 1] )
 8006698:	7b7b      	ldrb	r3, [r7, #13]
 800669a:	3b01      	subs	r3, #1
 800669c:	4a27      	ldr	r2, [pc, #156]	; (800673c <RtcStartAlarm+0x1e4>)
 800669e:	5cd3      	ldrb	r3, [r2, r3]
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d90a      	bls.n	80066be <RtcStartAlarm+0x166>
        {   
            rtcAlarmDays = rtcAlarmDays % DaysInMonth[date.Month - 1];
 80066a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066aa:	7b7a      	ldrb	r2, [r7, #13]
 80066ac:	3a01      	subs	r2, #1
 80066ae:	4923      	ldr	r1, [pc, #140]	; (800673c <RtcStartAlarm+0x1e4>)
 80066b0:	5c8a      	ldrb	r2, [r1, r2]
 80066b2:	fb93 f1f2 	sdiv	r1, r3, r2
 80066b6:	fb02 f201 	mul.w	r2, r2, r1
 80066ba:	1a9b      	subs	r3, r3, r2
 80066bc:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }

    /* Set RTC_AlarmStructure with calculated values*/
    RtcAlarm.AlarmTime.SubSeconds     = PREDIV_S - rtcAlarmSubSeconds;
 80066be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066c0:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 80066c4:	3303      	adds	r3, #3
 80066c6:	461a      	mov	r2, r3
 80066c8:	4b1d      	ldr	r3, [pc, #116]	; (8006740 <RtcStartAlarm+0x1e8>)
 80066ca:	605a      	str	r2, [r3, #4]
    RtcAlarm.AlarmSubSecondMask       = ALARM_SUBSECOND_MASK; 
 80066cc:	4b1c      	ldr	r3, [pc, #112]	; (8006740 <RtcStartAlarm+0x1e8>)
 80066ce:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80066d2:	619a      	str	r2, [r3, #24]
    RtcAlarm.AlarmTime.Seconds        = rtcAlarmSeconds;
 80066d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	4b19      	ldr	r3, [pc, #100]	; (8006740 <RtcStartAlarm+0x1e8>)
 80066da:	709a      	strb	r2, [r3, #2]
    RtcAlarm.AlarmTime.Minutes        = rtcAlarmMinutes;
 80066dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80066de:	b2da      	uxtb	r2, r3
 80066e0:	4b17      	ldr	r3, [pc, #92]	; (8006740 <RtcStartAlarm+0x1e8>)
 80066e2:	705a      	strb	r2, [r3, #1]
    RtcAlarm.AlarmTime.Hours          = rtcAlarmHours;
 80066e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	4b15      	ldr	r3, [pc, #84]	; (8006740 <RtcStartAlarm+0x1e8>)
 80066ea:	701a      	strb	r2, [r3, #0]
    RtcAlarm.AlarmDateWeekDay         = ( uint8_t )rtcAlarmDays;
 80066ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80066ee:	b2da      	uxtb	r2, r3
 80066f0:	4b13      	ldr	r3, [pc, #76]	; (8006740 <RtcStartAlarm+0x1e8>)
 80066f2:	f883 2020 	strb.w	r2, [r3, #32]
    RtcAlarm.AlarmTime.TimeFormat     = time.TimeFormat;
 80066f6:	7cfa      	ldrb	r2, [r7, #19]
 80066f8:	4b11      	ldr	r3, [pc, #68]	; (8006740 <RtcStartAlarm+0x1e8>)
 80066fa:	70da      	strb	r2, [r3, #3]
    RtcAlarm.AlarmDateWeekDaySel      = RTC_ALARMDATEWEEKDAYSEL_DATE; 
 80066fc:	4b10      	ldr	r3, [pc, #64]	; (8006740 <RtcStartAlarm+0x1e8>)
 80066fe:	2200      	movs	r2, #0
 8006700:	61da      	str	r2, [r3, #28]
    RtcAlarm.AlarmMask                = RTC_ALARMMASK_NONE;
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <RtcStartAlarm+0x1e8>)
 8006704:	2200      	movs	r2, #0
 8006706:	615a      	str	r2, [r3, #20]
    RtcAlarm.Alarm                    = RTC_ALARM_A;
 8006708:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <RtcStartAlarm+0x1e8>)
 800670a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800670e:	625a      	str	r2, [r3, #36]	; 0x24
    RtcAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006710:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <RtcStartAlarm+0x1e8>)
 8006712:	2200      	movs	r2, #0
 8006714:	60da      	str	r2, [r3, #12]
    RtcAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8006716:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <RtcStartAlarm+0x1e8>)
 8006718:	2200      	movs	r2, #0
 800671a:	611a      	str	r2, [r3, #16]

    // Set RTC_Alarm
    HAL_RTC_SetAlarm_IT( &RtcHandle, &RtcAlarm, RTC_FORMAT_BIN );
 800671c:	2200      	movs	r2, #0
 800671e:	4908      	ldr	r1, [pc, #32]	; (8006740 <RtcStartAlarm+0x1e8>)
 8006720:	4808      	ldr	r0, [pc, #32]	; (8006744 <RtcStartAlarm+0x1ec>)
 8006722:	f7fc f833 	bl	800278c <HAL_RTC_SetAlarm_IT>
}
 8006726:	bf00      	nop
 8006728:	3730      	adds	r7, #48	; 0x30
 800672a:	46bd      	mov	sp, r7
 800672c:	bdb0      	pop	{r4, r5, r7, pc}
 800672e:	bf00      	nop
 8006730:	20000218 	.word	0x20000218
 8006734:	0001517f 	.word	0x0001517f
 8006738:	08007bd8 	.word	0x08007bd8
 800673c:	08007bcc 	.word	0x08007bcc
 8006740:	20000c88 	.word	0x20000c88
 8006744:	200001f8 	.word	0x200001f8

08006748 <RtcGetTimerValue>:

uint32_t RtcGetTimerValue( void )
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b088      	sub	sp, #32
 800674c:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef time;
    RTC_DateTypeDef date;

    uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 800674e:	f107 0208 	add.w	r2, r7, #8
 8006752:	1d3b      	adds	r3, r7, #4
 8006754:	4611      	mov	r1, r2
 8006756:	4618      	mov	r0, r3
 8006758:	f000 f822 	bl	80067a0 <RtcGetCalendarValue>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	4613      	mov	r3, r2
 8006762:	61fb      	str	r3, [r7, #28]

    return( calendarValue );
 8006764:	69fb      	ldr	r3, [r7, #28]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3720      	adds	r7, #32
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <RtcGetTimerElapsedTime>:

uint32_t RtcGetTimerElapsedTime( void )
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
  RTC_TimeTypeDef time;
  RTC_DateTypeDef date;
  
  uint32_t calendarValue = ( uint32_t )RtcGetCalendarValue( &date, &time );
 8006776:	f107 0208 	add.w	r2, r7, #8
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	4611      	mov	r1, r2
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f80e 	bl	80067a0 <RtcGetCalendarValue>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4613      	mov	r3, r2
 800678a:	61fb      	str	r3, [r7, #28]

  return( ( uint32_t )( calendarValue - RtcTimerContext.Time ) );
 800678c:	4b03      	ldr	r3, [pc, #12]	; (800679c <RtcGetTimerElapsedTime+0x2c>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69fa      	ldr	r2, [r7, #28]
 8006792:	1ad3      	subs	r3, r2, r3
}
 8006794:	4618      	mov	r0, r3
 8006796:	3720      	adds	r7, #32
 8006798:	46bd      	mov	sp, r7
 800679a:	bd80      	pop	{r7, pc}
 800679c:	20000218 	.word	0x20000218

080067a0 <RtcGetCalendarValue>:

static uint64_t RtcGetCalendarValue( RTC_DateTypeDef* date, RTC_TimeTypeDef* time )
{
 80067a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80067a4:	b088      	sub	sp, #32
 80067a6:	af00      	add	r7, sp, #0
 80067a8:	6078      	str	r0, [r7, #4]
 80067aa:	6039      	str	r1, [r7, #0]
    uint64_t calendarValue = 0;
 80067ac:	f04f 0200 	mov.w	r2, #0
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    uint32_t seconds;

    // Make sure it is correct due to asynchronus nature of RTC
    do
    {
        firstRead = RTC->SSR;
 80067b8:	4b3f      	ldr	r3, [pc, #252]	; (80068b8 <RtcGetCalendarValue+0x118>)
 80067ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067bc:	617b      	str	r3, [r7, #20]
        HAL_RTC_GetDate( &RtcHandle, date, RTC_FORMAT_BIN );
 80067be:	2200      	movs	r2, #0
 80067c0:	6879      	ldr	r1, [r7, #4]
 80067c2:	483e      	ldr	r0, [pc, #248]	; (80068bc <RtcGetCalendarValue+0x11c>)
 80067c4:	f7fb ff94 	bl	80026f0 <HAL_RTC_GetDate>
        HAL_RTC_GetTime( &RtcHandle, time, RTC_FORMAT_BIN );
 80067c8:	2200      	movs	r2, #0
 80067ca:	6839      	ldr	r1, [r7, #0]
 80067cc:	483b      	ldr	r0, [pc, #236]	; (80068bc <RtcGetCalendarValue+0x11c>)
 80067ce:	f7fb fe94 	bl	80024fa <HAL_RTC_GetTime>
    }while( firstRead != RTC->SSR );
 80067d2:	4b39      	ldr	r3, [pc, #228]	; (80068b8 <RtcGetCalendarValue+0x118>)
 80067d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	429a      	cmp	r2, r3
 80067da:	d1ed      	bne.n	80067b8 <RtcGetCalendarValue+0x18>

    // Calculte amount of elapsed days since 01/01/2000
    seconds = DIVC( ( DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR ) * date->Year , 4 );
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	78db      	ldrb	r3, [r3, #3]
 80067e0:	461a      	mov	r2, r3
 80067e2:	f240 53b5 	movw	r3, #1461	; 0x5b5
 80067e6:	fb03 f302 	mul.w	r3, r3, r2
 80067ea:	3303      	adds	r3, #3
 80067ec:	089b      	lsrs	r3, r3, #2
 80067ee:	613b      	str	r3, [r7, #16]

    correction = ( ( date->Year % 4 ) == 0 ) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	78db      	ldrb	r3, [r3, #3]
 80067f4:	f003 0303 	and.w	r3, r3, #3
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d101      	bne.n	8006802 <RtcGetCalendarValue+0x62>
 80067fe:	4b30      	ldr	r3, [pc, #192]	; (80068c0 <RtcGetCalendarValue+0x120>)
 8006800:	e000      	b.n	8006804 <RtcGetCalendarValue+0x64>
 8006802:	4b30      	ldr	r3, [pc, #192]	; (80068c4 <RtcGetCalendarValue+0x124>)
 8006804:	60fb      	str	r3, [r7, #12]

    seconds += ( DIVC( ( date->Month-1 ) * ( 30 + 31 ), 2 ) - ( ( ( correction >> ( ( date->Month - 1 ) * 2 ) ) & 0x03 ) ) );
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	785b      	ldrb	r3, [r3, #1]
 800680a:	1e5a      	subs	r2, r3, #1
 800680c:	4613      	mov	r3, r2
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	1a9b      	subs	r3, r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4413      	add	r3, r2
 8006816:	3301      	adds	r3, #1
 8006818:	0fda      	lsrs	r2, r3, #31
 800681a:	4413      	add	r3, r2
 800681c:	105b      	asrs	r3, r3, #1
 800681e:	4619      	mov	r1, r3
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	785b      	ldrb	r3, [r3, #1]
 8006824:	3b01      	subs	r3, #1
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	fa22 f303 	lsr.w	r3, r2, r3
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	1acb      	subs	r3, r1, r3
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	613b      	str	r3, [r7, #16]

    seconds += ( date->Date -1 );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	789b      	ldrb	r3, [r3, #2]
 800683e:	461a      	mov	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4413      	add	r3, r2
 8006844:	3b01      	subs	r3, #1
 8006846:	613b      	str	r3, [r7, #16]

    // Convert from days to seconds
    seconds *= SECONDS_IN_1DAY;
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	4a1f      	ldr	r2, [pc, #124]	; (80068c8 <RtcGetCalendarValue+0x128>)
 800684c:	fb02 f303 	mul.w	r3, r2, r3
 8006850:	613b      	str	r3, [r7, #16]

    seconds += ( ( uint32_t )time->Seconds + 
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	789b      	ldrb	r3, [r3, #2]
 8006856:	4618      	mov	r0, r3
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
                 ( ( uint32_t )time->Hours * SECONDS_IN_1HOUR ) ) ;
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	461a      	mov	r2, r3
 800685e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8006862:	fb03 f202 	mul.w	r2, r3, r2
                 ( ( uint32_t )time->Minutes * SECONDS_IN_1MINUTE ) +
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	785b      	ldrb	r3, [r3, #1]
 800686a:	4619      	mov	r1, r3
 800686c:	460b      	mov	r3, r1
 800686e:	011b      	lsls	r3, r3, #4
 8006870:	1a5b      	subs	r3, r3, r1
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	4403      	add	r3, r0
    seconds += ( ( uint32_t )time->Seconds + 
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4413      	add	r3, r2
 800687c:	613b      	str	r3, [r7, #16]

    calendarValue = ( ( ( uint64_t )seconds ) << N_PREDIV_S ) + ( PREDIV_S - time->SubSeconds );
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	461a      	mov	r2, r3
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	0d95      	lsrs	r5, r2, #22
 8006888:	0294      	lsls	r4, r2, #10
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	f5c3 737f 	rsb	r3, r3, #1020	; 0x3fc
 8006892:	3303      	adds	r3, #3
 8006894:	461a      	mov	r2, r3
 8006896:	f04f 0300 	mov.w	r3, #0
 800689a:	eb14 0802 	adds.w	r8, r4, r2
 800689e:	eb45 0903 	adc.w	r9, r5, r3
 80068a2:	e9c7 8906 	strd	r8, r9, [r7, #24]

    return( calendarValue );
 80068a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
}
 80068aa:	4610      	mov	r0, r2
 80068ac:	4619      	mov	r1, r3
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068b6:	bf00      	nop
 80068b8:	40002800 	.word	0x40002800
 80068bc:	200001f8 	.word	0x200001f8
 80068c0:	00445550 	.word	0x00445550
 80068c4:	0099aaa0 	.word	0x0099aaa0
 80068c8:	00015180 	.word	0x00015180

080068cc <HAL_RTC_AlarmAEventCallback>:
 * \brief  Alarm A callback.
 *
 * \param [IN] hrtc RTC handle
 */
void HAL_RTC_AlarmAEventCallback( RTC_HandleTypeDef *hrtc )
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b082      	sub	sp, #8
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
    TimerIrqHandler( );
 80068d4:	f000 faac 	bl	8006e30 <TimerIrqHandler>
}
 80068d8:	bf00      	nop
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <SX1276IoInit>:
    NULL, // void ( *RxBoosted )( uint32_t timeout ) - SX126x Only
    NULL, // void ( *SetRxDutyCycle )( uint32_t rxTime, uint32_t sleepTime ) - SX126x Only
};

void SX1276IoInit( void )
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0
  // DIO_0
  SX1276.DIO0.port = DIO_0_GPIO_Port;
 80068e4:	4b15      	ldr	r3, [pc, #84]	; (800693c <SX1276IoInit+0x5c>)
 80068e6:	4a16      	ldr	r2, [pc, #88]	; (8006940 <SX1276IoInit+0x60>)
 80068e8:	609a      	str	r2, [r3, #8]
  SX1276.DIO0.pin = DIO_0_Pin;
 80068ea:	4b14      	ldr	r3, [pc, #80]	; (800693c <SX1276IoInit+0x5c>)
 80068ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068f0:	819a      	strh	r2, [r3, #12]
  // DIO_1
  SX1276.DIO1.port = DIO_1_GPIO_Port;
 80068f2:	4b12      	ldr	r3, [pc, #72]	; (800693c <SX1276IoInit+0x5c>)
 80068f4:	4a12      	ldr	r2, [pc, #72]	; (8006940 <SX1276IoInit+0x60>)
 80068f6:	611a      	str	r2, [r3, #16]
  SX1276.DIO1.pin = DIO_1_Pin;
 80068f8:	4b10      	ldr	r3, [pc, #64]	; (800693c <SX1276IoInit+0x5c>)
 80068fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068fe:	829a      	strh	r2, [r3, #20]
  // DIO_2
  SX1276.DIO2.port = DIO_2_GPIO_Port;
 8006900:	4b0e      	ldr	r3, [pc, #56]	; (800693c <SX1276IoInit+0x5c>)
 8006902:	4a10      	ldr	r2, [pc, #64]	; (8006944 <SX1276IoInit+0x64>)
 8006904:	619a      	str	r2, [r3, #24]
  SX1276.DIO2.pin = DIO_2_Pin;
 8006906:	4b0d      	ldr	r3, [pc, #52]	; (800693c <SX1276IoInit+0x5c>)
 8006908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690c:	839a      	strh	r2, [r3, #28]
  // DIO_3
  SX1276.DIO3.port = DIO_3_GPIO_Port;
 800690e:	4b0b      	ldr	r3, [pc, #44]	; (800693c <SX1276IoInit+0x5c>)
 8006910:	4a0c      	ldr	r2, [pc, #48]	; (8006944 <SX1276IoInit+0x64>)
 8006912:	621a      	str	r2, [r3, #32]
  SX1276.DIO3.pin = DIO_3_Pin;
 8006914:	4b09      	ldr	r3, [pc, #36]	; (800693c <SX1276IoInit+0x5c>)
 8006916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800691a:	849a      	strh	r2, [r3, #36]	; 0x24
  // DIO_4
  SX1276.DIO4.port = DIO_4_GPIO_Port;
 800691c:	4b07      	ldr	r3, [pc, #28]	; (800693c <SX1276IoInit+0x5c>)
 800691e:	4a09      	ldr	r2, [pc, #36]	; (8006944 <SX1276IoInit+0x64>)
 8006920:	629a      	str	r2, [r3, #40]	; 0x28
  SX1276.DIO4.pin = DIO_4_Pin;
 8006922:	4b06      	ldr	r3, [pc, #24]	; (800693c <SX1276IoInit+0x5c>)
 8006924:	2220      	movs	r2, #32
 8006926:	859a      	strh	r2, [r3, #44]	; 0x2c
  // DIO_5
  SX1276.DIO5.port = DIO_5_GPIO_Port;
 8006928:	4b04      	ldr	r3, [pc, #16]	; (800693c <SX1276IoInit+0x5c>)
 800692a:	4a06      	ldr	r2, [pc, #24]	; (8006944 <SX1276IoInit+0x64>)
 800692c:	631a      	str	r2, [r3, #48]	; 0x30
  SX1276.DIO5.pin = DIO_5_Pin;
 800692e:	4b03      	ldr	r3, [pc, #12]	; (800693c <SX1276IoInit+0x5c>)
 8006930:	2240      	movs	r2, #64	; 0x40
 8006932:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8006934:	bf00      	nop
 8006936:	46bd      	mov	sp, r7
 8006938:	bc80      	pop	{r7}
 800693a:	4770      	bx	lr
 800693c:	20000378 	.word	0x20000378
 8006940:	40020000 	.word	0x40020000
 8006944:	40020800 	.word	0x40020800

08006948 <SX1276IoIrqInit>:

void SX1276IoIrqInit( DioIrqHandler **irqHandlers )
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  DioIrqCallbacks.dio0 = irqHandlers[0];
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a0d      	ldr	r2, [pc, #52]	; (800698c <SX1276IoIrqInit+0x44>)
 8006956:	6013      	str	r3, [r2, #0]
  DioIrqCallbacks.dio1 = irqHandlers[1];
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	4a0b      	ldr	r2, [pc, #44]	; (800698c <SX1276IoIrqInit+0x44>)
 800695e:	6053      	str	r3, [r2, #4]
  DioIrqCallbacks.dio2 = irqHandlers[2];
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	4a09      	ldr	r2, [pc, #36]	; (800698c <SX1276IoIrqInit+0x44>)
 8006966:	6093      	str	r3, [r2, #8]
  DioIrqCallbacks.dio3 = irqHandlers[3];
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	4a07      	ldr	r2, [pc, #28]	; (800698c <SX1276IoIrqInit+0x44>)
 800696e:	60d3      	str	r3, [r2, #12]
  DioIrqCallbacks.dio4 = irqHandlers[4];
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	4a05      	ldr	r2, [pc, #20]	; (800698c <SX1276IoIrqInit+0x44>)
 8006976:	6113      	str	r3, [r2, #16]
  DioIrqCallbacks.dio5 = irqHandlers[5];
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	4a03      	ldr	r2, [pc, #12]	; (800698c <SX1276IoIrqInit+0x44>)
 800697e:	6153      	str	r3, [r2, #20]
}
 8006980:	bf00      	nop
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	20000cb0 	.word	0x20000cb0

08006990 <SX1276SetBoardTcxo>:
{
    // No TCXO component available on this board design.
}

void SX1276SetBoardTcxo( uint8_t state )
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	71fb      	strb	r3, [r7, #7]
    // No TCXO component available on this board design.
}
 800699a:	bf00      	nop
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <SX1276GetBoardTcxoWakeupTime>:

uint32_t SX1276GetBoardTcxoWakeupTime( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
    return BOARD_TCXO_WAKEUP_TIME;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bc80      	pop	{r7}
 80069b0:	4770      	bx	lr
	...

080069b4 <SX1276Reset>:

void SX1276Reset( void )
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
    // Enables the TCXO if available on the board design
    SX1276SetBoardTcxo( true );
 80069b8:	2001      	movs	r0, #1
 80069ba:	f7ff ffe9 	bl	8006990 <SX1276SetBoardTcxo>

    // Set RESET pin to 0
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, RESET);
 80069be:	4b0c      	ldr	r3, [pc, #48]	; (80069f0 <SX1276Reset+0x3c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a0b      	ldr	r2, [pc, #44]	; (80069f0 <SX1276Reset+0x3c>)
 80069c4:	8891      	ldrh	r1, [r2, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	4618      	mov	r0, r3
 80069ca:	f7fa fd48 	bl	800145e <HAL_GPIO_WritePin>

    // Wait 1 ms
    DelayMs( 1 );
 80069ce:	2001      	movs	r0, #1
 80069d0:	f7ff f95e 	bl	8005c90 <DelayMs>

    // Configure RESET as input
    HAL_GPIO_WritePin(SX1276.Reset.port, SX1276.Reset.pin, SET);
 80069d4:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <SX1276Reset+0x3c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a05      	ldr	r2, [pc, #20]	; (80069f0 <SX1276Reset+0x3c>)
 80069da:	8891      	ldrh	r1, [r2, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fa fd3d 	bl	800145e <HAL_GPIO_WritePin>

    // Wait 6 ms
    DelayMs( 6 );
 80069e4:	2006      	movs	r0, #6
 80069e6:	f7ff f953 	bl	8005c90 <DelayMs>
}
 80069ea:	bf00      	nop
 80069ec:	bd80      	pop	{r7, pc}
 80069ee:	bf00      	nop
 80069f0:	20000378 	.word	0x20000378

080069f4 <SX1276SetRfTxPower>:

void SX1276SetRfTxPower( int8_t power )
{
 80069f4:	b590      	push	{r4, r7, lr}
 80069f6:	b085      	sub	sp, #20
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	4603      	mov	r3, r0
 80069fc:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 80069fe:	2300      	movs	r3, #0
 8006a00:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1276Read( REG_PACONFIG );
 8006a06:	2009      	movs	r0, #9
 8006a08:	f7fe f9ea 	bl	8004de0 <SX1276Read>
 8006a0c:	4603      	mov	r3, r0
 8006a0e:	73fb      	strb	r3, [r7, #15]
    paDac = SX1276Read( REG_PADAC );
 8006a10:	204d      	movs	r0, #77	; 0x4d
 8006a12:	f7fe f9e5 	bl	8004de0 <SX1276Read>
 8006a16:	4603      	mov	r3, r0
 8006a18:	73bb      	strb	r3, [r7, #14]

    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1276GetPaSelect( SX1276.Settings.Channel );
 8006a1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a22:	b25c      	sxtb	r4, r3
 8006a24:	4b4a      	ldr	r3, [pc, #296]	; (8006b50 <SX1276SetRfTxPower+0x15c>)
 8006a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f000 f893 	bl	8006b54 <SX1276GetPaSelect>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	b25b      	sxtb	r3, r3
 8006a32:	4323      	orrs	r3, r4
 8006a34:	b25b      	sxtb	r3, r3
 8006a36:	73fb      	strb	r3, [r7, #15]

    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 8006a38:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	da4e      	bge.n	8006ade <SX1276SetRfTxPower+0xea>
    {
        if( power > 17 )
 8006a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a44:	2b11      	cmp	r3, #17
 8006a46:	dd04      	ble.n	8006a52 <SX1276SetRfTxPower+0x5e>
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	f043 0307 	orr.w	r3, r3, #7
 8006a4e:	73bb      	strb	r3, [r7, #14]
 8006a50:	e008      	b.n	8006a64 <SX1276SetRfTxPower+0x70>
        }
        else
        {
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 8006a52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a56:	f023 0307 	bic.w	r3, r3, #7
 8006a5a:	b25b      	sxtb	r3, r3
 8006a5c:	f043 0304 	orr.w	r3, r3, #4
 8006a60:	b25b      	sxtb	r3, r3
 8006a62:	73bb      	strb	r3, [r7, #14]
        }
        if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 8006a64:	7bbb      	ldrb	r3, [r7, #14]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b07      	cmp	r3, #7
 8006a6c:	d11b      	bne.n	8006aa6 <SX1276SetRfTxPower+0xb2>
        {
            if( power < 5 )
 8006a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a72:	2b04      	cmp	r3, #4
 8006a74:	dc01      	bgt.n	8006a7a <SX1276SetRfTxPower+0x86>
            {
                power = 5;
 8006a76:	2305      	movs	r3, #5
 8006a78:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 20 )
 8006a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7e:	2b14      	cmp	r3, #20
 8006a80:	dd01      	ble.n	8006a86 <SX1276SetRfTxPower+0x92>
            {
                power = 20;
 8006a82:	2314      	movs	r3, #20
 8006a84:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 8006a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a8a:	f023 030f 	bic.w	r3, r3, #15
 8006a8e:	b25a      	sxtb	r2, r3
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	3b05      	subs	r3, #5
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	b25b      	sxtb	r3, r3
 8006a98:	f003 030f 	and.w	r3, r3, #15
 8006a9c:	b25b      	sxtb	r3, r3
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	b25b      	sxtb	r3, r3
 8006aa2:	73fb      	strb	r3, [r7, #15]
 8006aa4:	e045      	b.n	8006b32 <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < 2 )
 8006aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	dc01      	bgt.n	8006ab2 <SX1276SetRfTxPower+0xbe>
            {
                power = 2;
 8006aae:	2302      	movs	r3, #2
 8006ab0:	71fb      	strb	r3, [r7, #7]
            }
            if( power > 17 )
 8006ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab6:	2b11      	cmp	r3, #17
 8006ab8:	dd01      	ble.n	8006abe <SX1276SetRfTxPower+0xca>
            {
                power = 17;
 8006aba:	2311      	movs	r3, #17
 8006abc:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8006abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006ac2:	f023 030f 	bic.w	r3, r3, #15
 8006ac6:	b25a      	sxtb	r2, r3
 8006ac8:	79fb      	ldrb	r3, [r7, #7]
 8006aca:	3b02      	subs	r3, #2
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	b25b      	sxtb	r3, r3
 8006ad0:	f003 030f 	and.w	r3, r3, #15
 8006ad4:	b25b      	sxtb	r3, r3
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	b25b      	sxtb	r3, r3
 8006ada:	73fb      	strb	r3, [r7, #15]
 8006adc:	e029      	b.n	8006b32 <SX1276SetRfTxPower+0x13e>
        }
    }
    else
    {
        if( power > 0 )
 8006ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	dd12      	ble.n	8006b0c <SX1276SetRfTxPower+0x118>
        {
            if( power > 15 )
 8006ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aea:	2b0f      	cmp	r3, #15
 8006aec:	dd01      	ble.n	8006af2 <SX1276SetRfTxPower+0xfe>
            {
                power = 15;
 8006aee:	230f      	movs	r3, #15
 8006af0:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 8006af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006af6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8006b00:	b25a      	sxtb	r2, r3
 8006b02:	79fb      	ldrb	r3, [r7, #7]
 8006b04:	4313      	orrs	r3, r2
 8006b06:	b25b      	sxtb	r3, r3
 8006b08:	73fb      	strb	r3, [r7, #15]
 8006b0a:	e012      	b.n	8006b32 <SX1276SetRfTxPower+0x13e>
        }
        else
        {
            if( power < -4 )
 8006b0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b10:	f113 0f04 	cmn.w	r3, #4
 8006b14:	da01      	bge.n	8006b1a <SX1276SetRfTxPower+0x126>
            {
                power = -4;
 8006b16:	23fc      	movs	r3, #252	; 0xfc
 8006b18:	71fb      	strb	r3, [r7, #7]
            }
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 8006b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b1e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b22:	b25a      	sxtb	r2, r3
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	3304      	adds	r3, #4
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	b25b      	sxtb	r3, r3
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	b25b      	sxtb	r3, r3
 8006b30:	73fb      	strb	r3, [r7, #15]
        }
    }
    SX1276Write( REG_PACONFIG, paConfig );
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
 8006b34:	4619      	mov	r1, r3
 8006b36:	2009      	movs	r0, #9
 8006b38:	f7fe f942 	bl	8004dc0 <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 8006b3c:	7bbb      	ldrb	r3, [r7, #14]
 8006b3e:	4619      	mov	r1, r3
 8006b40:	204d      	movs	r0, #77	; 0x4d
 8006b42:	f7fe f93d 	bl	8004dc0 <SX1276Write>
}
 8006b46:	bf00      	nop
 8006b48:	3714      	adds	r7, #20
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd90      	pop	{r4, r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	20000378 	.word	0x20000378

08006b54 <SX1276GetPaSelect>:

static uint8_t SX1276GetPaSelect( uint32_t channel )
{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
    if( channel > RF_MID_BAND_THRESH )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a05      	ldr	r2, [pc, #20]	; (8006b74 <SX1276GetPaSelect+0x20>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d901      	bls.n	8006b68 <SX1276GetPaSelect+0x14>
    {
        return RF_PACONFIG_PASELECT_PABOOST;
 8006b64:	2380      	movs	r3, #128	; 0x80
 8006b66:	e000      	b.n	8006b6a <SX1276GetPaSelect+0x16>
    }
    else
    {
        return RF_PACONFIG_PASELECT_RFO;
 8006b68:	2300      	movs	r3, #0
    }
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	370c      	adds	r7, #12
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bc80      	pop	{r7}
 8006b72:	4770      	bx	lr
 8006b74:	1f4add40 	.word	0x1f4add40

08006b78 <SX1276SetAntSwLowPower>:

void SX1276SetAntSwLowPower( bool status )
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	4603      	mov	r3, r0
 8006b80:	71fb      	strb	r3, [r7, #7]
    if( RadioIsActive != status )
 8006b82:	4b0b      	ldr	r3, [pc, #44]	; (8006bb0 <SX1276SetAntSwLowPower+0x38>)
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	79fa      	ldrb	r2, [r7, #7]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d00d      	beq.n	8006ba8 <SX1276SetAntSwLowPower+0x30>
    {
        RadioIsActive = status;
 8006b8c:	4a08      	ldr	r2, [pc, #32]	; (8006bb0 <SX1276SetAntSwLowPower+0x38>)
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	7013      	strb	r3, [r2, #0]

        if( status == false )
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	f083 0301 	eor.w	r3, r3, #1
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <SX1276SetAntSwLowPower+0x2c>
        {
            SX1276AntSwInit( );
 8006b9e:	f000 f809 	bl	8006bb4 <SX1276AntSwInit>
        else
        {
            SX1276AntSwDeInit( );
        }
    }
}
 8006ba2:	e001      	b.n	8006ba8 <SX1276SetAntSwLowPower+0x30>
            SX1276AntSwDeInit( );
 8006ba4:	f000 f80c 	bl	8006bc0 <SX1276AntSwDeInit>
}
 8006ba8:	bf00      	nop
 8006baa:	3708      	adds	r7, #8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	20000234 	.word	0x20000234

08006bb4 <SX1276AntSwInit>:

void SX1276AntSwInit( void )
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_PULL_UP, 0 );
}
 8006bb8:	bf00      	nop
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bc80      	pop	{r7}
 8006bbe:	4770      	bx	lr

08006bc0 <SX1276AntSwDeInit>:

void SX1276AntSwDeInit( void )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	af00      	add	r7, sp, #0
//    GpioInit( &AntSwitch, RADIO_ANT_SWITCH, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
}
 8006bc4:	bf00      	nop
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bc80      	pop	{r7}
 8006bca:	4770      	bx	lr

08006bcc <SX1276SetAntSw>:

void SX1276SetAntSw( uint8_t opMode )
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bc80      	pop	{r7}
 8006bde:	4770      	bx	lr

08006be0 <SX1276CheckRfFrequency>:

bool SX1276CheckRfFrequency( uint32_t frequency )
{
 8006be0:	b480      	push	{r7}
 8006be2:	b083      	sub	sp, #12
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
    // Implement check. Currently all frequencies are supported
    return true;
 8006be8:	2301      	movs	r3, #1
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	370c      	adds	r7, #12
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bc80      	pop	{r7}
 8006bf2:	4770      	bx	lr

08006bf4 <SX1276GetDio1PinState>:

uint32_t SX1276GetDio1PinState( void )
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	af00      	add	r7, sp, #0
    return GpioRead( &SX1276.DIO1 );
 8006bf8:	4802      	ldr	r0, [pc, #8]	; (8006c04 <SX1276GetDio1PinState+0x10>)
 8006bfa:	f7f9 fcfb 	bl	80005f4 <GpioRead>
 8006bfe:	4603      	mov	r3, r0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	20000388 	.word	0x20000388

08006c08 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b084      	sub	sp, #16
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	80fb      	strh	r3, [r7, #6]
  void (*fptr)(void *context) = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  switch(GPIO_Pin)
 8006c16:	88fb      	ldrh	r3, [r7, #6]
 8006c18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c1c:	d037      	beq.n	8006c8e <HAL_GPIO_EXTI_Callback+0x86>
 8006c1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c22:	dc38      	bgt.n	8006c96 <HAL_GPIO_EXTI_Callback+0x8e>
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d019      	beq.n	8006c5e <HAL_GPIO_EXTI_Callback+0x56>
 8006c2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c2e:	dc32      	bgt.n	8006c96 <HAL_GPIO_EXTI_Callback+0x8e>
 8006c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c34:	d017      	beq.n	8006c66 <HAL_GPIO_EXTI_Callback+0x5e>
 8006c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c3a:	dc2c      	bgt.n	8006c96 <HAL_GPIO_EXTI_Callback+0x8e>
 8006c3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c40:	d015      	beq.n	8006c6e <HAL_GPIO_EXTI_Callback+0x66>
 8006c42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c46:	dc26      	bgt.n	8006c96 <HAL_GPIO_EXTI_Callback+0x8e>
 8006c48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c4c:	d013      	beq.n	8006c76 <HAL_GPIO_EXTI_Callback+0x6e>
 8006c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c52:	dc20      	bgt.n	8006c96 <HAL_GPIO_EXTI_Callback+0x8e>
 8006c54:	2b20      	cmp	r3, #32
 8006c56:	d012      	beq.n	8006c7e <HAL_GPIO_EXTI_Callback+0x76>
 8006c58:	2b40      	cmp	r3, #64	; 0x40
 8006c5a:	d014      	beq.n	8006c86 <HAL_GPIO_EXTI_Callback+0x7e>
      break;
    case GPIO_PIN_13:
    	ButtonIsNotPushed = false;
      break;
    default:
      break;
 8006c5c:	e01b      	b.n	8006c96 <HAL_GPIO_EXTI_Callback+0x8e>
      fptr = DioIrq[0];
 8006c5e:	4b13      	ldr	r3, [pc, #76]	; (8006cac <HAL_GPIO_EXTI_Callback+0xa4>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	60fb      	str	r3, [r7, #12]
      break;
 8006c64:	e018      	b.n	8006c98 <HAL_GPIO_EXTI_Callback+0x90>
      fptr = DioIrq[1];
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <HAL_GPIO_EXTI_Callback+0xa4>)
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	60fb      	str	r3, [r7, #12]
      break;
 8006c6c:	e014      	b.n	8006c98 <HAL_GPIO_EXTI_Callback+0x90>
      fptr = DioIrq[2];
 8006c6e:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <HAL_GPIO_EXTI_Callback+0xa4>)
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	60fb      	str	r3, [r7, #12]
      break;
 8006c74:	e010      	b.n	8006c98 <HAL_GPIO_EXTI_Callback+0x90>
      fptr = DioIrq[3];
 8006c76:	4b0d      	ldr	r3, [pc, #52]	; (8006cac <HAL_GPIO_EXTI_Callback+0xa4>)
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	60fb      	str	r3, [r7, #12]
      break;
 8006c7c:	e00c      	b.n	8006c98 <HAL_GPIO_EXTI_Callback+0x90>
      fptr = DioIrq[4];
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <HAL_GPIO_EXTI_Callback+0xa4>)
 8006c80:	691b      	ldr	r3, [r3, #16]
 8006c82:	60fb      	str	r3, [r7, #12]
      break;
 8006c84:	e008      	b.n	8006c98 <HAL_GPIO_EXTI_Callback+0x90>
      fptr = DioIrq[5];
 8006c86:	4b09      	ldr	r3, [pc, #36]	; (8006cac <HAL_GPIO_EXTI_Callback+0xa4>)
 8006c88:	695b      	ldr	r3, [r3, #20]
 8006c8a:	60fb      	str	r3, [r7, #12]
      break;
 8006c8c:	e004      	b.n	8006c98 <HAL_GPIO_EXTI_Callback+0x90>
    	ButtonIsNotPushed = false;
 8006c8e:	4b08      	ldr	r3, [pc, #32]	; (8006cb0 <HAL_GPIO_EXTI_Callback+0xa8>)
 8006c90:	2200      	movs	r2, #0
 8006c92:	701a      	strb	r2, [r3, #0]
      break;
 8006c94:	e000      	b.n	8006c98 <HAL_GPIO_EXTI_Callback+0x90>
      break;
 8006c96:	bf00      	nop
}
  if(fptr != 0)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d002      	beq.n	8006ca4 <HAL_GPIO_EXTI_Callback+0x9c>
    fptr(NULL);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2000      	movs	r0, #0
 8006ca2:	4798      	blx	r3
}
 8006ca4:	bf00      	nop
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}
 8006cac:	2000000c 	.word	0x2000000c
 8006cb0:	20000244 	.word	0x20000244

08006cb4 <TimerInit>:
 * \retval true (the object is already in the list) or false
 */
static bool TimerExists( TimerEvent_t *obj );

void TimerInit( TimerEvent_t *obj, void ( *callback )( void *context ) )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
    obj->Timestamp = 0;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = 0;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	605a      	str	r2, [r3, #4]
    obj->IsStarted = false;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	725a      	strb	r2, [r3, #9]
    obj->Callback = callback;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	683a      	ldr	r2, [r7, #0]
 8006cda:	60da      	str	r2, [r3, #12]
    obj->Context = NULL;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	611a      	str	r2, [r3, #16]
    obj->Next = NULL;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	615a      	str	r2, [r3, #20]
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bc80      	pop	{r7}
 8006cf0:	4770      	bx	lr
	...

08006cf4 <TimerStart>:
{
    obj->Context = context;
}

void TimerStart( TimerEvent_t *obj )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
    uint32_t elapsedTime = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60fb      	str	r3, [r7, #12]

    CRITICAL_SECTION_BEGIN( );
 8006d00:	f107 0308 	add.w	r3, r7, #8
 8006d04:	4618      	mov	r0, r3
 8006d06:	f7fe ff7f 	bl	8005c08 <BoardCriticalSectionBegin>

    if( ( obj == NULL ) || ( TimerExists( obj ) == true ) )
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <TimerStart+0x28>
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f989 	bl	8007028 <TimerExists>
 8006d16:	4603      	mov	r3, r0
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <TimerStart+0x34>
    {
        CRITICAL_SECTION_END( );
 8006d1c:	f107 0308 	add.w	r3, r7, #8
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe ff82 	bl	8005c2a <BoardCriticalSectionEnd>
 8006d26:	e02f      	b.n	8006d88 <TimerStart+0x94>
        return;
    }

    obj->Timestamp = obj->ReloadValue;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685a      	ldr	r2, [r3, #4]
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	601a      	str	r2, [r3, #0]
    obj->IsStarted = true;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	721a      	strb	r2, [r3, #8]
    obj->IsNext2Expire = false;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	725a      	strb	r2, [r3, #9]

    if( TimerListHead == NULL )
 8006d3c:	4b14      	ldr	r3, [pc, #80]	; (8006d90 <TimerStart+0x9c>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d105      	bne.n	8006d50 <TimerStart+0x5c>
    {
        RtcSetTimerContext( );
 8006d44:	f7ff fb82 	bl	800644c <RtcSetTimerContext>
        // Inserts a timer at time now + obj->Timestamp
        TimerInsertNewHeadTimer( obj );
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 f853 	bl	8006df4 <TimerInsertNewHeadTimer>
 8006d4e:	e016      	b.n	8006d7e <TimerStart+0x8a>
    }
    else
    {
        elapsedTime = RtcGetTimerElapsedTime( );
 8006d50:	f7ff fd0e 	bl	8006770 <RtcGetTimerElapsedTime>
 8006d54:	60f8      	str	r0, [r7, #12]
        obj->Timestamp += elapsedTime;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	441a      	add	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	601a      	str	r2, [r3, #0]

        if( obj->Timestamp < TimerListHead->Timestamp )
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	4b0a      	ldr	r3, [pc, #40]	; (8006d90 <TimerStart+0x9c>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d203      	bcs.n	8006d78 <TimerStart+0x84>
        {
            TimerInsertNewHeadTimer( obj );
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f83f 	bl	8006df4 <TimerInsertNewHeadTimer>
 8006d76:	e002      	b.n	8006d7e <TimerStart+0x8a>
        }
        else
        {
            TimerInsertTimer( obj );
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f80b 	bl	8006d94 <TimerInsertTimer>
        }
    }
    CRITICAL_SECTION_END( );
 8006d7e:	f107 0308 	add.w	r3, r7, #8
 8006d82:	4618      	mov	r0, r3
 8006d84:	f7fe ff51 	bl	8005c2a <BoardCriticalSectionEnd>
}
 8006d88:	3710      	adds	r7, #16
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	20000238 	.word	0x20000238

08006d94 <TimerInsertTimer>:

static void TimerInsertTimer( TimerEvent_t *obj )
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8006d9c:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <TimerInsertTimer+0x5c>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	60fb      	str	r3, [r7, #12]
    TimerEvent_t* next = TimerListHead->Next;
 8006da2:	4b13      	ldr	r3, [pc, #76]	; (8006df0 <TimerInsertTimer+0x5c>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	60bb      	str	r3, [r7, #8]

    while( cur->Next != NULL )
 8006daa:	e012      	b.n	8006dd2 <TimerInsertTimer+0x3e>
    {
        if( obj->Timestamp > next->Timestamp )
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d905      	bls.n	8006dc4 <TimerInsertTimer+0x30>
        {
            cur = next;
 8006db8:	68bb      	ldr	r3, [r7, #8]
 8006dba:	60fb      	str	r3, [r7, #12]
            next = next->Next;
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	60bb      	str	r3, [r7, #8]
 8006dc2:	e006      	b.n	8006dd2 <TimerInsertTimer+0x3e>
        }
        else
        {
            cur->Next = obj;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	615a      	str	r2, [r3, #20]
            obj->Next = next;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	615a      	str	r2, [r3, #20]
            return;
 8006dd0:	e009      	b.n	8006de6 <TimerInsertTimer+0x52>
    while( cur->Next != NULL )
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e8      	bne.n	8006dac <TimerInsertTimer+0x18>
        }
    }
    cur->Next = obj;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	687a      	ldr	r2, [r7, #4]
 8006dde:	615a      	str	r2, [r3, #20]
    obj->Next = NULL;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	615a      	str	r2, [r3, #20]
}
 8006de6:	3714      	adds	r7, #20
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bc80      	pop	{r7}
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	20000238 	.word	0x20000238

08006df4 <TimerInsertNewHeadTimer>:

static void TimerInsertNewHeadTimer( TimerEvent_t *obj )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <TimerInsertNewHeadTimer+0x38>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	60fb      	str	r3, [r7, #12]

    if( cur != NULL )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <TimerInsertNewHeadTimer+0x1a>
    {
        cur->IsNext2Expire = false;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	725a      	strb	r2, [r3, #9]
    }

    obj->Next = cur;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	68fa      	ldr	r2, [r7, #12]
 8006e12:	615a      	str	r2, [r3, #20]
    TimerListHead = obj;
 8006e14:	4a05      	ldr	r2, [pc, #20]	; (8006e2c <TimerInsertNewHeadTimer+0x38>)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6013      	str	r3, [r2, #0]
    TimerSetTimeout( TimerListHead );
 8006e1a:	4b04      	ldr	r3, [pc, #16]	; (8006e2c <TimerInsertNewHeadTimer+0x38>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f000 f968 	bl	80070f4 <TimerSetTimeout>
}
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}
 8006e2c:	20000238 	.word	0x20000238

08006e30 <TimerIrqHandler>:
{
    return obj->IsStarted;
}

void TimerIrqHandler( void )
{
 8006e30:	b590      	push	{r4, r7, lr}
 8006e32:	b087      	sub	sp, #28
 8006e34:	af00      	add	r7, sp, #0
    TimerEvent_t* cur;
    TimerEvent_t* next;

    uint32_t old =  RtcGetTimerContext( );
 8006e36:	f7ff fb1d 	bl	8006474 <RtcGetTimerContext>
 8006e3a:	6138      	str	r0, [r7, #16]
    uint32_t now =  RtcSetTimerContext( );
 8006e3c:	f7ff fb06 	bl	800644c <RtcSetTimerContext>
 8006e40:	60f8      	str	r0, [r7, #12]
    uint32_t deltaContext = now - old; // intentional wrap around
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	1ad3      	subs	r3, r2, r3
 8006e48:	60bb      	str	r3, [r7, #8]

    // Update timeStamp based upon new Time Reference
    // because delta context should never exceed 2^32
    if( TimerListHead != NULL )
 8006e4a:	4b39      	ldr	r3, [pc, #228]	; (8006f30 <TimerIrqHandler+0x100>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d01c      	beq.n	8006e8c <TimerIrqHandler+0x5c>
    {
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8006e52:	4b37      	ldr	r3, [pc, #220]	; (8006f30 <TimerIrqHandler+0x100>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	617b      	str	r3, [r7, #20]
 8006e58:	e014      	b.n	8006e84 <TimerIrqHandler+0x54>
        {
            next = cur->Next;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	695b      	ldr	r3, [r3, #20]
 8006e5e:	607b      	str	r3, [r7, #4]
            if( next->Timestamp > deltaContext )
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d206      	bcs.n	8006e78 <TimerIrqHandler+0x48>
            {
                next->Timestamp -= deltaContext;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	1ad2      	subs	r2, r2, r3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	601a      	str	r2, [r3, #0]
 8006e76:	e002      	b.n	8006e7e <TimerIrqHandler+0x4e>
            }
            else
            {
                next->Timestamp = 0;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	601a      	str	r2, [r3, #0]
        for( cur = TimerListHead; cur->Next != NULL; cur = cur->Next )
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	695b      	ldr	r3, [r3, #20]
 8006e82:	617b      	str	r3, [r7, #20]
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	695b      	ldr	r3, [r3, #20]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e6      	bne.n	8006e5a <TimerIrqHandler+0x2a>
            }
        }
    }

    // Execute immediately the alarm callback
    if ( TimerListHead != NULL )
 8006e8c:	4b28      	ldr	r3, [pc, #160]	; (8006f30 <TimerIrqHandler+0x100>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d02c      	beq.n	8006eee <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 8006e94:	4b26      	ldr	r3, [pc, #152]	; (8006f30 <TimerIrqHandler+0x100>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 8006e9a:	4b25      	ldr	r3, [pc, #148]	; (8006f30 <TimerIrqHandler+0x100>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	4a23      	ldr	r2, [pc, #140]	; (8006f30 <TimerIrqHandler+0x100>)
 8006ea2:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	68db      	ldr	r3, [r3, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d100      	bne.n	8006eb4 <TimerIrqHandler+0x84>
 8006eb2:	e7fe      	b.n	8006eb2 <TimerIrqHandler+0x82>
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	6912      	ldr	r2, [r2, #16]
 8006ebc:	4610      	mov	r0, r2
 8006ebe:	4798      	blx	r3
    }

    // Remove all the expired object from the list
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8006ec0:	e015      	b.n	8006eee <TimerIrqHandler+0xbe>
    {
        cur = TimerListHead;
 8006ec2:	4b1b      	ldr	r3, [pc, #108]	; (8006f30 <TimerIrqHandler+0x100>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	617b      	str	r3, [r7, #20]
        TimerListHead = TimerListHead->Next;
 8006ec8:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <TimerIrqHandler+0x100>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	4a18      	ldr	r2, [pc, #96]	; (8006f30 <TimerIrqHandler+0x100>)
 8006ed0:	6013      	str	r3, [r2, #0]
        cur->IsStarted = false;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	721a      	strb	r2, [r3, #8]
        ExecuteCallBack( cur->Callback, cur->Context );
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	68db      	ldr	r3, [r3, #12]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d100      	bne.n	8006ee2 <TimerIrqHandler+0xb2>
 8006ee0:	e7fe      	b.n	8006ee0 <TimerIrqHandler+0xb0>
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	6912      	ldr	r2, [r2, #16]
 8006eea:	4610      	mov	r0, r2
 8006eec:	4798      	blx	r3
    while( ( TimerListHead != NULL ) && ( TimerListHead->Timestamp < RtcGetTimerElapsedTime( ) ) )
 8006eee:	4b10      	ldr	r3, [pc, #64]	; (8006f30 <TimerIrqHandler+0x100>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d007      	beq.n	8006f06 <TimerIrqHandler+0xd6>
 8006ef6:	4b0e      	ldr	r3, [pc, #56]	; (8006f30 <TimerIrqHandler+0x100>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	681c      	ldr	r4, [r3, #0]
 8006efc:	f7ff fc38 	bl	8006770 <RtcGetTimerElapsedTime>
 8006f00:	4603      	mov	r3, r0
 8006f02:	429c      	cmp	r4, r3
 8006f04:	d3dd      	bcc.n	8006ec2 <TimerIrqHandler+0x92>
    }

    // Start the next TimerListHead if it exists AND NOT running
    if( ( TimerListHead != NULL ) && ( TimerListHead->IsNext2Expire == false ) )
 8006f06:	4b0a      	ldr	r3, [pc, #40]	; (8006f30 <TimerIrqHandler+0x100>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00c      	beq.n	8006f28 <TimerIrqHandler+0xf8>
 8006f0e:	4b08      	ldr	r3, [pc, #32]	; (8006f30 <TimerIrqHandler+0x100>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	7a5b      	ldrb	r3, [r3, #9]
 8006f14:	f083 0301 	eor.w	r3, r3, #1
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d004      	beq.n	8006f28 <TimerIrqHandler+0xf8>
    {
        TimerSetTimeout( TimerListHead );
 8006f1e:	4b04      	ldr	r3, [pc, #16]	; (8006f30 <TimerIrqHandler+0x100>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 f8e6 	bl	80070f4 <TimerSetTimeout>
    }
}
 8006f28:	bf00      	nop
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd90      	pop	{r4, r7, pc}
 8006f30:	20000238 	.word	0x20000238

08006f34 <TimerStop>:

void TimerStop( TimerEvent_t *obj )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
    CRITICAL_SECTION_BEGIN( );
 8006f3c:	f107 030c 	add.w	r3, r7, #12
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fe61 	bl	8005c08 <BoardCriticalSectionBegin>

    TimerEvent_t* prev = TimerListHead;
 8006f46:	4b37      	ldr	r3, [pc, #220]	; (8007024 <TimerStop+0xf0>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	617b      	str	r3, [r7, #20]
    TimerEvent_t* cur = TimerListHead;
 8006f4c:	4b35      	ldr	r3, [pc, #212]	; (8007024 <TimerStop+0xf0>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	613b      	str	r3, [r7, #16]

    // List is empty or the obj to stop does not exist
    if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8006f52:	4b34      	ldr	r3, [pc, #208]	; (8007024 <TimerStop+0xf0>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d002      	beq.n	8006f60 <TimerStop+0x2c>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d105      	bne.n	8006f6c <TimerStop+0x38>
    {
        CRITICAL_SECTION_END( );
 8006f60:	f107 030c 	add.w	r3, r7, #12
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe fe60 	bl	8005c2a <BoardCriticalSectionEnd>
 8006f6a:	e057      	b.n	800701c <TimerStop+0xe8>
        return;
    }

    obj->IsStarted = false;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	721a      	strb	r2, [r3, #8]

    if( TimerListHead == obj ) // Stop the Head
 8006f72:	4b2c      	ldr	r3, [pc, #176]	; (8007024 <TimerStop+0xf0>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d147      	bne.n	800700c <TimerStop+0xd8>
    {
        if( TimerListHead->IsNext2Expire == true ) // The head is already running
 8006f7c:	4b29      	ldr	r3, [pc, #164]	; (8007024 <TimerStop+0xf0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	7a5b      	ldrb	r3, [r3, #9]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d019      	beq.n	8006fba <TimerStop+0x86>
        {
            TimerListHead->IsNext2Expire = false;
 8006f86:	4b27      	ldr	r3, [pc, #156]	; (8007024 <TimerStop+0xf0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	725a      	strb	r2, [r3, #9]
            if( TimerListHead->Next != NULL )
 8006f8e:	4b25      	ldr	r3, [pc, #148]	; (8007024 <TimerStop+0xf0>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <TimerStop+0x7a>
            {
                TimerListHead = TimerListHead->Next;
 8006f98:	4b22      	ldr	r3, [pc, #136]	; (8007024 <TimerStop+0xf0>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	4a21      	ldr	r2, [pc, #132]	; (8007024 <TimerStop+0xf0>)
 8006fa0:	6013      	str	r3, [r2, #0]
                TimerSetTimeout( TimerListHead );
 8006fa2:	4b20      	ldr	r3, [pc, #128]	; (8007024 <TimerStop+0xf0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f8a4 	bl	80070f4 <TimerSetTimeout>
 8006fac:	e031      	b.n	8007012 <TimerStop+0xde>
            }
            else
            {
                RtcStopAlarm( );
 8006fae:	f7ff fab9 	bl	8006524 <RtcStopAlarm>
                TimerListHead = NULL;
 8006fb2:	4b1c      	ldr	r3, [pc, #112]	; (8007024 <TimerStop+0xf0>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]
 8006fb8:	e02b      	b.n	8007012 <TimerStop+0xde>
            }
        }
        else // Stop the head before it is started
        {
            if( TimerListHead->Next != NULL )
 8006fba:	4b1a      	ldr	r3, [pc, #104]	; (8007024 <TimerStop+0xf0>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <TimerStop+0x9c>
            {
                TimerListHead = TimerListHead->Next;
 8006fc4:	4b17      	ldr	r3, [pc, #92]	; (8007024 <TimerStop+0xf0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	695b      	ldr	r3, [r3, #20]
 8006fca:	4a16      	ldr	r2, [pc, #88]	; (8007024 <TimerStop+0xf0>)
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e020      	b.n	8007012 <TimerStop+0xde>
            }
            else
            {
                TimerListHead = NULL;
 8006fd0:	4b14      	ldr	r3, [pc, #80]	; (8007024 <TimerStop+0xf0>)
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	e01c      	b.n	8007012 <TimerStop+0xde>
    }
    else // Stop an object within the list
    {
        while( cur != NULL )
        {
            if( cur == obj )
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	429a      	cmp	r2, r3
 8006fde:	d110      	bne.n	8007002 <TimerStop+0xce>
            {
                if( cur->Next != NULL )
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d006      	beq.n	8006ff6 <TimerStop+0xc2>
                {
                    cur = cur->Next;
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	695b      	ldr	r3, [r3, #20]
 8006fec:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	693a      	ldr	r2, [r7, #16]
 8006ff2:	615a      	str	r2, [r3, #20]
                else
                {
                    cur = NULL;
                    prev->Next = cur;
                }
                break;
 8006ff4:	e00d      	b.n	8007012 <TimerStop+0xde>
                    cur = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	613b      	str	r3, [r7, #16]
                    prev->Next = cur;
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	693a      	ldr	r2, [r7, #16]
 8006ffe:	615a      	str	r2, [r3, #20]
                break;
 8007000:	e007      	b.n	8007012 <TimerStop+0xde>
            }
            else
            {
                prev = cur;
 8007002:	693b      	ldr	r3, [r7, #16]
 8007004:	617b      	str	r3, [r7, #20]
                cur = cur->Next;
 8007006:	693b      	ldr	r3, [r7, #16]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	613b      	str	r3, [r7, #16]
        while( cur != NULL )
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d1e2      	bne.n	8006fd8 <TimerStop+0xa4>
            }
        }
    }
    CRITICAL_SECTION_END( );
 8007012:	f107 030c 	add.w	r3, r7, #12
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fe07 	bl	8005c2a <BoardCriticalSectionEnd>
}
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20000238 	.word	0x20000238

08007028 <TimerExists>:

static bool TimerExists( TimerEvent_t *obj )
{
 8007028:	b480      	push	{r7}
 800702a:	b085      	sub	sp, #20
 800702c:	af00      	add	r7, sp, #0
 800702e:	6078      	str	r0, [r7, #4]
    TimerEvent_t* cur = TimerListHead;
 8007030:	4b0a      	ldr	r3, [pc, #40]	; (800705c <TimerExists+0x34>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	60fb      	str	r3, [r7, #12]

    while( cur != NULL )
 8007036:	e008      	b.n	800704a <TimerExists+0x22>
    {
        if( cur == obj )
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	429a      	cmp	r2, r3
 800703e:	d101      	bne.n	8007044 <TimerExists+0x1c>
        {
            return true;
 8007040:	2301      	movs	r3, #1
 8007042:	e006      	b.n	8007052 <TimerExists+0x2a>
        }
        cur = cur->Next;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	60fb      	str	r3, [r7, #12]
    while( cur != NULL )
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1f3      	bne.n	8007038 <TimerExists+0x10>
    }
    return false;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	bc80      	pop	{r7}
 800705a:	4770      	bx	lr
 800705c:	20000238 	.word	0x20000238

08007060 <TimerSetValue>:
    TimerStop( obj );
    TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	6039      	str	r1, [r7, #0]
    uint32_t minValue = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	60bb      	str	r3, [r7, #8]
    uint32_t ticks = RtcMs2Tick( value );
 800706e:	6838      	ldr	r0, [r7, #0]
 8007070:	f7ff fa11 	bl	8006496 <RtcMs2Tick>
 8007074:	60f8      	str	r0, [r7, #12]

    TimerStop( obj );
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff ff5c 	bl	8006f34 <TimerStop>

    minValue = RtcGetMinimumTimeout( );
 800707c:	f7ff fa04 	bl	8006488 <RtcGetMinimumTimeout>
 8007080:	60b8      	str	r0, [r7, #8]

    if( ticks < minValue )
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	429a      	cmp	r2, r3
 8007088:	d201      	bcs.n	800708e <TimerSetValue+0x2e>
    {
        ticks = minValue;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	60fb      	str	r3, [r7, #12]
    }

    obj->Timestamp = ticks;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	601a      	str	r2, [r3, #0]
    obj->ReloadValue = ticks;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68fa      	ldr	r2, [r7, #12]
 8007098:	605a      	str	r2, [r3, #4]
}
 800709a:	bf00      	nop
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b082      	sub	sp, #8
 80070a6:	af00      	add	r7, sp, #0
    uint32_t now = RtcGetTimerValue( );
 80070a8:	f7ff fb4e 	bl	8006748 <RtcGetTimerValue>
 80070ac:	6078      	str	r0, [r7, #4]
    return  RtcTick2Ms( now );
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7ff fa0e 	bl	80064d0 <RtcTick2Ms>
 80070b4:	4603      	mov	r3, r0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}

080070be <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	b084      	sub	sp, #16
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
    if ( past == 0 )
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d101      	bne.n	80070d0 <TimerGetElapsedTime+0x12>
    {
        return 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	e00d      	b.n	80070ec <TimerGetElapsedTime+0x2e>
    }
    uint32_t nowInTicks = RtcGetTimerValue( );
 80070d0:	f7ff fb3a 	bl	8006748 <RtcGetTimerValue>
 80070d4:	60f8      	str	r0, [r7, #12]
    uint32_t pastInTicks = RtcMs2Tick( past );
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7ff f9dd 	bl	8006496 <RtcMs2Tick>
 80070dc:	60b8      	str	r0, [r7, #8]

    // Intentional wrap around. Works Ok if tick duration below 1ms
    return RtcTick2Ms( nowInTicks - pastInTicks );
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff f9f3 	bl	80064d0 <RtcTick2Ms>
 80070ea:	4603      	mov	r3, r0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
 80070f4:	b590      	push	{r4, r7, lr}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
    int32_t minTicks= RtcGetMinimumTimeout( );
 80070fc:	f7ff f9c4 	bl	8006488 <RtcGetMinimumTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	60fb      	str	r3, [r7, #12]
    obj->IsNext2Expire = true;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	725a      	strb	r2, [r3, #9]

    // In case deadline too soon
    if( obj->Timestamp  < ( RtcGetTimerElapsedTime( ) + minTicks ) )
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681c      	ldr	r4, [r3, #0]
 800710e:	f7ff fb2f 	bl	8006770 <RtcGetTimerElapsedTime>
 8007112:	4602      	mov	r2, r0
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	429c      	cmp	r4, r3
 800711a:	d206      	bcs.n	800712a <TimerSetTimeout+0x36>
    {
        obj->Timestamp = RtcGetTimerElapsedTime( ) + minTicks;
 800711c:	f7ff fb28 	bl	8006770 <RtcGetTimerElapsedTime>
 8007120:	4602      	mov	r2, r0
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	441a      	add	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	601a      	str	r2, [r3, #0]
    }
    RtcSetAlarm( obj->Timestamp );
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4618      	mov	r0, r3
 8007130:	f7ff f9ea 	bl	8006508 <RtcSetAlarm>
}
 8007134:	bf00      	nop
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	bd90      	pop	{r4, r7, pc}

0800713c <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	60f8      	str	r0, [r7, #12]
 8007144:	60b9      	str	r1, [r7, #8]
 8007146:	4613      	mov	r3, r2
 8007148:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 800714a:	e007      	b.n	800715c <memcpy1+0x20>
    {
        *dst++ = *src++;
 800714c:	68ba      	ldr	r2, [r7, #8]
 800714e:	1c53      	adds	r3, r2, #1
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	1c59      	adds	r1, r3, #1
 8007156:	60f9      	str	r1, [r7, #12]
 8007158:	7812      	ldrb	r2, [r2, #0]
 800715a:	701a      	strb	r2, [r3, #0]
    while( size-- )
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	1e5a      	subs	r2, r3, #1
 8007160:	80fa      	strh	r2, [r7, #6]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1f2      	bne.n	800714c <memcpy1+0x10>
    }
}
 8007166:	bf00      	nop
 8007168:	bf00      	nop
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	bc80      	pop	{r7}
 8007170:	4770      	bx	lr
	...

08007174 <__errno>:
 8007174:	4b01      	ldr	r3, [pc, #4]	; (800717c <__errno+0x8>)
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop
 800717c:	20000044 	.word	0x20000044

08007180 <__libc_init_array>:
 8007180:	b570      	push	{r4, r5, r6, lr}
 8007182:	2600      	movs	r6, #0
 8007184:	4d0c      	ldr	r5, [pc, #48]	; (80071b8 <__libc_init_array+0x38>)
 8007186:	4c0d      	ldr	r4, [pc, #52]	; (80071bc <__libc_init_array+0x3c>)
 8007188:	1b64      	subs	r4, r4, r5
 800718a:	10a4      	asrs	r4, r4, #2
 800718c:	42a6      	cmp	r6, r4
 800718e:	d109      	bne.n	80071a4 <__libc_init_array+0x24>
 8007190:	f000 fc6e 	bl	8007a70 <_init>
 8007194:	2600      	movs	r6, #0
 8007196:	4d0a      	ldr	r5, [pc, #40]	; (80071c0 <__libc_init_array+0x40>)
 8007198:	4c0a      	ldr	r4, [pc, #40]	; (80071c4 <__libc_init_array+0x44>)
 800719a:	1b64      	subs	r4, r4, r5
 800719c:	10a4      	asrs	r4, r4, #2
 800719e:	42a6      	cmp	r6, r4
 80071a0:	d105      	bne.n	80071ae <__libc_init_array+0x2e>
 80071a2:	bd70      	pop	{r4, r5, r6, pc}
 80071a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a8:	4798      	blx	r3
 80071aa:	3601      	adds	r6, #1
 80071ac:	e7ee      	b.n	800718c <__libc_init_array+0xc>
 80071ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80071b2:	4798      	blx	r3
 80071b4:	3601      	adds	r6, #1
 80071b6:	e7f2      	b.n	800719e <__libc_init_array+0x1e>
 80071b8:	08007c8c 	.word	0x08007c8c
 80071bc:	08007c8c 	.word	0x08007c8c
 80071c0:	08007c8c 	.word	0x08007c8c
 80071c4:	08007c90 	.word	0x08007c90

080071c8 <memcpy>:
 80071c8:	440a      	add	r2, r1
 80071ca:	4291      	cmp	r1, r2
 80071cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80071d0:	d100      	bne.n	80071d4 <memcpy+0xc>
 80071d2:	4770      	bx	lr
 80071d4:	b510      	push	{r4, lr}
 80071d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071da:	4291      	cmp	r1, r2
 80071dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071e0:	d1f9      	bne.n	80071d6 <memcpy+0xe>
 80071e2:	bd10      	pop	{r4, pc}

080071e4 <memset>:
 80071e4:	4603      	mov	r3, r0
 80071e6:	4402      	add	r2, r0
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d100      	bne.n	80071ee <memset+0xa>
 80071ec:	4770      	bx	lr
 80071ee:	f803 1b01 	strb.w	r1, [r3], #1
 80071f2:	e7f9      	b.n	80071e8 <memset+0x4>

080071f4 <siprintf>:
 80071f4:	b40e      	push	{r1, r2, r3}
 80071f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80071fa:	b500      	push	{lr}
 80071fc:	b09c      	sub	sp, #112	; 0x70
 80071fe:	ab1d      	add	r3, sp, #116	; 0x74
 8007200:	9002      	str	r0, [sp, #8]
 8007202:	9006      	str	r0, [sp, #24]
 8007204:	9107      	str	r1, [sp, #28]
 8007206:	9104      	str	r1, [sp, #16]
 8007208:	4808      	ldr	r0, [pc, #32]	; (800722c <siprintf+0x38>)
 800720a:	4909      	ldr	r1, [pc, #36]	; (8007230 <siprintf+0x3c>)
 800720c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007210:	9105      	str	r1, [sp, #20]
 8007212:	6800      	ldr	r0, [r0, #0]
 8007214:	a902      	add	r1, sp, #8
 8007216:	9301      	str	r3, [sp, #4]
 8007218:	f000 f87a 	bl	8007310 <_svfiprintf_r>
 800721c:	2200      	movs	r2, #0
 800721e:	9b02      	ldr	r3, [sp, #8]
 8007220:	701a      	strb	r2, [r3, #0]
 8007222:	b01c      	add	sp, #112	; 0x70
 8007224:	f85d eb04 	ldr.w	lr, [sp], #4
 8007228:	b003      	add	sp, #12
 800722a:	4770      	bx	lr
 800722c:	20000044 	.word	0x20000044
 8007230:	ffff0208 	.word	0xffff0208

08007234 <strncmp>:
 8007234:	b510      	push	{r4, lr}
 8007236:	b16a      	cbz	r2, 8007254 <strncmp+0x20>
 8007238:	3901      	subs	r1, #1
 800723a:	1884      	adds	r4, r0, r2
 800723c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007240:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007244:	4293      	cmp	r3, r2
 8007246:	d103      	bne.n	8007250 <strncmp+0x1c>
 8007248:	42a0      	cmp	r0, r4
 800724a:	d001      	beq.n	8007250 <strncmp+0x1c>
 800724c:	2b00      	cmp	r3, #0
 800724e:	d1f5      	bne.n	800723c <strncmp+0x8>
 8007250:	1a98      	subs	r0, r3, r2
 8007252:	bd10      	pop	{r4, pc}
 8007254:	4610      	mov	r0, r2
 8007256:	e7fc      	b.n	8007252 <strncmp+0x1e>

08007258 <__ssputs_r>:
 8007258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800725c:	688e      	ldr	r6, [r1, #8]
 800725e:	4682      	mov	sl, r0
 8007260:	429e      	cmp	r6, r3
 8007262:	460c      	mov	r4, r1
 8007264:	4690      	mov	r8, r2
 8007266:	461f      	mov	r7, r3
 8007268:	d838      	bhi.n	80072dc <__ssputs_r+0x84>
 800726a:	898a      	ldrh	r2, [r1, #12]
 800726c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007270:	d032      	beq.n	80072d8 <__ssputs_r+0x80>
 8007272:	6825      	ldr	r5, [r4, #0]
 8007274:	6909      	ldr	r1, [r1, #16]
 8007276:	3301      	adds	r3, #1
 8007278:	eba5 0901 	sub.w	r9, r5, r1
 800727c:	6965      	ldr	r5, [r4, #20]
 800727e:	444b      	add	r3, r9
 8007280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007284:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007288:	106d      	asrs	r5, r5, #1
 800728a:	429d      	cmp	r5, r3
 800728c:	bf38      	it	cc
 800728e:	461d      	movcc	r5, r3
 8007290:	0553      	lsls	r3, r2, #21
 8007292:	d531      	bpl.n	80072f8 <__ssputs_r+0xa0>
 8007294:	4629      	mov	r1, r5
 8007296:	f000 fb45 	bl	8007924 <_malloc_r>
 800729a:	4606      	mov	r6, r0
 800729c:	b950      	cbnz	r0, 80072b4 <__ssputs_r+0x5c>
 800729e:	230c      	movs	r3, #12
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	f8ca 3000 	str.w	r3, [sl]
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072ae:	81a3      	strh	r3, [r4, #12]
 80072b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b4:	464a      	mov	r2, r9
 80072b6:	6921      	ldr	r1, [r4, #16]
 80072b8:	f7ff ff86 	bl	80071c8 <memcpy>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072c6:	81a3      	strh	r3, [r4, #12]
 80072c8:	6126      	str	r6, [r4, #16]
 80072ca:	444e      	add	r6, r9
 80072cc:	6026      	str	r6, [r4, #0]
 80072ce:	463e      	mov	r6, r7
 80072d0:	6165      	str	r5, [r4, #20]
 80072d2:	eba5 0509 	sub.w	r5, r5, r9
 80072d6:	60a5      	str	r5, [r4, #8]
 80072d8:	42be      	cmp	r6, r7
 80072da:	d900      	bls.n	80072de <__ssputs_r+0x86>
 80072dc:	463e      	mov	r6, r7
 80072de:	4632      	mov	r2, r6
 80072e0:	4641      	mov	r1, r8
 80072e2:	6820      	ldr	r0, [r4, #0]
 80072e4:	f000 fab8 	bl	8007858 <memmove>
 80072e8:	68a3      	ldr	r3, [r4, #8]
 80072ea:	6822      	ldr	r2, [r4, #0]
 80072ec:	1b9b      	subs	r3, r3, r6
 80072ee:	4432      	add	r2, r6
 80072f0:	2000      	movs	r0, #0
 80072f2:	60a3      	str	r3, [r4, #8]
 80072f4:	6022      	str	r2, [r4, #0]
 80072f6:	e7db      	b.n	80072b0 <__ssputs_r+0x58>
 80072f8:	462a      	mov	r2, r5
 80072fa:	f000 fb6d 	bl	80079d8 <_realloc_r>
 80072fe:	4606      	mov	r6, r0
 8007300:	2800      	cmp	r0, #0
 8007302:	d1e1      	bne.n	80072c8 <__ssputs_r+0x70>
 8007304:	4650      	mov	r0, sl
 8007306:	6921      	ldr	r1, [r4, #16]
 8007308:	f000 fac0 	bl	800788c <_free_r>
 800730c:	e7c7      	b.n	800729e <__ssputs_r+0x46>
	...

08007310 <_svfiprintf_r>:
 8007310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007314:	4698      	mov	r8, r3
 8007316:	898b      	ldrh	r3, [r1, #12]
 8007318:	4607      	mov	r7, r0
 800731a:	061b      	lsls	r3, r3, #24
 800731c:	460d      	mov	r5, r1
 800731e:	4614      	mov	r4, r2
 8007320:	b09d      	sub	sp, #116	; 0x74
 8007322:	d50e      	bpl.n	8007342 <_svfiprintf_r+0x32>
 8007324:	690b      	ldr	r3, [r1, #16]
 8007326:	b963      	cbnz	r3, 8007342 <_svfiprintf_r+0x32>
 8007328:	2140      	movs	r1, #64	; 0x40
 800732a:	f000 fafb 	bl	8007924 <_malloc_r>
 800732e:	6028      	str	r0, [r5, #0]
 8007330:	6128      	str	r0, [r5, #16]
 8007332:	b920      	cbnz	r0, 800733e <_svfiprintf_r+0x2e>
 8007334:	230c      	movs	r3, #12
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	f04f 30ff 	mov.w	r0, #4294967295
 800733c:	e0d1      	b.n	80074e2 <_svfiprintf_r+0x1d2>
 800733e:	2340      	movs	r3, #64	; 0x40
 8007340:	616b      	str	r3, [r5, #20]
 8007342:	2300      	movs	r3, #0
 8007344:	9309      	str	r3, [sp, #36]	; 0x24
 8007346:	2320      	movs	r3, #32
 8007348:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800734c:	2330      	movs	r3, #48	; 0x30
 800734e:	f04f 0901 	mov.w	r9, #1
 8007352:	f8cd 800c 	str.w	r8, [sp, #12]
 8007356:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80074fc <_svfiprintf_r+0x1ec>
 800735a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800735e:	4623      	mov	r3, r4
 8007360:	469a      	mov	sl, r3
 8007362:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007366:	b10a      	cbz	r2, 800736c <_svfiprintf_r+0x5c>
 8007368:	2a25      	cmp	r2, #37	; 0x25
 800736a:	d1f9      	bne.n	8007360 <_svfiprintf_r+0x50>
 800736c:	ebba 0b04 	subs.w	fp, sl, r4
 8007370:	d00b      	beq.n	800738a <_svfiprintf_r+0x7a>
 8007372:	465b      	mov	r3, fp
 8007374:	4622      	mov	r2, r4
 8007376:	4629      	mov	r1, r5
 8007378:	4638      	mov	r0, r7
 800737a:	f7ff ff6d 	bl	8007258 <__ssputs_r>
 800737e:	3001      	adds	r0, #1
 8007380:	f000 80aa 	beq.w	80074d8 <_svfiprintf_r+0x1c8>
 8007384:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007386:	445a      	add	r2, fp
 8007388:	9209      	str	r2, [sp, #36]	; 0x24
 800738a:	f89a 3000 	ldrb.w	r3, [sl]
 800738e:	2b00      	cmp	r3, #0
 8007390:	f000 80a2 	beq.w	80074d8 <_svfiprintf_r+0x1c8>
 8007394:	2300      	movs	r3, #0
 8007396:	f04f 32ff 	mov.w	r2, #4294967295
 800739a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800739e:	f10a 0a01 	add.w	sl, sl, #1
 80073a2:	9304      	str	r3, [sp, #16]
 80073a4:	9307      	str	r3, [sp, #28]
 80073a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073aa:	931a      	str	r3, [sp, #104]	; 0x68
 80073ac:	4654      	mov	r4, sl
 80073ae:	2205      	movs	r2, #5
 80073b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073b4:	4851      	ldr	r0, [pc, #324]	; (80074fc <_svfiprintf_r+0x1ec>)
 80073b6:	f000 fa41 	bl	800783c <memchr>
 80073ba:	9a04      	ldr	r2, [sp, #16]
 80073bc:	b9d8      	cbnz	r0, 80073f6 <_svfiprintf_r+0xe6>
 80073be:	06d0      	lsls	r0, r2, #27
 80073c0:	bf44      	itt	mi
 80073c2:	2320      	movmi	r3, #32
 80073c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073c8:	0711      	lsls	r1, r2, #28
 80073ca:	bf44      	itt	mi
 80073cc:	232b      	movmi	r3, #43	; 0x2b
 80073ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073d2:	f89a 3000 	ldrb.w	r3, [sl]
 80073d6:	2b2a      	cmp	r3, #42	; 0x2a
 80073d8:	d015      	beq.n	8007406 <_svfiprintf_r+0xf6>
 80073da:	4654      	mov	r4, sl
 80073dc:	2000      	movs	r0, #0
 80073de:	f04f 0c0a 	mov.w	ip, #10
 80073e2:	9a07      	ldr	r2, [sp, #28]
 80073e4:	4621      	mov	r1, r4
 80073e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073ea:	3b30      	subs	r3, #48	; 0x30
 80073ec:	2b09      	cmp	r3, #9
 80073ee:	d94e      	bls.n	800748e <_svfiprintf_r+0x17e>
 80073f0:	b1b0      	cbz	r0, 8007420 <_svfiprintf_r+0x110>
 80073f2:	9207      	str	r2, [sp, #28]
 80073f4:	e014      	b.n	8007420 <_svfiprintf_r+0x110>
 80073f6:	eba0 0308 	sub.w	r3, r0, r8
 80073fa:	fa09 f303 	lsl.w	r3, r9, r3
 80073fe:	4313      	orrs	r3, r2
 8007400:	46a2      	mov	sl, r4
 8007402:	9304      	str	r3, [sp, #16]
 8007404:	e7d2      	b.n	80073ac <_svfiprintf_r+0x9c>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	1d19      	adds	r1, r3, #4
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	9103      	str	r1, [sp, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	bfbb      	ittet	lt
 8007412:	425b      	neglt	r3, r3
 8007414:	f042 0202 	orrlt.w	r2, r2, #2
 8007418:	9307      	strge	r3, [sp, #28]
 800741a:	9307      	strlt	r3, [sp, #28]
 800741c:	bfb8      	it	lt
 800741e:	9204      	strlt	r2, [sp, #16]
 8007420:	7823      	ldrb	r3, [r4, #0]
 8007422:	2b2e      	cmp	r3, #46	; 0x2e
 8007424:	d10c      	bne.n	8007440 <_svfiprintf_r+0x130>
 8007426:	7863      	ldrb	r3, [r4, #1]
 8007428:	2b2a      	cmp	r3, #42	; 0x2a
 800742a:	d135      	bne.n	8007498 <_svfiprintf_r+0x188>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	3402      	adds	r4, #2
 8007430:	1d1a      	adds	r2, r3, #4
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	9203      	str	r2, [sp, #12]
 8007436:	2b00      	cmp	r3, #0
 8007438:	bfb8      	it	lt
 800743a:	f04f 33ff 	movlt.w	r3, #4294967295
 800743e:	9305      	str	r3, [sp, #20]
 8007440:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800750c <_svfiprintf_r+0x1fc>
 8007444:	2203      	movs	r2, #3
 8007446:	4650      	mov	r0, sl
 8007448:	7821      	ldrb	r1, [r4, #0]
 800744a:	f000 f9f7 	bl	800783c <memchr>
 800744e:	b140      	cbz	r0, 8007462 <_svfiprintf_r+0x152>
 8007450:	2340      	movs	r3, #64	; 0x40
 8007452:	eba0 000a 	sub.w	r0, r0, sl
 8007456:	fa03 f000 	lsl.w	r0, r3, r0
 800745a:	9b04      	ldr	r3, [sp, #16]
 800745c:	3401      	adds	r4, #1
 800745e:	4303      	orrs	r3, r0
 8007460:	9304      	str	r3, [sp, #16]
 8007462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007466:	2206      	movs	r2, #6
 8007468:	4825      	ldr	r0, [pc, #148]	; (8007500 <_svfiprintf_r+0x1f0>)
 800746a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800746e:	f000 f9e5 	bl	800783c <memchr>
 8007472:	2800      	cmp	r0, #0
 8007474:	d038      	beq.n	80074e8 <_svfiprintf_r+0x1d8>
 8007476:	4b23      	ldr	r3, [pc, #140]	; (8007504 <_svfiprintf_r+0x1f4>)
 8007478:	bb1b      	cbnz	r3, 80074c2 <_svfiprintf_r+0x1b2>
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	3307      	adds	r3, #7
 800747e:	f023 0307 	bic.w	r3, r3, #7
 8007482:	3308      	adds	r3, #8
 8007484:	9303      	str	r3, [sp, #12]
 8007486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007488:	4433      	add	r3, r6
 800748a:	9309      	str	r3, [sp, #36]	; 0x24
 800748c:	e767      	b.n	800735e <_svfiprintf_r+0x4e>
 800748e:	460c      	mov	r4, r1
 8007490:	2001      	movs	r0, #1
 8007492:	fb0c 3202 	mla	r2, ip, r2, r3
 8007496:	e7a5      	b.n	80073e4 <_svfiprintf_r+0xd4>
 8007498:	2300      	movs	r3, #0
 800749a:	f04f 0c0a 	mov.w	ip, #10
 800749e:	4619      	mov	r1, r3
 80074a0:	3401      	adds	r4, #1
 80074a2:	9305      	str	r3, [sp, #20]
 80074a4:	4620      	mov	r0, r4
 80074a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074aa:	3a30      	subs	r2, #48	; 0x30
 80074ac:	2a09      	cmp	r2, #9
 80074ae:	d903      	bls.n	80074b8 <_svfiprintf_r+0x1a8>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d0c5      	beq.n	8007440 <_svfiprintf_r+0x130>
 80074b4:	9105      	str	r1, [sp, #20]
 80074b6:	e7c3      	b.n	8007440 <_svfiprintf_r+0x130>
 80074b8:	4604      	mov	r4, r0
 80074ba:	2301      	movs	r3, #1
 80074bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80074c0:	e7f0      	b.n	80074a4 <_svfiprintf_r+0x194>
 80074c2:	ab03      	add	r3, sp, #12
 80074c4:	9300      	str	r3, [sp, #0]
 80074c6:	462a      	mov	r2, r5
 80074c8:	4638      	mov	r0, r7
 80074ca:	4b0f      	ldr	r3, [pc, #60]	; (8007508 <_svfiprintf_r+0x1f8>)
 80074cc:	a904      	add	r1, sp, #16
 80074ce:	f3af 8000 	nop.w
 80074d2:	1c42      	adds	r2, r0, #1
 80074d4:	4606      	mov	r6, r0
 80074d6:	d1d6      	bne.n	8007486 <_svfiprintf_r+0x176>
 80074d8:	89ab      	ldrh	r3, [r5, #12]
 80074da:	065b      	lsls	r3, r3, #25
 80074dc:	f53f af2c 	bmi.w	8007338 <_svfiprintf_r+0x28>
 80074e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074e2:	b01d      	add	sp, #116	; 0x74
 80074e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	ab03      	add	r3, sp, #12
 80074ea:	9300      	str	r3, [sp, #0]
 80074ec:	462a      	mov	r2, r5
 80074ee:	4638      	mov	r0, r7
 80074f0:	4b05      	ldr	r3, [pc, #20]	; (8007508 <_svfiprintf_r+0x1f8>)
 80074f2:	a904      	add	r1, sp, #16
 80074f4:	f000 f87c 	bl	80075f0 <_printf_i>
 80074f8:	e7eb      	b.n	80074d2 <_svfiprintf_r+0x1c2>
 80074fa:	bf00      	nop
 80074fc:	08007c50 	.word	0x08007c50
 8007500:	08007c5a 	.word	0x08007c5a
 8007504:	00000000 	.word	0x00000000
 8007508:	08007259 	.word	0x08007259
 800750c:	08007c56 	.word	0x08007c56

08007510 <_printf_common>:
 8007510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007514:	4616      	mov	r6, r2
 8007516:	4699      	mov	r9, r3
 8007518:	688a      	ldr	r2, [r1, #8]
 800751a:	690b      	ldr	r3, [r1, #16]
 800751c:	4607      	mov	r7, r0
 800751e:	4293      	cmp	r3, r2
 8007520:	bfb8      	it	lt
 8007522:	4613      	movlt	r3, r2
 8007524:	6033      	str	r3, [r6, #0]
 8007526:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800752a:	460c      	mov	r4, r1
 800752c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007530:	b10a      	cbz	r2, 8007536 <_printf_common+0x26>
 8007532:	3301      	adds	r3, #1
 8007534:	6033      	str	r3, [r6, #0]
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	0699      	lsls	r1, r3, #26
 800753a:	bf42      	ittt	mi
 800753c:	6833      	ldrmi	r3, [r6, #0]
 800753e:	3302      	addmi	r3, #2
 8007540:	6033      	strmi	r3, [r6, #0]
 8007542:	6825      	ldr	r5, [r4, #0]
 8007544:	f015 0506 	ands.w	r5, r5, #6
 8007548:	d106      	bne.n	8007558 <_printf_common+0x48>
 800754a:	f104 0a19 	add.w	sl, r4, #25
 800754e:	68e3      	ldr	r3, [r4, #12]
 8007550:	6832      	ldr	r2, [r6, #0]
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	42ab      	cmp	r3, r5
 8007556:	dc28      	bgt.n	80075aa <_printf_common+0x9a>
 8007558:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800755c:	1e13      	subs	r3, r2, #0
 800755e:	6822      	ldr	r2, [r4, #0]
 8007560:	bf18      	it	ne
 8007562:	2301      	movne	r3, #1
 8007564:	0692      	lsls	r2, r2, #26
 8007566:	d42d      	bmi.n	80075c4 <_printf_common+0xb4>
 8007568:	4649      	mov	r1, r9
 800756a:	4638      	mov	r0, r7
 800756c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007570:	47c0      	blx	r8
 8007572:	3001      	adds	r0, #1
 8007574:	d020      	beq.n	80075b8 <_printf_common+0xa8>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	68e5      	ldr	r5, [r4, #12]
 800757a:	f003 0306 	and.w	r3, r3, #6
 800757e:	2b04      	cmp	r3, #4
 8007580:	bf18      	it	ne
 8007582:	2500      	movne	r5, #0
 8007584:	6832      	ldr	r2, [r6, #0]
 8007586:	f04f 0600 	mov.w	r6, #0
 800758a:	68a3      	ldr	r3, [r4, #8]
 800758c:	bf08      	it	eq
 800758e:	1aad      	subeq	r5, r5, r2
 8007590:	6922      	ldr	r2, [r4, #16]
 8007592:	bf08      	it	eq
 8007594:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007598:	4293      	cmp	r3, r2
 800759a:	bfc4      	itt	gt
 800759c:	1a9b      	subgt	r3, r3, r2
 800759e:	18ed      	addgt	r5, r5, r3
 80075a0:	341a      	adds	r4, #26
 80075a2:	42b5      	cmp	r5, r6
 80075a4:	d11a      	bne.n	80075dc <_printf_common+0xcc>
 80075a6:	2000      	movs	r0, #0
 80075a8:	e008      	b.n	80075bc <_printf_common+0xac>
 80075aa:	2301      	movs	r3, #1
 80075ac:	4652      	mov	r2, sl
 80075ae:	4649      	mov	r1, r9
 80075b0:	4638      	mov	r0, r7
 80075b2:	47c0      	blx	r8
 80075b4:	3001      	adds	r0, #1
 80075b6:	d103      	bne.n	80075c0 <_printf_common+0xb0>
 80075b8:	f04f 30ff 	mov.w	r0, #4294967295
 80075bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c0:	3501      	adds	r5, #1
 80075c2:	e7c4      	b.n	800754e <_printf_common+0x3e>
 80075c4:	2030      	movs	r0, #48	; 0x30
 80075c6:	18e1      	adds	r1, r4, r3
 80075c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075cc:	1c5a      	adds	r2, r3, #1
 80075ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075d2:	4422      	add	r2, r4
 80075d4:	3302      	adds	r3, #2
 80075d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075da:	e7c5      	b.n	8007568 <_printf_common+0x58>
 80075dc:	2301      	movs	r3, #1
 80075de:	4622      	mov	r2, r4
 80075e0:	4649      	mov	r1, r9
 80075e2:	4638      	mov	r0, r7
 80075e4:	47c0      	blx	r8
 80075e6:	3001      	adds	r0, #1
 80075e8:	d0e6      	beq.n	80075b8 <_printf_common+0xa8>
 80075ea:	3601      	adds	r6, #1
 80075ec:	e7d9      	b.n	80075a2 <_printf_common+0x92>
	...

080075f0 <_printf_i>:
 80075f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075f4:	460c      	mov	r4, r1
 80075f6:	7e27      	ldrb	r7, [r4, #24]
 80075f8:	4691      	mov	r9, r2
 80075fa:	2f78      	cmp	r7, #120	; 0x78
 80075fc:	4680      	mov	r8, r0
 80075fe:	469a      	mov	sl, r3
 8007600:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007602:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007606:	d807      	bhi.n	8007618 <_printf_i+0x28>
 8007608:	2f62      	cmp	r7, #98	; 0x62
 800760a:	d80a      	bhi.n	8007622 <_printf_i+0x32>
 800760c:	2f00      	cmp	r7, #0
 800760e:	f000 80d9 	beq.w	80077c4 <_printf_i+0x1d4>
 8007612:	2f58      	cmp	r7, #88	; 0x58
 8007614:	f000 80a4 	beq.w	8007760 <_printf_i+0x170>
 8007618:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800761c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007620:	e03a      	b.n	8007698 <_printf_i+0xa8>
 8007622:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007626:	2b15      	cmp	r3, #21
 8007628:	d8f6      	bhi.n	8007618 <_printf_i+0x28>
 800762a:	a001      	add	r0, pc, #4	; (adr r0, 8007630 <_printf_i+0x40>)
 800762c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007630:	08007689 	.word	0x08007689
 8007634:	0800769d 	.word	0x0800769d
 8007638:	08007619 	.word	0x08007619
 800763c:	08007619 	.word	0x08007619
 8007640:	08007619 	.word	0x08007619
 8007644:	08007619 	.word	0x08007619
 8007648:	0800769d 	.word	0x0800769d
 800764c:	08007619 	.word	0x08007619
 8007650:	08007619 	.word	0x08007619
 8007654:	08007619 	.word	0x08007619
 8007658:	08007619 	.word	0x08007619
 800765c:	080077ab 	.word	0x080077ab
 8007660:	080076cd 	.word	0x080076cd
 8007664:	0800778d 	.word	0x0800778d
 8007668:	08007619 	.word	0x08007619
 800766c:	08007619 	.word	0x08007619
 8007670:	080077cd 	.word	0x080077cd
 8007674:	08007619 	.word	0x08007619
 8007678:	080076cd 	.word	0x080076cd
 800767c:	08007619 	.word	0x08007619
 8007680:	08007619 	.word	0x08007619
 8007684:	08007795 	.word	0x08007795
 8007688:	680b      	ldr	r3, [r1, #0]
 800768a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800768e:	1d1a      	adds	r2, r3, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	600a      	str	r2, [r1, #0]
 8007694:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007698:	2301      	movs	r3, #1
 800769a:	e0a4      	b.n	80077e6 <_printf_i+0x1f6>
 800769c:	6825      	ldr	r5, [r4, #0]
 800769e:	6808      	ldr	r0, [r1, #0]
 80076a0:	062e      	lsls	r6, r5, #24
 80076a2:	f100 0304 	add.w	r3, r0, #4
 80076a6:	d50a      	bpl.n	80076be <_printf_i+0xce>
 80076a8:	6805      	ldr	r5, [r0, #0]
 80076aa:	600b      	str	r3, [r1, #0]
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	da03      	bge.n	80076b8 <_printf_i+0xc8>
 80076b0:	232d      	movs	r3, #45	; 0x2d
 80076b2:	426d      	negs	r5, r5
 80076b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076b8:	230a      	movs	r3, #10
 80076ba:	485e      	ldr	r0, [pc, #376]	; (8007834 <_printf_i+0x244>)
 80076bc:	e019      	b.n	80076f2 <_printf_i+0x102>
 80076be:	f015 0f40 	tst.w	r5, #64	; 0x40
 80076c2:	6805      	ldr	r5, [r0, #0]
 80076c4:	600b      	str	r3, [r1, #0]
 80076c6:	bf18      	it	ne
 80076c8:	b22d      	sxthne	r5, r5
 80076ca:	e7ef      	b.n	80076ac <_printf_i+0xbc>
 80076cc:	680b      	ldr	r3, [r1, #0]
 80076ce:	6825      	ldr	r5, [r4, #0]
 80076d0:	1d18      	adds	r0, r3, #4
 80076d2:	6008      	str	r0, [r1, #0]
 80076d4:	0628      	lsls	r0, r5, #24
 80076d6:	d501      	bpl.n	80076dc <_printf_i+0xec>
 80076d8:	681d      	ldr	r5, [r3, #0]
 80076da:	e002      	b.n	80076e2 <_printf_i+0xf2>
 80076dc:	0669      	lsls	r1, r5, #25
 80076de:	d5fb      	bpl.n	80076d8 <_printf_i+0xe8>
 80076e0:	881d      	ldrh	r5, [r3, #0]
 80076e2:	2f6f      	cmp	r7, #111	; 0x6f
 80076e4:	bf0c      	ite	eq
 80076e6:	2308      	moveq	r3, #8
 80076e8:	230a      	movne	r3, #10
 80076ea:	4852      	ldr	r0, [pc, #328]	; (8007834 <_printf_i+0x244>)
 80076ec:	2100      	movs	r1, #0
 80076ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076f2:	6866      	ldr	r6, [r4, #4]
 80076f4:	2e00      	cmp	r6, #0
 80076f6:	bfa8      	it	ge
 80076f8:	6821      	ldrge	r1, [r4, #0]
 80076fa:	60a6      	str	r6, [r4, #8]
 80076fc:	bfa4      	itt	ge
 80076fe:	f021 0104 	bicge.w	r1, r1, #4
 8007702:	6021      	strge	r1, [r4, #0]
 8007704:	b90d      	cbnz	r5, 800770a <_printf_i+0x11a>
 8007706:	2e00      	cmp	r6, #0
 8007708:	d04d      	beq.n	80077a6 <_printf_i+0x1b6>
 800770a:	4616      	mov	r6, r2
 800770c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007710:	fb03 5711 	mls	r7, r3, r1, r5
 8007714:	5dc7      	ldrb	r7, [r0, r7]
 8007716:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800771a:	462f      	mov	r7, r5
 800771c:	42bb      	cmp	r3, r7
 800771e:	460d      	mov	r5, r1
 8007720:	d9f4      	bls.n	800770c <_printf_i+0x11c>
 8007722:	2b08      	cmp	r3, #8
 8007724:	d10b      	bne.n	800773e <_printf_i+0x14e>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	07df      	lsls	r7, r3, #31
 800772a:	d508      	bpl.n	800773e <_printf_i+0x14e>
 800772c:	6923      	ldr	r3, [r4, #16]
 800772e:	6861      	ldr	r1, [r4, #4]
 8007730:	4299      	cmp	r1, r3
 8007732:	bfde      	ittt	le
 8007734:	2330      	movle	r3, #48	; 0x30
 8007736:	f806 3c01 	strble.w	r3, [r6, #-1]
 800773a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800773e:	1b92      	subs	r2, r2, r6
 8007740:	6122      	str	r2, [r4, #16]
 8007742:	464b      	mov	r3, r9
 8007744:	4621      	mov	r1, r4
 8007746:	4640      	mov	r0, r8
 8007748:	f8cd a000 	str.w	sl, [sp]
 800774c:	aa03      	add	r2, sp, #12
 800774e:	f7ff fedf 	bl	8007510 <_printf_common>
 8007752:	3001      	adds	r0, #1
 8007754:	d14c      	bne.n	80077f0 <_printf_i+0x200>
 8007756:	f04f 30ff 	mov.w	r0, #4294967295
 800775a:	b004      	add	sp, #16
 800775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007760:	4834      	ldr	r0, [pc, #208]	; (8007834 <_printf_i+0x244>)
 8007762:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007766:	680e      	ldr	r6, [r1, #0]
 8007768:	6823      	ldr	r3, [r4, #0]
 800776a:	f856 5b04 	ldr.w	r5, [r6], #4
 800776e:	061f      	lsls	r7, r3, #24
 8007770:	600e      	str	r6, [r1, #0]
 8007772:	d514      	bpl.n	800779e <_printf_i+0x1ae>
 8007774:	07d9      	lsls	r1, r3, #31
 8007776:	bf44      	itt	mi
 8007778:	f043 0320 	orrmi.w	r3, r3, #32
 800777c:	6023      	strmi	r3, [r4, #0]
 800777e:	b91d      	cbnz	r5, 8007788 <_printf_i+0x198>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	f023 0320 	bic.w	r3, r3, #32
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	2310      	movs	r3, #16
 800778a:	e7af      	b.n	80076ec <_printf_i+0xfc>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	f043 0320 	orr.w	r3, r3, #32
 8007792:	6023      	str	r3, [r4, #0]
 8007794:	2378      	movs	r3, #120	; 0x78
 8007796:	4828      	ldr	r0, [pc, #160]	; (8007838 <_printf_i+0x248>)
 8007798:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800779c:	e7e3      	b.n	8007766 <_printf_i+0x176>
 800779e:	065e      	lsls	r6, r3, #25
 80077a0:	bf48      	it	mi
 80077a2:	b2ad      	uxthmi	r5, r5
 80077a4:	e7e6      	b.n	8007774 <_printf_i+0x184>
 80077a6:	4616      	mov	r6, r2
 80077a8:	e7bb      	b.n	8007722 <_printf_i+0x132>
 80077aa:	680b      	ldr	r3, [r1, #0]
 80077ac:	6826      	ldr	r6, [r4, #0]
 80077ae:	1d1d      	adds	r5, r3, #4
 80077b0:	6960      	ldr	r0, [r4, #20]
 80077b2:	600d      	str	r5, [r1, #0]
 80077b4:	0635      	lsls	r5, r6, #24
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	d501      	bpl.n	80077be <_printf_i+0x1ce>
 80077ba:	6018      	str	r0, [r3, #0]
 80077bc:	e002      	b.n	80077c4 <_printf_i+0x1d4>
 80077be:	0671      	lsls	r1, r6, #25
 80077c0:	d5fb      	bpl.n	80077ba <_printf_i+0x1ca>
 80077c2:	8018      	strh	r0, [r3, #0]
 80077c4:	2300      	movs	r3, #0
 80077c6:	4616      	mov	r6, r2
 80077c8:	6123      	str	r3, [r4, #16]
 80077ca:	e7ba      	b.n	8007742 <_printf_i+0x152>
 80077cc:	680b      	ldr	r3, [r1, #0]
 80077ce:	1d1a      	adds	r2, r3, #4
 80077d0:	600a      	str	r2, [r1, #0]
 80077d2:	681e      	ldr	r6, [r3, #0]
 80077d4:	2100      	movs	r1, #0
 80077d6:	4630      	mov	r0, r6
 80077d8:	6862      	ldr	r2, [r4, #4]
 80077da:	f000 f82f 	bl	800783c <memchr>
 80077de:	b108      	cbz	r0, 80077e4 <_printf_i+0x1f4>
 80077e0:	1b80      	subs	r0, r0, r6
 80077e2:	6060      	str	r0, [r4, #4]
 80077e4:	6863      	ldr	r3, [r4, #4]
 80077e6:	6123      	str	r3, [r4, #16]
 80077e8:	2300      	movs	r3, #0
 80077ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077ee:	e7a8      	b.n	8007742 <_printf_i+0x152>
 80077f0:	4632      	mov	r2, r6
 80077f2:	4649      	mov	r1, r9
 80077f4:	4640      	mov	r0, r8
 80077f6:	6923      	ldr	r3, [r4, #16]
 80077f8:	47d0      	blx	sl
 80077fa:	3001      	adds	r0, #1
 80077fc:	d0ab      	beq.n	8007756 <_printf_i+0x166>
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	079b      	lsls	r3, r3, #30
 8007802:	d413      	bmi.n	800782c <_printf_i+0x23c>
 8007804:	68e0      	ldr	r0, [r4, #12]
 8007806:	9b03      	ldr	r3, [sp, #12]
 8007808:	4298      	cmp	r0, r3
 800780a:	bfb8      	it	lt
 800780c:	4618      	movlt	r0, r3
 800780e:	e7a4      	b.n	800775a <_printf_i+0x16a>
 8007810:	2301      	movs	r3, #1
 8007812:	4632      	mov	r2, r6
 8007814:	4649      	mov	r1, r9
 8007816:	4640      	mov	r0, r8
 8007818:	47d0      	blx	sl
 800781a:	3001      	adds	r0, #1
 800781c:	d09b      	beq.n	8007756 <_printf_i+0x166>
 800781e:	3501      	adds	r5, #1
 8007820:	68e3      	ldr	r3, [r4, #12]
 8007822:	9903      	ldr	r1, [sp, #12]
 8007824:	1a5b      	subs	r3, r3, r1
 8007826:	42ab      	cmp	r3, r5
 8007828:	dcf2      	bgt.n	8007810 <_printf_i+0x220>
 800782a:	e7eb      	b.n	8007804 <_printf_i+0x214>
 800782c:	2500      	movs	r5, #0
 800782e:	f104 0619 	add.w	r6, r4, #25
 8007832:	e7f5      	b.n	8007820 <_printf_i+0x230>
 8007834:	08007c61 	.word	0x08007c61
 8007838:	08007c72 	.word	0x08007c72

0800783c <memchr>:
 800783c:	4603      	mov	r3, r0
 800783e:	b510      	push	{r4, lr}
 8007840:	b2c9      	uxtb	r1, r1
 8007842:	4402      	add	r2, r0
 8007844:	4293      	cmp	r3, r2
 8007846:	4618      	mov	r0, r3
 8007848:	d101      	bne.n	800784e <memchr+0x12>
 800784a:	2000      	movs	r0, #0
 800784c:	e003      	b.n	8007856 <memchr+0x1a>
 800784e:	7804      	ldrb	r4, [r0, #0]
 8007850:	3301      	adds	r3, #1
 8007852:	428c      	cmp	r4, r1
 8007854:	d1f6      	bne.n	8007844 <memchr+0x8>
 8007856:	bd10      	pop	{r4, pc}

08007858 <memmove>:
 8007858:	4288      	cmp	r0, r1
 800785a:	b510      	push	{r4, lr}
 800785c:	eb01 0402 	add.w	r4, r1, r2
 8007860:	d902      	bls.n	8007868 <memmove+0x10>
 8007862:	4284      	cmp	r4, r0
 8007864:	4623      	mov	r3, r4
 8007866:	d807      	bhi.n	8007878 <memmove+0x20>
 8007868:	1e43      	subs	r3, r0, #1
 800786a:	42a1      	cmp	r1, r4
 800786c:	d008      	beq.n	8007880 <memmove+0x28>
 800786e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007872:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007876:	e7f8      	b.n	800786a <memmove+0x12>
 8007878:	4601      	mov	r1, r0
 800787a:	4402      	add	r2, r0
 800787c:	428a      	cmp	r2, r1
 800787e:	d100      	bne.n	8007882 <memmove+0x2a>
 8007880:	bd10      	pop	{r4, pc}
 8007882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800788a:	e7f7      	b.n	800787c <memmove+0x24>

0800788c <_free_r>:
 800788c:	b538      	push	{r3, r4, r5, lr}
 800788e:	4605      	mov	r5, r0
 8007890:	2900      	cmp	r1, #0
 8007892:	d043      	beq.n	800791c <_free_r+0x90>
 8007894:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007898:	1f0c      	subs	r4, r1, #4
 800789a:	2b00      	cmp	r3, #0
 800789c:	bfb8      	it	lt
 800789e:	18e4      	addlt	r4, r4, r3
 80078a0:	f000 f8d0 	bl	8007a44 <__malloc_lock>
 80078a4:	4a1e      	ldr	r2, [pc, #120]	; (8007920 <_free_r+0x94>)
 80078a6:	6813      	ldr	r3, [r2, #0]
 80078a8:	4610      	mov	r0, r2
 80078aa:	b933      	cbnz	r3, 80078ba <_free_r+0x2e>
 80078ac:	6063      	str	r3, [r4, #4]
 80078ae:	6014      	str	r4, [r2, #0]
 80078b0:	4628      	mov	r0, r5
 80078b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b6:	f000 b8cb 	b.w	8007a50 <__malloc_unlock>
 80078ba:	42a3      	cmp	r3, r4
 80078bc:	d90a      	bls.n	80078d4 <_free_r+0x48>
 80078be:	6821      	ldr	r1, [r4, #0]
 80078c0:	1862      	adds	r2, r4, r1
 80078c2:	4293      	cmp	r3, r2
 80078c4:	bf01      	itttt	eq
 80078c6:	681a      	ldreq	r2, [r3, #0]
 80078c8:	685b      	ldreq	r3, [r3, #4]
 80078ca:	1852      	addeq	r2, r2, r1
 80078cc:	6022      	streq	r2, [r4, #0]
 80078ce:	6063      	str	r3, [r4, #4]
 80078d0:	6004      	str	r4, [r0, #0]
 80078d2:	e7ed      	b.n	80078b0 <_free_r+0x24>
 80078d4:	461a      	mov	r2, r3
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	b10b      	cbz	r3, 80078de <_free_r+0x52>
 80078da:	42a3      	cmp	r3, r4
 80078dc:	d9fa      	bls.n	80078d4 <_free_r+0x48>
 80078de:	6811      	ldr	r1, [r2, #0]
 80078e0:	1850      	adds	r0, r2, r1
 80078e2:	42a0      	cmp	r0, r4
 80078e4:	d10b      	bne.n	80078fe <_free_r+0x72>
 80078e6:	6820      	ldr	r0, [r4, #0]
 80078e8:	4401      	add	r1, r0
 80078ea:	1850      	adds	r0, r2, r1
 80078ec:	4283      	cmp	r3, r0
 80078ee:	6011      	str	r1, [r2, #0]
 80078f0:	d1de      	bne.n	80078b0 <_free_r+0x24>
 80078f2:	6818      	ldr	r0, [r3, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	4401      	add	r1, r0
 80078f8:	6011      	str	r1, [r2, #0]
 80078fa:	6053      	str	r3, [r2, #4]
 80078fc:	e7d8      	b.n	80078b0 <_free_r+0x24>
 80078fe:	d902      	bls.n	8007906 <_free_r+0x7a>
 8007900:	230c      	movs	r3, #12
 8007902:	602b      	str	r3, [r5, #0]
 8007904:	e7d4      	b.n	80078b0 <_free_r+0x24>
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	1821      	adds	r1, r4, r0
 800790a:	428b      	cmp	r3, r1
 800790c:	bf01      	itttt	eq
 800790e:	6819      	ldreq	r1, [r3, #0]
 8007910:	685b      	ldreq	r3, [r3, #4]
 8007912:	1809      	addeq	r1, r1, r0
 8007914:	6021      	streq	r1, [r4, #0]
 8007916:	6063      	str	r3, [r4, #4]
 8007918:	6054      	str	r4, [r2, #4]
 800791a:	e7c9      	b.n	80078b0 <_free_r+0x24>
 800791c:	bd38      	pop	{r3, r4, r5, pc}
 800791e:	bf00      	nop
 8007920:	2000023c 	.word	0x2000023c

08007924 <_malloc_r>:
 8007924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007926:	1ccd      	adds	r5, r1, #3
 8007928:	f025 0503 	bic.w	r5, r5, #3
 800792c:	3508      	adds	r5, #8
 800792e:	2d0c      	cmp	r5, #12
 8007930:	bf38      	it	cc
 8007932:	250c      	movcc	r5, #12
 8007934:	2d00      	cmp	r5, #0
 8007936:	4606      	mov	r6, r0
 8007938:	db01      	blt.n	800793e <_malloc_r+0x1a>
 800793a:	42a9      	cmp	r1, r5
 800793c:	d903      	bls.n	8007946 <_malloc_r+0x22>
 800793e:	230c      	movs	r3, #12
 8007940:	6033      	str	r3, [r6, #0]
 8007942:	2000      	movs	r0, #0
 8007944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007946:	f000 f87d 	bl	8007a44 <__malloc_lock>
 800794a:	4921      	ldr	r1, [pc, #132]	; (80079d0 <_malloc_r+0xac>)
 800794c:	680a      	ldr	r2, [r1, #0]
 800794e:	4614      	mov	r4, r2
 8007950:	b99c      	cbnz	r4, 800797a <_malloc_r+0x56>
 8007952:	4f20      	ldr	r7, [pc, #128]	; (80079d4 <_malloc_r+0xb0>)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	b923      	cbnz	r3, 8007962 <_malloc_r+0x3e>
 8007958:	4621      	mov	r1, r4
 800795a:	4630      	mov	r0, r6
 800795c:	f000 f862 	bl	8007a24 <_sbrk_r>
 8007960:	6038      	str	r0, [r7, #0]
 8007962:	4629      	mov	r1, r5
 8007964:	4630      	mov	r0, r6
 8007966:	f000 f85d 	bl	8007a24 <_sbrk_r>
 800796a:	1c43      	adds	r3, r0, #1
 800796c:	d123      	bne.n	80079b6 <_malloc_r+0x92>
 800796e:	230c      	movs	r3, #12
 8007970:	4630      	mov	r0, r6
 8007972:	6033      	str	r3, [r6, #0]
 8007974:	f000 f86c 	bl	8007a50 <__malloc_unlock>
 8007978:	e7e3      	b.n	8007942 <_malloc_r+0x1e>
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	1b5b      	subs	r3, r3, r5
 800797e:	d417      	bmi.n	80079b0 <_malloc_r+0x8c>
 8007980:	2b0b      	cmp	r3, #11
 8007982:	d903      	bls.n	800798c <_malloc_r+0x68>
 8007984:	6023      	str	r3, [r4, #0]
 8007986:	441c      	add	r4, r3
 8007988:	6025      	str	r5, [r4, #0]
 800798a:	e004      	b.n	8007996 <_malloc_r+0x72>
 800798c:	6863      	ldr	r3, [r4, #4]
 800798e:	42a2      	cmp	r2, r4
 8007990:	bf0c      	ite	eq
 8007992:	600b      	streq	r3, [r1, #0]
 8007994:	6053      	strne	r3, [r2, #4]
 8007996:	4630      	mov	r0, r6
 8007998:	f000 f85a 	bl	8007a50 <__malloc_unlock>
 800799c:	f104 000b 	add.w	r0, r4, #11
 80079a0:	1d23      	adds	r3, r4, #4
 80079a2:	f020 0007 	bic.w	r0, r0, #7
 80079a6:	1ac2      	subs	r2, r0, r3
 80079a8:	d0cc      	beq.n	8007944 <_malloc_r+0x20>
 80079aa:	1a1b      	subs	r3, r3, r0
 80079ac:	50a3      	str	r3, [r4, r2]
 80079ae:	e7c9      	b.n	8007944 <_malloc_r+0x20>
 80079b0:	4622      	mov	r2, r4
 80079b2:	6864      	ldr	r4, [r4, #4]
 80079b4:	e7cc      	b.n	8007950 <_malloc_r+0x2c>
 80079b6:	1cc4      	adds	r4, r0, #3
 80079b8:	f024 0403 	bic.w	r4, r4, #3
 80079bc:	42a0      	cmp	r0, r4
 80079be:	d0e3      	beq.n	8007988 <_malloc_r+0x64>
 80079c0:	1a21      	subs	r1, r4, r0
 80079c2:	4630      	mov	r0, r6
 80079c4:	f000 f82e 	bl	8007a24 <_sbrk_r>
 80079c8:	3001      	adds	r0, #1
 80079ca:	d1dd      	bne.n	8007988 <_malloc_r+0x64>
 80079cc:	e7cf      	b.n	800796e <_malloc_r+0x4a>
 80079ce:	bf00      	nop
 80079d0:	2000023c 	.word	0x2000023c
 80079d4:	20000240 	.word	0x20000240

080079d8 <_realloc_r>:
 80079d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079da:	4607      	mov	r7, r0
 80079dc:	4614      	mov	r4, r2
 80079de:	460e      	mov	r6, r1
 80079e0:	b921      	cbnz	r1, 80079ec <_realloc_r+0x14>
 80079e2:	4611      	mov	r1, r2
 80079e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80079e8:	f7ff bf9c 	b.w	8007924 <_malloc_r>
 80079ec:	b922      	cbnz	r2, 80079f8 <_realloc_r+0x20>
 80079ee:	f7ff ff4d 	bl	800788c <_free_r>
 80079f2:	4625      	mov	r5, r4
 80079f4:	4628      	mov	r0, r5
 80079f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f8:	f000 f830 	bl	8007a5c <_malloc_usable_size_r>
 80079fc:	42a0      	cmp	r0, r4
 80079fe:	d20f      	bcs.n	8007a20 <_realloc_r+0x48>
 8007a00:	4621      	mov	r1, r4
 8007a02:	4638      	mov	r0, r7
 8007a04:	f7ff ff8e 	bl	8007924 <_malloc_r>
 8007a08:	4605      	mov	r5, r0
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d0f2      	beq.n	80079f4 <_realloc_r+0x1c>
 8007a0e:	4631      	mov	r1, r6
 8007a10:	4622      	mov	r2, r4
 8007a12:	f7ff fbd9 	bl	80071c8 <memcpy>
 8007a16:	4631      	mov	r1, r6
 8007a18:	4638      	mov	r0, r7
 8007a1a:	f7ff ff37 	bl	800788c <_free_r>
 8007a1e:	e7e9      	b.n	80079f4 <_realloc_r+0x1c>
 8007a20:	4635      	mov	r5, r6
 8007a22:	e7e7      	b.n	80079f4 <_realloc_r+0x1c>

08007a24 <_sbrk_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	2300      	movs	r3, #0
 8007a28:	4d05      	ldr	r5, [pc, #20]	; (8007a40 <_sbrk_r+0x1c>)
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	f7f9 f8f0 	bl	8000c14 <_sbrk>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_sbrk_r+0x1a>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_sbrk_r+0x1a>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	20000cc8 	.word	0x20000cc8

08007a44 <__malloc_lock>:
 8007a44:	4801      	ldr	r0, [pc, #4]	; (8007a4c <__malloc_lock+0x8>)
 8007a46:	f000 b811 	b.w	8007a6c <__retarget_lock_acquire_recursive>
 8007a4a:	bf00      	nop
 8007a4c:	20000cd0 	.word	0x20000cd0

08007a50 <__malloc_unlock>:
 8007a50:	4801      	ldr	r0, [pc, #4]	; (8007a58 <__malloc_unlock+0x8>)
 8007a52:	f000 b80c 	b.w	8007a6e <__retarget_lock_release_recursive>
 8007a56:	bf00      	nop
 8007a58:	20000cd0 	.word	0x20000cd0

08007a5c <_malloc_usable_size_r>:
 8007a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a60:	1f18      	subs	r0, r3, #4
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	bfbc      	itt	lt
 8007a66:	580b      	ldrlt	r3, [r1, r0]
 8007a68:	18c0      	addlt	r0, r0, r3
 8007a6a:	4770      	bx	lr

08007a6c <__retarget_lock_acquire_recursive>:
 8007a6c:	4770      	bx	lr

08007a6e <__retarget_lock_release_recursive>:
 8007a6e:	4770      	bx	lr

08007a70 <_init>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	bf00      	nop
 8007a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a76:	bc08      	pop	{r3}
 8007a78:	469e      	mov	lr, r3
 8007a7a:	4770      	bx	lr

08007a7c <_fini>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	bf00      	nop
 8007a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a82:	bc08      	pop	{r3}
 8007a84:	469e      	mov	lr, r3
 8007a86:	4770      	bx	lr
